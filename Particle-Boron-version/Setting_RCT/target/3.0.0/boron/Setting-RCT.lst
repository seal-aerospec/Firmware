
d:/Education/UW/Aerospec/Firmware/Particle-Boron-version/Setting-RCT/target/3.0.0/boron/Setting-RCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000082c4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc2e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003dde0  000dc2e4  0001dde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009a8  2003de48  2003de48  0002de48  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dc34c  000dc34c  0002c34c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc374  000dc374  0002c374  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002dfdc8  00000000  00000000  0002c378  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00026958  00000000  00000000  0030c140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004fd2e  00000000  00000000  00332a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003dd0  00000000  00000000  003827c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000c898  00000000  00000000  00386596  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004c019  00000000  00000000  00392e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00069c67  00000000  00000000  003dee47  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0013bf0a  00000000  00000000  00448aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b7cc  00000000  00000000  005849b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f007 f867 	bl	db100 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f007 f889 	bl	db150 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dde0 	.word	0x2003dde0
   d4048:	000dc2e4 	.word	0x000dc2e4
   d404c:	2003de48 	.word	0x2003de48
   d4050:	2003de48 	.word	0x2003de48
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f005 fdb9 	bl	d9bd4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000dc2b4 	.word	0x000dc2b4
   d407c:	000dc2d8 	.word	0x000dc2d8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 ba6c 	b.w	d455c <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fdc7 	bl	d4c18 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f005 bd63 	b.w	d9b58 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f003 bf91 	b.w	d7fb8 <malloc>

000d4096 <_Znaj>:
   d4096:	f003 bf8f 	b.w	d7fb8 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f003 bf95 	b.w	d7fc8 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f003 feb8 	bl	d7e1c <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d7a35 	.word	0x000d7a35

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40c4:	6810      	ldr	r0, [r2, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40c8:	4770      	bx	lr

000d40ca <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ca:	7c03      	ldrb	r3, [r0, #16]
   d40cc:	f013 0308 	ands.w	r3, r3, #8
   d40d0:	bf1e      	ittt	ne
   d40d2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40d4:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40d6:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40d8:	2b00      	cmp	r3, #0
  }
   d40da:	bfac      	ite	ge
   d40dc:	4618      	movge	r0, r3
   d40de:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40e2:	4770      	bx	lr

000d40e4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d40e4:	4770      	bx	lr

000d40e6 <_ZN5SdFatD1Ev>:
//==============================================================================
/**
 * \class SdFat
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
   d40e6:	4770      	bx	lr

000d40e8 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40e8:	b510      	push	{r4, lr}
  }
   d40ea:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40ec:	4604      	mov	r4, r0
  }
   d40ee:	f006 fa1a 	bl	da526 <_ZdlPvj>
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd10      	pop	{r4, pc}

000d40f6 <_ZN4FileD0Ev>:
   d40f6:	b510      	push	{r4, lr}
   d40f8:	2134      	movs	r1, #52	; 0x34
   d40fa:	4604      	mov	r4, r0
   d40fc:	f006 fa13 	bl	da526 <_ZdlPvj>
   d4100:	4620      	mov	r0, r4
   d4102:	bd10      	pop	{r4, pc}

000d4104 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4104:	3010      	adds	r0, #16
   d4106:	f002 b8c3 	b.w	d6290 <_ZN7FatFile5writeEPKvj>

000d410a <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d410a:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d410c:	2201      	movs	r2, #1
   d410e:	f88d 1007 	strb.w	r1, [sp, #7]
   d4112:	3010      	adds	r0, #16
   d4114:	f10d 0107 	add.w	r1, sp, #7
   d4118:	f002 f8ba 	bl	d6290 <_ZN7FatFile5writeEPKvj>
  }
   d411c:	b003      	add	sp, #12
   d411e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4122 <_ZN4File5flushEv>:
    FatFile::sync();
   d4122:	3010      	adds	r0, #16
   d4124:	f002 b876 	b.w	d6214 <_ZN7FatFile4syncEv>

000d4128 <_ZN4File4peekEv>:
    return FatFile::peek();
   d4128:	3010      	adds	r0, #16
   d412a:	f002 b81d 	b.w	d6168 <_ZN7FatFile4peekEv>

000d412e <_ZN4File4readEv>:
  int read() {
   d412e:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   d4130:	2201      	movs	r2, #1
   d4132:	f10d 0107 	add.w	r1, sp, #7
   d4136:	3010      	adds	r0, #16
   d4138:	f001 ff68 	bl	d600c <_ZN7FatFile4readEPvj>
   d413c:	2801      	cmp	r0, #1
   d413e:	bf0c      	ite	eq
   d4140:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4144:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d4148:	b003      	add	sp, #12
   d414a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4150 <_ZN16Adafruit_SSD1675D1Ev>:
/**************************************************************************/
/*!
    @brief  Class for interfacing with SSD1675 EPD drivers
*/
/**************************************************************************/
class Adafruit_SSD1675 : public Adafruit_EPD {
   d4150:	b510      	push	{r4, lr}
   d4152:	4b03      	ldr	r3, [pc, #12]	; (d4160 <_ZN16Adafruit_SSD1675D1Ev+0x10>)
   d4154:	6003      	str	r3, [r0, #0]
   d4156:	4604      	mov	r4, r0
   d4158:	f003 f9de 	bl	d7518 <_ZN12Adafruit_EPDD1Ev>
   d415c:	4620      	mov	r0, r4
   d415e:	bd10      	pop	{r4, pc}
   d4160:	000dbcac 	.word	0x000dbcac

000d4164 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4164:	b510      	push	{r4, lr}
   d4166:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4168:	6800      	ldr	r0, [r0, #0]
   d416a:	b108      	cbz	r0, d4170 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d416c:	f003 ff2c 	bl	d7fc8 <free>
class SystemClass {
   d4170:	4620      	mov	r0, r4
   d4172:	bd10      	pop	{r4, pc}

000d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d4174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4176:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d4178:	4607      	mov	r7, r0
   d417a:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d417c:	da0c      	bge.n	d4198 <_ZN5Print5printIiLi0EEEjT_i.part.0+0x24>
   d417e:	2a0a      	cmp	r2, #10
   d4180:	d10a      	bne.n	d4198 <_ZN5Print5printIiLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d4182:	212d      	movs	r1, #45	; 0x2d
   d4184:	f005 fa92 	bl	d96ac <_ZN5Print5printEc>
            val = -n;
   d4188:	4261      	negs	r1, r4
            t = print('-');
   d418a:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d418c:	b2f2      	uxtb	r2, r6
   d418e:	4638      	mov	r0, r7
   d4190:	f005 faa5 	bl	d96de <_ZN5Print11printNumberEmh>
    }
}
   d4194:	4428      	add	r0, r5
   d4196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d4198:	4621      	mov	r1, r4
        size_t t = 0;
   d419a:	2500      	movs	r5, #0
   d419c:	e7f6      	b.n	d418c <_ZN5Print5printIiLi0EEEjT_i.part.0+0x18>
	...

000d41a0 <_Z13setSampleRate6String>:
}




int setSampleRate(String usr_input){
   d41a0:	b507      	push	{r0, r1, r2, lr}
  unsigned long senDuty;
  int num_input = usr_input.toInt();
   d41a2:	f004 f957 	bl	d8454 <_ZNK6String5toIntEv>

  TaskRates enum_input;
  enum_input = (TaskRates) num_input;

  switch(enum_input)
   d41a6:	b2c0      	uxtb	r0, r0
   d41a8:	2802      	cmp	r0, #2
   d41aa:	d017      	beq.n	d41dc <_Z13setSampleRate6String+0x3c>
   d41ac:	2803      	cmp	r0, #3
   d41ae:	d005      	beq.n	d41bc <_Z13setSampleRate6String+0x1c>
   d41b0:	2801      	cmp	r0, #1
   d41b2:	d015      	beq.n	d41e0 <_Z13setSampleRate6String+0x40>
   d41b4:	2001      	movs	r0, #1
  EEPROM.put(DUTY_SEN_ADDR,senDuty);
  SENSOR_CYCLE = senDuty;

  return 0;

}
   d41b6:	b003      	add	sp, #12
   d41b8:	f85d fb04 	ldr.w	pc, [sp], #4
      senDuty = 5;
   d41bc:	2305      	movs	r3, #5
      senDuty = 20;
   d41be:	9301      	str	r3, [sp, #4]
  EEPROM.put(DUTY_SEN_ADDR,senDuty);
   d41c0:	f006 f916 	bl	da3f0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d41c4:	2204      	movs	r2, #4
   d41c6:	eb0d 0102 	add.w	r1, sp, r2
   d41ca:	f44f 7082 	mov.w	r0, #260	; 0x104
   d41ce:	f003 fc59 	bl	d7a84 <HAL_EEPROM_Put>
  SENSOR_CYCLE = senDuty;
   d41d2:	4b04      	ldr	r3, [pc, #16]	; (d41e4 <_Z13setSampleRate6String+0x44>)
   d41d4:	9a01      	ldr	r2, [sp, #4]
   d41d6:	601a      	str	r2, [r3, #0]
  return 0;
   d41d8:	2000      	movs	r0, #0
   d41da:	e7ec      	b.n	d41b6 <_Z13setSampleRate6String+0x16>
      senDuty = 10;
   d41dc:	230a      	movs	r3, #10
   d41de:	e7ee      	b.n	d41be <_Z13setSampleRate6String+0x1e>
      senDuty = 20;
   d41e0:	2314      	movs	r3, #20
   d41e2:	e7ec      	b.n	d41be <_Z13setSampleRate6String+0x1e>
   d41e4:	2003e2ec 	.word	0x2003e2ec

000d41e8 <_Z8renameID6String>:
int renameID(String name) {
   d41e8:	b510      	push	{r4, lr}
   d41ea:	b086      	sub	sp, #24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d41ec:	2300      	movs	r3, #0
   d41ee:	a901      	add	r1, sp, #4
   d41f0:	2214      	movs	r2, #20
   d41f2:	4604      	mov	r4, r0
   d41f4:	f004 f916 	bl	d8424 <_ZNK6String8getBytesEPhjj>
    EEPROM.put(NAME_ADDR,ID);
   d41f8:	f006 f8fa 	bl	da3f0 <_Z21__fetch_global_EEPROMv>
   d41fc:	2214      	movs	r2, #20
   d41fe:	a901      	add	r1, sp, #4
   d4200:	200a      	movs	r0, #10
   d4202:	f003 fc3f 	bl	d7a84 <HAL_EEPROM_Put>
    deviceID = name;
   d4206:	4621      	mov	r1, r4
   d4208:	4802      	ldr	r0, [pc, #8]	; (d4214 <_Z8renameID6String+0x2c>)
   d420a:	f004 f89f 	bl	d834c <_ZN6StringaSERKS_>
}
   d420e:	2000      	movs	r0, #0
   d4210:	b006      	add	sp, #24
   d4212:	bd10      	pop	{r4, pc}
   d4214:	2003e3ec 	.word	0x2003e3ec

000d4218 <_Z14setDisplayRate6String>:




int setDisplayRate(String usr_input){
   d4218:	b507      	push	{r0, r1, r2, lr}

  unsigned long scrDuty;
  int num_input = usr_input.toInt();
   d421a:	f004 f91b 	bl	d8454 <_ZNK6String5toIntEv>

  TaskRates enum_input;
  enum_input = (TaskRates) num_input;

  switch(enum_input)
   d421e:	b2c0      	uxtb	r0, r0
   d4220:	2802      	cmp	r0, #2
   d4222:	d017      	beq.n	d4254 <_Z14setDisplayRate6String+0x3c>
   d4224:	2803      	cmp	r0, #3
   d4226:	d005      	beq.n	d4234 <_Z14setDisplayRate6String+0x1c>
   d4228:	2801      	cmp	r0, #1
   d422a:	d015      	beq.n	d4258 <_Z14setDisplayRate6String+0x40>
   d422c:	2001      	movs	r0, #1
  EEPROM.put(DUTY_SEN_ADDR,scrDuty);
  DISPLAY_REFRESH = scrDuty;

  return 0;

}
   d422e:	b003      	add	sp, #12
   d4230:	f85d fb04 	ldr.w	pc, [sp], #4
      scrDuty = 5;
   d4234:	2305      	movs	r3, #5
      scrDuty = 20;
   d4236:	9301      	str	r3, [sp, #4]
  EEPROM.put(DUTY_SEN_ADDR,scrDuty);
   d4238:	f006 f8da 	bl	da3f0 <_Z21__fetch_global_EEPROMv>
   d423c:	2204      	movs	r2, #4
   d423e:	eb0d 0102 	add.w	r1, sp, r2
   d4242:	f44f 7082 	mov.w	r0, #260	; 0x104
   d4246:	f003 fc1d 	bl	d7a84 <HAL_EEPROM_Put>
  DISPLAY_REFRESH = scrDuty;
   d424a:	4b04      	ldr	r3, [pc, #16]	; (d425c <_Z14setDisplayRate6String+0x44>)
   d424c:	9a01      	ldr	r2, [sp, #4]
   d424e:	601a      	str	r2, [r3, #0]
  return 0;
   d4250:	2000      	movs	r0, #0
   d4252:	e7ec      	b.n	d422e <_Z14setDisplayRate6String+0x16>
      scrDuty = 10;
   d4254:	230a      	movs	r3, #10
   d4256:	e7ee      	b.n	d4236 <_Z14setDisplayRate6String+0x1e>
      scrDuty = 20;
   d4258:	2314      	movs	r3, #20
   d425a:	e7ec      	b.n	d4236 <_Z14setDisplayRate6String+0x1e>
   d425c:	2003de58 	.word	0x2003de58

000d4260 <_Z14setPublishRate6String>:

int setPublishRate(String usr_input){
   d4260:	b507      	push	{r0, r1, r2, lr}

  unsigned long pubDuty;
  int num_input = usr_input.toInt();
   d4262:	f004 f8f7 	bl	d8454 <_ZNK6String5toIntEv>

  TaskRates enum_input;
  enum_input = (TaskRates) num_input;


  switch(enum_input)
   d4266:	b2c0      	uxtb	r0, r0
   d4268:	2802      	cmp	r0, #2
   d426a:	d017      	beq.n	d429c <_Z14setPublishRate6String+0x3c>
   d426c:	2803      	cmp	r0, #3
   d426e:	d005      	beq.n	d427c <_Z14setPublishRate6String+0x1c>
   d4270:	2801      	cmp	r0, #1
   d4272:	d016      	beq.n	d42a2 <_Z14setPublishRate6String+0x42>
   d4274:	2001      	movs	r0, #1

  EEPROM.put(DUTY_PUB_ADDR,pubDuty);
  PUBLISH_RATE = pubDuty;

  return 0;
}
   d4276:	b003      	add	sp, #12
   d4278:	f85d fb04 	ldr.w	pc, [sp], #4
      pubDuty = 60;
   d427c:	233c      	movs	r3, #60	; 0x3c
      pubDuty = 600;
   d427e:	9301      	str	r3, [sp, #4]
  EEPROM.put(DUTY_PUB_ADDR,pubDuty);
   d4280:	f006 f8b6 	bl	da3f0 <_Z21__fetch_global_EEPROMv>
   d4284:	2204      	movs	r2, #4
   d4286:	eb0d 0102 	add.w	r1, sp, r2
   d428a:	f240 1009 	movw	r0, #265	; 0x109
   d428e:	f003 fbf9 	bl	d7a84 <HAL_EEPROM_Put>
  PUBLISH_RATE = pubDuty;
   d4292:	4b05      	ldr	r3, [pc, #20]	; (d42a8 <_Z14setPublishRate6String+0x48>)
   d4294:	9a01      	ldr	r2, [sp, #4]
   d4296:	601a      	str	r2, [r3, #0]
  return 0;
   d4298:	2000      	movs	r0, #0
   d429a:	e7ec      	b.n	d4276 <_Z14setPublishRate6String+0x16>
      pubDuty = 300;
   d429c:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d42a0:	e7ed      	b.n	d427e <_Z14setPublishRate6String+0x1e>
      pubDuty = 600;
   d42a2:	f44f 7316 	mov.w	r3, #600	; 0x258
   d42a6:	e7ea      	b.n	d427e <_Z14setPublishRate6String+0x1e>
   d42a8:	2003de60 	.word	0x2003de60

000d42ac <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42ac:	b40e      	push	{r1, r2, r3}
   d42ae:	b503      	push	{r0, r1, lr}
   d42b0:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d42b2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42b4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d42b8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d42ba:	f005 fb06 	bl	d98ca <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d42be:	b002      	add	sp, #8
   d42c0:	f85d eb04 	ldr.w	lr, [sp], #4
   d42c4:	b003      	add	sp, #12
   d42c6:	4770      	bx	lr

000d42c8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d42c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42ca:	4604      	mov	r4, r0
   d42cc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d42ce:	7922      	ldrb	r2, [r4, #4]
   d42d0:	68a3      	ldr	r3, [r4, #8]
   d42d2:	b132      	cbz	r2, d42e2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d42d4:	b9a3      	cbnz	r3, d4300 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d42d6:	490b      	ldr	r1, [pc, #44]	; (d4304 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d42d8:	b002      	add	sp, #8
   d42da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d42de:	f005 b9e1 	b.w	d96a4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42e2:	4a09      	ldr	r2, [pc, #36]	; (d4308 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d42e4:	7b26      	ldrb	r6, [r4, #12]
   d42e6:	4d09      	ldr	r5, [pc, #36]	; (d430c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d42e8:	4909      	ldr	r1, [pc, #36]	; (d4310 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d42ea:	7b64      	ldrb	r4, [r4, #13]
   d42ec:	2e01      	cmp	r6, #1
   d42ee:	bf18      	it	ne
   d42f0:	4629      	movne	r1, r5
   d42f2:	e9cd 1400 	strd	r1, r4, [sp]
   d42f6:	4907      	ldr	r1, [pc, #28]	; (d4314 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d42f8:	f7ff ffd8 	bl	d42ac <_ZN5Print6printfEPKcz>
  }
   d42fc:	b002      	add	sp, #8
   d42fe:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4300:	4a05      	ldr	r2, [pc, #20]	; (d4318 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4302:	e7ef      	b.n	d42e4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4304:	000db349 	.word	0x000db349
   d4308:	000db39b 	.word	0x000db39b
   d430c:	000db345 	.word	0x000db345
   d4310:	000db341 	.word	0x000db341
   d4314:	000db35f 	.word	0x000db35f
   d4318:	000db338 	.word	0x000db338

000d431c <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d431c:	b40e      	push	{r1, r2, r3}
   d431e:	b503      	push	{r0, r1, lr}
   d4320:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   d4322:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4324:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4328:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d432a:	f005 face 	bl	d98ca <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d432e:	b002      	add	sp, #8
   d4330:	f85d eb04 	ldr.w	lr, [sp], #4
   d4334:	b003      	add	sp, #12
   d4336:	4770      	bx	lr

000d4338 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:


void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
   d4338:	b538      	push	{r3, r4, r5, lr}
   d433a:	4604      	mov	r4, r0
    // }
    
    // new version of onDataReceived
    //data[0] contains numbers of received data 
    int val = (int) data[0];
    if(val == count_flag){
   d433c:	4d0e      	ldr	r5, [pc, #56]	; (d4378 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   Serial.printlnf("The onDataRecived is working. \n");
   d433e:	f005 fd77 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4342:	490e      	ldr	r1, [pc, #56]	; (d437c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4344:	f7ff ffea 	bl	d431c <_ZN5Print8printlnfEPKcz>
    int val = (int) data[0];
   d4348:	7824      	ldrb	r4, [r4, #0]
    if(val == count_flag){
   d434a:	682b      	ldr	r3, [r5, #0]
   d434c:	42a3      	cmp	r3, r4
   d434e:	d107      	bne.n	d4360 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>

      Serial.printlnf("We had received all datas\n");
   d4350:	f005 fd6e 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4354:	490a      	ldr	r1, [pc, #40]	; (d4380 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d4356:	f7ff ffe1 	bl	d431c <_ZN5Print8printlnfEPKcz>
      count_flag = 0;
   d435a:	2300      	movs	r3, #0
   d435c:	602b      	str	r3, [r5, #0]

      Serial.printlnf("There are some errors in the data and we need to transmit data again \n");
      Serial.printlnf("The Data is %d \n", val);
    }

}
   d435e:	bd38      	pop	{r3, r4, r5, pc}
      Serial.printlnf("There are some errors in the data and we need to transmit data again \n");
   d4360:	f005 fd66 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4364:	4907      	ldr	r1, [pc, #28]	; (d4384 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d4366:	f7ff ffd9 	bl	d431c <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("The Data is %d \n", val);
   d436a:	f005 fd61 	bl	d9e30 <_Z16_fetch_usbserialv>
   d436e:	4906      	ldr	r1, [pc, #24]	; (d4388 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   d4370:	4622      	mov	r2, r4
   d4372:	f7ff ffd3 	bl	d431c <_ZN5Print8printlnfEPKcz>
}
   d4376:	e7f2      	b.n	d435e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
   d4378:	2003e3e8 	.word	0x2003e3e8
   d437c:	000db37c 	.word	0x000db37c
   d4380:	000db39c 	.word	0x000db39c
   d4384:	000db3b7 	.word	0x000db3b7
   d4388:	000db3fe 	.word	0x000db3fe

000d438c <_Z11displayInitv>:
void displayInit(){
   d438c:	b530      	push	{r4, r5, lr}
  epd.clearBuffer();
   d438e:	4c26      	ldr	r4, [pc, #152]	; (d4428 <_Z11displayInitv+0x9c>)
void displayInit(){
   d4390:	b0b7      	sub	sp, #220	; 0xdc
  epd.clearBuffer();
   d4392:	4620      	mov	r0, r4
   d4394:	f003 f92a 	bl	d75ec <_ZN12Adafruit_EPD11clearBufferEv>
  epd.fillScreen(EPD_WHITE);
   d4398:	4620      	mov	r0, r4
   d439a:	2101      	movs	r1, #1
   d439c:	f000 fef7 	bl	d518e <_ZN12Adafruit_GFX10fillScreenEt>
  const unsigned char myBitmapBitmap [] PROGMEM = {
   d43a0:	4922      	ldr	r1, [pc, #136]	; (d442c <_Z11displayInitv+0xa0>)
   d43a2:	22af      	movs	r2, #175	; 0xaf
   d43a4:	a80a      	add	r0, sp, #40	; 0x28
   d43a6:	f006 feab 	bl	db100 <memcpy>
  epd.drawBitmap(95, 40, myBitmapBitmap, 40, 35, EPD_BLACK);
   d43aa:	2500      	movs	r5, #0
   d43ac:	2228      	movs	r2, #40	; 0x28
   d43ae:	2323      	movs	r3, #35	; 0x23
   d43b0:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d43b4:	9200      	str	r2, [sp, #0]
   d43b6:	eb0d 0302 	add.w	r3, sp, r2
   d43ba:	4620      	mov	r0, r4
   d43bc:	215f      	movs	r1, #95	; 0x5f
   d43be:	f000 ff99 	bl	d52f4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  char ID[20] = "-";
   d43c2:	232d      	movs	r3, #45	; 0x2d
   d43c4:	4629      	mov	r1, r5
   d43c6:	2210      	movs	r2, #16
   d43c8:	a806      	add	r0, sp, #24
   d43ca:	9305      	str	r3, [sp, #20]
   d43cc:	f006 fec0 	bl	db150 <memset>
  EEPROM.get(NAME_ADDR,ID);
   d43d0:	f006 f80e 	bl	da3f0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d43d4:	2214      	movs	r2, #20
   d43d6:	eb0d 0102 	add.w	r1, sp, r2
   d43da:	200a      	movs	r0, #10
   d43dc:	f003 fb4a 	bl	d7a74 <HAL_EEPROM_Get>
  epd.setTextSize(1);
   d43e0:	4620      	mov	r0, r4
   d43e2:	2101      	movs	r1, #1
   d43e4:	f001 f9b4 	bl	d5750 <_ZN12Adafruit_GFX11setTextSizeEh>
  epd.setCursor(97, 80);
   d43e8:	2250      	movs	r2, #80	; 0x50
   d43ea:	4620      	mov	r0, r4
   d43ec:	2161      	movs	r1, #97	; 0x61
   d43ee:	f001 f9ac 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.setTextColor(EPD_BLACK);
   d43f2:	4629      	mov	r1, r5
   d43f4:	4620      	mov	r0, r4
   d43f6:	f001 f9b0 	bl	d575a <_ZN12Adafruit_GFX12setTextColorEt>
  epd.print(VERSION_R);
   d43fa:	490d      	ldr	r1, [pc, #52]	; (d4430 <_Z11displayInitv+0xa4>)
   d43fc:	4620      	mov	r0, r4
   d43fe:	f005 f951 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.setCursor(73, 90);
   d4402:	225a      	movs	r2, #90	; 0x5a
   d4404:	4620      	mov	r0, r4
   d4406:	2149      	movs	r1, #73	; 0x49
   d4408:	f001 f99f 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Device: ");
   d440c:	4909      	ldr	r1, [pc, #36]	; (d4434 <_Z11displayInitv+0xa8>)
   d440e:	4620      	mov	r0, r4
   d4410:	f005 f948 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.print(ID);
   d4414:	a905      	add	r1, sp, #20
   d4416:	4620      	mov	r0, r4
   d4418:	f005 f944 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.display();
   d441c:	4620      	mov	r0, r4
   d441e:	f003 f9e0 	bl	d77e2 <_ZN12Adafruit_EPD7displayEv>
}
   d4422:	b037      	add	sp, #220	; 0xdc
   d4424:	bd30      	pop	{r4, r5, pc}
   d4426:	bf00      	nop
   d4428:	2003e3fc 	.word	0x2003e3fc
   d442c:	000db644 	.word	0x000db644
   d4430:	000db40f 	.word	0x000db40f
   d4434:	000db416 	.word	0x000db416

000d4438 <_Z8ble_initv>:

void ble_init(){
   d4438:	b510      	push	{r4, lr}
   d443a:	b0a0      	sub	sp, #128	; 0x80

  BLE.on();
   d443c:	f004 fbc2 	bl	d8bc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4440:	f004 fc0e 	bl	d8c60 <_ZNK8particle14BleLocalDevice2onEv>

  // robert testing (possible solution)
  rxCharacteristic.onDataReceived(onDataReceived,NULL);
   d4444:	493d      	ldr	r1, [pc, #244]	; (d453c <_Z8ble_initv+0x104>)
   d4446:	483e      	ldr	r0, [pc, #248]	; (d4540 <_Z8ble_initv+0x108>)
   d4448:	2200      	movs	r2, #0
   d444a:	f004 ff05 	bl	d9258 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>

  //heartRateMeasurementCharacteristic.onDataReceived(onDataReceived, NULL);

  //BLE.addCharacteristic(heartRateMeasurementCharacteristic);
  BLE.addCharacteristic(txCharacteristic);
   d444e:	f004 fbb9 	bl	d8bc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4452:	4a3c      	ldr	r2, [pc, #240]	; (d4544 <_Z8ble_initv+0x10c>)
   d4454:	4601      	mov	r1, r0
   d4456:	a817      	add	r0, sp, #92	; 0x5c
   d4458:	f004 fff2 	bl	d9440 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d445c:	a817      	add	r0, sp, #92	; 0x5c
   d445e:	f004 fc80 	bl	d8d62 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4462:	f004 fbaf 	bl	d8bc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4466:	4a36      	ldr	r2, [pc, #216]	; (d4540 <_Z8ble_initv+0x108>)
   d4468:	4601      	mov	r1, r0
   d446a:	a817      	add	r0, sp, #92	; 0x5c
   d446c:	f004 ffe8 	bl	d9440 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4470:	a817      	add	r0, sp, #92	; 0x5c
   d4472:	f004 fc76 	bl	d8d62 <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   d4476:	a817      	add	r0, sp, #92	; 0x5c
   d4478:	f004 fa75 	bl	d8966 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d447c:	4932      	ldr	r1, [pc, #200]	; (d4548 <_Z8ble_initv+0x110>)
   d447e:	a80a      	add	r0, sp, #40	; 0x28
   d4480:	f004 f974 	bl	d876c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4484:	a90a      	add	r1, sp, #40	; 0x28
   d4486:	a80f      	add	r0, sp, #60	; 0x3c
   d4488:	f004 f970 	bl	d876c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d448c:	a80f      	add	r0, sp, #60	; 0x3c
   d448e:	f004 f9b3 	bl	d87f8 <_ZNK8particle7BleUuid4typeEv>
   d4492:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4494:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4496:	2c00      	cmp	r4, #0
   d4498:	d147      	bne.n	d452a <_Z8ble_initv+0xf2>
            uint16_t uuid16 = tempUUID.shorted();
   d449a:	f004 f9cc 	bl	d8836 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d449e:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d44a0:	f8ad 0018 	strh.w	r0, [sp, #24]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d44a4:	2302      	movs	r3, #2
   d44a6:	aa06      	add	r2, sp, #24
   d44a8:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d44aa:	a817      	add	r0, sp, #92	; 0x5c
   d44ac:	f004 fa50 	bl	d8950 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d44b0:	a802      	add	r0, sp, #8
   d44b2:	f003 fd71 	bl	d7f98 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d44b6:	4925      	ldr	r1, [pc, #148]	; (d454c <_Z8ble_initv+0x114>)
   d44b8:	a80f      	add	r0, sp, #60	; 0x3c
   d44ba:	f003 ff56 	bl	d836a <_ZN6StringC1ERKS_>

  String myID = System.deviceID();
  String LocalName = deviceID + " " + myID;
   d44be:	4924      	ldr	r1, [pc, #144]	; (d4550 <_Z8ble_initv+0x118>)
   d44c0:	a80f      	add	r0, sp, #60	; 0x3c
   d44c2:	f003 ff9a 	bl	d83fa <_ZplRK15StringSumHelperPKc>
   d44c6:	a902      	add	r1, sp, #8
   d44c8:	f003 ff8b 	bl	d83e2 <_ZplRK15StringSumHelperRK6String>
   d44cc:	4601      	mov	r1, r0
   d44ce:	a806      	add	r0, sp, #24
   d44d0:	f003 ff4b 	bl	d836a <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d44d4:	a80f      	add	r0, sp, #60	; 0x3c
   d44d6:	f003 febd 	bl	d8254 <_ZN6StringD1Ev>
  String LocalName2 = "A e06";
   d44da:	491e      	ldr	r1, [pc, #120]	; (d4554 <_Z8ble_initv+0x11c>)
   d44dc:	a80a      	add	r0, sp, #40	; 0x28
   d44de:	f003 ff04 	bl	d82ea <_ZN6StringC1EPKc>
  
  data.appendLocalName(deviceID);
   d44e2:	491a      	ldr	r1, [pc, #104]	; (d454c <_Z8ble_initv+0x114>)
   d44e4:	a817      	add	r0, sp, #92	; 0x5c
   d44e6:	f004 fa69 	bl	d89bc <_ZN8particle18BleAdvertisingData15appendLocalNameERK6String>
  // 16-bit: Company ID (0xffff)
  // Byte: Internal packet identifier (0x55)
  // 32-bit: Color code

  // Company ID (0xffff internal use/testing)
  buf[offset++] = 0xff;
   d44ea:	4b1b      	ldr	r3, [pc, #108]	; (d4558 <_Z8ble_initv+0x120>)
   d44ec:	930f      	str	r3, [sp, #60]	; 0x3c
  // Internal packet type. This is arbitrary, but provides an extra
  // check to make sure the data is my data, since we use the 0xffff company
  // code.
  buf[offset++] = 0x55;
  const uint32_t myColor = 0xff0000;
  memcpy(&buf[offset], &myColor, 4);
   d44ee:	2400      	movs	r4, #0
   d44f0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  // Our specific data, color code
  
  offset += 4;

  data.appendCustomData(buf,offset );
   d44f4:	a90f      	add	r1, sp, #60	; 0x3c
  memcpy(&buf[offset], &myColor, 4);
   d44f6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  data.appendCustomData(buf,offset );
   d44fa:	2207      	movs	r2, #7
   d44fc:	4623      	mov	r3, r4
   d44fe:	a817      	add	r0, sp, #92	; 0x5c
  memcpy(&buf[offset], &myColor, 4);
   d4500:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
  data.appendCustomData(buf,offset );
   d4504:	f004 fa5d 	bl	d89c2 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
  BLE.advertise(&data);
   d4508:	f004 fb5c 	bl	d8bc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d450c:	4622      	mov	r2, r4
   d450e:	a917      	add	r1, sp, #92	; 0x5c
   d4510:	f004 fbc6 	bl	d8ca0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  String LocalName2 = "A e06";
   d4514:	a80a      	add	r0, sp, #40	; 0x28
   d4516:	f003 fe9d 	bl	d8254 <_ZN6StringD1Ev>
  String LocalName = deviceID + " " + myID;
   d451a:	a806      	add	r0, sp, #24
   d451c:	f003 fe9a 	bl	d8254 <_ZN6StringD1Ev>
  String myID = System.deviceID();
   d4520:	a802      	add	r0, sp, #8
   d4522:	f003 fe97 	bl	d8254 <_ZN6StringD1Ev>

  
}
   d4526:	b020      	add	sp, #128	; 0x80
   d4528:	bd10      	pop	{r4, pc}
   d452a:	f004 f989 	bl	d8840 <_ZNK8particle7BleUuid8rawBytesEv>
   d452e:	2300      	movs	r3, #0
   d4530:	9300      	str	r3, [sp, #0]
   d4532:	4602      	mov	r2, r0
   d4534:	2310      	movs	r3, #16
   d4536:	2107      	movs	r1, #7
   d4538:	e7b7      	b.n	d44aa <_Z8ble_initv+0x72>
   d453a:	bf00      	nop
   d453c:	000d4339 	.word	0x000d4339
   d4540:	2003e5c4 	.word	0x2003e5c4
   d4544:	2003e5e4 	.word	0x2003e5e4
   d4548:	2003e2fc 	.word	0x2003e2fc
   d454c:	2003e3ec 	.word	0x2003e3ec
   d4550:	000db4d1 	.word	0x000db4d1
   d4554:	000db41f 	.word	0x000db41f
   d4558:	0055ffff 	.word	0x0055ffff

000d455c <setup>:
{ 
   d455c:	b570      	push	{r4, r5, r6, lr}
  pinMode(PM_RST,OUTPUT);
   d455e:	2101      	movs	r1, #1
{ 
   d4560:	b08a      	sub	sp, #40	; 0x28
  pinMode(PM_RST,OUTPUT);
   d4562:	2013      	movs	r0, #19
   d4564:	f005 ff06 	bl	da374 <pinMode>
  pinMode(PP5V0_EN,OUTPUT);
   d4568:	2101      	movs	r1, #1
   d456a:	2008      	movs	r0, #8
   d456c:	f005 ff02 	bl	da374 <pinMode>
  digitalWrite(PM_RST,HIGH);
   d4570:	2101      	movs	r1, #1
   d4572:	2013      	movs	r0, #19
   d4574:	f005 ff0f 	bl	da396 <digitalWrite>
  digitalWrite(PP5V0_EN,HIGH);
   d4578:	2101      	movs	r1, #1
   d457a:	2008      	movs	r0, #8
   d457c:	f005 ff0b 	bl	da396 <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4580:	4a67      	ldr	r2, [pc, #412]	; (d4720 <setup+0x1c4>)
   d4582:	4968      	ldr	r1, [pc, #416]	; (d4724 <setup+0x1c8>)
   d4584:	4868      	ldr	r0, [pc, #416]	; (d4728 <setup+0x1cc>)
   d4586:	f005 fb6d 	bl	d9c64 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d458a:	4a68      	ldr	r2, [pc, #416]	; (d472c <setup+0x1d0>)
   d458c:	4968      	ldr	r1, [pc, #416]	; (d4730 <setup+0x1d4>)
   d458e:	4866      	ldr	r0, [pc, #408]	; (d4728 <setup+0x1cc>)
   d4590:	f005 fb68 	bl	d9c64 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4594:	4a67      	ldr	r2, [pc, #412]	; (d4734 <setup+0x1d8>)
   d4596:	4968      	ldr	r1, [pc, #416]	; (d4738 <setup+0x1dc>)
   d4598:	4863      	ldr	r0, [pc, #396]	; (d4728 <setup+0x1cc>)
   d459a:	f005 fb63 	bl	d9c64 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d459e:	4a67      	ldr	r2, [pc, #412]	; (d473c <setup+0x1e0>)
   d45a0:	4967      	ldr	r1, [pc, #412]	; (d4740 <setup+0x1e4>)
   d45a2:	4861      	ldr	r0, [pc, #388]	; (d4728 <setup+0x1cc>)
   d45a4:	f005 fb5e 	bl	d9c64 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
   d45a8:	4966      	ldr	r1, [pc, #408]	; (d4744 <setup+0x1e8>)
   d45aa:	4867      	ldr	r0, [pc, #412]	; (d4748 <setup+0x1ec>)
   d45ac:	2300      	movs	r3, #0
   d45ae:	2202      	movs	r2, #2
   d45b0:	f003 fcda 	bl	d7f68 <spark_variable>
   d45b4:	4965      	ldr	r1, [pc, #404]	; (d474c <setup+0x1f0>)
   d45b6:	4866      	ldr	r0, [pc, #408]	; (d4750 <setup+0x1f4>)
   d45b8:	2300      	movs	r3, #0
   d45ba:	2202      	movs	r2, #2
   d45bc:	f003 fcd4 	bl	d7f68 <spark_variable>
   d45c0:	4964      	ldr	r1, [pc, #400]	; (d4754 <setup+0x1f8>)
   d45c2:	4865      	ldr	r0, [pc, #404]	; (d4758 <setup+0x1fc>)
   d45c4:	2300      	movs	r3, #0
   d45c6:	2202      	movs	r2, #2
   d45c8:	f003 fcce 	bl	d7f68 <spark_variable>
        spark_variable_t extra = {};
   d45cc:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
   d45ce:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d45d0:	9405      	str	r4, [sp, #20]
        extra.size = sizeof(extra);
   d45d2:	f8ad 3014 	strh.w	r3, [sp, #20]
        extra.update = update_string_variable;
   d45d6:	4b61      	ldr	r3, [pc, #388]	; (d475c <setup+0x200>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d45d8:	4961      	ldr	r1, [pc, #388]	; (d4760 <setup+0x204>)
        extra.update = update_string_variable;
   d45da:	9306      	str	r3, [sp, #24]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d45dc:	2204      	movs	r2, #4
   d45de:	ab05      	add	r3, sp, #20
   d45e0:	4860      	ldr	r0, [pc, #384]	; (d4764 <setup+0x208>)
        spark_variable_t extra = {};
   d45e2:	9407      	str	r4, [sp, #28]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d45e4:	f003 fcc0 	bl	d7f68 <spark_variable>

#if HAL_PLATFORM_NCP && HAL_PLATFORM_CELLULAR
// FIXME: there should be a separate macro to indicate that this functionality
// is available
    int setActiveSim(SimType sim) {
        return cellular_set_active_sim(sim, nullptr);
   d45e8:	4621      	mov	r1, r4
   d45ea:	2001      	movs	r0, #1
   d45ec:	f003 fbc2 	bl	d7d74 <cellular_set_active_sim>
  const uint8_t val = 0x01;
   d45f0:	2501      	movs	r5, #1
        cellular_credentials_clear(nullptr);
   d45f2:	4620      	mov	r0, r4
   d45f4:	f003 fbc8 	bl	d7d88 <cellular_credentials_clear>
  dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d45f8:	462a      	mov	r2, r5
   d45fa:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d45fe:	f10d 0003 	add.w	r0, sp, #3
  const uint8_t val = 0x01;
   d4602:	f88d 5003 	strb.w	r5, [sp, #3]
  dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d4606:	f003 fbc9 	bl	d7d9c <dct_write_app_data>
        network_off(*this, 0, 0, NULL);
   d460a:	4857      	ldr	r0, [pc, #348]	; (d4768 <setup+0x20c>)
   d460c:	4623      	mov	r3, r4
   d460e:	4622      	mov	r2, r4
   d4610:	4621      	mov	r1, r4
   d4612:	6840      	ldr	r0, [r0, #4]
   d4614:	f003 fc70 	bl	d7ef8 <network_off>
  Serial.begin(115200);
   d4618:	f005 fc0a 	bl	d9e30 <_Z16_fetch_usbserialv>
   d461c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4620:	f005 fbfa 	bl	d9e18 <_ZN9USBSerial5beginEl>
  delay(1000);
   d4624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4628:	f005 f992 	bl	d9950 <delay>
class SPISettings : public Printable {
   d462c:	f88d 4018 	strb.w	r4, [sp, #24]
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4630:	4c4e      	ldr	r4, [pc, #312]	; (d476c <setup+0x210>)
   d4632:	4b4f      	ldr	r3, [pc, #316]	; (d4770 <setup+0x214>)
   d4634:	9305      	str	r3, [sp, #20]
   d4636:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d463a:	4b4e      	ldr	r3, [pc, #312]	; (d4774 <setup+0x218>)
   d463c:	9307      	str	r3, [sp, #28]
   d463e:	2202      	movs	r2, #2
   d4640:	ab05      	add	r3, sp, #20
   d4642:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4646:	4630      	mov	r0, r6
   d4648:	f8ad 5020 	strh.w	r5, [sp, #32]
   d464c:	f002 f93a 	bl	d68c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d4650:	b1f8      	cbz	r0, d4692 <setup+0x136>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4652:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d4654:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   d4658:	f001 fe12 	bl	d6280 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d465c:	4629      	mov	r1, r5
   d465e:	4620      	mov	r0, r4
   d4660:	f001 ffdf 	bl	d6622 <_ZN9FatVolume4initEh>
   d4664:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d4668:	4601      	mov	r1, r0
   d466a:	b168      	cbz	r0, d4688 <setup+0x12c>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d466c:	493f      	ldr	r1, [pc, #252]	; (d476c <setup+0x210>)
   d466e:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   d4672:	f001 fcb2 	bl	d5fda <_ZN7FatFile8openRootEP9FatVolume>
   d4676:	b160      	cbz	r0, d4692 <setup+0x136>
    if (!dir->isDir()) {
   d4678:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d467c:	f013 0f70 	tst.w	r3, #112	; 0x70
    m_cwd = dir;
   d4680:	bf1c      	itt	ne
   d4682:	4b3d      	ldrne	r3, [pc, #244]	; (d4778 <setup+0x21c>)
   d4684:	601d      	strne	r5, [r3, #0]
    return true;
   d4686:	e004      	b.n	d4692 <setup+0x136>
    return (part ? init(part) : init(1) || init(0))
   d4688:	4620      	mov	r0, r4
   d468a:	f001 ffca 	bl	d6622 <_ZN9FatVolume4initEh>
   d468e:	2800      	cmp	r0, #0
   d4690:	d1ec      	bne.n	d466c <setup+0x110>
  delay(1000);
   d4692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4696:	f005 f95b 	bl	d9950 <delay>
  bme.begin();
   d469a:	2176      	movs	r1, #118	; 0x76
   d469c:	4837      	ldr	r0, [pc, #220]	; (d477c <setup+0x220>)
   d469e:	f001 fc1f 	bl	d5ee0 <_ZN15Adafruit_BME2805beginEh>
  pm.begin();
   d46a2:	4837      	ldr	r0, [pc, #220]	; (d4780 <setup+0x224>)
   d46a4:	f000 fc83 	bl	d4fae <_ZN7PMSA0035beginEv>
  epd.begin();
   d46a8:	2101      	movs	r1, #1
   d46aa:	4836      	ldr	r0, [pc, #216]	; (d4784 <setup+0x228>)
   d46ac:	f002 fc7a 	bl	d6fa4 <_ZN16Adafruit_SSD16755beginEb>
  delay(5000);
   d46b0:	f241 3088 	movw	r0, #5000	; 0x1388
   d46b4:	f005 f94c 	bl	d9950 <delay>
  EEPROM.get(NAME_ADDR,ID);
   d46b8:	f005 fe9a 	bl	da3f0 <_Z21__fetch_global_EEPROMv>
   d46bc:	2214      	movs	r2, #20
   d46be:	eb0d 0102 	add.w	r1, sp, r2
   d46c2:	200a      	movs	r0, #10
   d46c4:	f003 f9d6 	bl	d7a74 <HAL_EEPROM_Get>
  deviceID = String(ID);
   d46c8:	a905      	add	r1, sp, #20
   d46ca:	a801      	add	r0, sp, #4
   d46cc:	f003 fe0d 	bl	d82ea <_ZN6StringC1EPKc>
   d46d0:	a901      	add	r1, sp, #4
   d46d2:	4823      	ldr	r0, [pc, #140]	; (d4760 <setup+0x204>)
   d46d4:	f003 fe54 	bl	d8380 <_ZN6StringaSEOS_>
   d46d8:	a801      	add	r0, sp, #4
   d46da:	f003 fdbb 	bl	d8254 <_ZN6StringD1Ev>
  DISPLAY_REFRESH = 10;
   d46de:	4b19      	ldr	r3, [pc, #100]	; (d4744 <setup+0x1e8>)
   d46e0:	220a      	movs	r2, #10
   d46e2:	601a      	str	r2, [r3, #0]
  SENSOR_CYCLE = 5;
   d46e4:	4b19      	ldr	r3, [pc, #100]	; (d474c <setup+0x1f0>)
   d46e6:	2205      	movs	r2, #5
   d46e8:	601a      	str	r2, [r3, #0]
  PUBLISH_RATE = 43200;
   d46ea:	4b1a      	ldr	r3, [pc, #104]	; (d4754 <setup+0x1f8>)
   d46ec:	f64a 02c0 	movw	r2, #43200	; 0xa8c0
   d46f0:	601a      	str	r2, [r3, #0]
  ble_init();
   d46f2:	f7ff fea1 	bl	d4438 <_Z8ble_initv>
  PHONE_BACKUP_REQUEST = true;
   d46f6:	4b24      	ldr	r3, [pc, #144]	; (d4788 <setup+0x22c>)
   d46f8:	2201      	movs	r2, #1
   d46fa:	701a      	strb	r2, [r3, #0]
  displayInit();  
   d46fc:	f7ff fe46 	bl	d438c <_Z11displayInitv>
  Serial.println("ready");
   d4700:	f005 fb96 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4704:	4921      	ldr	r1, [pc, #132]	; (d478c <setup+0x230>)
   d4706:	f004 ffe0 	bl	d96ca <_ZN5Print7printlnEPKc>
  delay(5000);
   d470a:	f241 3088 	movw	r0, #5000	; 0x1388
   d470e:	f005 f91f 	bl	d9950 <delay>
  Serial.println("ready");
   d4712:	f005 fb8d 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4716:	491d      	ldr	r1, [pc, #116]	; (d478c <setup+0x230>)
   d4718:	f004 ffd7 	bl	d96ca <_ZN5Print7printlnEPKc>
}
   d471c:	b00a      	add	sp, #40	; 0x28
   d471e:	bd70      	pop	{r4, r5, r6, pc}
   d4720:	000db425 	.word	0x000db425
   d4724:	000d41e9 	.word	0x000d41e9
   d4728:	000d9c39 	.word	0x000d9c39
   d472c:	000db433 	.word	0x000db433
   d4730:	000d4219 	.word	0x000d4219
   d4734:	000db44a 	.word	0x000db44a
   d4738:	000d4261 	.word	0x000d4261
   d473c:	000db461 	.word	0x000db461
   d4740:	000d41a1 	.word	0x000d41a1
   d4744:	2003de58 	.word	0x2003de58
   d4748:	000db477 	.word	0x000db477
   d474c:	2003e2ec 	.word	0x2003e2ec
   d4750:	000db48c 	.word	0x000db48c
   d4754:	2003de60 	.word	0x2003de60
   d4758:	000db49f 	.word	0x000db49f
   d475c:	000d40c5 	.word	0x000d40c5
   d4760:	2003e3ec 	.word	0x2003e3ec
   d4764:	000db4ac 	.word	0x000db4ac
   d4768:	2003e65c 	.word	0x2003e65c
   d476c:	2003de64 	.word	0x2003de64
   d4770:	000db610 	.word	0x000db610
   d4774:	02faf080 	.word	0x02faf080
   d4778:	2003e5f0 	.word	0x2003e5f0
   d477c:	2003e3a8 	.word	0x2003e3a8
   d4780:	2003e4cc 	.word	0x2003e4cc
   d4784:	2003e3fc 	.word	0x2003e3fc
   d4788:	2003de5c 	.word	0x2003de5c
   d478c:	000db4b6 	.word	0x000db4b6

000d4790 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4790:	b530      	push	{r4, r5, lr}
   d4792:	b085      	sub	sp, #20
   d4794:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4796:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4798:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d479a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d479c:	f003 fb4e 	bl	d7e3c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d47a0:	b9b0      	cbnz	r0, d47d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d47a2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d47a4:	b10c      	cbz	r4, d47aa <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d47a6:	6923      	ldr	r3, [r4, #16]
   d47a8:	b923      	cbnz	r3, d47b4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d47aa:	4a0a      	ldr	r2, [pc, #40]	; (d47d4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d47ac:	2100      	movs	r1, #0
   d47ae:	200a      	movs	r0, #10
   d47b0:	f003 fb34 	bl	d7e1c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d47b4:	2300      	movs	r3, #0
   d47b6:	f8ad 3006 	strh.w	r3, [sp, #6]
   d47ba:	230c      	movs	r3, #12
   d47bc:	f8ad 3004 	strh.w	r3, [sp, #4]
   d47c0:	2304      	movs	r3, #4
   d47c2:	9303      	str	r3, [sp, #12]
   d47c4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d47c6:	6923      	ldr	r3, [r4, #16]
   d47c8:	aa01      	add	r2, sp, #4
   d47ca:	2101      	movs	r1, #1
   d47cc:	4620      	mov	r0, r4
   d47ce:	4798      	blx	r3
}
   d47d0:	b005      	add	sp, #20
   d47d2:	bd30      	pop	{r4, r5, pc}
   d47d4:	000d7a35 	.word	0x000d7a35

000d47d8 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   d47d8:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d47da:	2003      	movs	r0, #3
   d47dc:	a901      	add	r1, sp, #4
   d47de:	f7ff ffd7 	bl	d4790 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d47e2:	b940      	cbnz	r0, d47f6 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d47e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d47e8:	ee00 3a10 	vmov	s0, r3
   d47ec:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   d47f0:	b003      	add	sp, #12
   d47f2:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   d47f6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d47fa:	e7f9      	b.n	d47f0 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000d47fc <_Z11displayDATAP6Sample>:
{
   d47fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4800:	ed2d 8b02 	vpush	{d8}
   d4804:	b094      	sub	sp, #80	; 0x50
  CellularSignal sig = Cellular.RSSI();
   d4806:	49c0      	ldr	r1, [pc, #768]	; (d4b08 <_Z11displayDATAP6Sample+0x30c>)
{
   d4808:	4604      	mov	r4, r0
  CellularSignal sig = Cellular.RSSI();
   d480a:	a80c      	add	r0, sp, #48	; 0x30
   d480c:	f005 fb6e 	bl	d9eec <_ZN5spark13CellularClass4RSSIEv>
  float strength = sig.getStrength();
   d4810:	a80c      	add	r0, sp, #48	; 0x30
   d4812:	f005 f8ef 	bl	d99f4 <_ZNK14CellularSignal11getStrengthEv>
   d4816:	eeb0 8a40 	vmov.f32	s16, s0
  EEPROM.get(NAME_ADDR,ID);
   d481a:	f005 fde9 	bl	da3f0 <_Z21__fetch_global_EEPROMv>
   d481e:	2214      	movs	r2, #20
   d4820:	a907      	add	r1, sp, #28
   d4822:	200a      	movs	r0, #10
   d4824:	f003 f926 	bl	d7a74 <HAL_EEPROM_Get>
  String IDs(ID);
   d4828:	a907      	add	r1, sp, #28
   d482a:	a803      	add	r0, sp, #12
   d482c:	f003 fd5d 	bl	d82ea <_ZN6StringC1EPKc>
  DateTime now_time = rtc.now();
   d4830:	a801      	add	r0, sp, #4
   d4832:	f001 f911 	bl	d5a58 <_ZN10RTC_DS32313nowEv>
  epd.setTextWrap(true);
   d4836:	48b5      	ldr	r0, [pc, #724]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
   d4838:	f89d 5004 	ldrb.w	r5, [sp, #4]
  int disHour = now_time.hour();  
   d483c:	f89d 8007 	ldrb.w	r8, [sp, #7]
  int disMinute  = now_time.minute(); 
   d4840:	f89d 7008 	ldrb.w	r7, [sp, #8]
  int disSecond = now_time.second();  
   d4844:	f89d 6009 	ldrb.w	r6, [sp, #9]
  int disDay = now_time.day();  
   d4848:	f89d 9006 	ldrb.w	r9, [sp, #6]
  int disMonth = now_time.month();  
   d484c:	f89d a005 	ldrb.w	sl, [sp, #5]
  epd.setTextWrap(true);
   d4850:	2101      	movs	r1, #1
   d4852:	f000 ff85 	bl	d5760 <_ZN12Adafruit_GFX11setTextWrapEb>
  epd.setTextSize(1);
   d4856:	2101      	movs	r1, #1
   d4858:	48ac      	ldr	r0, [pc, #688]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d485a:	f000 ff79 	bl	d5750 <_ZN12Adafruit_GFX11setTextSizeEh>
  epd.clearBuffer();
   d485e:	48ab      	ldr	r0, [pc, #684]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4860:	f002 fec4 	bl	d75ec <_ZN12Adafruit_EPD11clearBufferEv>
  epd.setCursor(ORIGIN_X, 10);
   d4864:	220a      	movs	r2, #10
   d4866:	48a9      	ldr	r0, [pc, #676]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4868:	2105      	movs	r1, #5
   d486a:	f000 ff6e 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.setTextColor(EPD_BLACK);
   d486e:	48a7      	ldr	r0, [pc, #668]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4870:	2100      	movs	r1, #0
   d4872:	f000 ff72 	bl	d575a <_ZN12Adafruit_GFX12setTextColorEt>
  epd.print(ID);
   d4876:	48a5      	ldr	r0, [pc, #660]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4878:	a907      	add	r1, sp, #28
   d487a:	f004 ff13 	bl	d96a4 <_ZN5Print5printEPKc>
  if(SD_WRITE_SUCCESSFUL){
   d487e:	4ba4      	ldr	r3, [pc, #656]	; (d4b10 <_Z11displayDATAP6Sample+0x314>)
   d4880:	781b      	ldrb	r3, [r3, #0]
  int disYear = now_time.year();
   d4882:	f505 65fa 	add.w	r5, r5, #2000	; 0x7d0
  if(SD_WRITE_SUCCESSFUL){
   d4886:	2b00      	cmp	r3, #0
   d4888:	f000 81b0 	beq.w	d4bec <_Z11displayDATAP6Sample+0x3f0>
    epd.print(" ++");
   d488c:	49a1      	ldr	r1, [pc, #644]	; (d4b14 <_Z11displayDATAP6Sample+0x318>)
    epd.print(" --");    
   d488e:	489f      	ldr	r0, [pc, #636]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4890:	f004 ff08 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.setCursor(ORIGIN_X+mid_offset, 10);
   d4894:	489d      	ldr	r0, [pc, #628]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4896:	220a      	movs	r2, #10
   d4898:	216e      	movs	r1, #110	; 0x6e
   d489a:	f000 ff56 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
size_t Print::print(T n, int base)
   d489e:	220a      	movs	r2, #10
   d48a0:	4651      	mov	r1, sl
   d48a2:	489a      	ldr	r0, [pc, #616]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48a4:	f7ff fc66 	bl	d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print("/");
   d48a8:	499b      	ldr	r1, [pc, #620]	; (d4b18 <_Z11displayDATAP6Sample+0x31c>)
   d48aa:	4898      	ldr	r0, [pc, #608]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48ac:	f004 fefa 	bl	d96a4 <_ZN5Print5printEPKc>
   d48b0:	220a      	movs	r2, #10
   d48b2:	4649      	mov	r1, r9
   d48b4:	4895      	ldr	r0, [pc, #596]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48b6:	f7ff fc5d 	bl	d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print("/");
   d48ba:	4997      	ldr	r1, [pc, #604]	; (d4b18 <_Z11displayDATAP6Sample+0x31c>)
   d48bc:	4893      	ldr	r0, [pc, #588]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48be:	f004 fef1 	bl	d96a4 <_ZN5Print5printEPKc>
   d48c2:	220a      	movs	r2, #10
   d48c4:	4629      	mov	r1, r5
   d48c6:	4891      	ldr	r0, [pc, #580]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48c8:	f7ff fc54 	bl	d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print("  ");
   d48cc:	4993      	ldr	r1, [pc, #588]	; (d4b1c <_Z11displayDATAP6Sample+0x320>)
   d48ce:	488f      	ldr	r0, [pc, #572]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48d0:	f004 fee8 	bl	d96a4 <_ZN5Print5printEPKc>
   d48d4:	220a      	movs	r2, #10
   d48d6:	4641      	mov	r1, r8
   d48d8:	488c      	ldr	r0, [pc, #560]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48da:	f7ff fc4b 	bl	d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print(":");
   d48de:	4990      	ldr	r1, [pc, #576]	; (d4b20 <_Z11displayDATAP6Sample+0x324>)
   d48e0:	488a      	ldr	r0, [pc, #552]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48e2:	f004 fedf 	bl	d96a4 <_ZN5Print5printEPKc>
   d48e6:	220a      	movs	r2, #10
   d48e8:	4639      	mov	r1, r7
   d48ea:	4888      	ldr	r0, [pc, #544]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48ec:	f7ff fc42 	bl	d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print(":");
   d48f0:	498b      	ldr	r1, [pc, #556]	; (d4b20 <_Z11displayDATAP6Sample+0x324>)
   d48f2:	4886      	ldr	r0, [pc, #536]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48f4:	f004 fed6 	bl	d96a4 <_ZN5Print5printEPKc>
   d48f8:	4631      	mov	r1, r6
   d48fa:	220a      	movs	r2, #10
   d48fc:	4883      	ldr	r0, [pc, #524]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d48fe:	f7ff fc39 	bl	d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.setCursor(ORIGIN_X, 20);
   d4902:	2214      	movs	r2, #20
   d4904:	4881      	ldr	r0, [pc, #516]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4906:	2105      	movs	r1, #5
   d4908:	f000 ff1f 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Batery: ");
   d490c:	4985      	ldr	r1, [pc, #532]	; (d4b24 <_Z11displayDATAP6Sample+0x328>)
   d490e:	487f      	ldr	r0, [pc, #508]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4910:	f004 fec8 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.print(System.batteryCharge());
   d4914:	f7ff ff60 	bl	d47d8 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d4918:	2102      	movs	r1, #2
   d491a:	487c      	ldr	r0, [pc, #496]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d491c:	f004 ffc6 	bl	d98ac <_ZN5Print5printEfi>
  epd.print("%  ");
   d4920:	4981      	ldr	r1, [pc, #516]	; (d4b28 <_Z11displayDATAP6Sample+0x32c>)
   d4922:	487a      	ldr	r0, [pc, #488]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4924:	f004 febe 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.setCursor(ORIGIN_X+mid_offset, 20);
   d4928:	2214      	movs	r2, #20
   d492a:	4878      	ldr	r0, [pc, #480]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d492c:	216e      	movs	r1, #110	; 0x6e
   d492e:	f000 ff0c 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Cell:");
   d4932:	497e      	ldr	r1, [pc, #504]	; (d4b2c <_Z11displayDATAP6Sample+0x330>)
   d4934:	4875      	ldr	r0, [pc, #468]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4936:	f004 feb5 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.print(strength);
   d493a:	eeb0 0a48 	vmov.f32	s0, s16
   d493e:	2102      	movs	r1, #2
   d4940:	4872      	ldr	r0, [pc, #456]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4942:	f004 ffb3 	bl	d98ac <_ZN5Print5printEfi>
  epd.print("   Ch: ");
   d4946:	497a      	ldr	r1, [pc, #488]	; (d4b30 <_Z11displayDATAP6Sample+0x334>)
   d4948:	4870      	ldr	r0, [pc, #448]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d494a:	f004 feab 	bl	d96a4 <_ZN5Print5printEPKc>
   d494e:	4669      	mov	r1, sp
   d4950:	2007      	movs	r0, #7
   d4952:	f7ff ff1d 	bl	d4790 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   d4956:	1e01      	subs	r1, r0, #0
        return val;
   d4958:	bfa8      	it	ge
   d495a:	9900      	ldrge	r1, [sp, #0]
   d495c:	486b      	ldr	r0, [pc, #428]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d495e:	220a      	movs	r2, #10
   d4960:	f7ff fc08 	bl	d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.setCursor(ORIGIN_X, 30);
   d4964:	221e      	movs	r2, #30
   d4966:	4869      	ldr	r0, [pc, #420]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4968:	2105      	movs	r1, #5
   d496a:	f000 feee 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.setTextColor(EPD_BLACK);
   d496e:	4867      	ldr	r0, [pc, #412]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4970:	2100      	movs	r1, #0
   d4972:	f000 fef2 	bl	d575a <_ZN12Adafruit_GFX12setTextColorEt>
  epd.print("Dp 0.3: ");
   d4976:	496f      	ldr	r1, [pc, #444]	; (d4b34 <_Z11displayDATAP6Sample+0x338>)
   d4978:	4864      	ldr	r0, [pc, #400]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d497a:	f004 fe93 	bl	d96a4 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d497e:	8861      	ldrh	r1, [r4, #2]
   d4980:	4862      	ldr	r0, [pc, #392]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4982:	220a      	movs	r2, #10
   d4984:	f004 feab 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 30);
   d4988:	221e      	movs	r2, #30
   d498a:	4860      	ldr	r0, [pc, #384]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d498c:	216e      	movs	r1, #110	; 0x6e
   d498e:	f000 fedc 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("E PM 1.0: ");
   d4992:	4969      	ldr	r1, [pc, #420]	; (d4b38 <_Z11displayDATAP6Sample+0x33c>)
   d4994:	485d      	ldr	r0, [pc, #372]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4996:	f004 fe85 	bl	d96a4 <_ZN5Print5printEPKc>
   d499a:	89e1      	ldrh	r1, [r4, #14]
   d499c:	485b      	ldr	r0, [pc, #364]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d499e:	220a      	movs	r2, #10
   d49a0:	f004 fe9d 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 40);
   d49a4:	2228      	movs	r2, #40	; 0x28
   d49a6:	4859      	ldr	r0, [pc, #356]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49a8:	2105      	movs	r1, #5
   d49aa:	f000 fece 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 0.5: ");
   d49ae:	4963      	ldr	r1, [pc, #396]	; (d4b3c <_Z11displayDATAP6Sample+0x340>)
   d49b0:	4856      	ldr	r0, [pc, #344]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49b2:	f004 fe77 	bl	d96a4 <_ZN5Print5printEPKc>
   d49b6:	88a1      	ldrh	r1, [r4, #4]
   d49b8:	4854      	ldr	r0, [pc, #336]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49ba:	220a      	movs	r2, #10
   d49bc:	f004 fe8f 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 40);
   d49c0:	2228      	movs	r2, #40	; 0x28
   d49c2:	4852      	ldr	r0, [pc, #328]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49c4:	216e      	movs	r1, #110	; 0x6e
   d49c6:	f000 fec0 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("E PM 2.5: ");
   d49ca:	495d      	ldr	r1, [pc, #372]	; (d4b40 <_Z11displayDATAP6Sample+0x344>)
   d49cc:	484f      	ldr	r0, [pc, #316]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49ce:	f004 fe69 	bl	d96a4 <_ZN5Print5printEPKc>
   d49d2:	8a21      	ldrh	r1, [r4, #16]
   d49d4:	484d      	ldr	r0, [pc, #308]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49d6:	220a      	movs	r2, #10
   d49d8:	f004 fe81 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 50);
   d49dc:	2232      	movs	r2, #50	; 0x32
   d49de:	484b      	ldr	r0, [pc, #300]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49e0:	2105      	movs	r1, #5
   d49e2:	f000 feb2 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 1.0: ");
   d49e6:	4957      	ldr	r1, [pc, #348]	; (d4b44 <_Z11displayDATAP6Sample+0x348>)
   d49e8:	4848      	ldr	r0, [pc, #288]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49ea:	f004 fe5b 	bl	d96a4 <_ZN5Print5printEPKc>
   d49ee:	88e1      	ldrh	r1, [r4, #6]
   d49f0:	4846      	ldr	r0, [pc, #280]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49f2:	220a      	movs	r2, #10
   d49f4:	f004 fe73 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 50);
   d49f8:	2232      	movs	r2, #50	; 0x32
   d49fa:	4844      	ldr	r0, [pc, #272]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d49fc:	216e      	movs	r1, #110	; 0x6e
   d49fe:	f000 fea4 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("E PM 10 : ");
   d4a02:	4951      	ldr	r1, [pc, #324]	; (d4b48 <_Z11displayDATAP6Sample+0x34c>)
   d4a04:	4841      	ldr	r0, [pc, #260]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a06:	f004 fe4d 	bl	d96a4 <_ZN5Print5printEPKc>
   d4a0a:	8a61      	ldrh	r1, [r4, #18]
   d4a0c:	483f      	ldr	r0, [pc, #252]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a0e:	220a      	movs	r2, #10
   d4a10:	f004 fe65 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 60);
   d4a14:	223c      	movs	r2, #60	; 0x3c
   d4a16:	483d      	ldr	r0, [pc, #244]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a18:	2105      	movs	r1, #5
   d4a1a:	f000 fe96 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 2.5: ");
   d4a1e:	494b      	ldr	r1, [pc, #300]	; (d4b4c <_Z11displayDATAP6Sample+0x350>)
   d4a20:	483a      	ldr	r0, [pc, #232]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a22:	f004 fe3f 	bl	d96a4 <_ZN5Print5printEPKc>
   d4a26:	8921      	ldrh	r1, [r4, #8]
   d4a28:	4838      	ldr	r0, [pc, #224]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a2a:	220a      	movs	r2, #10
   d4a2c:	f004 fe57 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 60);
   d4a30:	223c      	movs	r2, #60	; 0x3c
   d4a32:	4836      	ldr	r0, [pc, #216]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a34:	216e      	movs	r1, #110	; 0x6e
   d4a36:	f000 fe88 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("S PM 1.0: ");
   d4a3a:	4945      	ldr	r1, [pc, #276]	; (d4b50 <_Z11displayDATAP6Sample+0x354>)
   d4a3c:	4833      	ldr	r0, [pc, #204]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a3e:	f004 fe31 	bl	d96a4 <_ZN5Print5printEPKc>
   d4a42:	8aa1      	ldrh	r1, [r4, #20]
   d4a44:	4831      	ldr	r0, [pc, #196]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a46:	220a      	movs	r2, #10
   d4a48:	f004 fe49 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 70);
   d4a4c:	2246      	movs	r2, #70	; 0x46
   d4a4e:	482f      	ldr	r0, [pc, #188]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a50:	2105      	movs	r1, #5
   d4a52:	f000 fe7a 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 5.0: ");
   d4a56:	493f      	ldr	r1, [pc, #252]	; (d4b54 <_Z11displayDATAP6Sample+0x358>)
   d4a58:	482c      	ldr	r0, [pc, #176]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a5a:	f004 fe23 	bl	d96a4 <_ZN5Print5printEPKc>
   d4a5e:	8961      	ldrh	r1, [r4, #10]
   d4a60:	482a      	ldr	r0, [pc, #168]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a62:	220a      	movs	r2, #10
   d4a64:	f004 fe3b 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 70);
   d4a68:	2246      	movs	r2, #70	; 0x46
   d4a6a:	4828      	ldr	r0, [pc, #160]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a6c:	216e      	movs	r1, #110	; 0x6e
   d4a6e:	f000 fe6c 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("S PM 2.5: ");
   d4a72:	4939      	ldr	r1, [pc, #228]	; (d4b58 <_Z11displayDATAP6Sample+0x35c>)
   d4a74:	4825      	ldr	r0, [pc, #148]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a76:	f004 fe15 	bl	d96a4 <_ZN5Print5printEPKc>
   d4a7a:	8ae1      	ldrh	r1, [r4, #22]
   d4a7c:	4823      	ldr	r0, [pc, #140]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a7e:	220a      	movs	r2, #10
   d4a80:	f004 fe2d 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 80);
   d4a84:	2250      	movs	r2, #80	; 0x50
   d4a86:	4821      	ldr	r0, [pc, #132]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a88:	2105      	movs	r1, #5
   d4a8a:	f000 fe5e 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp10.0: ");
   d4a8e:	4933      	ldr	r1, [pc, #204]	; (d4b5c <_Z11displayDATAP6Sample+0x360>)
   d4a90:	481e      	ldr	r0, [pc, #120]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a92:	f004 fe07 	bl	d96a4 <_ZN5Print5printEPKc>
   d4a96:	89a1      	ldrh	r1, [r4, #12]
   d4a98:	481c      	ldr	r0, [pc, #112]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4a9a:	220a      	movs	r2, #10
   d4a9c:	f004 fe1f 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 80);
   d4aa0:	2250      	movs	r2, #80	; 0x50
   d4aa2:	481a      	ldr	r0, [pc, #104]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4aa4:	216e      	movs	r1, #110	; 0x6e
   d4aa6:	f000 fe50 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("S PM 10 : ");
   d4aaa:	492d      	ldr	r1, [pc, #180]	; (d4b60 <_Z11displayDATAP6Sample+0x364>)
   d4aac:	4817      	ldr	r0, [pc, #92]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4aae:	f004 fdf9 	bl	d96a4 <_ZN5Print5printEPKc>
   d4ab2:	8b21      	ldrh	r1, [r4, #24]
   d4ab4:	4815      	ldr	r0, [pc, #84]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4ab6:	220a      	movs	r2, #10
   d4ab8:	f004 fe11 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 90);
   d4abc:	225a      	movs	r2, #90	; 0x5a
   d4abe:	4813      	ldr	r0, [pc, #76]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4ac0:	2105      	movs	r1, #5
   d4ac2:	f000 fe42 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Temp: ");
   d4ac6:	4927      	ldr	r1, [pc, #156]	; (d4b64 <_Z11displayDATAP6Sample+0x368>)
   d4ac8:	4810      	ldr	r0, [pc, #64]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4aca:	f004 fdeb 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.print(sample->temp);
   d4ace:	ed94 0a07 	vldr	s0, [r4, #28]
   d4ad2:	480e      	ldr	r0, [pc, #56]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4ad4:	2102      	movs	r1, #2
   d4ad6:	f004 fee9 	bl	d98ac <_ZN5Print5printEfi>
  epd.print("C  RH: ");
   d4ada:	4923      	ldr	r1, [pc, #140]	; (d4b68 <_Z11displayDATAP6Sample+0x36c>)
   d4adc:	480b      	ldr	r0, [pc, #44]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4ade:	f004 fde1 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.print((int) sample->humidity);
   d4ae2:	edd4 7a08 	vldr	s15, [r4, #32]
   d4ae6:	4809      	ldr	r0, [pc, #36]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4aec:	220a      	movs	r2, #10
   d4aee:	ee17 1a90 	vmov	r1, s15
   d4af2:	f7ff fb3f 	bl	d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print("%  P: ");
   d4af6:	491d      	ldr	r1, [pc, #116]	; (d4b6c <_Z11displayDATAP6Sample+0x370>)
   d4af8:	4804      	ldr	r0, [pc, #16]	; (d4b0c <_Z11displayDATAP6Sample+0x310>)
   d4afa:	f004 fdd3 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.print(sample->pressure/1000);
   d4afe:	eddf 7a1c 	vldr	s15, [pc, #112]	; d4b70 <_Z11displayDATAP6Sample+0x374>
   d4b02:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
   d4b06:	e035      	b.n	d4b74 <_Z11displayDATAP6Sample+0x378>
   d4b08:	2003e65c 	.word	0x2003e65c
   d4b0c:	2003e3fc 	.word	0x2003e3fc
   d4b10:	2003e2e8 	.word	0x2003e2e8
   d4b14:	000db4bc 	.word	0x000db4bc
   d4b18:	000db4c4 	.word	0x000db4c4
   d4b1c:	000db4d0 	.word	0x000db4d0
   d4b20:	000db4d7 	.word	0x000db4d7
   d4b24:	000db4c6 	.word	0x000db4c6
   d4b28:	000db4cf 	.word	0x000db4cf
   d4b2c:	000db4d3 	.word	0x000db4d3
   d4b30:	000db4d9 	.word	0x000db4d9
   d4b34:	000db4e1 	.word	0x000db4e1
   d4b38:	000db4ea 	.word	0x000db4ea
   d4b3c:	000db4f5 	.word	0x000db4f5
   d4b40:	000db4fe 	.word	0x000db4fe
   d4b44:	000db509 	.word	0x000db509
   d4b48:	000db512 	.word	0x000db512
   d4b4c:	000db51d 	.word	0x000db51d
   d4b50:	000db526 	.word	0x000db526
   d4b54:	000db531 	.word	0x000db531
   d4b58:	000db53a 	.word	0x000db53a
   d4b5c:	000db545 	.word	0x000db545
   d4b60:	000db54e 	.word	0x000db54e
   d4b64:	000db559 	.word	0x000db559
   d4b68:	000db560 	.word	0x000db560
   d4b6c:	000db568 	.word	0x000db568
   d4b70:	447a0000 	.word	0x447a0000
   d4b74:	481e      	ldr	r0, [pc, #120]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4b76:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4b7a:	2102      	movs	r1, #2
   d4b7c:	f004 fe96 	bl	d98ac <_ZN5Print5printEfi>
  epd.print("kPa");
   d4b80:	491c      	ldr	r1, [pc, #112]	; (d4bf4 <_Z11displayDATAP6Sample+0x3f8>)
   d4b82:	481b      	ldr	r0, [pc, #108]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4b84:	f004 fd8e 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.setCursor(ORIGIN_X, 100);
   d4b88:	2264      	movs	r2, #100	; 0x64
   d4b8a:	4819      	ldr	r0, [pc, #100]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4b8c:	2105      	movs	r1, #5
   d4b8e:	f000 fddc 	bl	d574a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Samp: ");
   d4b92:	4919      	ldr	r1, [pc, #100]	; (d4bf8 <_Z11displayDATAP6Sample+0x3fc>)
   d4b94:	4816      	ldr	r0, [pc, #88]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4b96:	f004 fd85 	bl	d96a4 <_ZN5Print5printEPKc>
   d4b9a:	4b18      	ldr	r3, [pc, #96]	; (d4bfc <_Z11displayDATAP6Sample+0x400>)
   d4b9c:	4814      	ldr	r0, [pc, #80]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4b9e:	6819      	ldr	r1, [r3, #0]
   d4ba0:	220a      	movs	r2, #10
   d4ba2:	f004 fd9c 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.print("s    Disp: ");
   d4ba6:	4916      	ldr	r1, [pc, #88]	; (d4c00 <_Z11displayDATAP6Sample+0x404>)
   d4ba8:	4811      	ldr	r0, [pc, #68]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4baa:	f004 fd7b 	bl	d96a4 <_ZN5Print5printEPKc>
   d4bae:	4b15      	ldr	r3, [pc, #84]	; (d4c04 <_Z11displayDATAP6Sample+0x408>)
   d4bb0:	480f      	ldr	r0, [pc, #60]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4bb2:	6819      	ldr	r1, [r3, #0]
   d4bb4:	220a      	movs	r2, #10
   d4bb6:	f004 fd92 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.print("s    Pub: ");
   d4bba:	4913      	ldr	r1, [pc, #76]	; (d4c08 <_Z11displayDATAP6Sample+0x40c>)
   d4bbc:	480c      	ldr	r0, [pc, #48]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4bbe:	f004 fd71 	bl	d96a4 <_ZN5Print5printEPKc>
   d4bc2:	4b12      	ldr	r3, [pc, #72]	; (d4c0c <_Z11displayDATAP6Sample+0x410>)
   d4bc4:	480a      	ldr	r0, [pc, #40]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4bc6:	6819      	ldr	r1, [r3, #0]
   d4bc8:	220a      	movs	r2, #10
   d4bca:	f004 fd88 	bl	d96de <_ZN5Print11printNumberEmh>
  epd.print("h");
   d4bce:	4910      	ldr	r1, [pc, #64]	; (d4c10 <_Z11displayDATAP6Sample+0x414>)
   d4bd0:	4807      	ldr	r0, [pc, #28]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4bd2:	f004 fd67 	bl	d96a4 <_ZN5Print5printEPKc>
  epd.display();
   d4bd6:	4806      	ldr	r0, [pc, #24]	; (d4bf0 <_Z11displayDATAP6Sample+0x3f4>)
   d4bd8:	f002 fe03 	bl	d77e2 <_ZN12Adafruit_EPD7displayEv>
  String IDs(ID);
   d4bdc:	a803      	add	r0, sp, #12
   d4bde:	f003 fb39 	bl	d8254 <_ZN6StringD1Ev>
}
   d4be2:	b014      	add	sp, #80	; 0x50
   d4be4:	ecbd 8b02 	vpop	{d8}
   d4be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    epd.print(" --");    
   d4bec:	4909      	ldr	r1, [pc, #36]	; (d4c14 <_Z11displayDATAP6Sample+0x418>)
   d4bee:	e64e      	b.n	d488e <_Z11displayDATAP6Sample+0x92>
   d4bf0:	2003e3fc 	.word	0x2003e3fc
   d4bf4:	000db56f 	.word	0x000db56f
   d4bf8:	000db573 	.word	0x000db573
   d4bfc:	2003de58 	.word	0x2003de58
   d4c00:	000db57a 	.word	0x000db57a
   d4c04:	2003e2ec 	.word	0x2003e2ec
   d4c08:	000db586 	.word	0x000db586
   d4c0c:	2003de60 	.word	0x2003de60
   d4c10:	000db591 	.word	0x000db591
   d4c14:	000db4c0 	.word	0x000db4c0

000d4c18 <loop>:
{
   d4c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c1a:	b087      	sub	sp, #28
  if (Serial.available() > 0) {   // something came across serial
   d4c1c:	f005 f908 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4c20:	6803      	ldr	r3, [r0, #0]
   d4c22:	691b      	ldr	r3, [r3, #16]
   d4c24:	4798      	blx	r3
   d4c26:	2800      	cmp	r0, #0
   d4c28:	dd25      	ble.n	d4c76 <loop+0x5e>
    integerValue = 0;      // throw away previous integerValue
   d4c2a:	4c31      	ldr	r4, [pc, #196]	; (d4cf0 <loop+0xd8>)
      incomingByte = Serial.read();
   d4c2c:	4e31      	ldr	r6, [pc, #196]	; (d4cf4 <loop+0xdc>)
    integerValue = 0;      // throw away previous integerValue
   d4c2e:	2300      	movs	r3, #0
   d4c30:	6023      	str	r3, [r4, #0]
      integerValue *= 10;  // shift left 1 decimal place
   d4c32:	250a      	movs	r5, #10
      incomingByte = Serial.read();
   d4c34:	f005 f8fc 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4c38:	6803      	ldr	r3, [r0, #0]
   d4c3a:	695b      	ldr	r3, [r3, #20]
   d4c3c:	4798      	blx	r3
   d4c3e:	b2c0      	uxtb	r0, r0
      if (incomingByte == 'd') break;   // exit the while(1), we're done receiving
   d4c40:	2864      	cmp	r0, #100	; 0x64
      incomingByte = Serial.read();
   d4c42:	7030      	strb	r0, [r6, #0]
      if (incomingByte == 'd') break;   // exit the while(1), we're done receiving
   d4c44:	d005      	beq.n	d4c52 <loop+0x3a>
      integerValue *= 10;  // shift left 1 decimal place
   d4c46:	6823      	ldr	r3, [r4, #0]
      integerValue = ((incomingByte - 48) + integerValue);
   d4c48:	fb05 0303 	mla	r3, r5, r3, r0
   d4c4c:	3b30      	subs	r3, #48	; 0x30
   d4c4e:	6023      	str	r3, [r4, #0]
      incomingByte = Serial.read();
   d4c50:	e7f0      	b.n	d4c34 <loop+0x1c>
    Serial.println(integerValue);   // Do something with the value
   d4c52:	f005 f8ed 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4c56:	6821      	ldr	r1, [r4, #0]
   d4c58:	220a      	movs	r2, #10
   d4c5a:	4605      	mov	r5, r0
   d4c5c:	f004 fd3f 	bl	d96de <_ZN5Print11printNumberEmh>
        n += println();
   d4c60:	4628      	mov	r0, r5
   d4c62:	f004 fd26 	bl	d96b2 <_ZN5Print7printlnEv>
    timer[k] = integerValue;
   d4c66:	4a24      	ldr	r2, [pc, #144]	; (d4cf8 <loop+0xe0>)
   d4c68:	4924      	ldr	r1, [pc, #144]	; (d4cfc <loop+0xe4>)
   d4c6a:	6813      	ldr	r3, [r2, #0]
   d4c6c:	6820      	ldr	r0, [r4, #0]
   d4c6e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    k++;
   d4c72:	3301      	adds	r3, #1
   d4c74:	6013      	str	r3, [r2, #0]
  if(k==6){
   d4c76:	4d20      	ldr	r5, [pc, #128]	; (d4cf8 <loop+0xe0>)
   d4c78:	682b      	ldr	r3, [r5, #0]
   d4c7a:	2b06      	cmp	r3, #6
   d4c7c:	d12b      	bne.n	d4cd6 <loop+0xbe>
    rtc.adjust(DateTime(timer[0], timer[1], timer[2], timer[3], timer[4], timer[5]));
   d4c7e:	4c1f      	ldr	r4, [pc, #124]	; (d4cfc <loop+0xe4>)
      Serial.print(" ");
   d4c80:	4f1f      	ldr	r7, [pc, #124]	; (d4d00 <loop+0xe8>)
    rtc.adjust(DateTime(timer[0], timer[1], timer[2], timer[3], timer[4], timer[5]));
   d4c82:	7d23      	ldrb	r3, [r4, #20]
   d4c84:	9302      	str	r3, [sp, #8]
   d4c86:	7c23      	ldrb	r3, [r4, #16]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	7b23      	ldrb	r3, [r4, #12]
   d4c8c:	9300      	str	r3, [sp, #0]
   d4c8e:	7a23      	ldrb	r3, [r4, #8]
   d4c90:	7922      	ldrb	r2, [r4, #4]
   d4c92:	8821      	ldrh	r1, [r4, #0]
   d4c94:	a804      	add	r0, sp, #16
   d4c96:	f000 fdc9 	bl	d582c <_ZN8DateTimeC1Ethhhhh>
   d4c9a:	a804      	add	r0, sp, #16
   d4c9c:	f000 fe5c 	bl	d5958 <_ZN10RTC_DS32316adjustERK8DateTime>
    for(int i = 0; i < 6; i++)
   d4ca0:	2600      	movs	r6, #0
      Serial.print(timer[i]);
   d4ca2:	f005 f8c5 	bl	d9e30 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d4ca6:	f854 1b04 	ldr.w	r1, [r4], #4
   d4caa:	220a      	movs	r2, #10
   d4cac:	f7ff fa62 	bl	d4174 <_ZN5Print5printIiLi0EEEjT_i.part.0>
    for(int i = 0; i < 6; i++)
   d4cb0:	3601      	adds	r6, #1
      Serial.print(" ");
   d4cb2:	f005 f8bd 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4cb6:	4639      	mov	r1, r7
   d4cb8:	f004 fcf4 	bl	d96a4 <_ZN5Print5printEPKc>
    for(int i = 0; i < 6; i++)
   d4cbc:	2e06      	cmp	r6, #6
   d4cbe:	d1f0      	bne.n	d4ca2 <loop+0x8a>
    Serial.println();
   d4cc0:	f005 f8b6 	bl	d9e30 <_Z16_fetch_usbserialv>
   d4cc4:	f004 fcf5 	bl	d96b2 <_ZN5Print7printlnEv>
    delay(2000);
   d4cc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4ccc:	f004 fe40 	bl	d9950 <delay>
    k++;
   d4cd0:	682b      	ldr	r3, [r5, #0]
   d4cd2:	3301      	adds	r3, #1
   d4cd4:	602b      	str	r3, [r5, #0]
  if (k>6){
   d4cd6:	682b      	ldr	r3, [r5, #0]
   d4cd8:	2b06      	cmp	r3, #6
   d4cda:	dd06      	ble.n	d4cea <loop+0xd2>
    displayDATA(&latest_sample);
   d4cdc:	4809      	ldr	r0, [pc, #36]	; (d4d04 <loop+0xec>)
   d4cde:	f7ff fd8d 	bl	d47fc <_Z11displayDATAP6Sample>
    delay(5000);
   d4ce2:	f241 3088 	movw	r0, #5000	; 0x1388
   d4ce6:	f004 fe33 	bl	d9950 <delay>
}
   d4cea:	b007      	add	sp, #28
   d4cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cee:	bf00      	nop
   d4cf0:	2003e458 	.word	0x2003e458
   d4cf4:	2003e454 	.word	0x2003e454
   d4cf8:	2003e45c 	.word	0x2003e45c
   d4cfc:	2003e5cc 	.word	0x2003e5cc
   d4d00:	000db4d1 	.word	0x000db4d1
   d4d04:	2003e460 	.word	0x2003e460

000d4d08 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d0a:	4616      	mov	r6, r2
   d4d0c:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4d0e:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4d10:	e9c0 2200 	strd	r2, r2, [r0]
   d4d14:	4604      	mov	r4, r0
   d4d16:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4d18:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4d1a:	4619      	mov	r1, r3
   d4d1c:	a806      	add	r0, sp, #24
   d4d1e:	f003 fd25 	bl	d876c <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4d22:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4d24:	4638      	mov	r0, r7
   d4d26:	f003 fd21 	bl	d876c <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4d2a:	7833      	ldrb	r3, [r6, #0]
   d4d2c:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4d30:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4d32:	9302      	str	r3, [sp, #8]
   d4d34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4d36:	4620      	mov	r0, r4
   d4d38:	e9cd 7300 	strd	r7, r3, [sp]
   d4d3c:	aa05      	add	r2, sp, #20
   d4d3e:	ab06      	add	r3, sp, #24
   d4d40:	4629      	mov	r1, r5
   d4d42:	f004 fa45 	bl	d91d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4d46:	4620      	mov	r0, r4
   d4d48:	b011      	add	sp, #68	; 0x44
   d4d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4d4c <_ZN16Adafruit_SSD1675D0Ev>:
   d4d4c:	b510      	push	{r4, lr}
   d4d4e:	4604      	mov	r4, r0
   d4d50:	f7ff f9fe 	bl	d4150 <_ZN16Adafruit_SSD1675D1Ev>
   d4d54:	4620      	mov	r0, r4
   d4d56:	2150      	movs	r1, #80	; 0x50
   d4d58:	f005 fbe5 	bl	da526 <_ZdlPvj>
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	bd10      	pop	{r4, pc}

000d4d60 <_GLOBAL__sub_I_SystemMode>:
  /*
    for cases where the phone starts and the backup file does not exist, SD.open
    will fail and the backup request will be turned off.
  */
    PHONE_BACKUP_REQUEST = false;
}
   d4d60:	b530      	push	{r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4d62:	4d65      	ldr	r5, [pc, #404]	; (d4ef8 <_GLOBAL__sub_I_SystemMode+0x198>)
    SleepResult() {}
   d4d64:	4b65      	ldr	r3, [pc, #404]	; (d4efc <_GLOBAL__sub_I_SystemMode+0x19c>)
   d4d66:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4d68:	2400      	movs	r4, #0
   d4d6a:	b093      	sub	sp, #76	; 0x4c
   d4d6c:	602c      	str	r4, [r5, #0]
   d4d6e:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4d70:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4d72:	2002      	movs	r0, #2
   d4d74:	f003 f86c 	bl	d7e50 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4d78:	4a61      	ldr	r2, [pc, #388]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4d7a:	4962      	ldr	r1, [pc, #392]	; (d4f04 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d4d7c:	4628      	mov	r0, r5
   d4d7e:	f005 fbcd 	bl	da51c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4d82:	4621      	mov	r1, r4
   d4d84:	2001      	movs	r0, #1
   d4d86:	f003 f873 	bl	d7e70 <system_thread_set_state>
FuelGauge fuel;
   d4d8a:	4621      	mov	r1, r4
   d4d8c:	485e      	ldr	r0, [pc, #376]	; (d4f08 <_GLOBAL__sub_I_SystemMode+0x1a8>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4d8e:	4d5f      	ldr	r5, [pc, #380]	; (d4f0c <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d4d90:	f004 fea8 	bl	d9ae4 <_ZN9FuelGaugeC1Eb>
   d4d94:	4a5a      	ldr	r2, [pc, #360]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4d96:	495e      	ldr	r1, [pc, #376]	; (d4f10 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4d98:	485b      	ldr	r0, [pc, #364]	; (d4f08 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d4d9a:	f005 fbbf 	bl	da51c <__aeabi_atexit>
Adafruit_BME280 bme;
   d4d9e:	485d      	ldr	r0, [pc, #372]	; (d4f14 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4da0:	f000 fe60 	bl	d5a64 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SSD1675 epd(250,122, EPD_DC, EPD_RESET, EPD_CS, SRAM_CS, EPD_BUSY);
   d4da4:	f04f 33ff 	mov.w	r3, #4294967295
   d4da8:	2203      	movs	r2, #3
   d4daa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4dae:	2204      	movs	r2, #4
   d4db0:	e9cd 3200 	strd	r3, r2, [sp]
   d4db4:	21fa      	movs	r1, #250	; 0xfa
   d4db6:	2305      	movs	r3, #5
   d4db8:	227a      	movs	r2, #122	; 0x7a
   d4dba:	4857      	ldr	r0, [pc, #348]	; (d4f18 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4dbc:	f001 ffb6 	bl	d6d2c <_ZN16Adafruit_SSD1675C1Eiiaaaaa>
   d4dc0:	4a4f      	ldr	r2, [pc, #316]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4dc2:	4956      	ldr	r1, [pc, #344]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4dc4:	4854      	ldr	r0, [pc, #336]	; (d4f18 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4dc6:	f005 fba9 	bl	da51c <__aeabi_atexit>
PMSA003 pm = PMSA003(); // create instance of class
   d4dca:	4855      	ldr	r0, [pc, #340]	; (d4f20 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4dcc:	f000 f8e0 	bl	d4f90 <_ZN7PMSA003C1Ev>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4dd0:	4b54      	ldr	r3, [pc, #336]	; (d4f24 <_GLOBAL__sub_I_SystemMode+0x1c4>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4dd2:	2264      	movs	r2, #100	; 0x64
   d4dd4:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
   d4dd8:	4a53      	ldr	r2, [pc, #332]	; (d4f28 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4dda:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4dde:	2201      	movs	r2, #1
   d4de0:	71dc      	strb	r4, [r3, #7]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4de2:	f8a3 443c 	strh.w	r4, [r3, #1084]	; 0x43c
   d4de6:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4dea:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d4dee:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   d4df2:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d4df6:	7829      	ldrb	r1, [r5, #0]
   d4df8:	f3bf 8f5b 	dmb	ish
   d4dfc:	4011      	ands	r1, r2
   d4dfe:	461c      	mov	r4, r3
   d4e00:	d10b      	bne.n	d4e1a <_GLOBAL__sub_I_SystemMode+0xba>
   d4e02:	4628      	mov	r0, r5
   d4e04:	9105      	str	r1, [sp, #20]
   d4e06:	f7ff f955 	bl	d40b4 <__cxa_guard_acquire>
   d4e0a:	9905      	ldr	r1, [sp, #20]
   d4e0c:	b128      	cbz	r0, d4e1a <_GLOBAL__sub_I_SystemMode+0xba>
   d4e0e:	4847      	ldr	r0, [pc, #284]	; (d4f2c <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4e10:	f003 f946 	bl	d80a0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4e14:	4628      	mov	r0, r5
   d4e16:	f7ff f952 	bl	d40be <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4e1a:	4b44      	ldr	r3, [pc, #272]	; (d4f2c <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4e1c:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
SdFat SD;
   d4e20:	4a37      	ldr	r2, [pc, #220]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4e22:	4943      	ldr	r1, [pc, #268]	; (d4f30 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e24:	483f      	ldr	r0, [pc, #252]	; (d4f24 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d4e26:	f005 fb79 	bl	da51c <__aeabi_atexit>
   d4e2a:	4842      	ldr	r0, [pc, #264]	; (d4f34 <_GLOBAL__sub_I_SystemMode+0x1d4>)
File myFile;
   d4e2c:	4a34      	ldr	r2, [pc, #208]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4e2e:	4942      	ldr	r1, [pc, #264]	; (d4f38 <_GLOBAL__sub_I_SystemMode+0x1d8>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e34:	2400      	movs	r4, #0
   d4e36:	6083      	str	r3, [r0, #8]
  File() {}
   d4e38:	4b40      	ldr	r3, [pc, #256]	; (d4f3c <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d4e3a:	8204      	strh	r4, [r0, #16]
    Print() : write_error(0) {}
   d4e3c:	6044      	str	r4, [r0, #4]
   d4e3e:	6003      	str	r3, [r0, #0]
   d4e40:	f005 fb6c 	bl	da51c <__aeabi_atexit>
typedef struct Data_average{
   d4e44:	4b3e      	ldr	r3, [pc, #248]	; (d4f40 <_GLOBAL__sub_I_SystemMode+0x1e0>)
String deviceID;
   d4e46:	493f      	ldr	r1, [pc, #252]	; (d4f44 <_GLOBAL__sub_I_SystemMode+0x1e4>)
typedef struct Data_average{
   d4e48:	701c      	strb	r4, [r3, #0]
   d4e4a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   d4e4e:	4b3e      	ldr	r3, [pc, #248]	; (d4f48 <_GLOBAL__sub_I_SystemMode+0x1e8>)
String deviceID;
   d4e50:	483e      	ldr	r0, [pc, #248]	; (d4f4c <_GLOBAL__sub_I_SystemMode+0x1ec>)
typedef struct Data_average{
   d4e52:	701c      	strb	r4, [r3, #0]
   d4e54:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
typedef struct Sample{
   d4e58:	4b3d      	ldr	r3, [pc, #244]	; (d4f50 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4e5a:	801c      	strh	r4, [r3, #0]
   d4e5c:	4b3d      	ldr	r3, [pc, #244]	; (d4f54 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4e5e:	801c      	strh	r4, [r3, #0]
   d4e60:	4b3d      	ldr	r3, [pc, #244]	; (d4f58 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4e62:	801c      	strh	r4, [r3, #0]
String deviceID;
   d4e64:	f003 fa41 	bl	d82ea <_ZN6StringC1EPKc>
   d4e68:	4a25      	ldr	r2, [pc, #148]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4e6a:	493c      	ldr	r1, [pc, #240]	; (d4f5c <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4e6c:	4837      	ldr	r0, [pc, #220]	; (d4f4c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4e6e:	f005 fb55 	bl	da51c <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4e72:	493b      	ldr	r1, [pc, #236]	; (d4f60 <_GLOBAL__sub_I_SystemMode+0x200>)
   d4e74:	483b      	ldr	r0, [pc, #236]	; (d4f64 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4e76:	f003 fd5f 	bl	d8938 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4e7a:	493b      	ldr	r1, [pc, #236]	; (d4f68 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4e7c:	483b      	ldr	r0, [pc, #236]	; (d4f6c <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4e7e:	f003 fd5b 	bl	d8938 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4e82:	493b      	ldr	r1, [pc, #236]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e84:	483b      	ldr	r0, [pc, #236]	; (d4f74 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4e86:	f003 fd57 	bl	d8938 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d4e8a:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid); // originally NOTIFY rather than READ -- Charlie
   d4e8c:	4939      	ldr	r1, [pc, #228]	; (d4f74 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4e8e:	f88d 301c 	strb.w	r3, [sp, #28]
   d4e92:	a808      	add	r0, sp, #32
   d4e94:	f003 fc6a 	bl	d876c <_ZN8particle7BleUuidC1ERKS0_>
   d4e98:	4932      	ldr	r1, [pc, #200]	; (d4f64 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4e9a:	a80d      	add	r0, sp, #52	; 0x34
   d4e9c:	f003 fc66 	bl	d876c <_ZN8particle7BleUuidC1ERKS0_>
   d4ea0:	ab0d      	add	r3, sp, #52	; 0x34
   d4ea2:	9300      	str	r3, [sp, #0]
   d4ea4:	aa07      	add	r2, sp, #28
   d4ea6:	ab08      	add	r3, sp, #32
   d4ea8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4eac:	4932      	ldr	r1, [pc, #200]	; (d4f78 <_GLOBAL__sub_I_SystemMode+0x218>)
   d4eae:	4833      	ldr	r0, [pc, #204]	; (d4f7c <_GLOBAL__sub_I_SystemMode+0x21c>)
   d4eb0:	f7ff ff2a 	bl	d4d08 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4eb4:	4a12      	ldr	r2, [pc, #72]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4eb6:	4932      	ldr	r1, [pc, #200]	; (d4f80 <_GLOBAL__sub_I_SystemMode+0x220>)
   d4eb8:	4830      	ldr	r0, [pc, #192]	; (d4f7c <_GLOBAL__sub_I_SystemMode+0x21c>)
   d4eba:	f005 fb2f 	bl	da51c <__aeabi_atexit>
   d4ebe:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4ec0:	492a      	ldr	r1, [pc, #168]	; (d4f6c <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4ec2:	f88d 301c 	strb.w	r3, [sp, #28]
   d4ec6:	a808      	add	r0, sp, #32
   d4ec8:	f003 fc50 	bl	d876c <_ZN8particle7BleUuidC1ERKS0_>
   d4ecc:	4925      	ldr	r1, [pc, #148]	; (d4f64 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4ece:	a80d      	add	r0, sp, #52	; 0x34
   d4ed0:	f003 fc4c 	bl	d876c <_ZN8particle7BleUuidC1ERKS0_>
   d4ed4:	4b2b      	ldr	r3, [pc, #172]	; (d4f84 <_GLOBAL__sub_I_SystemMode+0x224>)
   d4ed6:	9301      	str	r3, [sp, #4]
   d4ed8:	ab0d      	add	r3, sp, #52	; 0x34
   d4eda:	9300      	str	r3, [sp, #0]
   d4edc:	aa07      	add	r2, sp, #28
   d4ede:	ab08      	add	r3, sp, #32
   d4ee0:	4929      	ldr	r1, [pc, #164]	; (d4f88 <_GLOBAL__sub_I_SystemMode+0x228>)
   d4ee2:	9402      	str	r4, [sp, #8]
   d4ee4:	4829      	ldr	r0, [pc, #164]	; (d4f8c <_GLOBAL__sub_I_SystemMode+0x22c>)
   d4ee6:	f7ff ff0f 	bl	d4d08 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4eea:	4a05      	ldr	r2, [pc, #20]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4eec:	4924      	ldr	r1, [pc, #144]	; (d4f80 <_GLOBAL__sub_I_SystemMode+0x220>)
   d4eee:	4827      	ldr	r0, [pc, #156]	; (d4f8c <_GLOBAL__sub_I_SystemMode+0x22c>)
   d4ef0:	f005 fb14 	bl	da51c <__aeabi_atexit>
}
   d4ef4:	b013      	add	sp, #76	; 0x4c
   d4ef6:	bd30      	pop	{r4, r5, pc}
   d4ef8:	2003e2f0 	.word	0x2003e2f0
   d4efc:	ffff0000 	.word	0xffff0000
   d4f00:	2003de48 	.word	0x2003de48
   d4f04:	000d4165 	.word	0x000d4165
   d4f08:	2003e44c 	.word	0x2003e44c
   d4f0c:	2003de4c 	.word	0x2003de4c
   d4f10:	000d9b05 	.word	0x000d9b05
   d4f14:	2003e3a8 	.word	0x2003e3a8
   d4f18:	2003e3fc 	.word	0x2003e3fc
   d4f1c:	000d4151 	.word	0x000d4151
   d4f20:	2003e4cc 	.word	0x2003e4cc
   d4f24:	2003de64 	.word	0x2003de64
   d4f28:	000db610 	.word	0x000db610
   d4f2c:	2003de50 	.word	0x2003de50
   d4f30:	000d40e7 	.word	0x000d40e7
   d4f34:	2003e498 	.word	0x2003e498
   d4f38:	000d40e5 	.word	0x000d40e5
   d4f3c:	000db624 	.word	0x000db624
   d4f40:	2003e57c 	.word	0x2003e57c
   d4f44:	000db39b 	.word	0x000db39b
   d4f48:	2003e534 	.word	0x2003e534
   d4f4c:	2003e3ec 	.word	0x2003e3ec
   d4f50:	2003e460 	.word	0x2003e460
   d4f54:	2003e370 	.word	0x2003e370
   d4f58:	2003e338 	.word	0x2003e338
   d4f5c:	000d8255 	.word	0x000d8255
   d4f60:	000db593 	.word	0x000db593
   d4f64:	2003e2fc 	.word	0x2003e2fc
   d4f68:	000db5b8 	.word	0x000db5b8
   d4f6c:	2003e310 	.word	0x2003e310
   d4f70:	000db5dd 	.word	0x000db5dd
   d4f74:	2003e324 	.word	0x2003e324
   d4f78:	000db602 	.word	0x000db602
   d4f7c:	2003e5e4 	.word	0x2003e5e4
   d4f80:	000d8d63 	.word	0x000d8d63
   d4f84:	000d4339 	.word	0x000d4339
   d4f88:	000db605 	.word	0x000db605
   d4f8c:	2003e5c4 	.word	0x2003e5c4

000d4f90 <_ZN7PMSA003C1Ev>:

 */



PMSA003::PMSA003(){}
   d4f90:	4770      	bx	lr

000d4f92 <_ZN7PMSA0034initEv>:
    _wire = &Wire;
    return init();
}

bool PMSA003::init() // private, called by begin only
{
   d4f92:	b510      	push	{r4, lr}
   d4f94:	4604      	mov	r4, r0
    _wire->begin();
   d4f96:	6e00      	ldr	r0, [r0, #96]	; 0x60
   d4f98:	f005 f8a6 	bl	da0e8 <_ZN7TwoWire5beginEv>

    // To prevent null readings, sets to 0
    for (int i = 0; i < 15; i++)
   d4f9c:	1ea3      	subs	r3, r4, #2
    {
        _datBuffer[i] = 0;
   d4f9e:	2200      	movs	r2, #0
   d4fa0:	341c      	adds	r4, #28
   d4fa2:	f823 2f02 	strh.w	r2, [r3, #2]!
    for (int i = 0; i < 15; i++)
   d4fa6:	42a3      	cmp	r3, r4
   d4fa8:	d1fb      	bne.n	d4fa2 <_ZN7PMSA0034initEv+0x10>
    }
    return true;
}
   d4faa:	2001      	movs	r0, #1
   d4fac:	bd10      	pop	{r4, pc}

000d4fae <_ZN7PMSA0035beginEv>:
{
   d4fae:	b510      	push	{r4, lr}
    _i2caddr = PMSA_ADDRESS;
   d4fb0:	2312      	movs	r3, #18
   d4fb2:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
{
   d4fb6:	4604      	mov	r4, r0
    _wire = &Wire;
   d4fb8:	f005 fa60 	bl	da47c <_Z19__fetch_global_Wirev>
   d4fbc:	6620      	str	r0, [r4, #96]	; 0x60
    return init();
   d4fbe:	4620      	mov	r0, r4
}
   d4fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return init();
   d4fc4:	f7ff bfe5 	b.w	d4f92 <_ZN7PMSA0034initEv>

000d4fc8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4fcc:	b085      	sub	sp, #20
   d4fce:	461f      	mov	r7, r3
   d4fd0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4fd4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4fd8:	eba8 0902 	sub.w	r9, r8, r2
   d4fdc:	eba7 0a01 	sub.w	sl, r7, r1
   d4fe0:	f1b9 0f00 	cmp.w	r9, #0
   d4fe4:	bfb8      	it	lt
   d4fe6:	f1c9 0900 	rsblt	r9, r9, #0
   d4fea:	f1ba 0f00 	cmp.w	sl, #0
   d4fee:	bfb8      	it	lt
   d4ff0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4ff4:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4ff6:	4683      	mov	fp, r0
   d4ff8:	460c      	mov	r4, r1
   d4ffa:	4615      	mov	r5, r2
    if (steep) {
   d4ffc:	dd04      	ble.n	d5008 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4ffe:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d5000:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d5002:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d5004:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d5006:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d5008:	42bc      	cmp	r4, r7
   d500a:	dd05      	ble.n	d5018 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d500c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d500e:	4645      	mov	r5, r8
   d5010:	4690      	mov	r8, r2
    if (x0 > x1) {
   d5012:	4622      	mov	r2, r4
   d5014:	463c      	mov	r4, r7
   d5016:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d5018:	1b3e      	subs	r6, r7, r4
   d501a:	b2b2      	uxth	r2, r6
   d501c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d501e:	eba8 0205 	sub.w	r2, r8, r5
   d5022:	2a00      	cmp	r2, #0
   d5024:	bfb8      	it	lt
   d5026:	4252      	neglt	r2, r2
   d5028:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d502a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d502e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d5032:	4545      	cmp	r5, r8
   d5034:	bfb4      	ite	lt
   d5036:	2201      	movlt	r2, #1
   d5038:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d503c:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d503e:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d5040:	42bc      	cmp	r4, r7
   d5042:	dc1c      	bgt.n	d507e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d5044:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d5048:	9303      	str	r3, [sp, #12]
        if (steep) {
   d504a:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d504c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d5050:	bfc7      	ittee	gt
   d5052:	4629      	movgt	r1, r5
   d5054:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d5056:	462a      	movle	r2, r5
   d5058:	4621      	movle	r1, r4
   d505a:	4658      	mov	r0, fp
   d505c:	47c0      	blx	r8
        }
        err -= dy;
   d505e:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d5060:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d5062:	1ab6      	subs	r6, r6, r2
   d5064:	b2b1      	uxth	r1, r6
   d5066:	b236      	sxth	r6, r6
        if (err < 0) {
   d5068:	2e00      	cmp	r6, #0
   d506a:	da05      	bge.n	d5078 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d506c:	9a02      	ldr	r2, [sp, #8]
   d506e:	4415      	add	r5, r2
            err += dx;
   d5070:	9a00      	ldr	r2, [sp, #0]
   d5072:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d5074:	b22d      	sxth	r5, r5
            err += dx;
   d5076:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d5078:	3401      	adds	r4, #1
   d507a:	b224      	sxth	r4, r4
   d507c:	e7e0      	b.n	d5040 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d507e:	b005      	add	sp, #20
   d5080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5084 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d5084:	4770      	bx	lr

000d5086 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d5086:	b410      	push	{r4}
    drawPixel(x, y, color);
   d5088:	6804      	ldr	r4, [r0, #0]
   d508a:	6924      	ldr	r4, [r4, #16]
   d508c:	46a4      	mov	ip, r4
}
   d508e:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d5092:	4760      	bx	ip

000d5094 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d5094:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d5096:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d5098:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d509c:	9502      	str	r5, [sp, #8]
   d509e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d50a0:	46a4      	mov	ip, r4
}
   d50a2:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d50a4:	4760      	bx	ip

000d50a6 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d50a6:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d50a8:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d50aa:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d50ae:	9502      	str	r5, [sp, #8]
   d50b0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d50b2:	46a4      	mov	ip, r4
}
   d50b4:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d50b6:	4760      	bx	ip

000d50b8 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d50b8:	b470      	push	{r4, r5, r6}
   d50ba:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d50be:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d50c2:	6804      	ldr	r4, [r0, #0]
   d50c4:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d50c8:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d50ca:	46a4      	mov	ip, r4
}
   d50cc:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d50ce:	4760      	bx	ip

000d50d0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d50d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d50d4:	461c      	mov	r4, r3
    startWrite();
   d50d6:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d50d8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d50dc:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d50de:	4605      	mov	r5, r0
   d50e0:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d50e2:	3c01      	subs	r4, #1
   d50e4:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d50e6:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d50e8:	b224      	sxth	r4, r4
    startWrite();
   d50ea:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d50ec:	682b      	ldr	r3, [r5, #0]
   d50ee:	f8cd 8004 	str.w	r8, [sp, #4]
   d50f2:	9400      	str	r4, [sp, #0]
   d50f4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d50f6:	4628      	mov	r0, r5
   d50f8:	463b      	mov	r3, r7
   d50fa:	4632      	mov	r2, r6
   d50fc:	4639      	mov	r1, r7
   d50fe:	47a0      	blx	r4
    endWrite();
   d5100:	682b      	ldr	r3, [r5, #0]
   d5102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5104:	4628      	mov	r0, r5
}
   d5106:	b002      	add	sp, #8
   d5108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d510c:	4718      	bx	r3

000d510e <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d510e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5112:	461d      	mov	r5, r3
    startWrite();
   d5114:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d5116:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d511a:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d511c:	4604      	mov	r4, r0
   d511e:	4617      	mov	r7, r2
   d5120:	460e      	mov	r6, r1
    startWrite();
   d5122:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d5124:	e9cd 7800 	strd	r7, r8, [sp]
   d5128:	6822      	ldr	r2, [r4, #0]
   d512a:	1e6b      	subs	r3, r5, #1
   d512c:	4433      	add	r3, r6
   d512e:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d5130:	4620      	mov	r0, r4
   d5132:	b21b      	sxth	r3, r3
   d5134:	463a      	mov	r2, r7
   d5136:	4631      	mov	r1, r6
   d5138:	47a8      	blx	r5
    endWrite();
   d513a:	6823      	ldr	r3, [r4, #0]
   d513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d513e:	4620      	mov	r0, r4
}
   d5140:	b002      	add	sp, #8
   d5142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d5146:	4718      	bx	r3

000d5148 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5148:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d514c:	461e      	mov	r6, r3
    startWrite();
   d514e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d5150:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d5154:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5156:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d515a:	460c      	mov	r4, r1
   d515c:	4605      	mov	r5, r0
   d515e:	4617      	mov	r7, r2
    startWrite();
   d5160:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d5162:	4426      	add	r6, r4
   d5164:	42b4      	cmp	r4, r6
   d5166:	682b      	ldr	r3, [r5, #0]
   d5168:	da0b      	bge.n	d5182 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d516a:	f8cd 8000 	str.w	r8, [sp]
   d516e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d5172:	4621      	mov	r1, r4
   d5174:	464b      	mov	r3, r9
   d5176:	463a      	mov	r2, r7
   d5178:	4628      	mov	r0, r5
   d517a:	3401      	adds	r4, #1
   d517c:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d517e:	b224      	sxth	r4, r4
   d5180:	e7f0      	b.n	d5164 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d5182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5184:	4628      	mov	r0, r5
}
   d5186:	b002      	add	sp, #8
   d5188:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d518c:	4718      	bx	r3

000d518e <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d518e:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d5190:	6802      	ldr	r2, [r0, #0]
   d5192:	9101      	str	r1, [sp, #4]
   d5194:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5198:	9100      	str	r1, [sp, #0]
   d519a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d519c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d51a0:	2200      	movs	r2, #0
   d51a2:	4611      	mov	r1, r2
   d51a4:	47a0      	blx	r4
}
   d51a6:	b002      	add	sp, #8
   d51a8:	bd10      	pop	{r4, pc}

000d51aa <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d51aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d51ae:	461d      	mov	r5, r3
    startWrite();
   d51b0:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d51b2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d51b6:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d51b8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d51bc:	4604      	mov	r4, r0
   d51be:	460f      	mov	r7, r1
   d51c0:	4616      	mov	r6, r2
    startWrite();
   d51c2:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d51c4:	6823      	ldr	r3, [r4, #0]
   d51c6:	f8cd 8000 	str.w	r8, [sp]
   d51ca:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d51ce:	4632      	mov	r2, r6
   d51d0:	462b      	mov	r3, r5
   d51d2:	4639      	mov	r1, r7
   d51d4:	4620      	mov	r0, r4
   d51d6:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d51d8:	6823      	ldr	r3, [r4, #0]
   d51da:	f8cd 8000 	str.w	r8, [sp]
   d51de:	f109 32ff 	add.w	r2, r9, #4294967295
   d51e2:	4432      	add	r2, r6
   d51e4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d51e8:	4639      	mov	r1, r7
   d51ea:	462b      	mov	r3, r5
   d51ec:	4620      	mov	r0, r4
   d51ee:	b212      	sxth	r2, r2
   d51f0:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d51f2:	6823      	ldr	r3, [r4, #0]
   d51f4:	f8cd 8000 	str.w	r8, [sp]
   d51f8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d51fc:	4632      	mov	r2, r6
   d51fe:	464b      	mov	r3, r9
   d5200:	4639      	mov	r1, r7
   d5202:	4620      	mov	r0, r4
   d5204:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d5206:	1e6b      	subs	r3, r5, #1
   d5208:	19d9      	adds	r1, r3, r7
   d520a:	6823      	ldr	r3, [r4, #0]
   d520c:	f8cd 8000 	str.w	r8, [sp]
   d5210:	6a1d      	ldr	r5, [r3, #32]
   d5212:	4620      	mov	r0, r4
   d5214:	464b      	mov	r3, r9
   d5216:	4632      	mov	r2, r6
   d5218:	b209      	sxth	r1, r1
   d521a:	47a8      	blx	r5
    endWrite();
   d521c:	6823      	ldr	r3, [r4, #0]
   d521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5220:	4620      	mov	r0, r4
}
   d5222:	b002      	add	sp, #8
   d5224:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5228:	4718      	bx	r3

000d522a <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d522a:	4770      	bx	lr

000d522c <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d522c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d5230:	4299      	cmp	r1, r3
        uint16_t color) {
   d5232:	4616      	mov	r6, r2
   d5234:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d5238:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d523c:	6802      	ldr	r2, [r0, #0]
   d523e:	4680      	mov	r8, r0
   d5240:	460d      	mov	r5, r1
   d5242:	461c      	mov	r4, r3
    if(x0 == x1){
   d5244:	d113      	bne.n	d526e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5246:	42be      	cmp	r6, r7
   d5248:	bfc8      	it	gt
   d524a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d524c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5250:	bfc4      	itt	gt
   d5252:	463e      	movgt	r6, r7
   d5254:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5256:	1c7b      	adds	r3, r7, #1
   d5258:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d525a:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d525c:	b21b      	sxth	r3, r3
   d525e:	4632      	mov	r2, r6
   d5260:	4629      	mov	r1, r5
   d5262:	4640      	mov	r0, r8
   d5264:	46a4      	mov	ip, r4
}
   d5266:	b003      	add	sp, #12
   d5268:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d526c:	4760      	bx	ip
    } else if(y0 == y1){
   d526e:	42be      	cmp	r6, r7
   d5270:	d10a      	bne.n	d5288 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d5272:	4299      	cmp	r1, r3
   d5274:	bfc2      	ittt	gt
   d5276:	460b      	movgt	r3, r1
   d5278:	4625      	movgt	r5, r4
   d527a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d527c:	1c63      	adds	r3, r4, #1
   d527e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d5282:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5284:	1b5b      	subs	r3, r3, r5
   d5286:	e7e9      	b.n	d525c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d5288:	6953      	ldr	r3, [r2, #20]
   d528a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d528c:	e9cd 7900 	strd	r7, r9, [sp]
   d5290:	f8d8 3000 	ldr.w	r3, [r8]
   d5294:	4640      	mov	r0, r8
   d5296:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5298:	4632      	mov	r2, r6
   d529a:	4623      	mov	r3, r4
   d529c:	4629      	mov	r1, r5
   d529e:	47b8      	blx	r7
        endWrite();
   d52a0:	f8d8 3000 	ldr.w	r3, [r8]
   d52a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52a6:	4640      	mov	r0, r8
}
   d52a8:	b003      	add	sp, #12
   d52aa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d52ae:	4718      	bx	r3

000d52b0 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d52b0:	f001 0303 	and.w	r3, r1, #3
   d52b4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d52b8:	7643      	strb	r3, [r0, #25]
    switch(rotation) {
   d52ba:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d52bc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d52c0:	bf59      	ittee	pl
   d52c2:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d52c4:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d52c6:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d52c8:	81c3      	strhmi	r3, [r0, #14]
}
   d52ca:	4770      	bx	lr

000d52cc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d52cc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d52ce:	8101      	strh	r1, [r0, #8]
   d52d0:	2400      	movs	r4, #0
   d52d2:	4d07      	ldr	r5, [pc, #28]	; (d52f0 <_ZN12Adafruit_GFXC1Ess+0x24>)
   d52d4:	8142      	strh	r2, [r0, #10]
    _width    = WIDTH;
   d52d6:	8181      	strh	r1, [r0, #12]
    _height   = HEIGHT;
   d52d8:	81c2      	strh	r2, [r0, #14]
    textsize  = 1;
   d52da:	f04f 31ff 	mov.w	r1, #4294967295
   d52de:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   d52e2:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d52e6:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d52e8:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d52ea:	6104      	str	r4, [r0, #16]
    gfxFont   = NULL;
   d52ec:	61c4      	str	r4, [r0, #28]
}
   d52ee:	bd30      	pop	{r4, r5, pc}
   d52f0:	000dbbfc 	.word	0x000dbbfc

000d52f4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d52f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52f8:	b089      	sub	sp, #36	; 0x24
   d52fa:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d52fe:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5300:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d5304:	9304      	str	r3, [sp, #16]
   d5306:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d530a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d530c:	9305      	str	r3, [sp, #20]
   d530e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d5312:	4604      	mov	r4, r0
    startWrite();
   d5314:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d5316:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d531a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d531e:	bf48      	it	mi
   d5320:	f108 020e 	addmi.w	r2, r8, #14
   d5324:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d5328:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d532a:	4635      	mov	r5, r6
   d532c:	9b03      	ldr	r3, [sp, #12]
   d532e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d5330:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d5334:	189a      	adds	r2, r3, r2
   d5336:	9b05      	ldr	r3, [sp, #20]
   d5338:	428b      	cmp	r3, r1
   d533a:	b212      	sxth	r2, r2
   d533c:	dd27      	ble.n	d538e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d533e:	9b04      	ldr	r3, [sp, #16]
   d5340:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d5342:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5346:	9306      	str	r3, [sp, #24]
   d5348:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d534c:	4580      	cmp	r8, r0
   d534e:	fa1f f189 	uxth.w	r1, r9
   d5352:	dd17      	ble.n	d5384 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d5354:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5356:	bf05      	ittet	eq
   d5358:	9b06      	ldreq	r3, [sp, #24]
   d535a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d535c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d535e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d5360:	bf18      	it	ne
   d5362:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d5364:	062b      	lsls	r3, r5, #24
   d5366:	d50a      	bpl.n	d537e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d5368:	9b02      	ldr	r3, [sp, #8]
   d536a:	6820      	ldr	r0, [r4, #0]
   d536c:	9207      	str	r2, [sp, #28]
   d536e:	4419      	add	r1, r3
   d5370:	6983      	ldr	r3, [r0, #24]
   d5372:	b209      	sxth	r1, r1
   d5374:	461f      	mov	r7, r3
   d5376:	4620      	mov	r0, r4
   d5378:	4653      	mov	r3, sl
   d537a:	47b8      	blx	r7
   d537c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d537e:	f109 0901 	add.w	r9, r9, #1
   d5382:	e7e1      	b.n	d5348 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d5384:	9b01      	ldr	r3, [sp, #4]
   d5386:	3301      	adds	r3, #1
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	445e      	add	r6, fp
   d538c:	e7ce      	b.n	d532c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d538e:	6823      	ldr	r3, [r4, #0]
   d5390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5392:	4620      	mov	r0, r4
}
   d5394:	b009      	add	sp, #36	; 0x24
   d5396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d539a:	4718      	bx	r3

000d539c <_ZN12Adafruit_GFX8drawCharEsshtth>:
  uint16_t color, uint16_t bg, uint8_t size) {
   d539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d53a0:	ed2d 8b02 	vpush	{d8}
   d53a4:	b091      	sub	sp, #68	; 0x44
   d53a6:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d53a8:	69c2      	ldr	r2, [r0, #28]
  uint16_t color, uint16_t bg, uint8_t size) {
   d53aa:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
   d53ae:	f89d 4078 	ldrb.w	r4, [sp, #120]	; 0x78
   d53b2:	4698      	mov	r8, r3
   d53b4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d53b8:	9302      	str	r3, [sp, #8]
   d53ba:	4682      	mov	sl, r0
   d53bc:	460d      	mov	r5, r1
    if(!gfxFont) { // 'Classic' built-in font
   d53be:	2a00      	cmp	r2, #0
   d53c0:	f040 80b7 	bne.w	d5532 <_ZN12Adafruit_GFX8drawCharEsshtth+0x196>
        if((x >= _width)            || // Clip right
   d53c4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d53c8:	428b      	cmp	r3, r1
   d53ca:	f340 813c 	ble.w	d5646 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
   d53ce:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d53d2:	42b3      	cmp	r3, r6
   d53d4:	f340 8137 	ble.w	d5646 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
           ((x + 6 * size - 1) < 0) || // Clip left
   d53d8:	2306      	movs	r3, #6
   d53da:	fb13 1304 	smlabb	r3, r3, r4, r1
           (y >= _height)           || // Clip bottom
   d53de:	2b00      	cmp	r3, #0
   d53e0:	f340 8131 	ble.w	d5646 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
           ((y + 8 * size - 1) < 0))   // Clip top
   d53e4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size - 1) < 0) || // Clip left
   d53e8:	2b00      	cmp	r3, #0
   d53ea:	f340 812c 	ble.w	d5646 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d53ee:	7ec3      	ldrb	r3, [r0, #27]
   d53f0:	b933      	cbnz	r3, d5400 <_ZN12Adafruit_GFX8drawCharEsshtth+0x64>
   d53f2:	f1b8 0faf 	cmp.w	r8, #175	; 0xaf
   d53f6:	bf84      	itt	hi
   d53f8:	f108 0801 	addhi.w	r8, r8, #1
   d53fc:	fa5f f888 	uxtbhi.w	r8, r8
        startWrite();
   d5400:	f8da 3000 	ldr.w	r3, [sl]
   d5404:	4650      	mov	r0, sl
   d5406:	695b      	ldr	r3, [r3, #20]
   d5408:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d540a:	2305      	movs	r3, #5
   d540c:	9309      	str	r3, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d540e:	2300      	movs	r3, #0
   d5410:	9303      	str	r3, [sp, #12]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5412:	4b8f      	ldr	r3, [pc, #572]	; (d5650 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b4>)
   d5414:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   d5418:	4443      	add	r3, r8
   d541a:	930a      	str	r3, [sp, #40]	; 0x28
   d541c:	b2b3      	uxth	r3, r6
   d541e:	9307      	str	r3, [sp, #28]
   d5420:	9a03      	ldr	r2, [sp, #12]
   d5422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5424:	5c9b      	ldrb	r3, [r3, r2]
   d5426:	9306      	str	r3, [sp, #24]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d5428:	fb02 f904 	mul.w	r9, r2, r4
   d542c:	b2a3      	uxth	r3, r4
   d542e:	fa19 f985 	uxtah	r9, r9, r5
   d5432:	9305      	str	r3, [sp, #20]
   d5434:	b2ab      	uxth	r3, r5
   d5436:	9308      	str	r3, [sp, #32]
   d5438:	fa0f f389 	sxth.w	r3, r9
   d543c:	ee08 3a10 	vmov	s16, r3
   d5440:	9b07      	ldr	r3, [sp, #28]
   d5442:	9304      	str	r3, [sp, #16]
                        writePixel(x+i, y+j, bg);
   d5444:	4613      	mov	r3, r2
   d5446:	442b      	add	r3, r5
   d5448:	b21b      	sxth	r3, r3
   d544a:	ee08 3a90 	vmov	s17, r3
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d544e:	f04f 0800 	mov.w	r8, #0
   d5452:	fa0f f984 	sxth.w	r9, r4
                if(line & 1) {
   d5456:	9a06      	ldr	r2, [sp, #24]
   d5458:	f8da 3000 	ldr.w	r3, [sl]
   d545c:	07d1      	lsls	r1, r2, #31
   d545e:	d54a      	bpl.n	d54f6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x15a>
                    if(size == 1)
   d5460:	2c01      	cmp	r4, #1
   d5462:	d13a      	bne.n	d54da <_ZN12Adafruit_GFX8drawCharEsshtth+0x13e>
                        writePixel(x+i, y+j, color);
   d5464:	9a07      	ldr	r2, [sp, #28]
   d5466:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d546a:	9b02      	ldr	r3, [sp, #8]
   d546c:	4442      	add	r2, r8
                        writePixel(x+i, y+j, bg);
   d546e:	ee18 1a90 	vmov	r1, s17
   d5472:	b212      	sxth	r2, r2
   d5474:	4650      	mov	r0, sl
   d5476:	47d8      	blx	fp
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5478:	9b06      	ldr	r3, [sp, #24]
   d547a:	085b      	lsrs	r3, r3, #1
   d547c:	9306      	str	r3, [sp, #24]
   d547e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   d5482:	f108 0801 	add.w	r8, r8, #1
   d5486:	4413      	add	r3, r2
   d5488:	b29b      	uxth	r3, r3
   d548a:	f1b8 0f08 	cmp.w	r8, #8
   d548e:	9304      	str	r3, [sp, #16]
   d5490:	d1e1      	bne.n	d5456 <_ZN12Adafruit_GFX8drawCharEsshtth+0xba>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5492:	9b03      	ldr	r3, [sp, #12]
   d5494:	3301      	adds	r3, #1
   d5496:	b25b      	sxtb	r3, r3
   d5498:	9303      	str	r3, [sp, #12]
   d549a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d549c:	3b01      	subs	r3, #1
   d549e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d54a2:	9309      	str	r3, [sp, #36]	; 0x24
   d54a4:	d1bc      	bne.n	d5420 <_ZN12Adafruit_GFX8drawCharEsshtth+0x84>
        if(bg != color) { // If opaque, draw vertical line for last column
   d54a6:	9b02      	ldr	r3, [sp, #8]
   d54a8:	42bb      	cmp	r3, r7
   d54aa:	d00c      	beq.n	d54c6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12a>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
   d54ac:	2c01      	cmp	r4, #1
   d54ae:	f8da 2000 	ldr.w	r2, [sl]
   d54b2:	d12d      	bne.n	d5510 <_ZN12Adafruit_GFX8drawCharEsshtth+0x174>
   d54b4:	9908      	ldr	r1, [sp, #32]
   d54b6:	9700      	str	r7, [sp, #0]
   d54b8:	3105      	adds	r1, #5
   d54ba:	6a14      	ldr	r4, [r2, #32]
   d54bc:	4643      	mov	r3, r8
   d54be:	4632      	mov	r2, r6
   d54c0:	b209      	sxth	r1, r1
   d54c2:	4650      	mov	r0, sl
   d54c4:	47a0      	blx	r4
        endWrite();
   d54c6:	f8da 3000 	ldr.w	r3, [sl]
   d54ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54cc:	4650      	mov	r0, sl
}
   d54ce:	b011      	add	sp, #68	; 0x44
   d54d0:	ecbd 8b02 	vpop	{d8}
   d54d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d54d8:	4718      	bx	r3
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d54da:	9a02      	ldr	r2, [sp, #8]
   d54dc:	9201      	str	r2, [sp, #4]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d54de:	f8cd 9000 	str.w	r9, [sp]
   d54e2:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d54e6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d54ea:	ee18 1a10 	vmov	r1, s16
   d54ee:	464b      	mov	r3, r9
   d54f0:	4650      	mov	r0, sl
   d54f2:	47d8      	blx	fp
   d54f4:	e7c0      	b.n	d5478 <_ZN12Adafruit_GFX8drawCharEsshtth+0xdc>
                } else if(bg != color) {
   d54f6:	9a02      	ldr	r2, [sp, #8]
   d54f8:	42ba      	cmp	r2, r7
   d54fa:	d0bd      	beq.n	d5478 <_ZN12Adafruit_GFX8drawCharEsshtth+0xdc>
                    if(size == 1)
   d54fc:	2c01      	cmp	r4, #1
   d54fe:	d105      	bne.n	d550c <_ZN12Adafruit_GFX8drawCharEsshtth+0x170>
                        writePixel(x+i, y+j, bg);
   d5500:	9a07      	ldr	r2, [sp, #28]
   d5502:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d5506:	4442      	add	r2, r8
   d5508:	463b      	mov	r3, r7
   d550a:	e7b0      	b.n	d546e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd2>
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d550c:	9701      	str	r7, [sp, #4]
   d550e:	e7e6      	b.n	d54de <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
   d5510:	9b05      	ldr	r3, [sp, #20]
   d5512:	9701      	str	r7, [sp, #4]
   d5514:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   d5518:	9b08      	ldr	r3, [sp, #32]
   d551a:	440b      	add	r3, r1
   d551c:	4619      	mov	r1, r3
   d551e:	9b05      	ldr	r3, [sp, #20]
   d5520:	00db      	lsls	r3, r3, #3
   d5522:	9300      	str	r3, [sp, #0]
   d5524:	69d5      	ldr	r5, [r2, #28]
   d5526:	4623      	mov	r3, r4
   d5528:	4632      	mov	r2, r6
   d552a:	b209      	sxth	r1, r1
   d552c:	4650      	mov	r0, sl
   d552e:	47a8      	blx	r5
        endWrite();
   d5530:	e7c9      	b.n	d54c6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12a>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5532:	7a13      	ldrb	r3, [r2, #8]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d5534:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
   d5536:	6812      	ldr	r2, [r2, #0]
   d5538:	9209      	str	r2, [sp, #36]	; 0x24
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d553a:	eba8 0803 	sub.w	r8, r8, r3
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d553e:	fa5f f888 	uxtb.w	r8, r8
   d5542:	eb01 03c8 	add.w	r3, r1, r8, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d5546:	f831 b038 	ldrh.w	fp, [r1, r8, lsl #3]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d554a:	789a      	ldrb	r2, [r3, #2]
                 yo = pgm_read_byte(&glyph->yOffset);
   d554c:	f993 8006 	ldrsb.w	r8, [r3, #6]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d5550:	920a      	str	r2, [sp, #40]	; 0x28
        if(size > 1) {
   d5552:	2c01      	cmp	r4, #1
                 h  = pgm_read_byte(&glyph->height);
   d5554:	78da      	ldrb	r2, [r3, #3]
   d5556:	920b      	str	r2, [sp, #44]	; 0x2c
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5558:	f993 2005 	ldrsb.w	r2, [r3, #5]
   d555c:	9206      	str	r2, [sp, #24]
        int16_t  xo16 = 0, yo16 = 0;
   d555e:	bf95      	itete	ls
   d5560:	2300      	movls	r3, #0
            yo16 = yo;
   d5562:	fa0f f388 	sxthhi.w	r3, r8
        int16_t  xo16 = 0, yo16 = 0;
   d5566:	461f      	movls	r7, r3
            yo16 = yo;
   d5568:	9303      	strhi	r3, [sp, #12]
        int16_t  xo16 = 0, yo16 = 0;
   d556a:	bf98      	it	ls
   d556c:	9303      	strls	r3, [sp, #12]
        startWrite();
   d556e:	6803      	ldr	r3, [r0, #0]
            xo16 = xo;
   d5570:	bf88      	it	hi
   d5572:	f9bd 7018 	ldrshhi.w	r7, [sp, #24]
        startWrite();
   d5576:	695b      	ldr	r3, [r3, #20]
   d5578:	4798      	blx	r3
        for(yy=0; yy<h; yy++) {
   d557a:	4367      	muls	r7, r4
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d557c:	b2a3      	uxth	r3, r4
   d557e:	9305      	str	r3, [sp, #20]
   d5580:	b2ab      	uxth	r3, r5
   d5582:	fa17 f585 	uxtah	r5, r7, r5
   d5586:	b2b2      	uxth	r2, r6
   d5588:	9308      	str	r3, [sp, #32]
   d558a:	b2ab      	uxth	r3, r5
   d558c:	930d      	str	r3, [sp, #52]	; 0x34
   d558e:	920e      	str	r2, [sp, #56]	; 0x38
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5590:	2300      	movs	r3, #0
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5592:	fa18 f286 	uxtah	r2, r8, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5596:	461f      	mov	r7, r3
        for(yy=0; yy<h; yy++) {
   d5598:	461d      	mov	r5, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d559a:	920f      	str	r2, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d559c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d559e:	4295      	cmp	r5, r2
   d55a0:	d291      	bcs.n	d54c6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12a>
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d55a2:	9a03      	ldr	r2, [sp, #12]
   d55a4:	9905      	ldr	r1, [sp, #20]
   d55a6:	980e      	ldr	r0, [sp, #56]	; 0x38
   d55a8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   d55ac:	442a      	add	r2, r5
   d55ae:	fb02 0201 	mla	r2, r2, r1, r0
   d55b2:	b212      	sxth	r2, r2
   d55b4:	ee08 2a10 	vmov	s16, r2
   d55b8:	9906      	ldr	r1, [sp, #24]
   d55ba:	9a08      	ldr	r2, [sp, #32]
   d55bc:	1856      	adds	r6, r2, r1
   d55be:	b2b2      	uxth	r2, r6
   d55c0:	9204      	str	r2, [sp, #16]
   d55c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d55c4:	189a      	adds	r2, r3, r2
   d55c6:	b2d2      	uxtb	r2, r2
   d55c8:	9207      	str	r2, [sp, #28]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d55ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d55cc:	eb02 0905 	add.w	r9, r2, r5
   d55d0:	fa0f f989 	sxth.w	r9, r9
            for(xx=0; xx<w; xx++) {
   d55d4:	9a07      	ldr	r2, [sp, #28]
   d55d6:	429a      	cmp	r2, r3
   d55d8:	d032      	beq.n	d5640 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2a4>
                if(!(bit++ & 7)) {
   d55da:	1c5a      	adds	r2, r3, #1
   d55dc:	b2d2      	uxtb	r2, r2
   d55de:	920c      	str	r2, [sp, #48]	; 0x30
   d55e0:	075a      	lsls	r2, r3, #29
                    bits = pgm_read_byte(&bitmap[bo++]);
   d55e2:	bf01      	itttt	eq
   d55e4:	9a09      	ldreq	r2, [sp, #36]	; 0x24
   d55e6:	f812 700b 	ldrbeq.w	r7, [r2, fp]
   d55ea:	f10b 0301 	addeq.w	r3, fp, #1
   d55ee:	fa1f fb83 	uxtheq.w	fp, r3
                if(bits & 0x80) {
   d55f2:	063b      	lsls	r3, r7, #24
   d55f4:	d50b      	bpl.n	d560e <_ZN12Adafruit_GFX8drawCharEsshtth+0x272>
                    if(size == 1) {
   d55f6:	2c01      	cmp	r4, #1
   d55f8:	f8da 2000 	ldr.w	r2, [sl]
   d55fc:	d113      	bne.n	d5626 <_ZN12Adafruit_GFX8drawCharEsshtth+0x28a>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d55fe:	6993      	ldr	r3, [r2, #24]
   d5600:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
   d5604:	461e      	mov	r6, r3
   d5606:	464a      	mov	r2, r9
   d5608:	9b02      	ldr	r3, [sp, #8]
   d560a:	4650      	mov	r0, sl
   d560c:	47b0      	blx	r6
                bits <<= 1;
   d560e:	9e04      	ldr	r6, [sp, #16]
   d5610:	3601      	adds	r6, #1
   d5612:	b2b3      	uxth	r3, r6
   d5614:	9304      	str	r3, [sp, #16]
   d5616:	9b05      	ldr	r3, [sp, #20]
   d5618:	007f      	lsls	r7, r7, #1
   d561a:	4498      	add	r8, r3
   d561c:	b2ff      	uxtb	r7, r7
                if(!(bit++ & 7)) {
   d561e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d5620:	fa1f f888 	uxth.w	r8, r8
            for(xx=0; xx<w; xx++) {
   d5624:	e7d6      	b.n	d55d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x238>
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d5626:	9902      	ldr	r1, [sp, #8]
   d5628:	b223      	sxth	r3, r4
   d562a:	e9cd 3100 	strd	r3, r1, [sp]
   d562e:	69d2      	ldr	r2, [r2, #28]
   d5630:	fa0f f188 	sxth.w	r1, r8
   d5634:	4616      	mov	r6, r2
   d5636:	4650      	mov	r0, sl
   d5638:	ee18 2a10 	vmov	r2, s16
   d563c:	47b0      	blx	r6
   d563e:	e7e6      	b.n	d560e <_ZN12Adafruit_GFX8drawCharEsshtth+0x272>
        for(yy=0; yy<h; yy++) {
   d5640:	3501      	adds	r5, #1
   d5642:	b2ed      	uxtb	r5, r5
   d5644:	e7aa      	b.n	d559c <_ZN12Adafruit_GFX8drawCharEsshtth+0x200>
}
   d5646:	b011      	add	sp, #68	; 0x44
   d5648:	ecbd 8b02 	vpop	{d8}
   d564c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5650:	000db6f3 	.word	0x000db6f3

000d5654 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5654:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d5656:	69c2      	ldr	r2, [r0, #28]
size_t Adafruit_GFX::write(uint8_t c) {
   d5658:	4604      	mov	r4, r0
   d565a:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d565c:	2a00      	cmp	r2, #0
   d565e:	d132      	bne.n	d56c6 <_ZN12Adafruit_GFX5writeEh+0x72>
        if(c == '\n') {                        // Newline?
   d5660:	290a      	cmp	r1, #10
   d5662:	d108      	bne.n	d5676 <_ZN12Adafruit_GFX5writeEh+0x22>
            cursor_y += textsize * 8;          // advance y one line
   d5664:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d5666:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize * 8;          // advance y one line
   d5668:	7e02      	ldrb	r2, [r0, #24]
   d566a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize *
   d566e:	8263      	strh	r3, [r4, #18]
}
   d5670:	2001      	movs	r0, #1
   d5672:	b004      	add	sp, #16
   d5674:	bd70      	pop	{r4, r5, r6, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d5676:	290d      	cmp	r1, #13
   d5678:	d0fa      	beq.n	d5670 <_ZN12Adafruit_GFX5writeEh+0x1c>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
   d567a:	7e01      	ldrb	r1, [r0, #24]
   d567c:	7e80      	ldrb	r0, [r0, #26]
   d567e:	b170      	cbz	r0, d569e <_ZN12Adafruit_GFX5writeEh+0x4a>
   d5680:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
   d5684:	2006      	movs	r0, #6
   d5686:	fb10 5001 	smlabb	r0, r0, r1, r5
   d568a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   d568e:	42a8      	cmp	r0, r5
   d5690:	bfc1      	itttt	gt
   d5692:	f9b4 0012 	ldrshgt.w	r0, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d5696:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize * 8;      // advance y one line
   d5698:	eb00 02c1 	addgt.w	r2, r0, r1, lsl #3
   d569c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d569e:	8ae2      	ldrh	r2, [r4, #22]
   d56a0:	9201      	str	r2, [sp, #4]
   d56a2:	8aa2      	ldrh	r2, [r4, #20]
   d56a4:	9102      	str	r1, [sp, #8]
   d56a6:	9200      	str	r2, [sp, #0]
   d56a8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d56ac:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d56b0:	4620      	mov	r0, r4
   d56b2:	f7ff fe73 	bl	d539c <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
   d56b6:	7e23      	ldrb	r3, [r4, #24]
   d56b8:	8a22      	ldrh	r2, [r4, #16]
   d56ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d56be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
   d56c2:	8223      	strh	r3, [r4, #16]
   d56c4:	e7d4      	b.n	d5670 <_ZN12Adafruit_GFX5writeEh+0x1c>
        if(c == '\n') {
   d56c6:	290a      	cmp	r1, #10
   d56c8:	d107      	bne.n	d56da <_ZN12Adafruit_GFX5writeEh+0x86>
            cursor_x  = 0;
   d56ca:	2300      	movs	r3, #0
   d56cc:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d56ce:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize *
   d56d0:	7e01      	ldrb	r1, [r0, #24]
   d56d2:	8a42      	ldrh	r2, [r0, #18]
   d56d4:	fb01 2303 	mla	r3, r1, r3, r2
   d56d8:	e7c9      	b.n	d566e <_ZN12Adafruit_GFX5writeEh+0x1a>
        } else if(c != '\r') {
   d56da:	290d      	cmp	r1, #13
   d56dc:	d0c8      	beq.n	d5670 <_ZN12Adafruit_GFX5writeEh+0x1c>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d56de:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d56e0:	42a9      	cmp	r1, r5
   d56e2:	d3c5      	bcc.n	d5670 <_ZN12Adafruit_GFX5writeEh+0x1c>
   d56e4:	7a51      	ldrb	r1, [r2, #9]
   d56e6:	4299      	cmp	r1, r3
   d56e8:	d3c2      	bcc.n	d5670 <_ZN12Adafruit_GFX5writeEh+0x1c>
                  &gfxFont->glyph))[c - first]);
   d56ea:	6851      	ldr	r1, [r2, #4]
   d56ec:	1b5d      	subs	r5, r3, r5
   d56ee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d56f2:	78ae      	ldrb	r6, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d56f4:	b31e      	cbz	r6, d573e <_ZN12Adafruit_GFX5writeEh+0xea>
   d56f6:	78e9      	ldrb	r1, [r5, #3]
   d56f8:	b309      	cbz	r1, d573e <_ZN12Adafruit_GFX5writeEh+0xea>
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
   d56fa:	7ea1      	ldrb	r1, [r4, #26]
   d56fc:	7e00      	ldrb	r0, [r0, #24]
   d56fe:	b191      	cbz	r1, d5726 <_ZN12Adafruit_GFX5writeEh+0xd2>
   d5700:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d5704:	4431      	add	r1, r6
   d5706:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d570a:	fb00 6101 	mla	r1, r0, r1, r6
   d570e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d5712:	42b1      	cmp	r1, r6
   d5714:	dd07      	ble.n	d5726 <_ZN12Adafruit_GFX5writeEh+0xd2>
                        cursor_x  = 0;
   d5716:	2600      	movs	r6, #0
   d5718:	8226      	strh	r6, [r4, #16]
   d571a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d571e:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize *
   d5720:	fb02 1200 	mla	r2, r2, r0, r1
   d5724:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5726:	8ae2      	ldrh	r2, [r4, #22]
   d5728:	9201      	str	r2, [sp, #4]
   d572a:	8aa2      	ldrh	r2, [r4, #20]
   d572c:	9002      	str	r0, [sp, #8]
   d572e:	9200      	str	r2, [sp, #0]
   d5730:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5734:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5738:	4620      	mov	r0, r4
   d573a:	f7ff fe2f 	bl	d539c <_ZN12Adafruit_GFX8drawCharEsshtth>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
   d573e:	7929      	ldrb	r1, [r5, #4]
   d5740:	7e23      	ldrb	r3, [r4, #24]
   d5742:	8a22      	ldrh	r2, [r4, #16]
   d5744:	fb01 2303 	mla	r3, r1, r3, r2
   d5748:	e7bb      	b.n	d56c2 <_ZN12Adafruit_GFX5writeEh+0x6e>

000d574a <_ZN12Adafruit_GFX9setCursorEss>:
    cursor_x = x;
   d574a:	8201      	strh	r1, [r0, #16]
    cursor_y = y;
   d574c:	8242      	strh	r2, [r0, #18]
}
   d574e:	4770      	bx	lr

000d5750 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize = (s > 0) ? s : 1;
   d5750:	2901      	cmp	r1, #1
   d5752:	bf38      	it	cc
   d5754:	2101      	movcc	r1, #1
   d5756:	7601      	strb	r1, [r0, #24]
}
   d5758:	4770      	bx	lr

000d575a <_ZN12Adafruit_GFX12setTextColorEt>:
    textcolor = textbgcolor = c;
   d575a:	82c1      	strh	r1, [r0, #22]
   d575c:	8281      	strh	r1, [r0, #20]
}
   d575e:	4770      	bx	lr

000d5760 <_ZN12Adafruit_GFX11setTextWrapEb>:
    wrap = w;
   d5760:	7681      	strb	r1, [r0, #26]
}
   d5762:	4770      	bx	lr

000d5764 <_ZNK12Adafruit_GFX11getRotationEv>:
}
   d5764:	7e40      	ldrb	r0, [r0, #25]
   d5766:	4770      	bx	lr

000d5768 <_ZNK12Adafruit_GFX5widthEv>:
}
   d5768:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d576c:	4770      	bx	lr

000d576e <_ZNK12Adafruit_GFX6heightEv>:
}
   d576e:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5772:	4770      	bx	lr

000d5774 <_ZL9date2daysthh>:
    @param m Month
    @param d Day
    @return Number of days
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   d5774:	b530      	push	{r4, r5, lr}
   d5776:	4c0f      	ldr	r4, [pc, #60]	; (d57b4 <_ZL9date2daysthh+0x40>)
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
   d5778:	2300      	movs	r3, #0
  for (uint8_t i = 1; i < m; ++i)
   d577a:	3301      	adds	r3, #1
   d577c:	b2dd      	uxtb	r5, r3
   d577e:	42a9      	cmp	r1, r5
   d5780:	d904      	bls.n	d578c <_ZL9date2daysthh+0x18>
    days += pgm_read_byte(daysInMonth + i - 1);
   d5782:	f814 5b01 	ldrb.w	r5, [r4], #1
   d5786:	442a      	add	r2, r5
   d5788:	b292      	uxth	r2, r2
  for (uint8_t i = 1; i < m; ++i)
   d578a:	e7f6      	b.n	d577a <_ZL9date2daysthh+0x6>
  if (m > 2 && y % 4 == 0)
   d578c:	2902      	cmp	r1, #2
   d578e:	d903      	bls.n	d5798 <_ZL9date2daysthh+0x24>
   d5790:	0783      	lsls	r3, r0, #30
    ++days;
   d5792:	bf04      	itt	eq
   d5794:	3201      	addeq	r2, #1
   d5796:	b292      	uxtheq	r2, r2
  return days + 365 * y + (y + 3) / 4 - 1;
   d5798:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
   d579c:	1cc3      	adds	r3, r0, #3
   d579e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   d57a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d57a6:	3801      	subs	r0, #1
   d57a8:	eb00 0093 	add.w	r0, r0, r3, lsr #2
   d57ac:	4410      	add	r0, r2
}
   d57ae:	b280      	uxth	r0, r0
   d57b0:	bd30      	pop	{r4, r5, pc}
   d57b2:	bf00      	nop
   d57b4:	000dbc4c 	.word	0x000dbc4c

000d57b8 <_ZL17read_i2c_registerhh>:
static uint8_t read_i2c_register(uint8_t addr, uint8_t reg) {
   d57b8:	b538      	push	{r3, r4, r5, lr}
   d57ba:	4604      	mov	r4, r0
   d57bc:	460d      	mov	r5, r1
  Wire.beginTransmission(addr);
   d57be:	f004 fe5d 	bl	da47c <_Z19__fetch_global_Wirev>
   d57c2:	4621      	mov	r1, r4
   d57c4:	f004 fcc2 	bl	da14c <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
   d57c8:	f004 fe58 	bl	da47c <_Z19__fetch_global_Wirev>
   d57cc:	6803      	ldr	r3, [r0, #0]
   d57ce:	4629      	mov	r1, r5
   d57d0:	689b      	ldr	r3, [r3, #8]
   d57d2:	4798      	blx	r3
  Wire.endTransmission();
   d57d4:	f004 fe52 	bl	da47c <_Z19__fetch_global_Wirev>
   d57d8:	f004 fcc3 	bl	da162 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(addr, (byte)1);
   d57dc:	f004 fe4e 	bl	da47c <_Z19__fetch_global_Wirev>
   d57e0:	2201      	movs	r2, #1
   d57e2:	4621      	mov	r1, r4
   d57e4:	f004 fcaf 	bl	da146 <_ZN7TwoWire11requestFromEhj>
  return Wire._I2C_READ();
   d57e8:	f004 fe48 	bl	da47c <_Z19__fetch_global_Wirev>
   d57ec:	6803      	ldr	r3, [r0, #0]
   d57ee:	695b      	ldr	r3, [r3, #20]
   d57f0:	4798      	blx	r3
}
   d57f2:	b2c0      	uxtb	r0, r0
   d57f4:	bd38      	pop	{r3, r4, r5, pc}

000d57f6 <_ZL18write_i2c_registerhhh>:
static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
   d57f6:	b570      	push	{r4, r5, r6, lr}
   d57f8:	4606      	mov	r6, r0
   d57fa:	4614      	mov	r4, r2
   d57fc:	460d      	mov	r5, r1
  Wire.beginTransmission(addr);
   d57fe:	f004 fe3d 	bl	da47c <_Z19__fetch_global_Wirev>
   d5802:	4631      	mov	r1, r6
   d5804:	f004 fca2 	bl	da14c <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
   d5808:	f004 fe38 	bl	da47c <_Z19__fetch_global_Wirev>
   d580c:	6803      	ldr	r3, [r0, #0]
   d580e:	4629      	mov	r1, r5
   d5810:	689b      	ldr	r3, [r3, #8]
   d5812:	4798      	blx	r3
  Wire._I2C_WRITE((byte)val);
   d5814:	f004 fe32 	bl	da47c <_Z19__fetch_global_Wirev>
   d5818:	6803      	ldr	r3, [r0, #0]
   d581a:	4621      	mov	r1, r4
   d581c:	689b      	ldr	r3, [r3, #8]
   d581e:	4798      	blx	r3
  Wire.endTransmission();
   d5820:	f004 fe2c 	bl	da47c <_Z19__fetch_global_Wirev>
}
   d5824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   d5828:	f004 bc9b 	b.w	da162 <_ZN7TwoWire15endTransmissionEv>

000d582c <_ZN8DateTimeC1Ethhhhh>:
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
   d582c:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
    year -= 2000U;
  yOff = year;
  m = month;
  d = day;
   d5830:	7083      	strb	r3, [r0, #2]
  hh = hour;
   d5832:	f89d 3000 	ldrb.w	r3, [sp]
   d5836:	70c3      	strb	r3, [r0, #3]
    year -= 2000U;
   d5838:	bf28      	it	cs
   d583a:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
  mm = min;
   d583e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5842:	7103      	strb	r3, [r0, #4]
    year -= 2000U;
   d5844:	bf28      	it	cs
   d5846:	b289      	uxthcs	r1, r1
  ss = sec;
   d5848:	f89d 3008 	ldrb.w	r3, [sp, #8]
  yOff = year;
   d584c:	7001      	strb	r1, [r0, #0]
  m = month;
   d584e:	7042      	strb	r2, [r0, #1]
  ss = sec;
   d5850:	7143      	strb	r3, [r0, #5]
}
   d5852:	4770      	bx	lr

000d5854 <_ZNK8DateTime12dayOfTheWeekEv>:
/*!
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
   d5854:	b508      	push	{r3, lr}
  uint16_t day = date2days(yOff, m, d);
   d5856:	7882      	ldrb	r2, [r0, #2]
   d5858:	7841      	ldrb	r1, [r0, #1]
   d585a:	7800      	ldrb	r0, [r0, #0]
   d585c:	f7ff ff8a 	bl	d5774 <_ZL9date2daysthh>
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
   d5860:	2307      	movs	r3, #7
   d5862:	3006      	adds	r0, #6
   d5864:	fbb0 f3f3 	udiv	r3, r0, r3
   d5868:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d586c:	1ac0      	subs	r0, r0, r3
}
   d586e:	b2c0      	uxtb	r0, r0
   d5870:	bd08      	pop	{r3, pc}

000d5872 <_ZN10RTC_DS13073nowEv>:
/*!
    @brief  Get the current date and time from the DS1307
    @return DateTime object containing the current date and time
*/
/**************************************************************************/
DateTime RTC_DS1307::now() {
   d5872:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5876:	4604      	mov	r4, r0
  Wire.beginTransmission(DS1307_ADDRESS);
   d5878:	f004 fe00 	bl	da47c <_Z19__fetch_global_Wirev>
   d587c:	2168      	movs	r1, #104	; 0x68
   d587e:	f004 fc69 	bl	da154 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0);
   d5882:	f004 fdfb 	bl	da47c <_Z19__fetch_global_Wirev>
   d5886:	6803      	ldr	r3, [r0, #0]
   d5888:	2100      	movs	r1, #0
   d588a:	689b      	ldr	r3, [r3, #8]
   d588c:	4798      	blx	r3
  Wire.endTransmission();
   d588e:	f004 fdf5 	bl	da47c <_Z19__fetch_global_Wirev>
   d5892:	f004 fc66 	bl	da162 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(DS1307_ADDRESS, 7);
   d5896:	f004 fdf1 	bl	da47c <_Z19__fetch_global_Wirev>
   d589a:	2207      	movs	r2, #7
   d589c:	2168      	movs	r1, #104	; 0x68
   d589e:	f004 fc52 	bl	da146 <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   d58a2:	f004 fdeb 	bl	da47c <_Z19__fetch_global_Wirev>
   d58a6:	6803      	ldr	r3, [r0, #0]
   d58a8:	695b      	ldr	r3, [r3, #20]
   d58aa:	4798      	blx	r3
   d58ac:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   d58b0:	f3c0 1002 	ubfx	r0, r0, #4, #3
   d58b4:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   d58b8:	eb09 0040 	add.w	r0, r9, r0, lsl #1
   d58bc:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   d58c0:	f004 fddc 	bl	da47c <_Z19__fetch_global_Wirev>
   d58c4:	6803      	ldr	r3, [r0, #0]
   d58c6:	695b      	ldr	r3, [r3, #20]
   d58c8:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   d58ca:	f3c0 1503 	ubfx	r5, r0, #4, #4
   d58ce:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   d58d2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   d58d6:	b2c5      	uxtb	r5, r0
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   d58d8:	f004 fdd0 	bl	da47c <_Z19__fetch_global_Wirev>
   d58dc:	6803      	ldr	r3, [r0, #0]
   d58de:	695b      	ldr	r3, [r3, #20]
   d58e0:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   d58e2:	f3c0 1603 	ubfx	r6, r0, #4, #4
   d58e6:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   d58ea:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   d58ee:	b2c6      	uxtb	r6, r0
  Wire._I2C_READ();
   d58f0:	f004 fdc4 	bl	da47c <_Z19__fetch_global_Wirev>
   d58f4:	6803      	ldr	r3, [r0, #0]
   d58f6:	695b      	ldr	r3, [r3, #20]
   d58f8:	4798      	blx	r3
  uint8_t d = bcd2bin(Wire._I2C_READ());
   d58fa:	f004 fdbf 	bl	da47c <_Z19__fetch_global_Wirev>
   d58fe:	6803      	ldr	r3, [r0, #0]
   d5900:	695b      	ldr	r3, [r3, #20]
   d5902:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   d5904:	f3c0 1703 	ubfx	r7, r0, #4, #4
   d5908:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   d590c:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   d5910:	b2c7      	uxtb	r7, r0
  uint8_t m = bcd2bin(Wire._I2C_READ());
   d5912:	f004 fdb3 	bl	da47c <_Z19__fetch_global_Wirev>
   d5916:	6803      	ldr	r3, [r0, #0]
   d5918:	695b      	ldr	r3, [r3, #20]
   d591a:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   d591c:	f3c0 1803 	ubfx	r8, r0, #4, #4
   d5920:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   d5924:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   d5928:	fa5f f880 	uxtb.w	r8, r0
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000U;
   d592c:	f004 fda6 	bl	da47c <_Z19__fetch_global_Wirev>
   d5930:	6803      	ldr	r3, [r0, #0]
   d5932:	695b      	ldr	r3, [r3, #20]
   d5934:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   d5936:	f3c0 1303 	ubfx	r3, r0, #4, #4
   d593a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d593e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  yOff = year;
   d5942:	7020      	strb	r0, [r4, #0]
  m = month;
   d5944:	f884 8001 	strb.w	r8, [r4, #1]
  d = day;
   d5948:	70a7      	strb	r7, [r4, #2]
  hh = hour;
   d594a:	70e6      	strb	r6, [r4, #3]
  mm = min;
   d594c:	7125      	strb	r5, [r4, #4]
  ss = sec;
   d594e:	f884 9005 	strb.w	r9, [r4, #5]

  return DateTime(y, m, d, hh, mm, ss);
}
   d5952:	4620      	mov	r0, r4
   d5954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5958 <_ZN10RTC_DS32316adjustERK8DateTime>:
/*!
    @brief  Set the date and flip the Oscillator Stop Flag
    @param dt DateTime object containing the date/time to set
*/
/**************************************************************************/
void RTC_DS3231::adjust(const DateTime &dt) {
   d5958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d595a:	4605      	mov	r5, r0
  Wire.beginTransmission(DS3231_ADDRESS);
   d595c:	f004 fd8e 	bl	da47c <_Z19__fetch_global_Wirev>
   d5960:	2168      	movs	r1, #104	; 0x68
   d5962:	f004 fbf7 	bl	da154 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)DS3231_TIME); // start at location 0
   d5966:	f004 fd89 	bl	da47c <_Z19__fetch_global_Wirev>
   d596a:	6803      	ldr	r3, [r0, #0]
   d596c:	2100      	movs	r1, #0
   d596e:	689b      	ldr	r3, [r3, #8]
   d5970:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   d5972:	f004 fd83 	bl	da47c <_Z19__fetch_global_Wirev>
   d5976:	7969      	ldrb	r1, [r5, #5]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   d5978:	240a      	movs	r4, #10
   d597a:	fbb1 f3f4 	udiv	r3, r1, r4
   d597e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5982:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   d5986:	6803      	ldr	r3, [r0, #0]
   d5988:	b2c9      	uxtb	r1, r1
   d598a:	689b      	ldr	r3, [r3, #8]
   d598c:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   d598e:	f004 fd75 	bl	da47c <_Z19__fetch_global_Wirev>
   d5992:	7929      	ldrb	r1, [r5, #4]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   d5994:	fbb1 f3f4 	udiv	r3, r1, r4
   d5998:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d599c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   d59a0:	6803      	ldr	r3, [r0, #0]
   d59a2:	b2c9      	uxtb	r1, r1
   d59a4:	689b      	ldr	r3, [r3, #8]
   d59a6:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   d59a8:	f004 fd68 	bl	da47c <_Z19__fetch_global_Wirev>
   d59ac:	78e9      	ldrb	r1, [r5, #3]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   d59ae:	fbb1 f3f4 	udiv	r3, r1, r4
   d59b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d59b6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   d59ba:	6803      	ldr	r3, [r0, #0]
   d59bc:	b2c9      	uxtb	r1, r1
   d59be:	689b      	ldr	r3, [r3, #8]
   d59c0:	4798      	blx	r3
  // The RTC must know the day of the week for the weekly alarms to work.
  Wire._I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())));
   d59c2:	f004 fd5b 	bl	da47c <_Z19__fetch_global_Wirev>
   d59c6:	6803      	ldr	r3, [r0, #0]
   d59c8:	4606      	mov	r6, r0
   d59ca:	4628      	mov	r0, r5
   d59cc:	689f      	ldr	r7, [r3, #8]
   d59ce:	f7ff ff41 	bl	d5854 <_ZNK8DateTime12dayOfTheWeekEv>
static uint8_t dowToDS3231(uint8_t d) { return d == 0 ? 7 : d; }
   d59d2:	1e01      	subs	r1, r0, #0
   d59d4:	bf08      	it	eq
   d59d6:	2107      	moveq	r1, #7
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   d59d8:	fbb1 f0f4 	udiv	r0, r1, r4
   d59dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   d59e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  Wire._I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())));
   d59e4:	b2c9      	uxtb	r1, r1
   d59e6:	4630      	mov	r0, r6
   d59e8:	47b8      	blx	r7
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   d59ea:	f004 fd47 	bl	da47c <_Z19__fetch_global_Wirev>
   d59ee:	78a9      	ldrb	r1, [r5, #2]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   d59f0:	fbb1 f3f4 	udiv	r3, r1, r4
   d59f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d59f8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   d59fc:	6803      	ldr	r3, [r0, #0]
   d59fe:	b2c9      	uxtb	r1, r1
   d5a00:	689b      	ldr	r3, [r3, #8]
   d5a02:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   d5a04:	f004 fd3a 	bl	da47c <_Z19__fetch_global_Wirev>
   d5a08:	7869      	ldrb	r1, [r5, #1]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   d5a0a:	fbb1 f3f4 	udiv	r3, r1, r4
   d5a0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5a12:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   d5a16:	6803      	ldr	r3, [r0, #0]
   d5a18:	b2c9      	uxtb	r1, r1
   d5a1a:	689b      	ldr	r3, [r3, #8]
   d5a1c:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000U));
   d5a1e:	f004 fd2d 	bl	da47c <_Z19__fetch_global_Wirev>
   d5a22:	7829      	ldrb	r1, [r5, #0]
   d5a24:	6803      	ldr	r3, [r0, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   d5a26:	fbb1 f4f4 	udiv	r4, r1, r4
   d5a2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   d5a2e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000U));
   d5a32:	689b      	ldr	r3, [r3, #8]
   d5a34:	b2c9      	uxtb	r1, r1
   d5a36:	4798      	blx	r3
  Wire.endTransmission();
   d5a38:	f004 fd20 	bl	da47c <_Z19__fetch_global_Wirev>
   d5a3c:	f004 fb91 	bl	da162 <_ZN7TwoWire15endTransmissionEv>

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
   d5a40:	210f      	movs	r1, #15
   d5a42:	2068      	movs	r0, #104	; 0x68
   d5a44:	f7ff feb8 	bl	d57b8 <_ZL17read_i2c_registerhh>
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
   d5a48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
   d5a4c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d5a50:	210f      	movs	r1, #15
   d5a52:	2068      	movs	r0, #104	; 0x68
   d5a54:	f7ff becf 	b.w	d57f6 <_ZL18write_i2c_registerhhh>

000d5a58 <_ZN10RTC_DS32313nowEv>:
   d5a58:	b510      	push	{r4, lr}
   d5a5a:	4604      	mov	r4, r0
   d5a5c:	f7ff ff09 	bl	d5872 <_ZN10RTC_DS13073nowEv>
   d5a60:	4620      	mov	r0, r4
   d5a62:	bd10      	pop	{r4, pc}

000d5a64 <_ZN15Adafruit_BME280C1Ev>:

/***************************************************************************
 PRIVATE FUNCTIONS
 ***************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d5a64:	f04f 33ff 	mov.w	r3, #4294967295
   d5a68:	60c3      	str	r3, [r0, #12]
{ }
   d5a6a:	4770      	bx	lr

000d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   d5a6c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5a6e:	4c0b      	ldr	r4, [pc, #44]	; (d5a9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5a70:	7821      	ldrb	r1, [r4, #0]
   d5a72:	f3bf 8f5b 	dmb	ish
   d5a76:	f011 0101 	ands.w	r1, r1, #1
   d5a7a:	d10b      	bne.n	d5a94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	9101      	str	r1, [sp, #4]
   d5a80:	f7fe fb18 	bl	d40b4 <__cxa_guard_acquire>
   d5a84:	9901      	ldr	r1, [sp, #4]
   d5a86:	b128      	cbz	r0, d5a94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5a88:	4805      	ldr	r0, [pc, #20]	; (d5aa0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5a8a:	f002 fb09 	bl	d80a0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5a8e:	4620      	mov	r0, r4
   d5a90:	f7fe fb15 	bl	d40be <__cxa_guard_release>
        return instance;
    }
   d5a94:	4802      	ldr	r0, [pc, #8]	; (d5aa0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5a96:	b002      	add	sp, #8
   d5a98:	bd10      	pop	{r4, pc}
   d5a9a:	bf00      	nop
   d5a9c:	2003de4c 	.word	0x2003de4c
   d5aa0:	2003de50 	.word	0x2003de50

000d5aa4 <_ZN15Adafruit_BME2807spixferEh>:
/**************************************************************************/
/*!
    @brief  Encapsulate hardware and software SPI transfer into one function
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d5aa8:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d5aac:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5aae:	4605      	mov	r5, r0
   d5ab0:	460f      	mov	r7, r1
    if (_sck == -1)
   d5ab2:	d106      	bne.n	d5ac2 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5ab4:	f7ff ffda 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5ab8:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d5aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5abe:	f002 bb91 	b.w	d81e4 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d5ac2:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5ac4:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d5ac6:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d5aca:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d5ace:	2100      	movs	r1, #0
   d5ad0:	b280      	uxth	r0, r0
   d5ad2:	f004 fc60 	bl	da396 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d5ad6:	f995 000d 	ldrsb.w	r0, [r5, #13]
   d5ada:	fa08 f106 	lsl.w	r1, r8, r6
   d5ade:	4039      	ands	r1, r7
   d5ae0:	b280      	uxth	r0, r0
   d5ae2:	f004 fc58 	bl	da396 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5ae6:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d5aea:	2101      	movs	r1, #1
   d5aec:	b280      	uxth	r0, r0
   d5aee:	f004 fc52 	bl	da396 <digitalWrite>
        if (digitalRead(_miso))
   d5af2:	f995 000e 	ldrsb.w	r0, [r5, #14]
        reply <<= 1;
   d5af6:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5af8:	b280      	uxth	r0, r0
        reply <<= 1;
   d5afa:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5afc:	f004 fc64 	bl	da3c8 <digitalRead>
   d5b00:	b108      	cbz	r0, d5b06 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d5b02:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d5b06:	3e01      	subs	r6, #1
   d5b08:	d2df      	bcs.n	d5aca <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d5b0a:	4620      	mov	r0, r4
   d5b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d5b10:	b508      	push	{r3, lr}
        instance().endTransaction();
   d5b12:	f7ff ffab 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d5b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d5b1a:	f002 badc 	b.w	d80d6 <_ZN8SPIClass14endTransactionEv>

000d5b1e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d5b1e:	b507      	push	{r0, r1, r2, lr}
   d5b20:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d5b22:	f7ff ffa3 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5b26:	9901      	ldr	r1, [sp, #4]
    }
   d5b28:	b003      	add	sp, #12
   d5b2a:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d5b2e:	f002 baeb 	b.w	d8108 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5b34 <_ZN15Adafruit_BME2806read16Eh>:
/*!
    @brief  Reads a 16 bit value over I2C or SPI
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d5b34:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d5b36:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d5b3a:	3301      	adds	r3, #1
{
   d5b3c:	b085      	sub	sp, #20
   d5b3e:	4604      	mov	r4, r0
   d5b40:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5b42:	d125      	bne.n	d5b90 <_ZN15Adafruit_BME2806read16Eh+0x5c>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d5b44:	f004 fc9a 	bl	da47c <_Z19__fetch_global_Wirev>
   d5b48:	7821      	ldrb	r1, [r4, #0]
   d5b4a:	f004 faff 	bl	da14c <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d5b4e:	f004 fc95 	bl	da47c <_Z19__fetch_global_Wirev>
   d5b52:	6803      	ldr	r3, [r0, #0]
   d5b54:	4629      	mov	r1, r5
   d5b56:	689b      	ldr	r3, [r3, #8]
   d5b58:	4798      	blx	r3
        Wire.endTransmission();
   d5b5a:	f004 fc8f 	bl	da47c <_Z19__fetch_global_Wirev>
   d5b5e:	f004 fb00 	bl	da162 <_ZN7TwoWire15endTransmissionEv>
        Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
   d5b62:	f004 fc8b 	bl	da47c <_Z19__fetch_global_Wirev>
   d5b66:	7821      	ldrb	r1, [r4, #0]
   d5b68:	2202      	movs	r2, #2
   d5b6a:	f004 faec 	bl	da146 <_ZN7TwoWire11requestFromEhj>
        value = (Wire.read() << 8) | Wire.read();
   d5b6e:	f004 fc85 	bl	da47c <_Z19__fetch_global_Wirev>
   d5b72:	6803      	ldr	r3, [r0, #0]
   d5b74:	695b      	ldr	r3, [r3, #20]
   d5b76:	4798      	blx	r3
   d5b78:	4605      	mov	r5, r0
   d5b7a:	f004 fc7f 	bl	da47c <_Z19__fetch_global_Wirev>
   d5b7e:	6803      	ldr	r3, [r0, #0]
   d5b80:	695b      	ldr	r3, [r3, #20]
   d5b82:	4798      	blx	r3
   d5b84:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5b88:	b285      	uxth	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d5b8a:	4628      	mov	r0, r5
   d5b8c:	b005      	add	sp, #20
   d5b8e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5b90:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d5b94:	3301      	adds	r3, #1
   d5b96:	d10c      	bne.n	d5bb2 <_ZN15Adafruit_BME2806read16Eh+0x7e>
      dataMode_{dataMode}
   d5b98:	4b18      	ldr	r3, [pc, #96]	; (d5bfc <_ZN15Adafruit_BME2806read16Eh+0xc8>)
   d5b9a:	9300      	str	r3, [sp, #0]
   d5b9c:	2300      	movs	r3, #0
   d5b9e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5ba2:	4b17      	ldr	r3, [pc, #92]	; (d5c00 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d5ba4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5ba6:	4668      	mov	r0, sp
   d5ba8:	2301      	movs	r3, #1
   d5baa:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5bae:	f7ff ffb6 	bl	d5b1e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5bb2:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5bb6:	2100      	movs	r1, #0
   d5bb8:	b280      	uxth	r0, r0
   d5bba:	f004 fbec 	bl	da396 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5bbe:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5bc2:	4620      	mov	r0, r4
   d5bc4:	f7ff ff6e 	bl	d5aa4 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5bc8:	2100      	movs	r1, #0
   d5bca:	4620      	mov	r0, r4
   d5bcc:	f7ff ff6a 	bl	d5aa4 <_ZN15Adafruit_BME2807spixferEh>
   d5bd0:	2100      	movs	r1, #0
   d5bd2:	4605      	mov	r5, r0
   d5bd4:	4620      	mov	r0, r4
   d5bd6:	f7ff ff65 	bl	d5aa4 <_ZN15Adafruit_BME2807spixferEh>
   d5bda:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5bde:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5be0:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5be4:	2101      	movs	r1, #1
   d5be6:	b280      	uxth	r0, r0
   d5be8:	f004 fbd5 	bl	da396 <digitalWrite>
        if (_sck == -1)
   d5bec:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d5bf0:	3301      	adds	r3, #1
   d5bf2:	d1ca      	bne.n	d5b8a <_ZN15Adafruit_BME2806read16Eh+0x56>
            SPI.endTransaction(); // release the SPI bus
   d5bf4:	f7ff ff8c 	bl	d5b10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5bf8:	e7c7      	b.n	d5b8a <_ZN15Adafruit_BME2806read16Eh+0x56>
   d5bfa:	bf00      	nop
   d5bfc:	000db610 	.word	0x000db610
   d5c00:	0007a120 	.word	0x0007a120

000d5c04 <_ZN15Adafruit_BME2809read16_LEEh>:
/**************************************************************************/
/*!
    
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5c04:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5c06:	f7ff ff95 	bl	d5b34 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5c0a:	ba40      	rev16	r0, r0
}
   d5c0c:	b280      	uxth	r0, r0
   d5c0e:	bd08      	pop	{r3, pc}

000d5c10 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d5c10:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5c12:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d5c16:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d5c18:	b085      	sub	sp, #20
   d5c1a:	4604      	mov	r4, r0
   d5c1c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5c1e:	d11d      	bne.n	d5c5c <_ZN15Adafruit_BME2805read8Eh+0x4c>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d5c20:	f004 fc2c 	bl	da47c <_Z19__fetch_global_Wirev>
   d5c24:	7821      	ldrb	r1, [r4, #0]
   d5c26:	f004 fa91 	bl	da14c <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d5c2a:	f004 fc27 	bl	da47c <_Z19__fetch_global_Wirev>
   d5c2e:	6803      	ldr	r3, [r0, #0]
   d5c30:	4629      	mov	r1, r5
   d5c32:	689b      	ldr	r3, [r3, #8]
   d5c34:	4798      	blx	r3
        Wire.endTransmission();
   d5c36:	f004 fc21 	bl	da47c <_Z19__fetch_global_Wirev>
   d5c3a:	f004 fa92 	bl	da162 <_ZN7TwoWire15endTransmissionEv>
        Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
   d5c3e:	f004 fc1d 	bl	da47c <_Z19__fetch_global_Wirev>
   d5c42:	7821      	ldrb	r1, [r4, #0]
   d5c44:	2201      	movs	r2, #1
   d5c46:	f004 fa7e 	bl	da146 <_ZN7TwoWire11requestFromEhj>
        value = Wire.read();
   d5c4a:	f004 fc17 	bl	da47c <_Z19__fetch_global_Wirev>
   d5c4e:	6803      	ldr	r3, [r0, #0]
   d5c50:	695b      	ldr	r3, [r3, #20]
   d5c52:	4798      	blx	r3
   d5c54:	b2c5      	uxtb	r5, r0
}
   d5c56:	4628      	mov	r0, r5
   d5c58:	b005      	add	sp, #20
   d5c5a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5c5c:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d5c60:	3301      	adds	r3, #1
   d5c62:	d10c      	bne.n	d5c7e <_ZN15Adafruit_BME2805read8Eh+0x6e>
   d5c64:	4b14      	ldr	r3, [pc, #80]	; (d5cb8 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d5c66:	9300      	str	r3, [sp, #0]
   d5c68:	2300      	movs	r3, #0
   d5c6a:	f88d 3004 	strb.w	r3, [sp, #4]
   d5c6e:	4b13      	ldr	r3, [pc, #76]	; (d5cbc <_ZN15Adafruit_BME2805read8Eh+0xac>)
   d5c70:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5c72:	4668      	mov	r0, sp
   d5c74:	2301      	movs	r3, #1
   d5c76:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5c7a:	f7ff ff50 	bl	d5b1e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5c7e:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5c82:	2100      	movs	r1, #0
   d5c84:	b280      	uxth	r0, r0
   d5c86:	f004 fb86 	bl	da396 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5c8a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5c8e:	4620      	mov	r0, r4
   d5c90:	f7ff ff08 	bl	d5aa4 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5c94:	2100      	movs	r1, #0
   d5c96:	4620      	mov	r0, r4
   d5c98:	f7ff ff04 	bl	d5aa4 <_ZN15Adafruit_BME2807spixferEh>
   d5c9c:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5c9e:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5ca2:	2101      	movs	r1, #1
   d5ca4:	b280      	uxth	r0, r0
   d5ca6:	f004 fb76 	bl	da396 <digitalWrite>
        if (_sck == -1)
   d5caa:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d5cae:	3301      	adds	r3, #1
   d5cb0:	d1d1      	bne.n	d5c56 <_ZN15Adafruit_BME2805read8Eh+0x46>
            SPI.endTransaction(); // release the SPI bus
   d5cb2:	f7ff ff2d 	bl	d5b10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5cb6:	e7ce      	b.n	d5c56 <_ZN15Adafruit_BME2805read8Eh+0x46>
   d5cb8:	000db610 	.word	0x000db610
   d5cbc:	0007a120 	.word	0x0007a120

000d5cc0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
/*!
    @brief return true if chip is busy reading cal data
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d5cc0:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d5cc2:	21f3      	movs	r1, #243	; 0xf3
   d5cc4:	f7ff ffa4 	bl	d5c10 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d5cc8:	f000 0001 	and.w	r0, r0, #1
   d5ccc:	bd08      	pop	{r3, pc}

000d5cce <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5cce:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5cd0:	2188      	movs	r1, #136	; 0x88
{
   d5cd2:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5cd4:	f7ff ff96 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5cd8:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5cda:	8220      	strh	r0, [r4, #16]
    return (int16_t)read16_LE(reg);
   d5cdc:	4620      	mov	r0, r4
   d5cde:	f7ff ff91 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
   d5ce2:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5ce4:	8260      	strh	r0, [r4, #18]
    return (int16_t)read16_LE(reg);
   d5ce6:	4620      	mov	r0, r4
   d5ce8:	f7ff ff8c 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5cec:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5cee:	82a0      	strh	r0, [r4, #20]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5cf0:	4620      	mov	r0, r4
   d5cf2:	f7ff ff87 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5cf6:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5cf8:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	f7ff ff82 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
   d5d00:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d5d02:	8320      	strh	r0, [r4, #24]
    return (int16_t)read16_LE(reg);
   d5d04:	4620      	mov	r0, r4
   d5d06:	f7ff ff7d 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
   d5d0a:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5d0c:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5d0e:	4620      	mov	r0, r4
   d5d10:	f7ff ff78 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
   d5d14:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d5d16:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d5d18:	4620      	mov	r0, r4
   d5d1a:	f7ff ff73 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
   d5d1e:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5d20:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d5d22:	4620      	mov	r0, r4
   d5d24:	f7ff ff6e 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
   d5d28:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5d2a:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	f7ff ff69 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
   d5d32:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5d34:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d5d36:	4620      	mov	r0, r4
   d5d38:	f7ff ff64 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
   d5d3c:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5d3e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d5d40:	4620      	mov	r0, r4
   d5d42:	f7ff ff5f 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5d46:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d5d48:	84e0      	strh	r0, [r4, #38]	; 0x26
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	f7ff ff60 	bl	d5c10 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d5d50:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5d52:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d5d56:	4620      	mov	r0, r4
   d5d58:	f7ff ff54 	bl	d5c04 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5d5c:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5d5e:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5d60:	4620      	mov	r0, r4
   d5d62:	f7ff ff55 	bl	d5c10 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5d66:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5d68:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	f7ff ff4f 	bl	d5c10 <_ZN15Adafruit_BME2805read8Eh>
   d5d72:	21e5      	movs	r1, #229	; 0xe5
   d5d74:	4605      	mov	r5, r0
   d5d76:	4620      	mov	r0, r4
   d5d78:	f7ff ff4a 	bl	d5c10 <_ZN15Adafruit_BME2805read8Eh>
   d5d7c:	f000 030f 	and.w	r3, r0, #15
   d5d80:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5d84:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d5d86:	21e6      	movs	r1, #230	; 0xe6
   d5d88:	4620      	mov	r0, r4
   d5d8a:	f7ff ff41 	bl	d5c10 <_ZN15Adafruit_BME2805read8Eh>
   d5d8e:	21e5      	movs	r1, #229	; 0xe5
   d5d90:	4605      	mov	r5, r0
   d5d92:	4620      	mov	r0, r4
   d5d94:	f7ff ff3c 	bl	d5c10 <_ZN15Adafruit_BME2805read8Eh>
   d5d98:	1103      	asrs	r3, r0, #4
   d5d9a:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5d9e:	8620      	strh	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d5da0:	21e7      	movs	r1, #231	; 0xe7
   d5da2:	4620      	mov	r0, r4
   d5da4:	f7ff ff34 	bl	d5c10 <_ZN15Adafruit_BME2805read8Eh>
   d5da8:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
   d5dac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5db0 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d5db0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d5db2:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d5db6:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d5db8:	4604      	mov	r4, r0
   d5dba:	460e      	mov	r6, r1
   d5dbc:	4615      	mov	r5, r2
    if (_cs == -1) {
   d5dbe:	d116      	bne.n	d5dee <_ZN15Adafruit_BME2806write8Ehh+0x3e>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d5dc0:	f004 fb5c 	bl	da47c <_Z19__fetch_global_Wirev>
   d5dc4:	7821      	ldrb	r1, [r4, #0]
   d5dc6:	f004 f9c1 	bl	da14c <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d5dca:	f004 fb57 	bl	da47c <_Z19__fetch_global_Wirev>
   d5dce:	6803      	ldr	r3, [r0, #0]
   d5dd0:	4631      	mov	r1, r6
   d5dd2:	689b      	ldr	r3, [r3, #8]
   d5dd4:	4798      	blx	r3
        Wire.write((uint8_t)value);
   d5dd6:	f004 fb51 	bl	da47c <_Z19__fetch_global_Wirev>
   d5dda:	6803      	ldr	r3, [r0, #0]
   d5ddc:	4629      	mov	r1, r5
   d5dde:	689b      	ldr	r3, [r3, #8]
   d5de0:	4798      	blx	r3
        Wire.endTransmission();
   d5de2:	f004 fb4b 	bl	da47c <_Z19__fetch_global_Wirev>
   d5de6:	f004 f9bc 	bl	da162 <_ZN7TwoWire15endTransmissionEv>
}
   d5dea:	b004      	add	sp, #16
   d5dec:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d5dee:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d5df2:	3301      	adds	r3, #1
   d5df4:	d10c      	bne.n	d5e10 <_ZN15Adafruit_BME2806write8Ehh+0x60>
   d5df6:	4b14      	ldr	r3, [pc, #80]	; (d5e48 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d5df8:	9300      	str	r3, [sp, #0]
   d5dfa:	2300      	movs	r3, #0
   d5dfc:	f88d 3004 	strb.w	r3, [sp, #4]
   d5e00:	4b12      	ldr	r3, [pc, #72]	; (d5e4c <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   d5e02:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5e04:	4668      	mov	r0, sp
   d5e06:	2301      	movs	r3, #1
   d5e08:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5e0c:	f7ff fe87 	bl	d5b1e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5e10:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5e14:	2100      	movs	r1, #0
   d5e16:	b280      	uxth	r0, r0
   d5e18:	f004 fabd 	bl	da396 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d5e1c:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5e20:	4620      	mov	r0, r4
   d5e22:	f7ff fe3f 	bl	d5aa4 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d5e26:	4629      	mov	r1, r5
   d5e28:	4620      	mov	r0, r4
   d5e2a:	f7ff fe3b 	bl	d5aa4 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d5e2e:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5e32:	2101      	movs	r1, #1
   d5e34:	b280      	uxth	r0, r0
   d5e36:	f004 faae 	bl	da396 <digitalWrite>
    if (_sck == -1)
   d5e3a:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d5e3e:	3301      	adds	r3, #1
   d5e40:	d1d3      	bne.n	d5dea <_ZN15Adafruit_BME2806write8Ehh+0x3a>
        SPI.endTransaction(); // release the SPI bus
   d5e42:	f7ff fe65 	bl	d5b10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d5e46:	e7d0      	b.n	d5dea <_ZN15Adafruit_BME2806write8Ehh+0x3a>
   d5e48:	000db610 	.word	0x000db610
   d5e4c:	0007a120 	.word	0x0007a120

000d5e50 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d5e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d5e52:	00db      	lsls	r3, r3, #3
   d5e54:	f002 0207 	and.w	r2, r2, #7
   d5e58:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d5e5c:	4313      	orrs	r3, r2
   d5e5e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d5e62:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d5e66:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    _humReg.osrs_h    = humSampling;
   d5e6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		 standby_duration  duration) {
   d5e6e:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d5e72:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d5e76:	f366 1347 	bfi	r3, r6, #5, #3
   d5e7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _configReg.t_sb   = duration;
   d5e7e:	00ed      	lsls	r5, r5, #3
   d5e80:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
   d5e84:	f007 0707 	and.w	r7, r7, #7
   d5e88:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d5e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5e90:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d5e92:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d5e94:	431d      	orrs	r5, r3
   d5e96:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d5e9a:	f006 0207 	and.w	r2, r6, #7
   d5e9e:	21f2      	movs	r1, #242	; 0xf2
   d5ea0:	f7ff ff86 	bl	d5db0 <_ZN15Adafruit_BME2806write8Ehh>
            // unused - don't set
            unsigned int none : 1;
            unsigned int spi3w_en : 1;

            unsigned int get() {
                return (t_sb << 5) | (filter << 3) | spi3w_en;
   d5ea4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
   d5ea8:	f002 0107 	and.w	r1, r2, #7
   d5eac:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d5eb0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d5eb4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d5eb8:	4620      	mov	r0, r4
   d5eba:	21f5      	movs	r1, #245	; 0xf5
   d5ebc:	f7ff ff78 	bl	d5db0 <_ZN15Adafruit_BME2806write8Ehh>
            // 01 or 10 = forced
            // 11       = normal
            unsigned int mode : 2;

            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 3) | mode;
   d5ec0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d5ec4:	f002 0107 	and.w	r1, r2, #7
   d5ec8:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d5ecc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5ed0:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d5ed4:	4620      	mov	r0, r4
   d5ed6:	21f4      	movs	r1, #244	; 0xf4
}
   d5ed8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5edc:	f7ff bf68 	b.w	d5db0 <_ZN15Adafruit_BME2806write8Ehh>

000d5ee0 <_ZN15Adafruit_BME2805beginEh>:
{
   d5ee0:	b530      	push	{r4, r5, lr}
   d5ee2:	4604      	mov	r4, r0
    _i2caddr = addr;
   d5ee4:	7001      	strb	r1, [r0, #0]
    if (_cs == -1) {
   d5ee6:	f990 000c 	ldrsb.w	r0, [r0, #12]
   d5eea:	1c42      	adds	r2, r0, #1
{
   d5eec:	b085      	sub	sp, #20
    if (_cs == -1) {
   d5eee:	d119      	bne.n	d5f24 <_ZN15Adafruit_BME2805beginEh+0x44>
        Wire.begin();
   d5ef0:	f004 fac4 	bl	da47c <_Z19__fetch_global_Wirev>
   d5ef4:	f004 f8f8 	bl	da0e8 <_ZN7TwoWire5beginEv>
    if (read8(BME280_REGISTER_CHIPID) != 0x60)
   d5ef8:	21d0      	movs	r1, #208	; 0xd0
   d5efa:	4620      	mov	r0, r4
   d5efc:	f7ff fe88 	bl	d5c10 <_ZN15Adafruit_BME2805read8Eh>
   d5f00:	2860      	cmp	r0, #96	; 0x60
   d5f02:	d142      	bne.n	d5f8a <_ZN15Adafruit_BME2805beginEh+0xaa>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5f04:	4620      	mov	r0, r4
   d5f06:	22b6      	movs	r2, #182	; 0xb6
   d5f08:	21e0      	movs	r1, #224	; 0xe0
   d5f0a:	f7ff ff51 	bl	d5db0 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d5f0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5f12:	f003 fd1d 	bl	d9950 <delay>
    while (isReadingCalibration())
   d5f16:	4620      	mov	r0, r4
   d5f18:	f7ff fed2 	bl	d5cc0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d5f1c:	4605      	mov	r5, r0
   d5f1e:	b328      	cbz	r0, d5f6c <_ZN15Adafruit_BME2805beginEh+0x8c>
          delay(100);
   d5f20:	2064      	movs	r0, #100	; 0x64
   d5f22:	e7f6      	b.n	d5f12 <_ZN15Adafruit_BME2805beginEh+0x32>
        digitalWrite(_cs, HIGH);
   d5f24:	2101      	movs	r1, #1
   d5f26:	b280      	uxth	r0, r0
   d5f28:	f004 fa35 	bl	da396 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d5f2c:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5f30:	2101      	movs	r1, #1
   d5f32:	b280      	uxth	r0, r0
   d5f34:	f004 fa1e 	bl	da374 <pinMode>
        if (_sck == -1) {
   d5f38:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d5f3c:	1c43      	adds	r3, r0, #1
   d5f3e:	d104      	bne.n	d5f4a <_ZN15Adafruit_BME2805beginEh+0x6a>
        instance().begin();
   d5f40:	f7ff fd94 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5f44:	f002 f8b6 	bl	d80b4 <_ZN8SPIClass5beginEv>
    }
   d5f48:	e7d6      	b.n	d5ef8 <_ZN15Adafruit_BME2805beginEh+0x18>
            pinMode(_sck, OUTPUT);
   d5f4a:	2101      	movs	r1, #1
   d5f4c:	b280      	uxth	r0, r0
   d5f4e:	f004 fa11 	bl	da374 <pinMode>
            pinMode(_mosi, OUTPUT);
   d5f52:	f994 000d 	ldrsb.w	r0, [r4, #13]
   d5f56:	2101      	movs	r1, #1
   d5f58:	b280      	uxth	r0, r0
   d5f5a:	f004 fa0b 	bl	da374 <pinMode>
            pinMode(_miso, INPUT);
   d5f5e:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5f62:	2100      	movs	r1, #0
   d5f64:	b280      	uxth	r0, r0
   d5f66:	f004 fa05 	bl	da374 <pinMode>
   d5f6a:	e7c5      	b.n	d5ef8 <_ZN15Adafruit_BME2805beginEh+0x18>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	f7ff feae 	bl	d5cce <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d5f72:	2305      	movs	r3, #5
   d5f74:	4620      	mov	r0, r4
   d5f76:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d5f7a:	9300      	str	r3, [sp, #0]
   d5f7c:	461a      	mov	r2, r3
   d5f7e:	2103      	movs	r1, #3
   d5f80:	f7ff ff66 	bl	d5e50 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    return true;
   d5f84:	2001      	movs	r0, #1
}
   d5f86:	b005      	add	sp, #20
   d5f88:	bd30      	pop	{r4, r5, pc}
        return false;
   d5f8a:	2000      	movs	r0, #0
   d5f8c:	e7fb      	b.n	d5f86 <_ZN15Adafruit_BME2805beginEh+0xa6>

000d5f8e <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5f8e:	b510      	push	{r4, lr}
   d5f90:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5f92:	3024      	adds	r0, #36	; 0x24
   d5f94:	f000 fa54 	bl	d6440 <_ZN8FatCache4syncEv>
   d5f98:	b128      	cbz	r0, d5fa6 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5f9a:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5fa2:	f000 ba4d 	b.w	d6440 <_ZN8FatCache4syncEv>
  }
   d5fa6:	bd10      	pop	{r4, pc}

000d5fa8 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5fa8:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5faa:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d5fac:	f043 0304 	orr.w	r3, r3, #4
   d5fb0:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5fb2:	f100 0210 	add.w	r2, r0, #16
   d5fb6:	6880      	ldr	r0, [r0, #8]
   d5fb8:	f000 baf8 	b.w	d65ac <_ZN9FatVolume15allocateClusterEmPm>

000d5fbc <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5fbc:	b510      	push	{r4, lr}
   d5fbe:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5fc0:	6880      	ldr	r0, [r0, #8]
   d5fc2:	460a      	mov	r2, r1
   d5fc4:	3024      	adds	r0, #36	; 0x24
   d5fc6:	69a1      	ldr	r1, [r4, #24]
   d5fc8:	f000 fa62 	bl	d6490 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5fcc:	b120      	cbz	r0, d5fd8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5fce:	88a3      	ldrh	r3, [r4, #4]
   d5fd0:	f003 030f 	and.w	r3, r3, #15
   d5fd4:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5fd8:	bd10      	pop	{r4, pc}

000d5fda <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5fda:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5fdc:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d5fde:	4605      	mov	r5, r0
   d5fe0:	460e      	mov	r6, r1
  if (isOpen()) {
   d5fe2:	b94c      	cbnz	r4, d5ff8 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5fe4:	2224      	movs	r2, #36	; 0x24
   d5fe6:	4621      	mov	r1, r4
   d5fe8:	f005 f8b2 	bl	db150 <memset>

  m_vol = vol;
   d5fec:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5fee:	79f3      	ldrb	r3, [r6, #7]
   d5ff0:	2b10      	cmp	r3, #16
   d5ff2:	d003      	beq.n	d5ffc <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5ff4:	2b20      	cmp	r3, #32
   d5ff6:	d007      	beq.n	d6008 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d5ff8:	2000      	movs	r0, #0
   d5ffa:	e004      	b.n	d6006 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5ffc:	2320      	movs	r3, #32
  m_flags = F_READ;
   d5ffe:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d6000:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d6002:	70ac      	strb	r4, [r5, #2]
  return true;
   d6004:	4620      	mov	r0, r4
}
   d6006:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d6008:	2340      	movs	r3, #64	; 0x40
   d600a:	e7f8      	b.n	d5ffe <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d600c <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d600c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d6010:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d6012:	4604      	mov	r4, r0
   d6014:	4688      	mov	r8, r1
   d6016:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d6018:	2b00      	cmp	r3, #0
   d601a:	d05d      	beq.n	d60d8 <_ZN7FatFile4readEPvj+0xcc>
   d601c:	7882      	ldrb	r2, [r0, #2]
   d601e:	07d1      	lsls	r1, r2, #31
   d6020:	d55a      	bpl.n	d60d8 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6022:	071a      	lsls	r2, r3, #28
   d6024:	d52d      	bpl.n	d6082 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6026:	69c3      	ldr	r3, [r0, #28]
   d6028:	6942      	ldr	r2, [r0, #20]
   d602a:	1a9b      	subs	r3, r3, r2
   d602c:	429d      	cmp	r5, r3
   d602e:	bf28      	it	cs
   d6030:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6032:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d6034:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6038:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d603c:	2e00      	cmp	r6, #0
   d603e:	f000 808f 	beq.w	d6160 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d6042:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d6044:	6963      	ldr	r3, [r4, #20]
   d6046:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6048:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d604a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d604e:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6052:	d51f      	bpl.n	d6094 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6054:	6a00      	ldr	r0, [r0, #32]
   d6056:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6058:	68a0      	ldr	r0, [r4, #8]
   d605a:	f1ba 0f00 	cmp.w	sl, #0
   d605e:	d142      	bne.n	d60e6 <_ZN7FatFile4readEPvj+0xda>
   d6060:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6064:	d33f      	bcc.n	d60e6 <_ZN7FatFile4readEPvj+0xda>
  }
  cache_t *cacheAddress() {
    return m_cache.block();
  }
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
   d6066:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6068:	4299      	cmp	r1, r3
   d606a:	d03c      	beq.n	d60e6 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d606c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6070:	d252      	bcs.n	d6118 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d6072:	6800      	ldr	r0, [r0, #0]
   d6074:	4642      	mov	r2, r8
   d6076:	f000 fccd 	bl	d6a14 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d607a:	b368      	cbz	r0, d60d8 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d607c:	f44f 7700 	mov.w	r7, #512	; 0x200
   d6080:	e044      	b.n	d610c <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d6082:	069b      	lsls	r3, r3, #26
   d6084:	d5d5      	bpl.n	d6032 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6086:	6883      	ldr	r3, [r0, #8]
   d6088:	891a      	ldrh	r2, [r3, #8]
   d608a:	6943      	ldr	r3, [r0, #20]
   d608c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d6090:	b29b      	uxth	r3, r3
   d6092:	e7cb      	b.n	d602c <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6094:	f890 9005 	ldrb.w	r9, [r0, #5]
   d6098:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d609c:	f1ba 0f00 	cmp.w	sl, #0
   d60a0:	d108      	bne.n	d60b4 <_ZN7FatFile4readEPvj+0xa8>
   d60a2:	f1b9 0f00 	cmp.w	r9, #0
   d60a6:	d105      	bne.n	d60b4 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d60a8:	b95b      	cbnz	r3, d60c2 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d60aa:	0651      	lsls	r1, r2, #25
   d60ac:	bf4c      	ite	mi
   d60ae:	6a03      	ldrmi	r3, [r0, #32]
   d60b0:	6a23      	ldrpl	r3, [r4, #32]
   d60b2:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d60b4:	6921      	ldr	r1, [r4, #16]
   d60b6:	68a0      	ldr	r0, [r4, #8]
   d60b8:	f000 fa0d 	bl	d64d6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d60bc:	eb09 0100 	add.w	r1, r9, r0
   d60c0:	e7ca      	b.n	d6058 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d60c2:	6921      	ldr	r1, [r4, #16]
   d60c4:	465a      	mov	r2, fp
   d60c6:	f000 fa0c 	bl	d64e2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d60ca:	2800      	cmp	r0, #0
   d60cc:	db04      	blt.n	d60d8 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d60ce:	d1f1      	bne.n	d60b4 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d60d0:	7823      	ldrb	r3, [r4, #0]
   d60d2:	f013 0f70 	tst.w	r3, #112	; 0x70
   d60d6:	d143      	bne.n	d6160 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d60d8:	7863      	ldrb	r3, [r4, #1]
   d60da:	f043 0302 	orr.w	r3, r3, #2
   d60de:	7063      	strb	r3, [r4, #1]
  return -1;
   d60e0:	f04f 30ff 	mov.w	r0, #4294967295
   d60e4:	e03d      	b.n	d6162 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d60e6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d60ea:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d60ec:	f04f 0200 	mov.w	r2, #0
   d60f0:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d60f4:	bf28      	it	cs
   d60f6:	4637      	movcs	r7, r6
   d60f8:	f000 f9ca 	bl	d6490 <_ZN8FatCache4readEmh>
      if (!pc) {
   d60fc:	2800      	cmp	r0, #0
   d60fe:	d0eb      	beq.n	d60d8 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d6100:	eb00 010a 	add.w	r1, r0, sl
   d6104:	463a      	mov	r2, r7
   d6106:	4640      	mov	r0, r8
   d6108:	f004 fffa 	bl	db100 <memcpy>
    m_curPosition += n;
   d610c:	6963      	ldr	r3, [r4, #20]
   d610e:	443b      	add	r3, r7
    dst += n;
   d6110:	44b8      	add	r8, r7
    m_curPosition += n;
   d6112:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6114:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d6116:	e791      	b.n	d603c <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d6118:	7822      	ldrb	r2, [r4, #0]
   d611a:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d611c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6120:	d406      	bmi.n	d6130 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d6122:	7902      	ldrb	r2, [r0, #4]
   d6124:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d6128:	b2d2      	uxtb	r2, r2
   d612a:	4592      	cmp	sl, r2
   d612c:	bf28      	it	cs
   d612e:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6130:	4299      	cmp	r1, r3
      n = 512*nb;
   d6132:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6136:	d208      	bcs.n	d614a <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d6138:	68a0      	ldr	r0, [r4, #8]
   d613a:	4653      	mov	r3, sl
   d613c:	6800      	ldr	r0, [r0, #0]
   d613e:	4642      	mov	r2, r8
   d6140:	f000 fcb0 	bl	d6aa4 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6144:	2800      	cmp	r0, #0
   d6146:	d1e1      	bne.n	d610c <_ZN7FatFile4readEPvj+0x100>
   d6148:	e7c6      	b.n	d60d8 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d614a:	4453      	add	r3, sl
   d614c:	428b      	cmp	r3, r1
   d614e:	d9f3      	bls.n	d6138 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d6150:	3024      	adds	r0, #36	; 0x24
   d6152:	9101      	str	r1, [sp, #4]
   d6154:	f000 f974 	bl	d6440 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d6158:	9901      	ldr	r1, [sp, #4]
   d615a:	2800      	cmp	r0, #0
   d615c:	d1ec      	bne.n	d6138 <_ZN7FatFile4readEPvj+0x12c>
   d615e:	e7bb      	b.n	d60d8 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d6160:	1ba8      	subs	r0, r5, r6
}
   d6162:	b003      	add	sp, #12
   d6164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6168 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d6168:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d616a:	2201      	movs	r2, #1
   d616c:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d6170:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d6174:	4604      	mov	r4, r0
   d6176:	f7ff ff49 	bl	d600c <_ZN7FatFile4readEPvj>
   d617a:	2801      	cmp	r0, #1
   d617c:	bf0a      	itet	eq
   d617e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d6182:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d6186:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d618a:	b002      	add	sp, #8
   d618c:	bd70      	pop	{r4, r5, r6, pc}

000d618e <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d618e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d6192:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d6194:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d6196:	4604      	mov	r4, r0
   d6198:	460d      	mov	r5, r1
  if (!isOpen()) {
   d619a:	b162      	cbz	r2, d61b6 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d619c:	6940      	ldr	r0, [r0, #20]
   d619e:	4288      	cmp	r0, r1
   d61a0:	d002      	beq.n	d61a8 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d61a2:	b919      	cbnz	r1, d61ac <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d61a4:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d61a6:	6165      	str	r5, [r4, #20]
    return true;
   d61a8:	2001      	movs	r0, #1
   d61aa:	e006      	b.n	d61ba <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d61ac:	0716      	lsls	r6, r2, #28
   d61ae:	d506      	bpl.n	d61be <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d61b0:	69e3      	ldr	r3, [r4, #28]
   d61b2:	428b      	cmp	r3, r1
   d61b4:	d20b      	bcs.n	d61ce <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d61b6:	6127      	str	r7, [r4, #16]
  return false;
   d61b8:	2000      	movs	r0, #0
}
   d61ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d61be:	0691      	lsls	r1, r2, #26
   d61c0:	d505      	bpl.n	d61ce <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d61c2:	68a3      	ldr	r3, [r4, #8]
   d61c4:	891b      	ldrh	r3, [r3, #8]
   d61c6:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d61ca:	d9ec      	bls.n	d61a6 <_ZN7FatFile7seekSetEm+0x18>
   d61cc:	e7f3      	b.n	d61b6 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d61ce:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d61d2:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d61d6:	1e43      	subs	r3, r0, #1
   d61d8:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d61dc:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d61de:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d61e0:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d61e2:	42b3      	cmp	r3, r6
   d61e4:	d800      	bhi.n	d61e8 <_ZN7FatFile7seekSetEm+0x5a>
   d61e6:	b998      	cbnz	r0, d6210 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d61e8:	0653      	lsls	r3, r2, #25
   d61ea:	bf4c      	ite	mi
   d61ec:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d61f0:	6a23      	ldrpl	r3, [r4, #32]
   d61f2:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d61f4:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d61f8:	2e00      	cmp	r6, #0
   d61fa:	d0d4      	beq.n	d61a6 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d61fc:	6921      	ldr	r1, [r4, #16]
   d61fe:	68a0      	ldr	r0, [r4, #8]
   d6200:	4642      	mov	r2, r8
   d6202:	f000 f96e 	bl	d64e2 <_ZN9FatVolume6fatGetEmPm>
   d6206:	2800      	cmp	r0, #0
   d6208:	f106 36ff 	add.w	r6, r6, #4294967295
   d620c:	dcf4      	bgt.n	d61f8 <_ZN7FatFile7seekSetEm+0x6a>
   d620e:	e7d2      	b.n	d61b6 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d6210:	1af6      	subs	r6, r6, r3
   d6212:	e7ef      	b.n	d61f4 <_ZN7FatFile7seekSetEm+0x66>

000d6214 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6214:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6216:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d6218:	4604      	mov	r4, r0
  if (!isOpen()) {
   d621a:	b90b      	cbnz	r3, d6220 <_ZN7FatFile4syncEv+0xc>
    return true;
   d621c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d621e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6220:	7883      	ldrb	r3, [r0, #2]
   d6222:	075a      	lsls	r2, r3, #29
   d6224:	d523      	bpl.n	d626e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6226:	2101      	movs	r1, #1
   d6228:	f7ff fec8 	bl	d5fbc <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d622c:	4605      	mov	r5, r0
   d622e:	b928      	cbnz	r0, d623c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d6230:	7863      	ldrb	r3, [r4, #1]
   d6232:	f043 0301 	orr.w	r3, r3, #1
   d6236:	7063      	strb	r3, [r4, #1]
  return false;
   d6238:	2000      	movs	r0, #0
   d623a:	e7f0      	b.n	d621e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d623c:	7803      	ldrb	r3, [r0, #0]
   d623e:	2be5      	cmp	r3, #229	; 0xe5
   d6240:	d0f6      	beq.n	d6230 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d6242:	7823      	ldrb	r3, [r4, #0]
   d6244:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6246:	bf44      	itt	mi
   d6248:	69e3      	ldrmi	r3, [r4, #28]
   d624a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d624c:	8c23      	ldrh	r3, [r4, #32]
   d624e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6250:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6252:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d6254:	4b09      	ldr	r3, [pc, #36]	; (d627c <_ZN7FatFile4syncEv+0x68>)
   d6256:	681b      	ldr	r3, [r3, #0]
   d6258:	b12b      	cbz	r3, d6266 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d625a:	f100 0116 	add.w	r1, r0, #22
   d625e:	3018      	adds	r0, #24
   d6260:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6262:	8b2b      	ldrh	r3, [r5, #24]
   d6264:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6266:	78a3      	ldrb	r3, [r4, #2]
   d6268:	f023 0304 	bic.w	r3, r3, #4
   d626c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d626e:	68a0      	ldr	r0, [r4, #8]
   d6270:	f7ff fe8d 	bl	d5f8e <_ZN9FatVolume9cacheSyncEv>
   d6274:	2800      	cmp	r0, #0
   d6276:	d0db      	beq.n	d6230 <_ZN7FatFile4syncEv+0x1c>
   d6278:	e7d0      	b.n	d621c <_ZN7FatFile4syncEv+0x8>
   d627a:	bf00      	nop
   d627c:	2003e5ec 	.word	0x2003e5ec

000d6280 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d6280:	b510      	push	{r4, lr}
   d6282:	4604      	mov	r4, r0
  bool rtn = sync();
   d6284:	f7ff ffc6 	bl	d6214 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6288:	2300      	movs	r3, #0
   d628a:	7023      	strb	r3, [r4, #0]
}
   d628c:	bd10      	pop	{r4, pc}
	...

000d6290 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6294:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d6296:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6298:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d629a:	4604      	mov	r4, r0
   d629c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d629e:	d55b      	bpl.n	d6358 <_ZN7FatFile5writeEPKvj+0xc8>
   d62a0:	7883      	ldrb	r3, [r0, #2]
   d62a2:	079a      	lsls	r2, r3, #30
   d62a4:	d558      	bpl.n	d6358 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d62a6:	071b      	lsls	r3, r3, #28
   d62a8:	d451      	bmi.n	d634e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d62aa:	6963      	ldr	r3, [r4, #20]
   d62ac:	43db      	mvns	r3, r3
   d62ae:	42bb      	cmp	r3, r7
   d62b0:	d352      	bcc.n	d6358 <_ZN7FatFile5writeEPKvj+0xc8>
   d62b2:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d62b4:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d62b8:	6966      	ldr	r6, [r4, #20]
   d62ba:	f1b8 0f00 	cmp.w	r8, #0
   d62be:	f000 8091 	beq.w	d63e4 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d62c2:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d62c4:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d62c6:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d62ca:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d62ce:	d10e      	bne.n	d62ee <_ZN7FatFile5writeEPKvj+0x5e>
   d62d0:	b96d      	cbnz	r5, d62ee <_ZN7FatFile5writeEPKvj+0x5e>
   d62d2:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d62d4:	2900      	cmp	r1, #0
   d62d6:	d046      	beq.n	d6366 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d62d8:	4652      	mov	r2, sl
   d62da:	f000 f902 	bl	d64e2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d62de:	2800      	cmp	r0, #0
   d62e0:	db3a      	blt.n	d6358 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d62e2:	d104      	bne.n	d62ee <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d62e4:	4620      	mov	r0, r4
   d62e6:	f7ff fe5f 	bl	d5fa8 <_ZN7FatFile10addClusterEv>
   d62ea:	2800      	cmp	r0, #0
   d62ec:	d034      	beq.n	d6358 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d62ee:	6921      	ldr	r1, [r4, #16]
   d62f0:	68a0      	ldr	r0, [r4, #8]
   d62f2:	f000 f8f0 	bl	d64d6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d62f6:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d62f8:	68a0      	ldr	r0, [r4, #8]
   d62fa:	b915      	cbnz	r5, d6302 <_ZN7FatFile5writeEPKvj+0x72>
   d62fc:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d6300:	d23f      	bcs.n	d6382 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d6302:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d6306:	4546      	cmp	r6, r8
   d6308:	bf28      	it	cs
   d630a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d630c:	2d00      	cmp	r5, #0
   d630e:	d136      	bne.n	d637e <_ZN7FatFile5writeEPKvj+0xee>
   d6310:	6962      	ldr	r2, [r4, #20]
   d6312:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d6314:	429a      	cmp	r2, r3
   d6316:	bf34      	ite	cc
   d6318:	2201      	movcc	r2, #1
   d631a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d631c:	3024      	adds	r0, #36	; 0x24
   d631e:	f000 f8b7 	bl	d6490 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d6322:	b1c8      	cbz	r0, d6358 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6324:	4428      	add	r0, r5
   d6326:	4632      	mov	r2, r6
   d6328:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d632a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d632c:	f004 fee8 	bl	db100 <memcpy>
      if (512 == (n + blockOffset)) {
   d6330:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d6334:	d104      	bne.n	d6340 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d6336:	68a0      	ldr	r0, [r4, #8]
   d6338:	3024      	adds	r0, #36	; 0x24
   d633a:	f000 f881 	bl	d6440 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d633e:	b158      	cbz	r0, d6358 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d6340:	6963      	ldr	r3, [r4, #20]
   d6342:	4433      	add	r3, r6
   d6344:	6163      	str	r3, [r4, #20]
    src += n;
   d6346:	44b1      	add	r9, r6
    nToWrite -= n;
   d6348:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d634c:	e7b4      	b.n	d62b8 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d634e:	69c1      	ldr	r1, [r0, #28]
   d6350:	f7ff ff1d 	bl	d618e <_ZN7FatFile7seekSetEm>
   d6354:	2800      	cmp	r0, #0
   d6356:	d1a8      	bne.n	d62aa <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6358:	7863      	ldrb	r3, [r4, #1]
   d635a:	f043 0301 	orr.w	r3, r3, #1
   d635e:	7063      	strb	r3, [r4, #1]
  return -1;
   d6360:	f04f 30ff 	mov.w	r0, #4294967295
   d6364:	e050      	b.n	d6408 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d6366:	6a23      	ldr	r3, [r4, #32]
   d6368:	b93b      	cbnz	r3, d637a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d636a:	4620      	mov	r0, r4
   d636c:	f7ff fe1c 	bl	d5fa8 <_ZN7FatFile10addClusterEv>
   d6370:	2800      	cmp	r0, #0
   d6372:	d0f1      	beq.n	d6358 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d6374:	6923      	ldr	r3, [r4, #16]
   d6376:	6223      	str	r3, [r4, #32]
   d6378:	e7b9      	b.n	d62ee <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d637a:	6123      	str	r3, [r4, #16]
   d637c:	e7b7      	b.n	d62ee <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d637e:	2201      	movs	r2, #1
   d6380:	e7cc      	b.n	d631c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d6382:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d6386:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d6388:	d31b      	bcc.n	d63c2 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d638a:	f890 c004 	ldrb.w	ip, [r0, #4]
   d638e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d6392:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d6394:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d6398:	4573      	cmp	r3, lr
   d639a:	bf28      	it	cs
   d639c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d639e:	4291      	cmp	r1, r2
      n = 512*nb;
   d63a0:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d63a4:	d307      	bcc.n	d63b6 <_ZN7FatFile5writeEPKvj+0x126>
   d63a6:	441a      	add	r2, r3
   d63a8:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d63aa:	bf82      	ittt	hi
   d63ac:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   d63b0:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d63b4:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d63b6:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d63b8:	464a      	mov	r2, r9
   d63ba:	6828      	ldr	r0, [r5, #0]
   d63bc:	f000 fc29 	bl	d6c12 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d63c0:	e7bd      	b.n	d633e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d63c2:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d63c4:	bf02      	ittt	eq
   d63c6:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   d63ca:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d63ce:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d63d0:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d63d2:	464a      	mov	r2, r9
   d63d4:	6818      	ldr	r0, [r3, #0]
   d63d6:	f000 fba6 	bl	d6b26 <_ZN9SdSpiCard10writeBlockEmPKh>
   d63da:	2800      	cmp	r0, #0
   d63dc:	d0bc      	beq.n	d6358 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d63de:	f44f 7600 	mov.w	r6, #512	; 0x200
   d63e2:	e7ad      	b.n	d6340 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d63e4:	69e2      	ldr	r2, [r4, #28]
   d63e6:	78a3      	ldrb	r3, [r4, #2]
   d63e8:	42b2      	cmp	r2, r6
   d63ea:	d204      	bcs.n	d63f6 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d63ec:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d63ee:	f043 0304 	orr.w	r3, r3, #4
   d63f2:	70a3      	strb	r3, [r4, #2]
   d63f4:	e003      	b.n	d63fe <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d63f6:	4a08      	ldr	r2, [pc, #32]	; (d6418 <_ZN7FatFile5writeEPKvj+0x188>)
   d63f8:	6812      	ldr	r2, [r2, #0]
   d63fa:	2a00      	cmp	r2, #0
   d63fc:	d1f7      	bne.n	d63ee <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d63fe:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6402:	2b00      	cmp	r3, #0
   d6404:	db02      	blt.n	d640c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d6406:	4638      	mov	r0, r7
}
   d6408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d640c:	4620      	mov	r0, r4
   d640e:	f7ff ff01 	bl	d6214 <_ZN7FatFile4syncEv>
   d6412:	2800      	cmp	r0, #0
   d6414:	d1f7      	bne.n	d6406 <_ZN7FatFile5writeEPKvj+0x176>
   d6416:	e79f      	b.n	d6358 <_ZN7FatFile5writeEPKvj+0xc8>
   d6418:	2003e5ec 	.word	0x2003e5ec

000d641c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d641c:	b513      	push	{r0, r1, r4, lr}
   d641e:	4604      	mov	r4, r0
    }
   d6420:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6422:	b159      	cbz	r1, d643c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6424:	9101      	str	r1, [sp, #4]
   d6426:	f004 fed1 	bl	db1cc <strlen>
   d642a:	6823      	ldr	r3, [r4, #0]
   d642c:	9901      	ldr	r1, [sp, #4]
   d642e:	68db      	ldr	r3, [r3, #12]
   d6430:	4602      	mov	r2, r0
   d6432:	4620      	mov	r0, r4
    }
   d6434:	b002      	add	sp, #8
   d6436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d643a:	4718      	bx	r3
    }
   d643c:	b002      	add	sp, #8
   d643e:	bd10      	pop	{r4, pc}

000d6440 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6440:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d6442:	7803      	ldrb	r3, [r0, #0]
   d6444:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d6446:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d6448:	d520      	bpl.n	d648c <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d644a:	6843      	ldr	r3, [r0, #4]
   d644c:	6881      	ldr	r1, [r0, #8]
   d644e:	f100 020c 	add.w	r2, r0, #12
   d6452:	6818      	ldr	r0, [r3, #0]
   d6454:	9201      	str	r2, [sp, #4]
   d6456:	f000 fb66 	bl	d6b26 <_ZN9SdSpiCard10writeBlockEmPKh>
   d645a:	9a01      	ldr	r2, [sp, #4]
   d645c:	4605      	mov	r5, r0
   d645e:	b918      	cbnz	r0, d6468 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6460:	2500      	movs	r5, #0
}
   d6462:	4628      	mov	r0, r5
   d6464:	b003      	add	sp, #12
   d6466:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d6468:	7823      	ldrb	r3, [r4, #0]
   d646a:	079b      	lsls	r3, r3, #30
   d646c:	d404      	bmi.n	d6478 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d646e:	7823      	ldrb	r3, [r4, #0]
   d6470:	f023 0301 	bic.w	r3, r3, #1
   d6474:	7023      	strb	r3, [r4, #0]
   d6476:	e7f4      	b.n	d6462 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d6478:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d647c:	6919      	ldr	r1, [r3, #16]
   d647e:	4401      	add	r1, r0
   d6480:	6818      	ldr	r0, [r3, #0]
   d6482:	f000 fb50 	bl	d6b26 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d6486:	2800      	cmp	r0, #0
   d6488:	d1f1      	bne.n	d646e <_ZN8FatCache4syncEv+0x2e>
   d648a:	e7e9      	b.n	d6460 <_ZN8FatCache4syncEv+0x20>
  return true;
   d648c:	2501      	movs	r5, #1
   d648e:	e7e8      	b.n	d6462 <_ZN8FatCache4syncEv+0x22>

000d6490 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6490:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6492:	6883      	ldr	r3, [r0, #8]
   d6494:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6496:	4604      	mov	r4, r0
   d6498:	460e      	mov	r6, r1
   d649a:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d649c:	d009      	beq.n	d64b2 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d649e:	f7ff ffcf 	bl	d6440 <_ZN8FatCache4syncEv>
   d64a2:	b908      	cbnz	r0, d64a8 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d64a4:	2000      	movs	r0, #0
}
   d64a6:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d64a8:	076b      	lsls	r3, r5, #29
   d64aa:	d50a      	bpl.n	d64c2 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d64ac:	2300      	movs	r3, #0
   d64ae:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d64b0:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d64b2:	7822      	ldrb	r2, [r4, #0]
   d64b4:	f005 0503 	and.w	r5, r5, #3
   d64b8:	4620      	mov	r0, r4
   d64ba:	4315      	orrs	r5, r2
   d64bc:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d64c0:	e7f1      	b.n	d64a6 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d64c2:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d64c4:	f104 020c 	add.w	r2, r4, #12
   d64c8:	6818      	ldr	r0, [r3, #0]
   d64ca:	4631      	mov	r1, r6
   d64cc:	f000 faa2 	bl	d6a14 <_ZN9SdSpiCard9readBlockEmPh>
   d64d0:	2800      	cmp	r0, #0
   d64d2:	d1eb      	bne.n	d64ac <_ZN8FatCache4readEmh+0x1c>
   d64d4:	e7e6      	b.n	d64a4 <_ZN8FatCache4readEmh+0x14>

000d64d6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d64d6:	7983      	ldrb	r3, [r0, #6]
   d64d8:	6940      	ldr	r0, [r0, #20]
   d64da:	3902      	subs	r1, #2
   d64dc:	4099      	lsls	r1, r3
}
   d64de:	4408      	add	r0, r1
   d64e0:	4770      	bx	lr

000d64e2 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d64e2:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d64e4:	b570      	push	{r4, r5, r6, lr}
   d64e6:	4605      	mov	r5, r0
   d64e8:	460c      	mov	r4, r1
   d64ea:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d64ec:	d802      	bhi.n	d64f4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d64ee:	f04f 30ff 	mov.w	r0, #4294967295
}
   d64f2:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d64f4:	69c3      	ldr	r3, [r0, #28]
   d64f6:	428b      	cmp	r3, r1
   d64f8:	d3f9      	bcc.n	d64ee <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d64fa:	79c3      	ldrb	r3, [r0, #7]
   d64fc:	2b20      	cmp	r3, #32
   d64fe:	d116      	bne.n	d652e <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d6500:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d6502:	2202      	movs	r2, #2
   d6504:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6508:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d650c:	f7ff ffc0 	bl	d6490 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6510:	2800      	cmp	r0, #0
   d6512:	d0ec      	beq.n	d64ee <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d6514:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6518:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d651c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d6520:	69ea      	ldr	r2, [r5, #28]
   d6522:	429a      	cmp	r2, r3
  *value = next;
   d6524:	bf26      	itte	cs
   d6526:	6033      	strcs	r3, [r6, #0]
  return 1;
   d6528:	2001      	movcs	r0, #1
    return 0;
   d652a:	2000      	movcc	r0, #0
   d652c:	e7e1      	b.n	d64f2 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d652e:	2b10      	cmp	r3, #16
   d6530:	d1dd      	bne.n	d64ee <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d6532:	6983      	ldr	r3, [r0, #24]
   d6534:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6538:	2202      	movs	r2, #2
   d653a:	4419      	add	r1, r3
   d653c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6540:	f7ff ffa6 	bl	d6490 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6544:	2800      	cmp	r0, #0
   d6546:	d0d2      	beq.n	d64ee <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d6548:	b2e4      	uxtb	r4, r4
   d654a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d654e:	e7e7      	b.n	d6520 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d6550 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6550:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d6552:	b538      	push	{r3, r4, r5, lr}
   d6554:	460c      	mov	r4, r1
   d6556:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d6558:	d801      	bhi.n	d655e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d655a:	2000      	movs	r0, #0
}
   d655c:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d655e:	69c3      	ldr	r3, [r0, #28]
   d6560:	428b      	cmp	r3, r1
   d6562:	d3fa      	bcc.n	d655a <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d6564:	79c3      	ldrb	r3, [r0, #7]
   d6566:	2b20      	cmp	r3, #32
   d6568:	d10f      	bne.n	d658a <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d656a:	6981      	ldr	r1, [r0, #24]
   d656c:	2203      	movs	r2, #3
   d656e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6572:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6576:	f7ff ff8b 	bl	d6490 <_ZN8FatCache4readEmh>
    if (!pc) {
   d657a:	2800      	cmp	r0, #0
   d657c:	d0ed      	beq.n	d655a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d657e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6582:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d6586:	2001      	movs	r0, #1
   d6588:	e7e8      	b.n	d655c <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d658a:	2b10      	cmp	r3, #16
   d658c:	d1e5      	bne.n	d655a <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d658e:	6983      	ldr	r3, [r0, #24]
   d6590:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6594:	2203      	movs	r2, #3
   d6596:	4419      	add	r1, r3
   d6598:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d659c:	f7ff ff78 	bl	d6490 <_ZN8FatCache4readEmh>
    if (!pc) {
   d65a0:	2800      	cmp	r0, #0
   d65a2:	d0da      	beq.n	d655a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d65a4:	b2e4      	uxtb	r4, r4
   d65a6:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d65aa:	e7ec      	b.n	d6586 <_ZN9FatVolume6fatPutEmm+0x36>

000d65ac <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d65ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d65b0:	68c4      	ldr	r4, [r0, #12]
   d65b2:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d65b4:	4605      	mov	r5, r0
   d65b6:	460e      	mov	r6, r1
   d65b8:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d65ba:	d301      	bcc.n	d65c0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d65bc:	2701      	movs	r7, #1
   d65be:	e001      	b.n	d65c4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d65c0:	460c      	mov	r4, r1
    setStart = false;
   d65c2:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d65c4:	69eb      	ldr	r3, [r5, #28]
    find++;
   d65c6:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d65c8:	42a3      	cmp	r3, r4
   d65ca:	d202      	bcs.n	d65d2 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d65cc:	b9c7      	cbnz	r7, d6600 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d65ce:	68ec      	ldr	r4, [r5, #12]
   d65d0:	e7f4      	b.n	d65bc <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d65d2:	42a6      	cmp	r6, r4
   d65d4:	d014      	beq.n	d6600 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d65d6:	aa01      	add	r2, sp, #4
   d65d8:	4621      	mov	r1, r4
   d65da:	4628      	mov	r0, r5
   d65dc:	f7ff ff81 	bl	d64e2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d65e0:	2800      	cmp	r0, #0
   d65e2:	db0d      	blt.n	d6600 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d65e4:	d0ee      	beq.n	d65c4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d65e6:	9b01      	ldr	r3, [sp, #4]
   d65e8:	2b00      	cmp	r3, #0
   d65ea:	d1eb      	bne.n	d65c4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d65ec:	b107      	cbz	r7, d65f0 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d65ee:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d65f0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d65f4:	4621      	mov	r1, r4
   d65f6:	4628      	mov	r0, r5
   d65f8:	f7ff ffaa 	bl	d6550 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d65fc:	4607      	mov	r7, r0
   d65fe:	b920      	cbnz	r0, d660a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d6600:	2700      	movs	r7, #0
}
   d6602:	4638      	mov	r0, r7
   d6604:	b002      	add	sp, #8
   d6606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d660a:	b916      	cbnz	r6, d6612 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d660c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6610:	e7f7      	b.n	d6602 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d6612:	4622      	mov	r2, r4
   d6614:	4631      	mov	r1, r6
   d6616:	4628      	mov	r0, r5
   d6618:	f7ff ff9a 	bl	d6550 <_ZN9FatVolume6fatPutEmm>
   d661c:	2800      	cmp	r0, #0
   d661e:	d1f5      	bne.n	d660c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d6620:	e7ee      	b.n	d6600 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d6622 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6622:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d6624:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d6626:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d6628:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d662a:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   d662e:	4604      	mov	r4, r0
  m_fatType = 0;
   d6630:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d6632:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d6636:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d6638:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d663c:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d663e:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d6642:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6646:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d664a:	460d      	mov	r5, r1
   d664c:	b1b9      	cbz	r1, d667e <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d664e:	2904      	cmp	r1, #4
   d6650:	d901      	bls.n	d6656 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d6652:	2000      	movs	r0, #0
}
   d6654:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d6656:	4611      	mov	r1, r2
   d6658:	4630      	mov	r0, r6
   d665a:	f7ff ff19 	bl	d6490 <_ZN8FatCache4readEmh>
    if (!pc) {
   d665e:	2800      	cmp	r0, #0
   d6660:	d0f7      	beq.n	d6652 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6662:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6666:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d666a:	065b      	lsls	r3, r3, #25
   d666c:	d1f1      	bne.n	d6652 <_ZN9FatVolume4initEh+0x30>
   d666e:	f105 011b 	add.w	r1, r5, #27
   d6672:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d6676:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d667a:	2d00      	cmp	r5, #0
   d667c:	d0e9      	beq.n	d6652 <_ZN9FatVolume4initEh+0x30>
   d667e:	2200      	movs	r2, #0
   d6680:	4629      	mov	r1, r5
   d6682:	4630      	mov	r0, r6
   d6684:	f7ff ff04 	bl	d6490 <_ZN8FatCache4readEmh>
  if (!pc) {
   d6688:	2800      	cmp	r0, #0
   d668a:	d0e2      	beq.n	d6652 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d668c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d6690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d6694:	d1dd      	bne.n	d6652 <_ZN9FatVolume4initEh+0x30>
   d6696:	7c03      	ldrb	r3, [r0, #16]
   d6698:	2b02      	cmp	r3, #2
   d669a:	d1da      	bne.n	d6652 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d669c:	89c3      	ldrh	r3, [r0, #14]
   d669e:	2b00      	cmp	r3, #0
   d66a0:	d0d7      	beq.n	d6652 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d66a2:	7b41      	ldrb	r1, [r0, #13]
   d66a4:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d66a6:	1e4b      	subs	r3, r1, #1
   d66a8:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d66aa:	2300      	movs	r3, #0
   d66ac:	71a3      	strb	r3, [r4, #6]
   d66ae:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d66b0:	2301      	movs	r3, #1
   d66b2:	4299      	cmp	r1, r3
   d66b4:	d007      	beq.n	d66c6 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d66b6:	3e01      	subs	r6, #1
   d66b8:	d0cb      	beq.n	d6652 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d66ba:	79a2      	ldrb	r2, [r4, #6]
   d66bc:	005b      	lsls	r3, r3, #1
   d66be:	3201      	adds	r2, #1
   d66c0:	b2db      	uxtb	r3, r3
   d66c2:	71a2      	strb	r2, [r4, #6]
   d66c4:	e7f5      	b.n	d66b2 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d66c6:	8ac1      	ldrh	r1, [r0, #22]
   d66c8:	b901      	cbnz	r1, d66cc <_ZN9FatVolume4initEh+0xaa>
   d66ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d66cc:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d66ce:	89c3      	ldrh	r3, [r0, #14]
   d66d0:	442b      	add	r3, r5
   d66d2:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d66d4:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d66d8:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d66da:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d66de:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d66e0:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d66e4:	0149      	lsls	r1, r1, #5
   d66e6:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d66ea:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d66ee:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d66f0:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d66f4:	b902      	cbnz	r2, d66f8 <_ZN9FatVolume4initEh+0xd6>
   d66f6:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d66f8:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d66fa:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d66fc:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d66fe:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d6700:	1c4b      	adds	r3, r1, #1
   d6702:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d6704:	f640 73f4 	movw	r3, #4084	; 0xff4
   d6708:	4299      	cmp	r1, r3
   d670a:	d802      	bhi.n	d6712 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d670c:	230c      	movs	r3, #12
   d670e:	71e3      	strb	r3, [r4, #7]
   d6710:	e79f      	b.n	d6652 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d6712:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d6716:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d6718:	bf85      	ittet	hi
   d671a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d671c:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d671e:	2310      	movls	r3, #16
    m_fatType = 32;
   d6720:	2320      	movhi	r3, #32
   d6722:	71e3      	strb	r3, [r4, #7]
  return true;
   d6724:	2001      	movs	r0, #1
   d6726:	e795      	b.n	d6654 <_ZN9FatVolume4initEh+0x32>

000d6728 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6728:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d672a:	4e0e      	ldr	r6, [pc, #56]	; (d6764 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d672c:	460d      	mov	r5, r1
   d672e:	4614      	mov	r4, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6730:	f001 f988 	bl	d7a44 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6734:	6833      	ldr	r3, [r6, #0]
   d6736:	1ac0      	subs	r0, r0, r3
   d6738:	4b0b      	ldr	r3, [pc, #44]	; (d6768 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d673a:	4298      	cmp	r0, r3
   d673c:	d908      	bls.n	d6750 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d673e:	f001 f989 	bl	d7a54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6742:	4b0a      	ldr	r3, [pc, #40]	; (d676c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6744:	6018      	str	r0, [r3, #0]
    		spark_process();
   d6746:	f001 fc1f 	bl	d7f88 <spark_process>
   d674a:	f001 f97b 	bl	d7a44 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d674e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6750:	f001 f980 	bl	d7a54 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6754:	b280      	uxth	r0, r0
   d6756:	1b40      	subs	r0, r0, r5
}
   d6758:	42a0      	cmp	r0, r4
   d675a:	bfd4      	ite	le
   d675c:	2000      	movle	r0, #0
   d675e:	2001      	movgt	r0, #1
   d6760:	bd70      	pop	{r4, r5, r6, pc}
   d6762:	bf00      	nop
   d6764:	2003e5f4 	.word	0x2003e5f4
   d6768:	000186a0 	.word	0x000186a0
   d676c:	2003e7b4 	.word	0x2003e7b4

000d6770 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6770:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d6772:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d6774:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6776:	b94d      	cbnz	r5, d678c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6778:	6840      	ldr	r0, [r0, #4]
   d677a:	f000 fa6b 	bl	d6c54 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d677e:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d6780:	4629      	mov	r1, r5
   d6782:	7d18      	ldrb	r0, [r3, #20]
   d6784:	f003 fe07 	bl	da396 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6788:	2301      	movs	r3, #1
   d678a:	7223      	strb	r3, [r4, #8]
  }
}
   d678c:	bd38      	pop	{r3, r4, r5, pc}

000d678e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d678e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d6790:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d6792:	4604      	mov	r4, r0
  if (m_spiActive) {
   d6794:	b16b      	cbz	r3, d67b2 <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d6796:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d6798:	2101      	movs	r1, #1
   d679a:	7d18      	ldrb	r0, [r3, #20]
   d679c:	f003 fdfb 	bl	da396 <digitalWrite>
     m_spiDriver->send(data);
   d67a0:	6860      	ldr	r0, [r4, #4]
   d67a2:	21ff      	movs	r1, #255	; 0xff
   d67a4:	f000 fa88 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d67a8:	6860      	ldr	r0, [r4, #4]
   d67aa:	f000 fa67 	bl	d6c7c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d67ae:	2300      	movs	r3, #0
   d67b0:	7223      	strb	r3, [r4, #8]
  }
}
   d67b2:	bd10      	pop	{r4, pc}

000d67b4 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d67b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67b6:	4604      	mov	r4, r0
   d67b8:	460d      	mov	r5, r1
   d67ba:	4616      	mov	r6, r2
   d67bc:	f001 f94a 	bl	d7a54 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d67c0:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d67c2:	6860      	ldr	r0, [r4, #4]
   d67c4:	f000 fa5d 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d67c8:	28ff      	cmp	r0, #255	; 0xff
   d67ca:	7260      	strb	r0, [r4, #9]
   d67cc:	d10e      	bne.n	d67ec <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d67ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d67d2:	4639      	mov	r1, r7
   d67d4:	4620      	mov	r0, r4
   d67d6:	f7ff ffa7 	bl	d6728 <_ZN9SdSpiCard10isTimedOutEtt>
   d67da:	2800      	cmp	r0, #0
   d67dc:	d0f1      	beq.n	d67c2 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d67de:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d67e0:	4620      	mov	r0, r4
   d67e2:	7023      	strb	r3, [r4, #0]
   d67e4:	f7ff ffd3 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d67e8:	2000      	movs	r0, #0
}
   d67ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d67ec:	28fe      	cmp	r0, #254	; 0xfe
   d67ee:	d001      	beq.n	d67f4 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d67f0:	2350      	movs	r3, #80	; 0x50
   d67f2:	e7f5      	b.n	d67e0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d67f4:	6860      	ldr	r0, [r4, #4]
   d67f6:	4632      	mov	r2, r6
   d67f8:	4629      	mov	r1, r5
   d67fa:	f000 fa47 	bl	d6c8c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d67fe:	7260      	strb	r0, [r4, #9]
   d6800:	b108      	cbz	r0, d6806 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d6802:	2360      	movs	r3, #96	; 0x60
   d6804:	e7ec      	b.n	d67e0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d6806:	6860      	ldr	r0, [r4, #4]
   d6808:	f000 fa3b 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
   d680c:	6860      	ldr	r0, [r4, #4]
   d680e:	f000 fa38 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
   d6812:	2001      	movs	r0, #1
   d6814:	e7e9      	b.n	d67ea <_ZN9SdSpiCard8readDataEPhj+0x36>

000d6816 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6816:	b570      	push	{r4, r5, r6, lr}
   d6818:	4604      	mov	r4, r0
   d681a:	460e      	mov	r6, r1
   d681c:	f001 f91a 	bl	d7a54 <HAL_Timer_Get_Milli_Seconds>
   d6820:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6822:	4632      	mov	r2, r6
   d6824:	4629      	mov	r1, r5
   d6826:	4620      	mov	r0, r4
   d6828:	f7ff ff7e 	bl	d6728 <_ZN9SdSpiCard10isTimedOutEtt>
   d682c:	b930      	cbnz	r0, d683c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d682e:	6860      	ldr	r0, [r4, #4]
   d6830:	f000 fa27 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6834:	28ff      	cmp	r0, #255	; 0xff
   d6836:	d1f4      	bne.n	d6822 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6838:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d683a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d683c:	2000      	movs	r0, #0
   d683e:	e7fc      	b.n	d683a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d6840 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d6842:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6844:	9201      	str	r2, [sp, #4]
   d6846:	4604      	mov	r4, r0
   d6848:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d684a:	b90b      	cbnz	r3, d6850 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d684c:	f7ff ff90 	bl	d6770 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d6850:	b125      	cbz	r5, d685c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d6852:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6856:	4620      	mov	r0, r4
   d6858:	f7ff ffdd 	bl	d6816 <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d685c:	6860      	ldr	r0, [r4, #4]
   d685e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6862:	f000 fa29 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
   d6866:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d6868:	af01      	add	r7, sp, #4
   d686a:	5db9      	ldrb	r1, [r7, r6]
   d686c:	6860      	ldr	r0, [r4, #4]
   d686e:	f000 fa23 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d6872:	3e01      	subs	r6, #1
   d6874:	d2f9      	bcs.n	d686a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6876:	2d00      	cmp	r5, #0
   d6878:	6860      	ldr	r0, [r4, #4]
   d687a:	bf0c      	ite	eq
   d687c:	2195      	moveq	r1, #149	; 0x95
   d687e:	2187      	movne	r1, #135	; 0x87
   d6880:	f000 fa1a 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d6884:	6860      	ldr	r0, [r4, #4]
   d6886:	f000 f9fc 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
   d688a:	250b      	movs	r5, #11
   d688c:	6860      	ldr	r0, [r4, #4]
   d688e:	f000 f9f8 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6892:	0603      	lsls	r3, r0, #24
   d6894:	7260      	strb	r0, [r4, #9]
   d6896:	d503      	bpl.n	d68a0 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d6898:	3d01      	subs	r5, #1
   d689a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d689e:	d1f5      	bne.n	d688c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d68a0:	b003      	add	sp, #12
   d68a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68a4 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d68a4:	b570      	push	{r4, r5, r6, lr}
   d68a6:	4604      	mov	r4, r0
   d68a8:	460d      	mov	r5, r1
   d68aa:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d68ac:	2137      	movs	r1, #55	; 0x37
   d68ae:	2200      	movs	r2, #0
   d68b0:	f7ff ffc6 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d68b4:	4632      	mov	r2, r6
   d68b6:	4629      	mov	r1, r5
   d68b8:	4620      	mov	r0, r4
  }
   d68ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d68be:	f7ff bfbf 	b.w	d6840 <_ZN9SdSpiCard11cardCommandEhm>
	...

000d68c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d68c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d68c8:	2500      	movs	r5, #0
   d68ca:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d68cc:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d68ce:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d68d0:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d68d2:	4604      	mov	r4, r0
   d68d4:	4690      	mov	r8, r2
   d68d6:	461e      	mov	r6, r3
   d68d8:	f001 f8bc 	bl	d7a54 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d68dc:	4641      	mov	r1, r8
   d68de:	4607      	mov	r7, r0
   d68e0:	6860      	ldr	r0, [r4, #4]
   d68e2:	f000 f9bb 	bl	d6c5c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d68e6:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d68e8:	4a49      	ldr	r2, [pc, #292]	; (d6a10 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d68ea:	721d      	strb	r5, [r3, #8]
   d68ec:	2501      	movs	r5, #1
   d68ee:	60da      	str	r2, [r3, #12]
   d68f0:	821d      	strh	r5, [r3, #16]
  spiStart();
   d68f2:	4620      	mov	r0, r4
   d68f4:	f7ff ff3c 	bl	d6770 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d68f8:	6863      	ldr	r3, [r4, #4]
   d68fa:	4629      	mov	r1, r5
   d68fc:	7d18      	ldrb	r0, [r3, #20]
   d68fe:	f003 fd4a 	bl	da396 <digitalWrite>
   d6902:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d6904:	6860      	ldr	r0, [r4, #4]
   d6906:	21ff      	movs	r1, #255	; 0xff
   d6908:	3d01      	subs	r5, #1
   d690a:	f000 f9d5 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d690e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6912:	d1f7      	bne.n	d6904 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d6914:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d6916:	4629      	mov	r1, r5
   d6918:	7d18      	ldrb	r0, [r3, #20]
   d691a:	f003 fd3c 	bl	da396 <digitalWrite>
  }
   d691e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6920:	2200      	movs	r2, #0
   d6922:	4611      	mov	r1, r2
   d6924:	4620      	mov	r0, r4
   d6926:	f7ff ff8b 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
   d692a:	2801      	cmp	r0, #1
   d692c:	4680      	mov	r8, r0
   d692e:	d018      	beq.n	d6962 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d6930:	3d01      	subs	r5, #1
   d6932:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6936:	d107      	bne.n	d6948 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d6938:	2320      	movs	r3, #32
  spiStop();
   d693a:	4620      	mov	r0, r4
   d693c:	7023      	strb	r3, [r4, #0]
   d693e:	f7ff ff26 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6942:	2000      	movs	r0, #0
}
   d6944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d6948:	6860      	ldr	r0, [r4, #4]
   d694a:	21fd      	movs	r1, #253	; 0xfd
   d694c:	f000 f9b4 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
   d6950:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d6954:	6860      	ldr	r0, [r4, #4]
   d6956:	f000 f994 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d695a:	f1b8 0801 	subs.w	r8, r8, #1
   d695e:	d1f9      	bne.n	d6954 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d6960:	e7de      	b.n	d6920 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6962:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6966:	2108      	movs	r1, #8
   d6968:	4620      	mov	r0, r4
   d696a:	f7ff ff69 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
   d696e:	2805      	cmp	r0, #5
   d6970:	d114      	bne.n	d699c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d6972:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6976:	2500      	movs	r5, #0
   d6978:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d697a:	462a      	mov	r2, r5
   d697c:	2129      	movs	r1, #41	; 0x29
   d697e:	4620      	mov	r0, r4
   d6980:	f7ff ff90 	bl	d68a4 <_ZN9SdSpiCard8cardAcmdEhm>
   d6984:	4602      	mov	r2, r0
   d6986:	b1d8      	cbz	r0, d69c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6988:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d698c:	4639      	mov	r1, r7
   d698e:	4620      	mov	r0, r4
   d6990:	f7ff feca 	bl	d6728 <_ZN9SdSpiCard10isTimedOutEtt>
   d6994:	2800      	cmp	r0, #0
   d6996:	d0f0      	beq.n	d697a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d6998:	2343      	movs	r3, #67	; 0x43
   d699a:	e7ce      	b.n	d693a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d699c:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d699e:	6860      	ldr	r0, [r4, #4]
   d69a0:	f000 f96f 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
   d69a4:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d69a6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d69aa:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d69ac:	d1f7      	bne.n	d699e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d69ae:	28aa      	cmp	r0, #170	; 0xaa
   d69b0:	d104      	bne.n	d69bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d69b2:	2302      	movs	r3, #2
   d69b4:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d69b6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d69ba:	e7dd      	b.n	d6978 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d69bc:	2325      	movs	r3, #37	; 0x25
   d69be:	e7bc      	b.n	d693a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d69c0:	7aa3      	ldrb	r3, [r4, #10]
   d69c2:	2b02      	cmp	r3, #2
   d69c4:	d118      	bne.n	d69f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d69c6:	213a      	movs	r1, #58	; 0x3a
   d69c8:	4620      	mov	r0, r4
   d69ca:	f7ff ff39 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
   d69ce:	b108      	cbz	r0, d69d4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d69d0:	2337      	movs	r3, #55	; 0x37
   d69d2:	e7b2      	b.n	d693a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d69d4:	6860      	ldr	r0, [r4, #4]
   d69d6:	f000 f954 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d69da:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d69de:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d69e0:	bf04      	itt	eq
   d69e2:	2303      	moveq	r3, #3
   d69e4:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d69e6:	6860      	ldr	r0, [r4, #4]
   d69e8:	f000 f94b 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
   d69ec:	6860      	ldr	r0, [r4, #4]
   d69ee:	f000 f948 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
   d69f2:	6860      	ldr	r0, [r4, #4]
   d69f4:	f000 f945 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d69f8:	4620      	mov	r0, r4
   d69fa:	f7ff fec8 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d69fe:	6863      	ldr	r3, [r4, #4]
   d6a00:	7930      	ldrb	r0, [r6, #4]
   d6a02:	68b1      	ldr	r1, [r6, #8]
   d6a04:	89b2      	ldrh	r2, [r6, #12]
   d6a06:	821a      	strh	r2, [r3, #16]
   d6a08:	7218      	strb	r0, [r3, #8]
   d6a0a:	60d9      	str	r1, [r3, #12]
  return true;
   d6a0c:	2001      	movs	r0, #1
   d6a0e:	e799      	b.n	d6944 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d6a10:	0003d090 	.word	0x0003d090

000d6a14 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6a14:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6a16:	7a83      	ldrb	r3, [r0, #10]
   d6a18:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6a1a:	bf18      	it	ne
   d6a1c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6a1e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d6a20:	460a      	mov	r2, r1
   d6a22:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6a24:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d6a26:	f7ff ff0b 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
   d6a2a:	b130      	cbz	r0, d6a3a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d6a2c:	2330      	movs	r3, #48	; 0x30
   d6a2e:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6a30:	4620      	mov	r0, r4
   d6a32:	f7ff feac 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6a36:	2500      	movs	r5, #0
   d6a38:	e00b      	b.n	d6a52 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d6a3a:	4629      	mov	r1, r5
   d6a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6a40:	4620      	mov	r0, r4
   d6a42:	f7ff feb7 	bl	d67b4 <_ZN9SdSpiCard8readDataEPhj>
   d6a46:	4605      	mov	r5, r0
   d6a48:	2800      	cmp	r0, #0
   d6a4a:	d0f1      	beq.n	d6a30 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d6a4c:	4620      	mov	r0, r4
   d6a4e:	f7ff fe9e 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
}
   d6a52:	4628      	mov	r0, r5
   d6a54:	bd38      	pop	{r3, r4, r5, pc}

000d6a56 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6a56:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6a58:	7a83      	ldrb	r3, [r0, #10]
   d6a5a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6a5c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d6a5e:	bf18      	it	ne
   d6a60:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d6a62:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6a64:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d6a66:	f7ff feeb 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
   d6a6a:	b130      	cbz	r0, d6a7a <_ZN9SdSpiCard9readStartEm+0x24>
   d6a6c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d6a6e:	4620      	mov	r0, r4
   d6a70:	7023      	strb	r3, [r4, #0]
   d6a72:	f7ff fe8c 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6a76:	2000      	movs	r0, #0
}
   d6a78:	bd10      	pop	{r4, pc}
  return true;
   d6a7a:	2001      	movs	r0, #1
   d6a7c:	e7fc      	b.n	d6a78 <_ZN9SdSpiCard9readStartEm+0x22>

000d6a7e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d6a7e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6a80:	2200      	movs	r2, #0
   d6a82:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d6a84:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6a86:	f7ff fedb 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
   d6a8a:	b130      	cbz	r0, d6a9a <_ZN9SdSpiCard8readStopEv+0x1c>
   d6a8c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d6a8e:	4620      	mov	r0, r4
   d6a90:	7023      	strb	r3, [r4, #0]
   d6a92:	f7ff fe7c 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6a96:	2000      	movs	r0, #0
}
   d6a98:	bd10      	pop	{r4, pc}
  spiStop();
   d6a9a:	4620      	mov	r0, r4
   d6a9c:	f7ff fe77 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6aa0:	2001      	movs	r0, #1
   d6aa2:	e7f9      	b.n	d6a98 <_ZN9SdSpiCard8readStopEv+0x1a>

000d6aa4 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6aa6:	4604      	mov	r4, r0
   d6aa8:	4616      	mov	r6, r2
   d6aaa:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6aac:	f7ff ffd3 	bl	d6a56 <_ZN9SdSpiCard9readStartEm>
   d6ab0:	b168      	cbz	r0, d6ace <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d6ab2:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6ab4:	b2ab      	uxth	r3, r5
   d6ab6:	429f      	cmp	r7, r3
   d6ab8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d6abc:	d909      	bls.n	d6ad2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d6abe:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6ac2:	4620      	mov	r0, r4
   d6ac4:	f7ff fe76 	bl	d67b4 <_ZN9SdSpiCard8readDataEPhj>
   d6ac8:	3501      	adds	r5, #1
   d6aca:	2800      	cmp	r0, #0
   d6acc:	d1f2      	bne.n	d6ab4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d6ace:	2000      	movs	r0, #0
   d6ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d6ad2:	4620      	mov	r0, r4
}
   d6ad4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d6ad8:	f7ff bfd1 	b.w	d6a7e <_ZN9SdSpiCard8readStopEv>

000d6adc <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6adc:	b538      	push	{r3, r4, r5, lr}
   d6ade:	4604      	mov	r4, r0
   d6ae0:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d6ae2:	6840      	ldr	r0, [r0, #4]
   d6ae4:	f000 f8e8 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d6ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6aec:	6860      	ldr	r0, [r4, #4]
   d6aee:	4629      	mov	r1, r5
   d6af0:	f000 f8e6 	bl	d6cc0 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d6af4:	6860      	ldr	r0, [r4, #4]
   d6af6:	21ff      	movs	r1, #255	; 0xff
   d6af8:	f000 f8de 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
   d6afc:	6860      	ldr	r0, [r4, #4]
   d6afe:	21ff      	movs	r1, #255	; 0xff
   d6b00:	f000 f8da 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d6b04:	6860      	ldr	r0, [r4, #4]
   d6b06:	f000 f8bc 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6b0a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6b0c:	f000 001f 	and.w	r0, r0, #31
   d6b10:	2805      	cmp	r0, #5
   d6b12:	d006      	beq.n	d6b22 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d6b14:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6b16:	4620      	mov	r0, r4
   d6b18:	7023      	strb	r3, [r4, #0]
   d6b1a:	f7ff fe38 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6b1e:	2000      	movs	r0, #0
}
   d6b20:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d6b22:	2001      	movs	r0, #1
   d6b24:	e7fc      	b.n	d6b20 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d6b26 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6b26:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6b28:	7a83      	ldrb	r3, [r0, #10]
   d6b2a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6b2c:	bf18      	it	ne
   d6b2e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6b30:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d6b32:	460a      	mov	r2, r1
   d6b34:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6b36:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d6b38:	f7ff fe82 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
   d6b3c:	4606      	mov	r6, r0
   d6b3e:	b130      	cbz	r0, d6b4e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d6b40:	2332      	movs	r3, #50	; 0x32
   d6b42:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6b44:	4620      	mov	r0, r4
   d6b46:	f7ff fe22 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6b4a:	2500      	movs	r5, #0
   d6b4c:	e01f      	b.n	d6b8e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d6b4e:	462a      	mov	r2, r5
   d6b50:	21fe      	movs	r1, #254	; 0xfe
   d6b52:	4620      	mov	r0, r4
   d6b54:	f7ff ffc2 	bl	d6adc <_ZN9SdSpiCard9writeDataEhPKh>
   d6b58:	2800      	cmp	r0, #0
   d6b5a:	d0f3      	beq.n	d6b44 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6b5c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6b60:	4620      	mov	r0, r4
   d6b62:	f7ff fe58 	bl	d6816 <_ZN9SdSpiCard11waitNotBusyEt>
   d6b66:	4605      	mov	r5, r0
   d6b68:	b908      	cbnz	r0, d6b6e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d6b6a:	235a      	movs	r3, #90	; 0x5a
   d6b6c:	e7e9      	b.n	d6b42 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6b6e:	4632      	mov	r2, r6
   d6b70:	210d      	movs	r1, #13
   d6b72:	4620      	mov	r0, r4
   d6b74:	f7ff fe64 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
   d6b78:	b108      	cbz	r0, d6b7e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d6b7a:	2329      	movs	r3, #41	; 0x29
   d6b7c:	e7e1      	b.n	d6b42 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d6b7e:	6860      	ldr	r0, [r4, #4]
   d6b80:	f000 f87f 	bl	d6c82 <_ZN14SdSpiAltDriver7receiveEv>
   d6b84:	2800      	cmp	r0, #0
   d6b86:	d1f8      	bne.n	d6b7a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d6b88:	4620      	mov	r0, r4
   d6b8a:	f7ff fe00 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
}
   d6b8e:	4628      	mov	r0, r5
   d6b90:	bd70      	pop	{r4, r5, r6, pc}

000d6b92 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d6b92:	b513      	push	{r0, r1, r4, lr}
   d6b94:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6b96:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d6b9a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6b9c:	f7ff fe3b 	bl	d6816 <_ZN9SdSpiCard11waitNotBusyEt>
   d6ba0:	9a01      	ldr	r2, [sp, #4]
   d6ba2:	b930      	cbnz	r0, d6bb2 <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d6ba4:	235b      	movs	r3, #91	; 0x5b
   d6ba6:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6ba8:	4620      	mov	r0, r4
   d6baa:	f7ff fdf0 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6bae:	2000      	movs	r0, #0
   d6bb0:	e005      	b.n	d6bbe <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6bb2:	21fc      	movs	r1, #252	; 0xfc
   d6bb4:	4620      	mov	r0, r4
   d6bb6:	f7ff ff91 	bl	d6adc <_ZN9SdSpiCard9writeDataEhPKh>
   d6bba:	2800      	cmp	r0, #0
   d6bbc:	d0f4      	beq.n	d6ba8 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d6bbe:	b002      	add	sp, #8
   d6bc0:	bd10      	pop	{r4, pc}

000d6bc2 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6bc2:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6bc4:	7a83      	ldrb	r3, [r0, #10]
   d6bc6:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6bc8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d6bca:	bf18      	it	ne
   d6bcc:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6bce:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6bd0:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d6bd2:	f7ff fe35 	bl	d6840 <_ZN9SdSpiCard11cardCommandEhm>
   d6bd6:	b130      	cbz	r0, d6be6 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6bd8:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6bda:	4620      	mov	r0, r4
   d6bdc:	7023      	strb	r3, [r4, #0]
   d6bde:	f7ff fdd6 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6be2:	2000      	movs	r0, #0
}
   d6be4:	bd10      	pop	{r4, pc}
  return true;
   d6be6:	2001      	movs	r0, #1
   d6be8:	e7fc      	b.n	d6be4 <_ZN9SdSpiCard10writeStartEm+0x22>

000d6bea <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6bea:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6bec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d6bf0:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6bf2:	f7ff fe10 	bl	d6816 <_ZN9SdSpiCard11waitNotBusyEt>
   d6bf6:	4605      	mov	r5, r0
   d6bf8:	b930      	cbnz	r0, d6c08 <_ZN9SdSpiCard9writeStopEv+0x1e>
   d6bfa:	2356      	movs	r3, #86	; 0x56
   d6bfc:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d6bfe:	4620      	mov	r0, r4
   d6c00:	f7ff fdc5 	bl	d678e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d6c04:	4628      	mov	r0, r5
   d6c06:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d6c08:	6860      	ldr	r0, [r4, #4]
   d6c0a:	21fd      	movs	r1, #253	; 0xfd
   d6c0c:	f000 f854 	bl	d6cb8 <_ZN14SdSpiAltDriver4sendEh>
   d6c10:	e7f5      	b.n	d6bfe <_ZN9SdSpiCard9writeStopEv+0x14>

000d6c12 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c14:	4604      	mov	r4, r0
   d6c16:	4616      	mov	r6, r2
   d6c18:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6c1a:	f7ff ffd2 	bl	d6bc2 <_ZN9SdSpiCard10writeStartEm>
   d6c1e:	b170      	cbz	r0, d6c3e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d6c20:	2500      	movs	r5, #0
   d6c22:	42bd      	cmp	r5, r7
   d6c24:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d6c28:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d6c2a:	d004      	beq.n	d6c36 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6c2c:	f7ff ffb1 	bl	d6b92 <_ZN9SdSpiCard9writeDataEPKh>
   d6c30:	b128      	cbz	r0, d6c3e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d6c32:	3501      	adds	r5, #1
   d6c34:	e7f5      	b.n	d6c22 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d6c36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d6c3a:	f7ff bfd6 	b.w	d6bea <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d6c3e:	4620      	mov	r0, r4
   d6c40:	f7ff fda5 	bl	d678e <_ZN9SdSpiCard7spiStopEv>
}
   d6c44:	2000      	movs	r0, #0
   d6c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c48 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6c48:	4b01      	ldr	r3, [pc, #4]	; (d6c50 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6c4a:	2201      	movs	r2, #1
   d6c4c:	701a      	strb	r2, [r3, #0]
}
   d6c4e:	4770      	bx	lr
   d6c50:	2003e5f8 	.word	0x2003e5f8

000d6c54 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6c54:	1d01      	adds	r1, r0, #4
   d6c56:	6800      	ldr	r0, [r0, #0]
   d6c58:	f001 ba56 	b.w	d8108 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d6c5c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6c5c:	b510      	push	{r4, lr}
   d6c5e:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6c60:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6c62:	6800      	ldr	r0, [r0, #0]
   d6c64:	f001 fa26 	bl	d80b4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6c68:	7d20      	ldrb	r0, [r4, #20]
   d6c6a:	2101      	movs	r1, #1
   d6c6c:	f003 fb82 	bl	da374 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6c70:	7d20      	ldrb	r0, [r4, #20]
   d6c72:	2101      	movs	r1, #1
}
   d6c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d6c78:	f003 bb8d 	b.w	da396 <digitalWrite>

000d6c7c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6c7c:	6800      	ldr	r0, [r0, #0]
   d6c7e:	f001 ba2a 	b.w	d80d6 <_ZN8SPIClass14endTransactionEv>

000d6c82 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6c82:	6800      	ldr	r0, [r0, #0]
   d6c84:	21ff      	movs	r1, #255	; 0xff
   d6c86:	f001 baad 	b.w	d81e4 <_ZN8SPIClass8transferEh>
	...

000d6c8c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c8e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6c90:	4a07      	ldr	r2, [pc, #28]	; (d6cb0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6c92:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d6c94:	2500      	movs	r5, #0
   d6c96:	4c07      	ldr	r4, [pc, #28]	; (d6cb4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6c98:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d6c9a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6c9c:	460a      	mov	r2, r1
   d6c9e:	4629      	mov	r1, r5
   d6ca0:	f001 faa6 	bl	d81f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6ca4:	7823      	ldrb	r3, [r4, #0]
   d6ca6:	2b00      	cmp	r3, #0
   d6ca8:	d0fc      	beq.n	d6ca4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6caa:	2000      	movs	r0, #0
   d6cac:	b003      	add	sp, #12
   d6cae:	bd30      	pop	{r4, r5, pc}
   d6cb0:	000d6c49 	.word	0x000d6c49
   d6cb4:	2003e5f8 	.word	0x2003e5f8

000d6cb8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6cb8:	6800      	ldr	r0, [r0, #0]
   d6cba:	f001 ba93 	b.w	d81e4 <_ZN8SPIClass8transferEh>
	...

000d6cc0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6cc2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d6cc4:	4a06      	ldr	r2, [pc, #24]	; (d6ce0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6cc6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d6cc8:	2500      	movs	r5, #0
   d6cca:	4c06      	ldr	r4, [pc, #24]	; (d6ce4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d6ccc:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d6cce:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d6cd0:	462a      	mov	r2, r5
   d6cd2:	f001 fa8d 	bl	d81f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d6cd6:	7823      	ldrb	r3, [r4, #0]
   d6cd8:	2b00      	cmp	r3, #0
   d6cda:	d0fc      	beq.n	d6cd6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6cdc:	b003      	add	sp, #12
   d6cde:	bd30      	pop	{r4, r5, pc}
   d6ce0:	000d6c49 	.word	0x000d6c49
   d6ce4:	2003e5f8 	.word	0x2003e5f8

000d6ce8 <_ZN16Adafruit_SSD167513setRAMAddressEtt>:
    @brief Some displays require setting the RAM address pointer
    @param x X address counter value
    @param y Y address counter value
*/
/**************************************************************************/
void Adafruit_SSD1675::setRAMAddress(uint16_t x, uint16_t y) {
   d6ce8:	b513      	push	{r0, r1, r4, lr}
  uint8_t buf[2];

  // Set RAM X address counter
  buf[0] = 0;
   d6cea:	2300      	movs	r3, #0
   d6cec:	f88d 3004 	strb.w	r3, [sp, #4]
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d6cf0:	aa01      	add	r2, sp, #4
   d6cf2:	2301      	movs	r3, #1
   d6cf4:	214e      	movs	r1, #78	; 0x4e
void Adafruit_SSD1675::setRAMAddress(uint16_t x, uint16_t y) {
   d6cf6:	4604      	mov	r4, r0
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d6cf8:	f000 fe55 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>

  // Set RAM Y address counter
  buf[0] = 0xF9;
   d6cfc:	23f9      	movs	r3, #249	; 0xf9
   d6cfe:	f8ad 3004 	strh.w	r3, [sp, #4]
  buf[1] = 0x00;
  EPD_command(SSD1675_SET_RAMYCOUNT, buf, 2);
   d6d02:	aa01      	add	r2, sp, #4
   d6d04:	2302      	movs	r3, #2
   d6d06:	214f      	movs	r1, #79	; 0x4f
   d6d08:	4620      	mov	r0, r4
   d6d0a:	f000 fe4c 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
}
   d6d0e:	b002      	add	sp, #8
   d6d10:	bd10      	pop	{r4, pc}

000d6d12 <_ZN16Adafruit_SSD167515writeRAMCommandEh>:
  if (index == 0) {
   d6d12:	460a      	mov	r2, r1
   d6d14:	b911      	cbnz	r1, d6d1c <_ZN16Adafruit_SSD167515writeRAMCommandEh+0xa>
    return EPD_command(SSD1675_WRITE_RAM1, false);
   d6d16:	2124      	movs	r1, #36	; 0x24
    return EPD_command(SSD1675_WRITE_RAM2, false);
   d6d18:	f000 be2d 	b.w	d7976 <_ZN12Adafruit_EPD11EPD_commandEhb>
  if (index == 1) {
   d6d1c:	2901      	cmp	r1, #1
   d6d1e:	d102      	bne.n	d6d26 <_ZN16Adafruit_SSD167515writeRAMCommandEh+0x14>
    return EPD_command(SSD1675_WRITE_RAM2, false);
   d6d20:	2200      	movs	r2, #0
   d6d22:	2126      	movs	r1, #38	; 0x26
   d6d24:	e7f8      	b.n	d6d18 <_ZN16Adafruit_SSD167515writeRAMCommandEh+0x6>
}
   d6d26:	2000      	movs	r0, #0
   d6d28:	4770      	bx	lr
	...

000d6d2c <_ZN16Adafruit_SSD1675C1Eiiaaaaa>:
Adafruit_SSD1675::Adafruit_SSD1675(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY)
   d6d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d2e:	b085      	sub	sp, #20
   d6d30:	4604      	mov	r4, r0
  : Adafruit_EPD(width, height, DC, RST, CS, SRCS, BUSY) {
   d6d32:	f99d c034 	ldrsb.w	ip, [sp, #52]	; 0x34
Adafruit_SSD1675::Adafruit_SSD1675(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY)
   d6d36:	f99d 7030 	ldrsb.w	r7, [sp, #48]	; 0x30
  : Adafruit_EPD(width, height, DC, RST, CS, SRCS, BUSY) {
   d6d3a:	e9cd 7c02 	strd	r7, ip, [sp, #8]
   d6d3e:	f99d c02c 	ldrsb.w	ip, [sp, #44]	; 0x2c
   d6d42:	f8cd c004 	str.w	ip, [sp, #4]
   d6d46:	f99d c028 	ldrsb.w	ip, [sp, #40]	; 0x28
   d6d4a:	f8cd c000 	str.w	ip, [sp]
Adafruit_SSD1675::Adafruit_SSD1675(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY)
   d6d4e:	4616      	mov	r6, r2
   d6d50:	460d      	mov	r5, r1
  : Adafruit_EPD(width, height, DC, RST, CS, SRCS, BUSY) {
   d6d52:	f000 fbad 	bl	d74b0 <_ZN12Adafruit_EPDC1Eiiaaaaa>
   d6d56:	4b17      	ldr	r3, [pc, #92]	; (d6db4 <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x88>)
   d6d58:	6023      	str	r3, [r4, #0]
  if ((height % 8) != 0) {
   d6d5a:	f016 0307 	ands.w	r3, r6, #7
   d6d5e:	d007      	beq.n	d6d70 <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x44>
    height += 8 - (height % 8);
   d6d60:	4272      	negs	r2, r6
   d6d62:	f002 0207 	and.w	r2, r2, #7
   d6d66:	bf58      	it	pl
   d6d68:	4253      	negpl	r3, r2
   d6d6a:	f1c3 0308 	rsb	r3, r3, #8
   d6d6e:	441e      	add	r6, r3
  buffer1_size = width * height / 8;
   d6d70:	4375      	muls	r5, r6
   d6d72:	bf48      	it	mi
   d6d74:	3507      	addmi	r5, #7
   d6d76:	f3c5 01cf 	ubfx	r1, r5, #3, #16
  if (SRCS >= 0) {
   d6d7a:	2f00      	cmp	r7, #0
  buffer1_size = width * height / 8;
   d6d7c:	ea4f 00e5 	mov.w	r0, r5, asr #3
   d6d80:	85e1      	strh	r1, [r4, #46]	; 0x2e
  buffer2_size = buffer1_size;
   d6d82:	8621      	strh	r1, [r4, #48]	; 0x30
  if (SRCS >= 0) {
   d6d84:	db0c      	blt.n	d6da0 <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x74>
    use_sram = true;
   d6d86:	2301      	movs	r3, #1
   d6d88:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    buffer1_addr = 0;
   d6d8c:	2300      	movs	r3, #0
    buffer1 = buffer2 = NULL;
   d6d8e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
    buffer1_addr = 0;
   d6d92:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    buffer2_addr = buffer1_size;
   d6d96:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
}
   d6d9a:	4620      	mov	r0, r4
   d6d9c:	b005      	add	sp, #20
   d6d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buffer1 = (uint8_t *)malloc(buffer1_size);
   d6da0:	b280      	uxth	r0, r0
   d6da2:	f001 f909 	bl	d7fb8 <malloc>
   d6da6:	6360      	str	r0, [r4, #52]	; 0x34
    buffer2 = (uint8_t *)malloc(buffer2_size);
   d6da8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   d6daa:	f001 f905 	bl	d7fb8 <malloc>
   d6dae:	63a0      	str	r0, [r4, #56]	; 0x38
   d6db0:	e7f3      	b.n	d6d9a <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x6e>
   d6db2:	bf00      	nop
   d6db4:	000dbcac 	.word	0x000dbcac

000d6db8 <_ZN16Adafruit_SSD16759busy_waitEv>:
{
   d6db8:	b510      	push	{r4, lr}
  if (_busy_pin >= 0) {
   d6dba:	f990 3025 	ldrsb.w	r3, [r0, #37]	; 0x25
   d6dbe:	2b00      	cmp	r3, #0
{
   d6dc0:	4604      	mov	r4, r0
  if (_busy_pin >= 0) {
   d6dc2:	db09      	blt.n	d6dd8 <_ZN16Adafruit_SSD16759busy_waitEv+0x20>
    while(digitalRead(_busy_pin)) { //wait for busy low
   d6dc4:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   d6dc8:	b280      	uxth	r0, r0
   d6dca:	f003 fafd 	bl	da3c8 <digitalRead>
   d6dce:	b148      	cbz	r0, d6de4 <_ZN16Adafruit_SSD16759busy_waitEv+0x2c>
      delay(10);
   d6dd0:	200a      	movs	r0, #10
   d6dd2:	f002 fdbd 	bl	d9950 <delay>
    while(digitalRead(_busy_pin)) { //wait for busy low
   d6dd6:	e7f5      	b.n	d6dc4 <_ZN16Adafruit_SSD16759busy_waitEv+0xc>
}
   d6dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(BUSY_WAIT);
   d6ddc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6de0:	f002 bdb6 	b.w	d9950 <delay>
}
   d6de4:	bd10      	pop	{r4, pc}

000d6de6 <_ZN16Adafruit_SSD16756updateEv>:
{
   d6de6:	b513      	push	{r0, r1, r4, lr}
  buf[0] = 0xC7;
   d6de8:	23c7      	movs	r3, #199	; 0xc7
{
   d6dea:	4604      	mov	r4, r0
  buf[0] = 0xC7;
   d6dec:	f88d 3004 	strb.w	r3, [sp, #4]
  EPD_command(SSD1675_DISP_CTRL2, buf, 1);
   d6df0:	aa01      	add	r2, sp, #4
   d6df2:	2301      	movs	r3, #1
   d6df4:	2122      	movs	r1, #34	; 0x22
   d6df6:	f000 fdd6 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_MASTER_ACTIVATE);
   d6dfa:	2201      	movs	r2, #1
   d6dfc:	2120      	movs	r1, #32
   d6dfe:	4620      	mov	r0, r4
   d6e00:	f000 fdb9 	bl	d7976 <_ZN12Adafruit_EPD11EPD_commandEhb>
  busy_wait();
   d6e04:	4620      	mov	r0, r4
   d6e06:	f7ff ffd7 	bl	d6db8 <_ZN16Adafruit_SSD16759busy_waitEv>
  if (_busy_pin <= -1) {
   d6e0a:	f994 3025 	ldrsb.w	r3, [r4, #37]	; 0x25
   d6e0e:	2b00      	cmp	r3, #0
   d6e10:	da03      	bge.n	d6e1a <_ZN16Adafruit_SSD16756updateEv+0x34>
    delay(1000);
   d6e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6e16:	f002 fd9b 	bl	d9950 <delay>
}
   d6e1a:	b002      	add	sp, #8
   d6e1c:	bd10      	pop	{r4, pc}
	...

000d6e20 <_ZN16Adafruit_SSD16757powerUpEv>:
{
   d6e20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6e24:	4604      	mov	r4, r0
  hardwareReset();
   d6e26:	f000 fb89 	bl	d753c <_ZN12Adafruit_EPD13hardwareResetEv>
  delay(100);
   d6e2a:	2064      	movs	r0, #100	; 0x64
   d6e2c:	f002 fd90 	bl	d9950 <delay>
  busy_wait();
   d6e30:	4620      	mov	r0, r4
   d6e32:	f7ff ffc1 	bl	d6db8 <_ZN16Adafruit_SSD16759busy_waitEv>
  EPD_command(SSD1675_SW_RESET);
   d6e36:	2201      	movs	r2, #1
   d6e38:	2112      	movs	r1, #18
   d6e3a:	4620      	mov	r0, r4
   d6e3c:	f000 fd9b 	bl	d7976 <_ZN12Adafruit_EPD11EPD_commandEhb>
  busy_wait();
   d6e40:	4620      	mov	r0, r4
   d6e42:	f7ff ffb9 	bl	d6db8 <_ZN16Adafruit_SSD16759busy_waitEv>
  buf[0] = 0x54;
   d6e46:	2354      	movs	r3, #84	; 0x54
   d6e48:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_SET_ANALOGBLOCK, buf, 1);
   d6e4c:	466a      	mov	r2, sp
   d6e4e:	4620      	mov	r0, r4
   d6e50:	2301      	movs	r3, #1
   d6e52:	2174      	movs	r1, #116	; 0x74
   d6e54:	f000 fda7 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x3B;
   d6e58:	f04f 083b 	mov.w	r8, #59	; 0x3b
  EPD_command(SSD1675_SET_DIGITALBLOCK, buf, 1);
   d6e5c:	466a      	mov	r2, sp
   d6e5e:	4620      	mov	r0, r4
   d6e60:	2301      	movs	r3, #1
   d6e62:	217e      	movs	r1, #126	; 0x7e
  buf[0] = 0x3B;
   d6e64:	f88d 8000 	strb.w	r8, [sp]
  EPD_command(SSD1675_SET_DIGITALBLOCK, buf, 1);
   d6e68:	f000 fd9d 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0xFA;   // 250-1
   d6e6c:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   d6e70:	f8ad 3000 	strh.w	r3, [sp]
  buf[2] = 0x00;
   d6e74:	2600      	movs	r6, #0
  EPD_command(SSD1675_DRIVER_CONTROL, buf, 3);
   d6e76:	466a      	mov	r2, sp
   d6e78:	4620      	mov	r0, r4
   d6e7a:	2303      	movs	r3, #3
   d6e7c:	2101      	movs	r1, #1
  buf[0] = 0x03;
   d6e7e:	2503      	movs	r5, #3
  buf[2] = 0x00;
   d6e80:	f88d 6002 	strb.w	r6, [sp, #2]
  EPD_command(SSD1675_DRIVER_CONTROL, buf, 3);
   d6e84:	f000 fd8f 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_DATA_MODE, buf, 1);
   d6e88:	466a      	mov	r2, sp
   d6e8a:	4620      	mov	r0, r4
   d6e8c:	2301      	movs	r3, #1
   d6e8e:	2111      	movs	r1, #17
  buf[0] = 0x03;
   d6e90:	f88d 5000 	strb.w	r5, [sp]
  EPD_command(SSD1675_DATA_MODE, buf, 1);
   d6e94:	f000 fd87 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x00;
   d6e98:	f44f 6370 	mov.w	r3, #3840	; 0xf00
   d6e9c:	f8ad 3000 	strh.w	r3, [sp]
  EPD_command(SSD1675_SET_RAMXPOS, buf, 2);
   d6ea0:	466a      	mov	r2, sp
   d6ea2:	4620      	mov	r0, r4
   d6ea4:	2302      	movs	r3, #2
   d6ea6:	2144      	movs	r1, #68	; 0x44
   d6ea8:	f000 fd7d 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x00;  // 0xF9-->(249+1)=250
   d6eac:	f44f 0379 	mov.w	r3, #16318464	; 0xf90000
   d6eb0:	9300      	str	r3, [sp, #0]
  EPD_command(SSD1675_SET_RAMYPOS, buf, 4);
   d6eb2:	466a      	mov	r2, sp
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	2304      	movs	r3, #4
   d6eb8:	2145      	movs	r1, #69	; 0x45
   d6eba:	f000 fd74 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_WRITE_BORDER, buf, 1);
   d6ebe:	466a      	mov	r2, sp
   d6ec0:	4620      	mov	r0, r4
   d6ec2:	2301      	movs	r3, #1
   d6ec4:	213c      	movs	r1, #60	; 0x3c
  buf[0] = 0x03;
   d6ec6:	f88d 5000 	strb.w	r5, [sp]
  EPD_command(SSD1675_WRITE_BORDER, buf, 1);
   d6eca:	f000 fd6c 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x70;
   d6ece:	2370      	movs	r3, #112	; 0x70
   d6ed0:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_WRITE_VCOM, buf, 1);
   d6ed4:	466a      	mov	r2, sp
   d6ed6:	4620      	mov	r0, r4
   d6ed8:	2301      	movs	r3, #1
   d6eda:	212c      	movs	r1, #44	; 0x2c
   d6edc:	f000 fd63 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[70];
   d6ee0:	2315      	movs	r3, #21
   d6ee2:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_GATE_VOLTAGE, buf, 1);
   d6ee6:	466a      	mov	r2, sp
   d6ee8:	4629      	mov	r1, r5
   d6eea:	4620      	mov	r0, r4
   d6eec:	2301      	movs	r3, #1
   d6eee:	f000 fd5a 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[71];
   d6ef2:	f64a 0341 	movw	r3, #43073	; 0xa841
   d6ef6:	f8ad 3000 	strh.w	r3, [sp]
  buf[2] = LUT_DATA[73];
   d6efa:	2732      	movs	r7, #50	; 0x32
  EPD_command(SSD1675_SOURCE_VOLTAGE, buf, 3);
   d6efc:	462b      	mov	r3, r5
   d6efe:	466a      	mov	r2, sp
   d6f00:	4620      	mov	r0, r4
   d6f02:	2104      	movs	r1, #4
  buf[2] = LUT_DATA[73];
   d6f04:	f88d 7002 	strb.w	r7, [sp, #2]
  EPD_command(SSD1675_SOURCE_VOLTAGE, buf, 3);
   d6f08:	f000 fd4d 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[74];
   d6f0c:	2330      	movs	r3, #48	; 0x30
   d6f0e:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_WRITE_DUMMY, buf, 1);
   d6f12:	466a      	mov	r2, sp
   d6f14:	4620      	mov	r0, r4
   d6f16:	2301      	movs	r3, #1
   d6f18:	213a      	movs	r1, #58	; 0x3a
   d6f1a:	f000 fd44 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[75];
   d6f1e:	230a      	movs	r3, #10
   d6f20:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_WRITE_GATELINE, buf, 1);
   d6f24:	466a      	mov	r2, sp
   d6f26:	4641      	mov	r1, r8
   d6f28:	4620      	mov	r0, r4
   d6f2a:	2301      	movs	r3, #1
   d6f2c:	f000 fd3b 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_WRITE_LUT, LUT_DATA, 70);
   d6f30:	4639      	mov	r1, r7
   d6f32:	4620      	mov	r0, r4
   d6f34:	4a0d      	ldr	r2, [pc, #52]	; (d6f6c <_ZN16Adafruit_SSD16757powerUpEv+0x14c>)
   d6f36:	2346      	movs	r3, #70	; 0x46
   d6f38:	f000 fd35 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d6f3c:	466a      	mov	r2, sp
   d6f3e:	4620      	mov	r0, r4
   d6f40:	2301      	movs	r3, #1
   d6f42:	214e      	movs	r1, #78	; 0x4e
  buf[0] = 0;
   d6f44:	f88d 6000 	strb.w	r6, [sp]
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d6f48:	f000 fd2d 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0xF9;
   d6f4c:	23f9      	movs	r3, #249	; 0xf9
   d6f4e:	f8ad 3000 	strh.w	r3, [sp]
  EPD_command(SSD1675_SET_RAMYCOUNT, buf, 2);
   d6f52:	466a      	mov	r2, sp
   d6f54:	2302      	movs	r3, #2
   d6f56:	214f      	movs	r1, #79	; 0x4f
   d6f58:	4620      	mov	r0, r4
   d6f5a:	f000 fd24 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  busy_wait();
   d6f5e:	4620      	mov	r0, r4
   d6f60:	f7ff ff2a 	bl	d6db8 <_ZN16Adafruit_SSD16759busy_waitEv>
}
   d6f64:	b002      	add	sp, #8
   d6f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f6a:	bf00      	nop
   d6f6c:	000dbc57 	.word	0x000dbc57

000d6f70 <_ZN16Adafruit_SSD16759powerDownEv>:
{
   d6f70:	b513      	push	{r0, r1, r4, lr}
  if (_reset_pin >= 0) {
   d6f72:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
   d6f76:	2b00      	cmp	r3, #0
{
   d6f78:	4604      	mov	r4, r0
  if (_reset_pin >= 0) {
   d6f7a:	db0b      	blt.n	d6f94 <_ZN16Adafruit_SSD16759powerDownEv+0x24>
    buf[0] = 0x01;
   d6f7c:	2301      	movs	r3, #1
    EPD_command(SSD1675_DEEP_SLEEP, buf, 1);
   d6f7e:	aa01      	add	r2, sp, #4
   d6f80:	2110      	movs	r1, #16
    buf[0] = 0x01;
   d6f82:	f88d 3004 	strb.w	r3, [sp, #4]
    EPD_command(SSD1675_DEEP_SLEEP, buf, 1);
   d6f86:	f000 fd0e 	bl	d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
    delay(100);
   d6f8a:	2064      	movs	r0, #100	; 0x64
   d6f8c:	f002 fce0 	bl	d9950 <delay>
}
   d6f90:	b002      	add	sp, #8
   d6f92:	bd10      	pop	{r4, pc}
    EPD_command(SSD1675_SW_RESET);
   d6f94:	2201      	movs	r2, #1
   d6f96:	2112      	movs	r1, #18
   d6f98:	f000 fced 	bl	d7976 <_ZN12Adafruit_EPD11EPD_commandEhb>
    busy_wait();
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	f7ff ff0b 	bl	d6db8 <_ZN16Adafruit_SSD16759busy_waitEv>
}
   d6fa2:	e7f5      	b.n	d6f90 <_ZN16Adafruit_SSD16759powerDownEv+0x20>

000d6fa4 <_ZN16Adafruit_SSD16755beginEb>:
{
   d6fa4:	b510      	push	{r4, lr}
   d6fa6:	4604      	mov	r4, r0
  Adafruit_EPD::begin(reset);
   d6fa8:	f000 fb74 	bl	d7694 <_ZN12Adafruit_EPD5beginEb>
  setBlackBuffer(0, true);  // black defaults to inverted
   d6fac:	4620      	mov	r0, r4
   d6fae:	2201      	movs	r2, #1
   d6fb0:	2100      	movs	r1, #0
   d6fb2:	f000 faeb 	bl	d758c <_ZN12Adafruit_EPD14setBlackBufferEab>
  setColorBuffer(0, true);  // no secondary buffer, so we'll just reuse index 0
   d6fb6:	4620      	mov	r0, r4
   d6fb8:	2201      	movs	r2, #1
   d6fba:	2100      	movs	r1, #0
   d6fbc:	f000 fafe 	bl	d75bc <_ZN12Adafruit_EPD14setColorBufferEab>
  powerDown();
   d6fc0:	6823      	ldr	r3, [r4, #0]
   d6fc2:	4620      	mov	r0, r4
   d6fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
   d6fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  powerDown();
   d6fca:	4718      	bx	r3

000d6fcc <_ZN16Adafruit_MCPSRAMC1Ea>:
*/
/**************************************************************************/
Adafruit_MCPSRAM::Adafruit_MCPSRAM(int8_t cs)
{
	_cs = cs;
	hwSPI = true;
   d6fcc:	2201      	movs	r2, #1
	_cs = cs;
   d6fce:	7041      	strb	r1, [r0, #1]
	hwSPI = true;
   d6fd0:	7002      	strb	r2, [r0, #0]
}
   d6fd2:	4770      	bx	lr

000d6fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
    byte transfer(byte data) {
   d6fd4:	b507      	push	{r0, r1, r2, lr}
   d6fd6:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   d6fd8:	f7fe fd48 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d6fdc:	9901      	ldr	r1, [sp, #4]
    }
   d6fde:	b003      	add	sp, #12
   d6fe0:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   d6fe4:	f001 b8fe 	b.w	d81e4 <_ZN8SPIClass8transferEh>

000d6fe8 <_ZN16Adafruit_MCPSRAM6csHighEv>:
/*!
    @brief set chip select pin high
*/
/**************************************************************************/
void Adafruit_MCPSRAM::csHigh()
{
   d6fe8:	b510      	push	{r4, lr}
   d6fea:	4604      	mov	r4, r0
        instance().endTransaction();
   d6fec:	f7fe fd3e 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d6ff0:	f001 f871 	bl	d80d6 <_ZN8SPIClass14endTransactionEv>
      SPI.endTransaction();
#endif
#ifdef HAVE_PORTREG
	*csport |= cspinmask;
#else
	digitalWrite(_cs, HIGH);
   d6ff4:	f994 0001 	ldrsb.w	r0, [r4, #1]
   d6ff8:	2101      	movs	r1, #1
#endif
}
   d6ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(_cs, HIGH);
   d6ffe:	b280      	uxth	r0, r0
   d7000:	f003 b9c9 	b.w	da396 <digitalWrite>

000d7004 <_ZN16Adafruit_MCPSRAM5csLowEv>:
/*!
    @brief set chip select pin low
*/
/**************************************************************************/
void Adafruit_MCPSRAM::csLow()
{
   d7004:	b530      	push	{r4, r5, lr}
   d7006:	b085      	sub	sp, #20
      dataMode_{dataMode}
   d7008:	4b0b      	ldr	r3, [pc, #44]	; (d7038 <_ZN16Adafruit_MCPSRAM5csLowEv+0x34>)
   d700a:	9300      	str	r3, [sp, #0]
   d700c:	4b0b      	ldr	r3, [pc, #44]	; (d703c <_ZN16Adafruit_MCPSRAM5csLowEv+0x38>)
   d700e:	9302      	str	r3, [sp, #8]
   d7010:	4604      	mov	r4, r0
   d7012:	2301      	movs	r3, #1
   d7014:	2500      	movs	r5, #0
   d7016:	f8ad 300c 	strh.w	r3, [sp, #12]
   d701a:	f88d 5004 	strb.w	r5, [sp, #4]
        return instance().beginTransaction(settings);
   d701e:	f7fe fd25 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7022:	4669      	mov	r1, sp
   d7024:	f001 f870 	bl	d8108 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
      SPI.beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0));
#endif	
#ifdef HAVE_PORTREG
	*csport &= ~cspinmask;
#else
	digitalWrite(_cs, LOW);
   d7028:	f994 0001 	ldrsb.w	r0, [r4, #1]
   d702c:	4629      	mov	r1, r5
   d702e:	b280      	uxth	r0, r0
   d7030:	f003 f9b1 	bl	da396 <digitalWrite>
#endif
}
   d7034:	b005      	add	sp, #20
   d7036:	bd30      	pop	{r4, r5, pc}
   d7038:	000db610 	.word	0x000db610
   d703c:	003d0900 	.word	0x003d0900

000d7040 <_ZN16Adafruit_MCPSRAM5beginEv>:
{
   d7040:	b570      	push	{r4, r5, r6, lr}
   d7042:	4604      	mov	r4, r0
	 pinMode(_cs, OUTPUT);
   d7044:	f990 0001 	ldrsb.w	r0, [r0, #1]
   d7048:	2101      	movs	r1, #1
   d704a:	b280      	uxth	r0, r0
   d704c:	f003 f992 	bl	da374 <pinMode>
	csHigh();
   d7050:	4620      	mov	r0, r4
   d7052:	f7ff ffc9 	bl	d6fe8 <_ZN16Adafruit_MCPSRAM6csHighEv>
    if (!hwSPI){
   d7056:	7823      	ldrb	r3, [r4, #0]
   d7058:	b19b      	cbz	r3, d7082 <_ZN16Adafruit_MCPSRAM5beginEv+0x42>
        instance().begin();
   d705a:	f7fe fd07 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d705e:	f001 f829 	bl	d80b4 <_ZN8SPIClass5beginEv>
csLow();
   d7062:	4620      	mov	r0, r4
   d7064:	f7ff ffce 	bl	d7004 <_ZN16Adafruit_MCPSRAM5csLowEv>
   d7068:	2503      	movs	r5, #3
	  if(hwSPI) {
   d706a:	7823      	ldrb	r3, [r4, #0]
   d706c:	b1cb      	cbz	r3, d70a2 <_ZN16Adafruit_MCPSRAM5beginEv+0x62>
		(void)SPI.transfer(0xFF);
   d706e:	20ff      	movs	r0, #255	; 0xff
   d7070:	f7ff ffb0 	bl	d6fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
for(int i=0; i<3; i++){
   d7074:	3d01      	subs	r5, #1
   d7076:	d1f8      	bne.n	d706a <_ZN16Adafruit_MCPSRAM5beginEv+0x2a>
csHigh();
   d7078:	4620      	mov	r0, r4
}
   d707a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
csHigh();
   d707e:	f7ff bfb3 	b.w	d6fe8 <_ZN16Adafruit_MCPSRAM6csHighEv>
      pinMode(_mosi, OUTPUT);
   d7082:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d7086:	2101      	movs	r1, #1
   d7088:	b280      	uxth	r0, r0
   d708a:	f003 f973 	bl	da374 <pinMode>
      pinMode(_sck, OUTPUT);
   d708e:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d7092:	2101      	movs	r1, #1
   d7094:	b280      	uxth	r0, r0
   d7096:	f003 f96d 	bl	da374 <pinMode>
    if (hwSPI){
   d709a:	7823      	ldrb	r3, [r4, #0]
   d709c:	2b00      	cmp	r3, #0
   d709e:	d0e0      	beq.n	d7062 <_ZN16Adafruit_MCPSRAM5beginEv+0x22>
   d70a0:	e7db      	b.n	d705a <_ZN16Adafruit_MCPSRAM5beginEv+0x1a>
   d70a2:	2608      	movs	r6, #8
		  digitalWrite(_sck, LOW);
   d70a4:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d70a8:	2100      	movs	r1, #0
   d70aa:	b280      	uxth	r0, r0
   d70ac:	f003 f973 	bl	da396 <digitalWrite>
		  if(0xFF & bit) digitalWrite(_mosi, HIGH);
   d70b0:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d70b4:	2101      	movs	r1, #1
   d70b6:	b280      	uxth	r0, r0
   d70b8:	f003 f96d 	bl	da396 <digitalWrite>
		  digitalWrite(_sck, HIGH);
   d70bc:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d70c0:	2101      	movs	r1, #1
   d70c2:	b280      	uxth	r0, r0
   d70c4:	f003 f967 	bl	da396 <digitalWrite>
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d70c8:	3e01      	subs	r6, #1
   d70ca:	d1eb      	bne.n	d70a4 <_ZN16Adafruit_MCPSRAM5beginEv+0x64>
   d70cc:	e7d2      	b.n	d7074 <_ZN16Adafruit_MCPSRAM5beginEv+0x34>

000d70ce <_ZN16Adafruit_MCPSRAM5writeEtPhth>:
{
   d70ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d70d2:	b085      	sub	sp, #20
   d70d4:	460d      	mov	r5, r1
   d70d6:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
   d70da:	9201      	str	r2, [sp, #4]
   d70dc:	461e      	mov	r6, r3
   d70de:	4604      	mov	r4, r0
csLow();
   d70e0:	f7ff ff90 	bl	d7004 <_ZN16Adafruit_MCPSRAM5csLowEv>
cmdbuf[1] = (addr >> 8);
   d70e4:	122b      	asrs	r3, r5, #8
cmdbuf[0] = reg;
   d70e6:	f88d b00c 	strb.w	fp, [sp, #12]
cmdbuf[1] = (addr >> 8);
   d70ea:	f88d 300d 	strb.w	r3, [sp, #13]
cmdbuf[2] = addr & 0xFF;
   d70ee:	f88d 500e 	strb.w	r5, [sp, #14]
for(int i=0; i<3; i++){
   d70f2:	f10d 0a0c 	add.w	sl, sp, #12
   d70f6:	2700      	movs	r7, #0
  if(hwSPI) {
   d70f8:	7823      	ldrb	r3, [r4, #0]
  uint8_t d = cmdbuf[i];
   d70fa:	f81a 9b01 	ldrb.w	r9, [sl], #1
  if(hwSPI) {
   d70fe:	b19b      	cbz	r3, d7128 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x5a>
    (void)SPI.transfer(d);
   d7100:	4648      	mov	r0, r9
   d7102:	f7ff ff67 	bl	d6fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  if(reg != MCPSRAM_WRITE) break;
   d7106:	f1bb 0f02 	cmp.w	fp, #2
   d710a:	d102      	bne.n	d7112 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x44>
for(int i=0; i<3; i++){
   d710c:	3701      	adds	r7, #1
   d710e:	2f03      	cmp	r7, #3
   d7110:	d1f2      	bne.n	d70f8 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x2a>
   d7112:	2500      	movs	r5, #0
for(int i=0; i<num; i++){
   d7114:	42ae      	cmp	r6, r5
   d7116:	dd25      	ble.n	d7164 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x96>
  if(hwSPI) {
   d7118:	7823      	ldrb	r3, [r4, #0]
   d711a:	b11b      	cbz	r3, d7124 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x56>
    (void)SPI.transfer(d);
   d711c:	9b01      	ldr	r3, [sp, #4]
   d711e:	5d58      	ldrb	r0, [r3, r5]
   d7120:	f7ff ff58 	bl	d6fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
for(int i=0; i<num; i++){
   d7124:	3501      	adds	r5, #1
   d7126:	e7f5      	b.n	d7114 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x46>
   d7128:	f04f 0808 	mov.w	r8, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d712c:	2580      	movs	r5, #128	; 0x80
      digitalWrite(_sck, LOW);
   d712e:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d7132:	2100      	movs	r1, #0
   d7134:	b280      	uxth	r0, r0
   d7136:	f003 f92e 	bl	da396 <digitalWrite>
      if(d & bit) digitalWrite(_mosi, HIGH);
   d713a:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d713e:	ea19 0105 	ands.w	r1, r9, r5
   d7142:	bf18      	it	ne
   d7144:	2101      	movne	r1, #1
      else        digitalWrite(_mosi, LOW);
   d7146:	b280      	uxth	r0, r0
   d7148:	f003 f925 	bl	da396 <digitalWrite>
      digitalWrite(_sck, HIGH);
   d714c:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d7150:	2101      	movs	r1, #1
   d7152:	b280      	uxth	r0, r0
   d7154:	f003 f91f 	bl	da396 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d7158:	f1b8 0801 	subs.w	r8, r8, #1
   d715c:	ea4f 0555 	mov.w	r5, r5, lsr #1
   d7160:	d1e5      	bne.n	d712e <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x60>
   d7162:	e7d0      	b.n	d7106 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x38>
csHigh();
   d7164:	4620      	mov	r0, r4
}
   d7166:	b005      	add	sp, #20
   d7168:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
csHigh();
   d716c:	f7ff bf3c 	b.w	d6fe8 <_ZN16Adafruit_MCPSRAM6csHighEv>

000d7170 <_ZN16Adafruit_MCPSRAM6write8Ethh>:
{
   d7170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7172:	f88d 200f 	strb.w	r2, [sp, #15]
	this->write(addr, &val, 1, reg);
   d7176:	9300      	str	r3, [sp, #0]
   d7178:	f10d 020f 	add.w	r2, sp, #15
   d717c:	2301      	movs	r3, #1
   d717e:	f7ff ffa6 	bl	d70ce <_ZN16Adafruit_MCPSRAM5writeEtPhth>
}
   d7182:	b005      	add	sp, #20
   d7184:	f85d fb04 	ldr.w	pc, [sp], #4

000d7188 <_ZN16Adafruit_MCPSRAM4readEtPhth>:
{
   d7188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d718c:	b085      	sub	sp, #20
   d718e:	460e      	mov	r6, r1
   d7190:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
   d7194:	9301      	str	r3, [sp, #4]
   d7196:	4604      	mov	r4, r0
   d7198:	4615      	mov	r5, r2
csLow();
   d719a:	f7ff ff33 	bl	d7004 <_ZN16Adafruit_MCPSRAM5csLowEv>
cmdbuf[1] = (addr >> 8);
   d719e:	1233      	asrs	r3, r6, #8
cmdbuf[0] = reg;
   d71a0:	f88d b00c 	strb.w	fp, [sp, #12]
cmdbuf[1] = (addr >> 8);
   d71a4:	f88d 300d 	strb.w	r3, [sp, #13]
cmdbuf[2] = addr & 0xFF;
   d71a8:	f88d 600e 	strb.w	r6, [sp, #14]
for(int i=0; i<3; i++){
   d71ac:	f10d 0a0c 	add.w	sl, sp, #12
   d71b0:	2700      	movs	r7, #0
  if(hwSPI) {
   d71b2:	7823      	ldrb	r3, [r4, #0]
  uint8_t d = cmdbuf[i];
   d71b4:	f81a 9b01 	ldrb.w	r9, [sl], #1
  if(hwSPI) {
   d71b8:	b1ab      	cbz	r3, d71e6 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x5e>
    (void)SPI.transfer(d);
   d71ba:	4648      	mov	r0, r9
   d71bc:	f7ff ff0a 	bl	d6fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  if(reg != MCPSRAM_READ) break;
   d71c0:	f1bb 0f03 	cmp.w	fp, #3
   d71c4:	d102      	bne.n	d71cc <_ZN16Adafruit_MCPSRAM4readEtPhth+0x44>
for(int i=0; i<3; i++){
   d71c6:	3701      	adds	r7, #1
   d71c8:	2f03      	cmp	r7, #3
   d71ca:	d1f2      	bne.n	d71b2 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x2a>
   d71cc:	9b01      	ldr	r3, [sp, #4]
   d71ce:	442b      	add	r3, r5
   d71d0:	4698      	mov	r8, r3
for(int i=0; i<num; i++){
   d71d2:	45a8      	cmp	r8, r5
   d71d4:	d03f      	beq.n	d7256 <_ZN16Adafruit_MCPSRAM4readEtPhth+0xce>
  if(hwSPI) {
   d71d6:	7823      	ldrb	r3, [r4, #0]
   d71d8:	b31b      	cbz	r3, d7222 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x9a>
    buf[i] = SPI.transfer(0x00);
   d71da:	2000      	movs	r0, #0
   d71dc:	f7ff fefa 	bl	d6fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d71e0:	7028      	strb	r0, [r5, #0]
for(int i=0; i<num; i++){
   d71e2:	3501      	adds	r5, #1
   d71e4:	e7f5      	b.n	d71d2 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x4a>
   d71e6:	f04f 0808 	mov.w	r8, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d71ea:	2680      	movs	r6, #128	; 0x80
      digitalWrite(_sck, LOW);
   d71ec:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d71f0:	2100      	movs	r1, #0
   d71f2:	b280      	uxth	r0, r0
   d71f4:	f003 f8cf 	bl	da396 <digitalWrite>
      if(d & bit) digitalWrite(_mosi, HIGH);
   d71f8:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d71fc:	ea19 0106 	ands.w	r1, r9, r6
   d7200:	bf18      	it	ne
   d7202:	2101      	movne	r1, #1
      else        digitalWrite(_mosi, LOW);
   d7204:	b280      	uxth	r0, r0
   d7206:	f003 f8c6 	bl	da396 <digitalWrite>
      digitalWrite(_sck, HIGH);
   d720a:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d720e:	2101      	movs	r1, #1
   d7210:	b280      	uxth	r0, r0
   d7212:	f003 f8c0 	bl	da396 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d7216:	f1b8 0801 	subs.w	r8, r8, #1
   d721a:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d721e:	d1e5      	bne.n	d71ec <_ZN16Adafruit_MCPSRAM4readEtPhth+0x64>
   d7220:	e7ce      	b.n	d71c0 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x38>
   d7222:	2708      	movs	r7, #8
      digitalWrite(_sck, LOW);
   d7224:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d7228:	2100      	movs	r1, #0
   d722a:	b280      	uxth	r0, r0
   d722c:	f003 f8b3 	bl	da396 <digitalWrite>
      digitalWrite(_sck, HIGH);
   d7230:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d7234:	2101      	movs	r1, #1
   d7236:	b280      	uxth	r0, r0
   d7238:	f003 f8ad 	bl	da396 <digitalWrite>
	  buf[i] = (buf[i] << 1) | digitalRead(_miso);
   d723c:	f994 0003 	ldrsb.w	r0, [r4, #3]
   d7240:	782e      	ldrb	r6, [r5, #0]
   d7242:	b280      	uxth	r0, r0
   d7244:	f003 f8c0 	bl	da3c8 <digitalRead>
   d7248:	0076      	lsls	r6, r6, #1
   d724a:	b276      	sxtb	r6, r6
   d724c:	4330      	orrs	r0, r6
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d724e:	3f01      	subs	r7, #1
	  buf[i] = (buf[i] << 1) | digitalRead(_miso);
   d7250:	7028      	strb	r0, [r5, #0]
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d7252:	d1e7      	bne.n	d7224 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x9c>
   d7254:	e7c5      	b.n	d71e2 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x5a>
csHigh();
   d7256:	4620      	mov	r0, r4
}
   d7258:	b005      	add	sp, #20
   d725a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
csHigh();
   d725e:	f7ff bec3 	b.w	d6fe8 <_ZN16Adafruit_MCPSRAM6csHighEv>

000d7262 <_ZN16Adafruit_MCPSRAM5read8Eth>:
{
   d7262:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	this->read(addr, &c, 1, reg);
   d7264:	2301      	movs	r3, #1
   d7266:	9200      	str	r2, [sp, #0]
   d7268:	f10d 020f 	add.w	r2, sp, #15
   d726c:	f7ff ff8c 	bl	d7188 <_ZN16Adafruit_MCPSRAM4readEtPhth>
}
   d7270:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d7274:	b005      	add	sp, #20
   d7276:	f85d fb04 	ldr.w	pc, [sp], #4

000d727a <_ZN16Adafruit_MCPSRAM5eraseEtth>:
{
   d727a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d727e:	460e      	mov	r6, r1
   d7280:	461d      	mov	r5, r3
   d7282:	4604      	mov	r4, r0
   d7284:	4690      	mov	r8, r2
	csLow();
   d7286:	f7ff febd 	bl	d7004 <_ZN16Adafruit_MCPSRAM5csLowEv>
	cmdbuf[0] = MCPSRAM_WRITE;
   d728a:	2302      	movs	r3, #2
   d728c:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdbuf[1] = (addr >> 8);
   d7290:	1233      	asrs	r3, r6, #8
   d7292:	f88d 3005 	strb.w	r3, [sp, #5]
	cmdbuf[2] = addr & 0xFF;
   d7296:	f88d 6006 	strb.w	r6, [sp, #6]
	for(int i=0; i<3; i++){
   d729a:	f10d 0b04 	add.w	fp, sp, #4
   d729e:	2700      	movs	r7, #0
		if(hwSPI) {
   d72a0:	7823      	ldrb	r3, [r4, #0]
		uint8_t d = cmdbuf[i];
   d72a2:	f81b ab01 	ldrb.w	sl, [fp], #1
		if(hwSPI) {
   d72a6:	b17b      	cbz	r3, d72c8 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x4e>
			(void)SPI.transfer(d);
   d72a8:	4650      	mov	r0, sl
   d72aa:	f7ff fe93 	bl	d6fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for(int i=0; i<3; i++){
   d72ae:	3701      	adds	r7, #1
   d72b0:	2f03      	cmp	r7, #3
   d72b2:	d1f5      	bne.n	d72a0 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x26>
   d72b4:	2700      	movs	r7, #0
	for(uint16_t i=0; i<length; i++){
   d72b6:	45b8      	cmp	r8, r7
   d72b8:	d042      	beq.n	d7340 <_ZN16Adafruit_MCPSRAM5eraseEtth+0xc6>
		if(hwSPI) {
   d72ba:	7823      	ldrb	r3, [r4, #0]
   d72bc:	b313      	cbz	r3, d7304 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x8a>
			(void)SPI.transfer(d);
   d72be:	4628      	mov	r0, r5
   d72c0:	f7ff fe88 	bl	d6fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for(uint16_t i=0; i<length; i++){
   d72c4:	3701      	adds	r7, #1
   d72c6:	e7f6      	b.n	d72b6 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x3c>
   d72c8:	f04f 0908 	mov.w	r9, #8
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d72cc:	2680      	movs	r6, #128	; 0x80
				digitalWrite(_sck, LOW);
   d72ce:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d72d2:	2100      	movs	r1, #0
   d72d4:	b280      	uxth	r0, r0
   d72d6:	f003 f85e 	bl	da396 <digitalWrite>
				if(d & bit) digitalWrite(_mosi, HIGH);
   d72da:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d72de:	ea1a 0106 	ands.w	r1, sl, r6
   d72e2:	bf18      	it	ne
   d72e4:	2101      	movne	r1, #1
				else        digitalWrite(_mosi, LOW);
   d72e6:	b280      	uxth	r0, r0
   d72e8:	f003 f855 	bl	da396 <digitalWrite>
				digitalWrite(_sck, HIGH);
   d72ec:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d72f0:	2101      	movs	r1, #1
   d72f2:	b280      	uxth	r0, r0
   d72f4:	f003 f84f 	bl	da396 <digitalWrite>
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d72f8:	f1b9 0901 	subs.w	r9, r9, #1
   d72fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d7300:	d1e5      	bne.n	d72ce <_ZN16Adafruit_MCPSRAM5eraseEtth+0x54>
   d7302:	e7d4      	b.n	d72ae <_ZN16Adafruit_MCPSRAM5eraseEtth+0x34>
   d7304:	f04f 0908 	mov.w	r9, #8
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d7308:	2680      	movs	r6, #128	; 0x80
				digitalWrite(_sck, LOW);
   d730a:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d730e:	2100      	movs	r1, #0
   d7310:	b280      	uxth	r0, r0
   d7312:	f003 f840 	bl	da396 <digitalWrite>
				if(d & bit) digitalWrite(_mosi, HIGH);
   d7316:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d731a:	ea15 0106 	ands.w	r1, r5, r6
   d731e:	bf18      	it	ne
   d7320:	2101      	movne	r1, #1
				else        digitalWrite(_mosi, LOW);
   d7322:	b280      	uxth	r0, r0
   d7324:	f003 f837 	bl	da396 <digitalWrite>
				digitalWrite(_sck, HIGH);
   d7328:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d732c:	2101      	movs	r1, #1
   d732e:	b280      	uxth	r0, r0
   d7330:	f003 f831 	bl	da396 <digitalWrite>
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d7334:	f1b9 0901 	subs.w	r9, r9, #1
   d7338:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d733c:	d1e5      	bne.n	d730a <_ZN16Adafruit_MCPSRAM5eraseEtth+0x90>
   d733e:	e7c1      	b.n	d72c4 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x4a>
	csHigh();
   d7340:	4620      	mov	r0, r4
}
   d7342:	b003      	add	sp, #12
   d7344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	csHigh();
   d7348:	f7ff be4e 	b.w	d6fe8 <_ZN16Adafruit_MCPSRAM6csHighEv>

000d734c <_ZN12Adafruit_EPD9drawPixelEsst>:
	@param x the x axis position
	@param y the y axis position
	@param color the color of the pixel
*/
/**************************************************************************/
void Adafruit_EPD::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d734c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d7350:	1e0f      	subs	r7, r1, #0
void Adafruit_EPD::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d7352:	4605      	mov	r5, r0
   d7354:	4614      	mov	r4, r2
   d7356:	4699      	mov	r9, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d7358:	f2c0 80a6 	blt.w	d74a8 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
   d735c:	f7fe fa04 	bl	d5768 <_ZNK12Adafruit_GFX5widthEv>
   d7360:	42b8      	cmp	r0, r7
   d7362:	f340 80a1 	ble.w	d74a8 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
   d7366:	2c00      	cmp	r4, #0
   d7368:	f2c0 809e 	blt.w	d74a8 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
   d736c:	4628      	mov	r0, r5
   d736e:	f7fe f9fe 	bl	d576e <_ZNK12Adafruit_GFX6heightEv>
   d7372:	42a0      	cmp	r0, r4
   d7374:	f340 8098 	ble.w	d74a8 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
    return;

  uint8_t *pBuf;

  // deal with non-8-bit heights
  uint16_t _HEIGHT = HEIGHT;
   d7378:	f8b5 800a 	ldrh.w	r8, [r5, #10]
  if (_HEIGHT % 8 != 0) {
   d737c:	f018 0f07 	tst.w	r8, #7
    _HEIGHT += 8 - (_HEIGHT % 8);
   d7380:	bf1c      	itt	ne
   d7382:	f028 0807 	bicne.w	r8, r8, #7
   d7386:	f108 0808 	addne.w	r8, r8, #8
  }

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d738a:	4628      	mov	r0, r5
    _HEIGHT += 8 - (_HEIGHT % 8);
   d738c:	bf18      	it	ne
   d738e:	fa1f f888 	uxthne.w	r8, r8
  switch (getRotation()) {
   d7392:	f7fe f9e7 	bl	d5764 <_ZNK12Adafruit_GFX11getRotationEv>
   d7396:	2802      	cmp	r0, #2
   d7398:	d031      	beq.n	d73fe <_ZN12Adafruit_EPD9drawPixelEsst+0xb2>
   d739a:	2803      	cmp	r0, #3
   d739c:	d037      	beq.n	d740e <_ZN12Adafruit_EPD9drawPixelEsst+0xc2>
   d739e:	2801      	cmp	r0, #1
   d73a0:	d104      	bne.n	d73ac <_ZN12Adafruit_EPD9drawPixelEsst+0x60>
  case 1:
    EPD_swap(x, y);
    x = WIDTH - x - 1;
   d73a2:	892a      	ldrh	r2, [r5, #8]
   d73a4:	43e4      	mvns	r4, r4
   d73a6:	4422      	add	r2, r4
    break;
   d73a8:	463c      	mov	r4, r7
    x = WIDTH - x - 1;
   d73aa:	b217      	sxth	r7, r2
  case 3:
    EPD_swap(x, y);
    y = _HEIGHT - y - 1;
    break;
  }
  uint16_t addr = ( (uint32_t)(WIDTH - 1 - x) * (uint32_t)_HEIGHT + y)/8;
   d73ac:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
  uint8_t c;
  if (use_sram) {
   d73b0:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
  uint16_t addr = ( (uint32_t)(WIDTH - 1 - x) * (uint32_t)_HEIGHT + y)/8;
   d73b4:	3e01      	subs	r6, #1
   d73b6:	1bf6      	subs	r6, r6, r7
   d73b8:	fb08 4606 	mla	r6, r8, r6, r4
   d73bc:	f1a9 0703 	sub.w	r7, r9, #3
   d73c0:	08f0      	lsrs	r0, r6, #3
   d73c2:	b2bf      	uxth	r7, r7
   d73c4:	f3c6 06cf 	ubfx	r6, r6, #3, #16
  if (use_sram) {
   d73c8:	b333      	cbz	r3, d7418 <_ZN12Adafruit_EPD9drawPixelEsst+0xcc>
    if ((color == EPD_RED) || (color == EPD_GRAY)) {
   d73ca:	2f01      	cmp	r7, #1
      addr = colorbuffer_addr + addr;
   d73cc:	bf94      	ite	ls
   d73ce:	f8b5 1048 	ldrhls.w	r1, [r5, #72]	; 0x48
    } else {
      addr = blackbuffer_addr + addr;
   d73d2:	f8b5 104a 	ldrhhi.w	r1, [r5, #74]	; 0x4a
   d73d6:	440e      	add	r6, r1
   d73d8:	b2b6      	uxth	r6, r6
    }
    c = sram.read8(addr);
   d73da:	2203      	movs	r2, #3
   d73dc:	4631      	mov	r1, r6
   d73de:	f105 0027 	add.w	r0, r5, #39	; 0x27
   d73e2:	f7ff ff3e 	bl	d7262 <_ZN16Adafruit_MCPSRAM5read8Eth>
    } else {
      pBuf = black_buffer + addr;
    }
  }

  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d73e6:	2f01      	cmp	r7, #1
    c = sram.read8(addr);
   d73e8:	f88d 0007 	strb.w	r0, [sp, #7]
    pBuf = &c;
   d73ec:	f10d 0007 	add.w	r0, sp, #7
  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d73f0:	d917      	bls.n	d7422 <_ZN12Adafruit_EPD9drawPixelEsst+0xd6>
   d73f2:	f1b9 0f00 	cmp.w	r9, #0
   d73f6:	d145      	bne.n	d7484 <_ZN12Adafruit_EPD9drawPixelEsst+0x138>
      ((color == EPD_BLACK) && blackInverted)) {
   d73f8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d73fc:	e013      	b.n	d7426 <_ZN12Adafruit_EPD9drawPixelEsst+0xda>
    x = WIDTH - x - 1;
   d73fe:	8929      	ldrh	r1, [r5, #8]
    y = _HEIGHT - y - 1;
   d7400:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d7402:	3901      	subs	r1, #1
   d7404:	1bcf      	subs	r7, r1, r7
    y = _HEIGHT - y - 1;
   d7406:	4444      	add	r4, r8
    x = WIDTH - x - 1;
   d7408:	b23f      	sxth	r7, r7
    y = _HEIGHT - y - 1;
   d740a:	b224      	sxth	r4, r4
    break;
   d740c:	e7ce      	b.n	d73ac <_ZN12Adafruit_EPD9drawPixelEsst+0x60>
    y = _HEIGHT - y - 1;
   d740e:	43f9      	mvns	r1, r7
   d7410:	4441      	add	r1, r8
    break;
   d7412:	4627      	mov	r7, r4
    y = _HEIGHT - y - 1;
   d7414:	b20c      	sxth	r4, r1
    break;
   d7416:	e7c9      	b.n	d73ac <_ZN12Adafruit_EPD9drawPixelEsst+0x60>
    if((color == EPD_RED) || (color == EPD_GRAY)) {
   d7418:	2f01      	cmp	r7, #1
   d741a:	b280      	uxth	r0, r0
   d741c:	d814      	bhi.n	d7448 <_ZN12Adafruit_EPD9drawPixelEsst+0xfc>
      pBuf = color_buffer + addr;
   d741e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d7420:	4418      	add	r0, r3
  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d7422:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
      ((color == EPD_BLACK) && blackInverted)) {
   d7426:	b193      	cbz	r3, d744e <_ZN12Adafruit_EPD9drawPixelEsst+0x102>
    *pBuf &= ~(1 << (7 - y%8));
   d7428:	4263      	negs	r3, r4
   d742a:	f003 0307 	and.w	r3, r3, #7
   d742e:	f004 0407 	and.w	r4, r4, #7
   d7432:	bf58      	it	pl
   d7434:	425c      	negpl	r4, r3
   d7436:	f1c4 0407 	rsb	r4, r4, #7
   d743a:	2301      	movs	r3, #1
   d743c:	40a3      	lsls	r3, r4
   d743e:	7804      	ldrb	r4, [r0, #0]
   d7440:	ea24 0403 	bic.w	r4, r4, r3
  } else if (((color == EPD_RED || color == EPD_GRAY) && !colorInverted) ||
	     ((color == EPD_BLACK) && !blackInverted)) {
    *pBuf |= (1 << (7 - y%8));
  } else if (color == EPD_INVERSE) {
    *pBuf ^= (1 << (7 - y%8));
   d7444:	7004      	strb	r4, [r0, #0]
   d7446:	e010      	b.n	d746a <_ZN12Adafruit_EPD9drawPixelEsst+0x11e>
      pBuf = black_buffer + addr;
   d7448:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d744a:	4418      	add	r0, r3
  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d744c:	e7d1      	b.n	d73f2 <_ZN12Adafruit_EPD9drawPixelEsst+0xa6>
    *pBuf |= (1 << (7 - y%8));
   d744e:	4263      	negs	r3, r4
   d7450:	f003 0307 	and.w	r3, r3, #7
   d7454:	f004 0407 	and.w	r4, r4, #7
   d7458:	bf58      	it	pl
   d745a:	425c      	negpl	r4, r3
   d745c:	7802      	ldrb	r2, [r0, #0]
   d745e:	f1c4 0407 	rsb	r4, r4, #7
   d7462:	2301      	movs	r3, #1
   d7464:	40a3      	lsls	r3, r4
   d7466:	4313      	orrs	r3, r2
   d7468:	7003      	strb	r3, [r0, #0]
  }

  if (use_sram) {
   d746a:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
   d746e:	b1db      	cbz	r3, d74a8 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
    sram.write8(addr, *pBuf);
   d7470:	7802      	ldrb	r2, [r0, #0]
   d7472:	2302      	movs	r3, #2
   d7474:	4631      	mov	r1, r6
   d7476:	f105 0027 	add.w	r0, r5, #39	; 0x27
  }
}
   d747a:	b003      	add	sp, #12
   d747c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    sram.write8(addr, *pBuf);
   d7480:	f7ff be76 	b.w	d7170 <_ZN16Adafruit_MCPSRAM6write8Ethh>
  } else if (color == EPD_INVERSE) {
   d7484:	f1b9 0f02 	cmp.w	r9, #2
   d7488:	d1ef      	bne.n	d746a <_ZN12Adafruit_EPD9drawPixelEsst+0x11e>
    *pBuf ^= (1 << (7 - y%8));
   d748a:	4263      	negs	r3, r4
   d748c:	f003 0307 	and.w	r3, r3, #7
   d7490:	f004 0407 	and.w	r4, r4, #7
   d7494:	bf58      	it	pl
   d7496:	425c      	negpl	r4, r3
   d7498:	f1c4 0407 	rsb	r4, r4, #7
   d749c:	2301      	movs	r3, #1
   d749e:	fa03 f404 	lsl.w	r4, r3, r4
   d74a2:	7803      	ldrb	r3, [r0, #0]
   d74a4:	405c      	eors	r4, r3
   d74a6:	e7cd      	b.n	d7444 <_ZN12Adafruit_EPD9drawPixelEsst+0xf8>
}
   d74a8:	b003      	add	sp, #12
   d74aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d74b0 <_ZN12Adafruit_EPDC1Eiiaaaaa>:
Adafruit_EPD::Adafruit_EPD(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY) : Adafruit_GFX(width, height),
   d74b0:	b570      	push	{r4, r5, r6, lr}
sram(SRCS) {
   d74b2:	b212      	sxth	r2, r2
Adafruit_EPD::Adafruit_EPD(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY) : Adafruit_GFX(width, height),
   d74b4:	4604      	mov	r4, r0
sram(SRCS) {
   d74b6:	b209      	sxth	r1, r1
Adafruit_EPD::Adafruit_EPD(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY) : Adafruit_GFX(width, height),
   d74b8:	f99d 5018 	ldrsb.w	r5, [sp, #24]
   d74bc:	461e      	mov	r6, r3
sram(SRCS) {
   d74be:	f7fd ff05 	bl	d52cc <_ZN12Adafruit_GFXC1Ess>
   d74c2:	4620      	mov	r0, r4
   d74c4:	4b13      	ldr	r3, [pc, #76]	; (d7514 <_ZN12Adafruit_EPDC1Eiiaaaaa+0x64>)
   d74c6:	f840 3b27 	str.w	r3, [r0], #39
   d74ca:	4629      	mov	r1, r5
   d74cc:	f7ff fd7e 	bl	d6fcc <_ZN16Adafruit_MCPSRAMC1Ea>
  _cs_pin = CS;
   d74d0:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d74d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  _reset_pin = RST;
   d74d8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d74dc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  _busy_pin = BUSY;
   d74e0:	f99d 301c 	ldrsb.w	r3, [sp, #28]
   d74e4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if (SRCS >= 0) {
   d74e8:	43ed      	mvns	r5, r5
  hwSPI = true;
   d74ea:	2301      	movs	r3, #1
  if (SRCS >= 0) {
   d74ec:	0fed      	lsrs	r5, r5, #31
  hwSPI = true;
   d74ee:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  singleByteTxns = false;
   d74f2:	2300      	movs	r3, #0
  buffer1 = buffer2 = color_buffer = black_buffer = NULL;
   d74f4:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
   d74f8:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  colorbuffer_addr = blackbuffer_addr = 0;
   d74fc:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  _dc_pin = DC;
   d7500:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
  if (SRCS >= 0) {
   d7504:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  singleByteTxns = false;
   d7508:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  buffer1_size = buffer2_size = 0;
   d750c:	8623      	strh	r3, [r4, #48]	; 0x30
   d750e:	85e3      	strh	r3, [r4, #46]	; 0x2e
}
   d7510:	4620      	mov	r0, r4
   d7512:	bd70      	pop	{r4, r5, r6, pc}
   d7514:	000dbd18 	.word	0x000dbd18

000d7518 <_ZN12Adafruit_EPDD1Ev>:
Adafruit_EPD::~Adafruit_EPD()
   d7518:	b510      	push	{r4, lr}
   d751a:	4b07      	ldr	r3, [pc, #28]	; (d7538 <_ZN12Adafruit_EPDD1Ev+0x20>)
   d751c:	6003      	str	r3, [r0, #0]
   d751e:	4604      	mov	r4, r0
  if (buffer1 != NULL) {
   d7520:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d7522:	b118      	cbz	r0, d752c <_ZN12Adafruit_EPDD1Ev+0x14>
    free(buffer1);
   d7524:	f000 fd50 	bl	d7fc8 <free>
    buffer1 = NULL;
   d7528:	2300      	movs	r3, #0
   d752a:	6363      	str	r3, [r4, #52]	; 0x34
  if (buffer2 != NULL) {
   d752c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d752e:	b108      	cbz	r0, d7534 <_ZN12Adafruit_EPDD1Ev+0x1c>
    free(buffer2);
   d7530:	f000 fd4a 	bl	d7fc8 <free>
}
   d7534:	4620      	mov	r0, r4
   d7536:	bd10      	pop	{r4, pc}
   d7538:	000dbd18 	.word	0x000dbd18

000d753c <_ZN12Adafruit_EPD13hardwareResetEv>:
void Adafruit_EPD::hardwareReset(void) {
   d753c:	b510      	push	{r4, lr}
   d753e:	4604      	mov	r4, r0
  if (_reset_pin >= 0) {
   d7540:	f990 0023 	ldrsb.w	r0, [r0, #35]	; 0x23
   d7544:	2800      	cmp	r0, #0
   d7546:	db20      	blt.n	d758a <_ZN12Adafruit_EPD13hardwareResetEv+0x4e>
    pinMode(_reset_pin, OUTPUT);
   d7548:	2101      	movs	r1, #1
   d754a:	b280      	uxth	r0, r0
   d754c:	f002 ff12 	bl	da374 <pinMode>
    digitalWrite(_reset_pin, HIGH);
   d7550:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   d7554:	2101      	movs	r1, #1
   d7556:	b280      	uxth	r0, r0
   d7558:	f002 ff1d 	bl	da396 <digitalWrite>
    delay(10);
   d755c:	200a      	movs	r0, #10
   d755e:	f002 f9f7 	bl	d9950 <delay>
    digitalWrite(_reset_pin, LOW);
   d7562:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   d7566:	2100      	movs	r1, #0
   d7568:	b280      	uxth	r0, r0
   d756a:	f002 ff14 	bl	da396 <digitalWrite>
    delay(10);
   d756e:	200a      	movs	r0, #10
   d7570:	f002 f9ee 	bl	d9950 <delay>
    digitalWrite(_reset_pin, HIGH);
   d7574:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   d7578:	2101      	movs	r1, #1
   d757a:	b280      	uxth	r0, r0
   d757c:	f002 ff0b 	bl	da396 <digitalWrite>
}
   d7580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(10);
   d7584:	200a      	movs	r0, #10
   d7586:	f002 b9e3 	b.w	d9950 <delay>
}
   d758a:	bd10      	pop	{r4, pc}

000d758c <_ZN12Adafruit_EPD14setBlackBufferEab>:
    @param index 0 or 1, for primary or secondary value
    @param inverted Whether to invert the logical value
*/
/**************************************************************************/
 void Adafruit_EPD::setBlackBuffer(int8_t index, bool inverted) {
   if (index == 0) {
   d758c:	b961      	cbnz	r1, d75a8 <_ZN12Adafruit_EPD14setBlackBufferEab+0x1c>
     if (use_sram) {
   d758e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d7592:	b133      	cbz	r3, d75a2 <_ZN12Adafruit_EPD14setBlackBufferEab+0x16>
       blackbuffer_addr = buffer1_addr;
   d7594:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
       black_buffer = buffer1;
     }
   }
   if (index == 1) {
     if (use_sram) {
       blackbuffer_addr = buffer2_addr;
   d7598:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
     } else {
       black_buffer = buffer2;
     }
   }
   blackInverted = inverted;
   d759c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 }
   d75a0:	4770      	bx	lr
       black_buffer = buffer1;
   d75a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
       black_buffer = buffer2;
   d75a4:	6403      	str	r3, [r0, #64]	; 0x40
   d75a6:	e7f9      	b.n	d759c <_ZN12Adafruit_EPD14setBlackBufferEab+0x10>
   if (index == 1) {
   d75a8:	2901      	cmp	r1, #1
   d75aa:	d1f7      	bne.n	d759c <_ZN12Adafruit_EPD14setBlackBufferEab+0x10>
     if (use_sram) {
   d75ac:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d75b0:	b113      	cbz	r3, d75b8 <_ZN12Adafruit_EPD14setBlackBufferEab+0x2c>
       blackbuffer_addr = buffer2_addr;
   d75b2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   d75b6:	e7ef      	b.n	d7598 <_ZN12Adafruit_EPD14setBlackBufferEab+0xc>
       black_buffer = buffer2;
   d75b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d75ba:	e7f3      	b.n	d75a4 <_ZN12Adafruit_EPD14setBlackBufferEab+0x18>

000d75bc <_ZN12Adafruit_EPD14setColorBufferEab>:
    @param index 0 or 1, for primary or secondary value
    @param inverted Whether to invert the logical value
*/
/**************************************************************************/
 void Adafruit_EPD::setColorBuffer(int8_t index, bool inverted) {
   if (index == 0) {
   d75bc:	b961      	cbnz	r1, d75d8 <_ZN12Adafruit_EPD14setColorBufferEab+0x1c>
     if (use_sram) {
   d75be:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d75c2:	b133      	cbz	r3, d75d2 <_ZN12Adafruit_EPD14setColorBufferEab+0x16>
       colorbuffer_addr = buffer1_addr;
   d75c4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
       color_buffer = buffer1;
     }
   }
   if (index == 1) {
     if (use_sram) {
       colorbuffer_addr = buffer2_addr;
   d75c8:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
     } else {
       color_buffer = buffer2;
     }
   }
   colorInverted = inverted;
   d75cc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 }
   d75d0:	4770      	bx	lr
       color_buffer = buffer1;
   d75d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
       color_buffer = buffer2;
   d75d4:	63c3      	str	r3, [r0, #60]	; 0x3c
   d75d6:	e7f9      	b.n	d75cc <_ZN12Adafruit_EPD14setColorBufferEab+0x10>
   if (index == 1) {
   d75d8:	2901      	cmp	r1, #1
   d75da:	d1f7      	bne.n	d75cc <_ZN12Adafruit_EPD14setColorBufferEab+0x10>
     if (use_sram) {
   d75dc:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d75e0:	b113      	cbz	r3, d75e8 <_ZN12Adafruit_EPD14setColorBufferEab+0x2c>
       colorbuffer_addr = buffer2_addr;
   d75e2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   d75e6:	e7ef      	b.n	d75c8 <_ZN12Adafruit_EPD14setColorBufferEab+0xc>
       color_buffer = buffer2;
   d75e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d75ea:	e7f3      	b.n	d75d4 <_ZN12Adafruit_EPD14setColorBufferEab+0x18>

000d75ec <_ZN12Adafruit_EPD11clearBufferEv>:
/*!
    @brief clear all data buffers
*/
/**************************************************************************/
void Adafruit_EPD::clearBuffer()
{
   d75ec:	b510      	push	{r4, lr}
  if (use_sram) {
   d75ee:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
{
   d75f2:	4604      	mov	r4, r0
  if (use_sram) {
   d75f4:	b1c3      	cbz	r3, d7628 <_ZN12Adafruit_EPD11clearBufferEv+0x3c>
    if (buffer1_size != 0) {
   d75f6:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   d75f8:	b142      	cbz	r2, d760c <_ZN12Adafruit_EPD11clearBufferEv+0x20>
      if (blackInverted) {
   d75fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d75fe:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   d7602:	3027      	adds	r0, #39	; 0x27
   d7604:	b103      	cbz	r3, d7608 <_ZN12Adafruit_EPD11clearBufferEv+0x1c>
	sram.erase(buffer1_addr, buffer1_size, 0xFF);
   d7606:	23ff      	movs	r3, #255	; 0xff
      } else {
	sram.erase(buffer1_addr, buffer1_size, 0x00);
   d7608:	f7ff fe37 	bl	d727a <_ZN16Adafruit_MCPSRAM5eraseEtth>
      }
    }
    if (buffer2_size != 0) {
   d760c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d760e:	b1fa      	cbz	r2, d7650 <_ZN12Adafruit_EPD11clearBufferEv+0x64>
      if (colorInverted) {
   d7610:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   d7614:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
   d7618:	f104 0027 	add.w	r0, r4, #39	; 0x27
   d761c:	b103      	cbz	r3, d7620 <_ZN12Adafruit_EPD11clearBufferEv+0x34>
	sram.erase(buffer2_addr, buffer2_size, 0xFF);
   d761e:	23ff      	movs	r3, #255	; 0xff
      } else {
	memset(buffer2, 0x00, buffer2_size);
      }
    }
  }
}
   d7620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sram.erase(buffer2_addr, buffer2_size, 0x00);
   d7624:	f7ff be29 	b.w	d727a <_ZN16Adafruit_MCPSRAM5eraseEtth>
    if (buffer1) {
   d7628:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d762a:	b130      	cbz	r0, d763a <_ZN12Adafruit_EPD11clearBufferEv+0x4e>
      if (blackInverted) {
   d762c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d7630:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   d7632:	b101      	cbz	r1, d7636 <_ZN12Adafruit_EPD11clearBufferEv+0x4a>
	memset(buffer1, 0xFF, buffer1_size);
   d7634:	21ff      	movs	r1, #255	; 0xff
	memset(buffer1, 0x00, buffer1_size);
   d7636:	f003 fd8b 	bl	db150 <memset>
    if (buffer2) {
   d763a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d763c:	b140      	cbz	r0, d7650 <_ZN12Adafruit_EPD11clearBufferEv+0x64>
      if (colorInverted) {
   d763e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   d7642:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d7644:	b101      	cbz	r1, d7648 <_ZN12Adafruit_EPD11clearBufferEv+0x5c>
	memset(buffer2, 0xFF, buffer2_size);
   d7646:	21ff      	movs	r1, #255	; 0xff
}
   d7648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(buffer2, 0x00, buffer2_size);
   d764c:	f003 bd80 	b.w	db150 <memset>
}
   d7650:	bd10      	pop	{r4, pc}

000d7652 <_ZN12Adafruit_EPD6dcHighEv>:
void Adafruit_EPD::dcHigh()
{
#ifdef HAVE_PORTREG
  *dcport |= dcpinmask;
#else
  digitalWrite(_dc_pin, HIGH);
   d7652:	f990 0022 	ldrsb.w	r0, [r0, #34]	; 0x22
   d7656:	2101      	movs	r1, #1
   d7658:	b280      	uxth	r0, r0
   d765a:	f002 be9c 	b.w	da396 <digitalWrite>

000d765e <_ZN12Adafruit_EPD5dcLowEv>:
void Adafruit_EPD::dcLow()
{
#ifdef HAVE_PORTREG
  *dcport &= ~dcpinmask;
#else
  digitalWrite(_dc_pin, LOW);
   d765e:	f990 0022 	ldrsb.w	r0, [r0, #34]	; 0x22
   d7662:	2100      	movs	r1, #0
   d7664:	b280      	uxth	r0, r0
   d7666:	f002 be96 	b.w	da396 <digitalWrite>
	...

000d766c <_ZN12Adafruit_EPD6csHighEv>:
{
   d766c:	b510      	push	{r4, lr}
   d766e:	4604      	mov	r4, r0
        instance().endTransaction();
   d7670:	f7fe f9fc 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7674:	f000 fd2f 	bl	d80d6 <_ZN8SPIClass14endTransactionEv>
  _isInTransaction = false;
   d7678:	4b05      	ldr	r3, [pc, #20]	; (d7690 <_ZN12Adafruit_EPD6csHighEv+0x24>)
  digitalWrite(_cs_pin, HIGH);
   d767a:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
  _isInTransaction = false;
   d767e:	2200      	movs	r2, #0
   d7680:	701a      	strb	r2, [r3, #0]
}
   d7682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(_cs_pin, HIGH);
   d7686:	2101      	movs	r1, #1
   d7688:	b280      	uxth	r0, r0
   d768a:	f002 be84 	b.w	da396 <digitalWrite>
   d768e:	bf00      	nop
   d7690:	2003e5f9 	.word	0x2003e5f9

000d7694 <_ZN12Adafruit_EPD5beginEb>:
void Adafruit_EPD::begin(bool reset) {
   d7694:	b537      	push	{r0, r1, r2, r4, r5, lr}
  setBlackBuffer(0, true);   // black defaults to inverted
   d7696:	2201      	movs	r2, #1
void Adafruit_EPD::begin(bool reset) {
   d7698:	460d      	mov	r5, r1
  setBlackBuffer(0, true);   // black defaults to inverted
   d769a:	2100      	movs	r1, #0
void Adafruit_EPD::begin(bool reset) {
   d769c:	4604      	mov	r4, r0
  setBlackBuffer(0, true);   // black defaults to inverted
   d769e:	f7ff ff75 	bl	d758c <_ZN12Adafruit_EPD14setBlackBufferEab>
  setColorBuffer(1, false);  // red defaults to not inverted
   d76a2:	2200      	movs	r2, #0
   d76a4:	2101      	movs	r1, #1
   d76a6:	f7ff ff89 	bl	d75bc <_ZN12Adafruit_EPD14setColorBufferEab>
  if (use_sram) {
   d76aa:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d76ae:	b14b      	cbz	r3, d76c4 <_ZN12Adafruit_EPD5beginEb+0x30>
    sram.begin();
   d76b0:	3027      	adds	r0, #39	; 0x27
   d76b2:	9001      	str	r0, [sp, #4]
   d76b4:	f7ff fcc4 	bl	d7040 <_ZN16Adafruit_MCPSRAM5beginEv>
    sram.write8(0, K640_SEQUENTIAL_MODE, MCPSRAM_WRSR);
   d76b8:	9801      	ldr	r0, [sp, #4]
   d76ba:	2301      	movs	r3, #1
   d76bc:	2240      	movs	r2, #64	; 0x40
   d76be:	2100      	movs	r1, #0
   d76c0:	f7ff fd56 	bl	d7170 <_ZN16Adafruit_MCPSRAM6write8Ethh>
  pinMode(_dc_pin, OUTPUT);
   d76c4:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
   d76c8:	2101      	movs	r1, #1
   d76ca:	b280      	uxth	r0, r0
   d76cc:	f002 fe52 	bl	da374 <pinMode>
  pinMode(_cs_pin, OUTPUT);
   d76d0:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   d76d4:	2101      	movs	r1, #1
   d76d6:	b280      	uxth	r0, r0
   d76d8:	f002 fe4c 	bl	da374 <pinMode>
  csHigh();
   d76dc:	4620      	mov	r0, r4
   d76de:	f7ff ffc5 	bl	d766c <_ZN12Adafruit_EPD6csHighEv>
  if (!hwSPI){
   d76e2:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
   d76e6:	b9d3      	cbnz	r3, d771e <_ZN12Adafruit_EPD5beginEb+0x8a>
    pinMode(_sid_pin, OUTPUT);
   d76e8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d76ec:	2101      	movs	r1, #1
   d76ee:	b280      	uxth	r0, r0
   d76f0:	f002 fe40 	bl	da374 <pinMode>
    pinMode(_sclk_pin, OUTPUT);
   d76f4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d76f8:	2101      	movs	r1, #1
   d76fa:	b280      	uxth	r0, r0
   d76fc:	f002 fe3a 	bl	da374 <pinMode>
  if (reset) {
   d7700:	b115      	cbz	r5, d7708 <_ZN12Adafruit_EPD5beginEb+0x74>
    hardwareReset();
   d7702:	4620      	mov	r0, r4
   d7704:	f7ff ff1a 	bl	d753c <_ZN12Adafruit_EPD13hardwareResetEv>
  if (_busy_pin >= 0) {
   d7708:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   d770c:	2800      	cmp	r0, #0
   d770e:	db0b      	blt.n	d7728 <_ZN12Adafruit_EPD5beginEb+0x94>
    pinMode(_busy_pin, INPUT);
   d7710:	2100      	movs	r1, #0
   d7712:	b280      	uxth	r0, r0
}
   d7714:	b003      	add	sp, #12
   d7716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    pinMode(_busy_pin, INPUT);
   d771a:	f002 be2b 	b.w	da374 <pinMode>
        instance().begin();
   d771e:	f7fe f9a5 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7722:	f000 fcc7 	bl	d80b4 <_ZN8SPIClass5beginEv>
    }
   d7726:	e7eb      	b.n	d7700 <_ZN12Adafruit_EPD5beginEb+0x6c>
}
   d7728:	b003      	add	sp, #12
   d772a:	bd30      	pop	{r4, r5, pc}

000d772c <_ZN12Adafruit_EPD5csLowEv>:
{
   d772c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!_isInTransaction) {
   d772e:	4d0d      	ldr	r5, [pc, #52]	; (d7764 <_ZN12Adafruit_EPD5csLowEv+0x38>)
   d7730:	782b      	ldrb	r3, [r5, #0]
{
   d7732:	4604      	mov	r4, r0
  if (!_isInTransaction) {
   d7734:	b973      	cbnz	r3, d7754 <_ZN12Adafruit_EPD5csLowEv+0x28>
   d7736:	4a0c      	ldr	r2, [pc, #48]	; (d7768 <_ZN12Adafruit_EPD5csLowEv+0x3c>)
   d7738:	f88d 3004 	strb.w	r3, [sp, #4]
   d773c:	2601      	movs	r6, #1
   d773e:	4b0b      	ldr	r3, [pc, #44]	; (d776c <_ZN12Adafruit_EPD5csLowEv+0x40>)
   d7740:	9200      	str	r2, [sp, #0]
   d7742:	9302      	str	r3, [sp, #8]
   d7744:	f8ad 600c 	strh.w	r6, [sp, #12]
        return instance().beginTransaction(settings);
   d7748:	f7fe f990 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d774c:	4669      	mov	r1, sp
   d774e:	f000 fcdb 	bl	d8108 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    _isInTransaction = true;
   d7752:	702e      	strb	r6, [r5, #0]
  digitalWrite(_cs_pin, LOW);
   d7754:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   d7758:	2100      	movs	r1, #0
   d775a:	b280      	uxth	r0, r0
   d775c:	f002 fe1b 	bl	da396 <digitalWrite>
}
   d7760:	b004      	add	sp, #16
   d7762:	bd70      	pop	{r4, r5, r6, pc}
   d7764:	2003e5f9 	.word	0x2003e5f9
   d7768:	000db610 	.word	0x000db610
   d776c:	003d0900 	.word	0x003d0900

000d7770 <_ZN12Adafruit_EPD11SPItransferEh>:
uint8_t Adafruit_EPD::SPItransfer(uint8_t d) {
   d7770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hwSPI) {
   d7772:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
uint8_t Adafruit_EPD::SPItransfer(uint8_t d) {
   d7776:	4605      	mov	r5, r0
   d7778:	460e      	mov	r6, r1
  if (hwSPI) {
   d777a:	b1b3      	cbz	r3, d77aa <_ZN12Adafruit_EPD11SPItransferEh+0x3a>
    if (singleByteTxns){
   d777c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   d7780:	b163      	cbz	r3, d779c <_ZN12Adafruit_EPD11SPItransferEh+0x2c>
      csLow();
   d7782:	f7ff ffd3 	bl	d772c <_ZN12Adafruit_EPD5csLowEv>
        return instance().transfer(data);
   d7786:	f7fe f971 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d778a:	4631      	mov	r1, r6
   d778c:	f000 fd2a 	bl	d81e4 <_ZN8SPIClass8transferEh>
   d7790:	4604      	mov	r4, r0
      csHigh();
   d7792:	4628      	mov	r0, r5
   d7794:	f7ff ff6a 	bl	d766c <_ZN12Adafruit_EPD6csHighEv>
}
   d7798:	4620      	mov	r0, r4
   d779a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d779c:	f7fe f966 	bl	d5a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d77a0:	4631      	mov	r1, r6
   d77a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d77a6:	f000 bd1d 	b.w	d81e4 <_ZN8SPIClass8transferEh>
   d77aa:	2408      	movs	r4, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d77ac:	2780      	movs	r7, #128	; 0x80
      digitalWrite(_sclk_pin, LOW);
   d77ae:	f995 0021 	ldrsb.w	r0, [r5, #33]	; 0x21
   d77b2:	2100      	movs	r1, #0
   d77b4:	b280      	uxth	r0, r0
   d77b6:	f002 fdee 	bl	da396 <digitalWrite>
      if(d & bit) digitalWrite(_sid_pin, HIGH);
   d77ba:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d77be:	ea16 0107 	ands.w	r1, r6, r7
   d77c2:	bf18      	it	ne
   d77c4:	2101      	movne	r1, #1
      else        digitalWrite(_sid_pin, LOW);
   d77c6:	b280      	uxth	r0, r0
   d77c8:	f002 fde5 	bl	da396 <digitalWrite>
      digitalWrite(_sclk_pin, HIGH);
   d77cc:	f995 0021 	ldrsb.w	r0, [r5, #33]	; 0x21
   d77d0:	2101      	movs	r1, #1
   d77d2:	b280      	uxth	r0, r0
   d77d4:	f002 fddf 	bl	da396 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d77d8:	3c01      	subs	r4, #1
   d77da:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d77de:	d1e6      	bne.n	d77ae <_ZN12Adafruit_EPD11SPItransferEh+0x3e>
   d77e0:	e7da      	b.n	d7798 <_ZN12Adafruit_EPD11SPItransferEh+0x28>

000d77e2 <_ZN12Adafruit_EPD7displayEv>:
{
   d77e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  powerUp();
   d77e6:	6803      	ldr	r3, [r0, #0]
{
   d77e8:	4604      	mov	r4, r0
  powerUp();
   d77ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d77ec:	4798      	blx	r3
  setRAMAddress(0, 0);
   d77ee:	6823      	ldr	r3, [r4, #0]
   d77f0:	2200      	movs	r2, #0
   d77f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d77f4:	4611      	mov	r1, r2
   d77f6:	4620      	mov	r0, r4
   d77f8:	4798      	blx	r3
  if (use_sram) {
   d77fa:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
   d77fe:	b3b5      	cbz	r5, d786e <_ZN12Adafruit_EPD7displayEv+0x8c>
    sram.csLow();
   d7800:	f104 0727 	add.w	r7, r4, #39	; 0x27
   d7804:	4638      	mov	r0, r7
   d7806:	f7ff fbfd 	bl	d7004 <_ZN16Adafruit_MCPSRAM5csLowEv>
    SPItransfer(MCPSRAM_READ);
   d780a:	2103      	movs	r1, #3
   d780c:	4620      	mov	r0, r4
   d780e:	f7ff ffaf 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer1_addr >> 8);
   d7812:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   d7816:	4620      	mov	r0, r4
   d7818:	0a09      	lsrs	r1, r1, #8
   d781a:	f7ff ffa9 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer1_addr & 0xFF);
   d781e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   d7822:	4620      	mov	r0, r4
   d7824:	f7ff ffa4 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
    c = writeRAMCommand(0);
   d7828:	6823      	ldr	r3, [r4, #0]
   d782a:	2100      	movs	r1, #0
   d782c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d782e:	4620      	mov	r0, r4
   d7830:	4798      	blx	r3
   d7832:	4605      	mov	r5, r0
    dcHigh();
   d7834:	4620      	mov	r0, r4
   d7836:	f7ff ff0c 	bl	d7652 <_ZN12Adafruit_EPD6dcHighEv>
   d783a:	2600      	movs	r6, #0
    for(uint16_t i=0; i<buffer1_size; i++){
   d783c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   d783e:	b2b3      	uxth	r3, r6
   d7840:	429a      	cmp	r2, r3
   d7842:	d906      	bls.n	d7852 <_ZN12Adafruit_EPD7displayEv+0x70>
      c = SPItransfer(c);
   d7844:	4629      	mov	r1, r5
   d7846:	4620      	mov	r0, r4
   d7848:	f7ff ff92 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
   d784c:	3601      	adds	r6, #1
   d784e:	4605      	mov	r5, r0
    for(uint16_t i=0; i<buffer1_size; i++){
   d7850:	e7f4      	b.n	d783c <_ZN12Adafruit_EPD7displayEv+0x5a>
    csHigh();
   d7852:	4620      	mov	r0, r4
   d7854:	f7ff ff0a 	bl	d766c <_ZN12Adafruit_EPD6csHighEv>
    sram.csHigh();
   d7858:	4638      	mov	r0, r7
   d785a:	f7ff fbc5 	bl	d6fe8 <_ZN16Adafruit_MCPSRAM6csHighEv>
  if (buffer2_size == 0) {
   d785e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7860:	b9e3      	cbnz	r3, d789c <_ZN12Adafruit_EPD7displayEv+0xba>
    update();
   d7862:	6823      	ldr	r3, [r4, #0]
   d7864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  powerDown();
   d7866:	4620      	mov	r0, r4
}
   d7868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  powerDown();
   d786c:	4718      	bx	r3
    writeRAMCommand(0);
   d786e:	6823      	ldr	r3, [r4, #0]
   d7870:	4629      	mov	r1, r5
   d7872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7874:	4620      	mov	r0, r4
   d7876:	4798      	blx	r3
    dcHigh();
   d7878:	4620      	mov	r0, r4
   d787a:	f7ff feea 	bl	d7652 <_ZN12Adafruit_EPD6dcHighEv>
    for(uint16_t i=0; i<buffer1_size; i++) {
   d787e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   d7880:	b2ab      	uxth	r3, r5
   d7882:	429a      	cmp	r2, r3
   d7884:	d906      	bls.n	d7894 <_ZN12Adafruit_EPD7displayEv+0xb2>
      SPItransfer(buffer1[i]);
   d7886:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d7888:	4620      	mov	r0, r4
   d788a:	5cd1      	ldrb	r1, [r2, r3]
   d788c:	f7ff ff70 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
    for(uint16_t i=0; i<buffer1_size; i++) {
   d7890:	3501      	adds	r5, #1
   d7892:	e7f4      	b.n	d787e <_ZN12Adafruit_EPD7displayEv+0x9c>
    csHigh();
   d7894:	4620      	mov	r0, r4
   d7896:	f7ff fee9 	bl	d766c <_ZN12Adafruit_EPD6csHighEv>
   d789a:	e7e0      	b.n	d785e <_ZN12Adafruit_EPD7displayEv+0x7c>
  delay(2);
   d789c:	2002      	movs	r0, #2
   d789e:	f002 f857 	bl	d9950 <delay>
  setRAMAddress(0, 0);
   d78a2:	6823      	ldr	r3, [r4, #0]
   d78a4:	2200      	movs	r2, #0
   d78a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d78a8:	4611      	mov	r1, r2
   d78aa:	4620      	mov	r0, r4
   d78ac:	4798      	blx	r3
  if (use_sram) {
   d78ae:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
   d78b2:	b3ad      	cbz	r5, d7920 <_ZN12Adafruit_EPD7displayEv+0x13e>
    sram.csLow();
   d78b4:	f104 0727 	add.w	r7, r4, #39	; 0x27
   d78b8:	4638      	mov	r0, r7
   d78ba:	f7ff fba3 	bl	d7004 <_ZN16Adafruit_MCPSRAM5csLowEv>
    SPItransfer(MCPSRAM_READ);
   d78be:	2103      	movs	r1, #3
   d78c0:	4620      	mov	r0, r4
   d78c2:	f7ff ff55 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer2_addr >> 8);
   d78c6:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
   d78ca:	4620      	mov	r0, r4
   d78cc:	0a09      	lsrs	r1, r1, #8
   d78ce:	f7ff ff4f 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer2_addr & 0xFF);
   d78d2:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   d78d6:	4620      	mov	r0, r4
   d78d8:	f7ff ff4a 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
    c = writeRAMCommand(1);
   d78dc:	6823      	ldr	r3, [r4, #0]
   d78de:	2101      	movs	r1, #1
   d78e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d78e2:	4620      	mov	r0, r4
   d78e4:	4798      	blx	r3
   d78e6:	4605      	mov	r5, r0
    dcHigh();
   d78e8:	4620      	mov	r0, r4
   d78ea:	f7ff feb2 	bl	d7652 <_ZN12Adafruit_EPD6dcHighEv>
   d78ee:	2600      	movs	r6, #0
    for(uint16_t i=0; i<buffer2_size; i++){
   d78f0:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d78f2:	b2b3      	uxth	r3, r6
   d78f4:	429a      	cmp	r2, r3
   d78f6:	d906      	bls.n	d7906 <_ZN12Adafruit_EPD7displayEv+0x124>
      c = SPItransfer(c);
   d78f8:	4629      	mov	r1, r5
   d78fa:	4620      	mov	r0, r4
   d78fc:	f7ff ff38 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
   d7900:	3601      	adds	r6, #1
   d7902:	4605      	mov	r5, r0
    for(uint16_t i=0; i<buffer2_size; i++){
   d7904:	e7f4      	b.n	d78f0 <_ZN12Adafruit_EPD7displayEv+0x10e>
    csHigh();
   d7906:	4620      	mov	r0, r4
   d7908:	f7ff feb0 	bl	d766c <_ZN12Adafruit_EPD6csHighEv>
    sram.csHigh();
   d790c:	4638      	mov	r0, r7
   d790e:	f7ff fb6b 	bl	d6fe8 <_ZN16Adafruit_MCPSRAM6csHighEv>
  update();
   d7912:	6823      	ldr	r3, [r4, #0]
   d7914:	4620      	mov	r0, r4
   d7916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7918:	4798      	blx	r3
  powerDown();
   d791a:	6823      	ldr	r3, [r4, #0]
   d791c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d791e:	e7a2      	b.n	d7866 <_ZN12Adafruit_EPD7displayEv+0x84>
    writeRAMCommand(1);
   d7920:	6823      	ldr	r3, [r4, #0]
   d7922:	2101      	movs	r1, #1
   d7924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7926:	4620      	mov	r0, r4
   d7928:	4798      	blx	r3
    dcHigh();
   d792a:	4620      	mov	r0, r4
   d792c:	f7ff fe91 	bl	d7652 <_ZN12Adafruit_EPD6dcHighEv>
    for(uint16_t i=0; i<buffer2_size; i++){
   d7930:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d7932:	b2ab      	uxth	r3, r5
   d7934:	429a      	cmp	r2, r3
   d7936:	d906      	bls.n	d7946 <_ZN12Adafruit_EPD7displayEv+0x164>
      SPItransfer(buffer2[i]);
   d7938:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d793a:	4620      	mov	r0, r4
   d793c:	5cd1      	ldrb	r1, [r2, r3]
   d793e:	f7ff ff17 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
    for(uint16_t i=0; i<buffer2_size; i++){
   d7942:	3501      	adds	r5, #1
   d7944:	e7f4      	b.n	d7930 <_ZN12Adafruit_EPD7displayEv+0x14e>
    csHigh();
   d7946:	4620      	mov	r0, r4
   d7948:	f7ff fe90 	bl	d766c <_ZN12Adafruit_EPD6csHighEv>
   d794c:	e7e1      	b.n	d7912 <_ZN12Adafruit_EPD7displayEv+0x130>

000d794e <_ZN12Adafruit_EPD8EPD_dataEPKht>:
{
   d794e:	b570      	push	{r4, r5, r6, lr}
   d7950:	460c      	mov	r4, r1
   d7952:	4615      	mov	r5, r2
   d7954:	4606      	mov	r6, r0
  dcHigh();
   d7956:	f7ff fe7c 	bl	d7652 <_ZN12Adafruit_EPD6dcHighEv>
  for (uint16_t i=0; i<len; i++) {
   d795a:	4425      	add	r5, r4
   d795c:	42ac      	cmp	r4, r5
   d795e:	d005      	beq.n	d796c <_ZN12Adafruit_EPD8EPD_dataEPKht+0x1e>
    SPItransfer(buf[i]);
   d7960:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7964:	4630      	mov	r0, r6
   d7966:	f7ff ff03 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
  for (uint16_t i=0; i<len; i++) {
   d796a:	e7f7      	b.n	d795c <_ZN12Adafruit_EPD8EPD_dataEPKht+0xe>
  csHigh();
   d796c:	4630      	mov	r0, r6
}
   d796e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  csHigh();
   d7972:	f7ff be7b 	b.w	d766c <_ZN12Adafruit_EPD6csHighEv>

000d7976 <_ZN12Adafruit_EPD11EPD_commandEhb>:
uint8_t Adafruit_EPD::EPD_command(uint8_t c, bool end) {
   d7976:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7978:	4604      	mov	r4, r0
   d797a:	9101      	str	r1, [sp, #4]
   d797c:	4616      	mov	r6, r2
  csHigh();
   d797e:	f7ff fe75 	bl	d766c <_ZN12Adafruit_EPD6csHighEv>
  dcLow();
   d7982:	4620      	mov	r0, r4
   d7984:	f7ff fe6b 	bl	d765e <_ZN12Adafruit_EPD5dcLowEv>
  csLow();
   d7988:	4620      	mov	r0, r4
   d798a:	f7ff fecf 	bl	d772c <_ZN12Adafruit_EPD5csLowEv>
  uint8_t data = SPItransfer(c);
   d798e:	9901      	ldr	r1, [sp, #4]
   d7990:	4620      	mov	r0, r4
   d7992:	f7ff feed 	bl	d7770 <_ZN12Adafruit_EPD11SPItransferEh>
   d7996:	4605      	mov	r5, r0
  if (end) {
   d7998:	b116      	cbz	r6, d79a0 <_ZN12Adafruit_EPD11EPD_commandEhb+0x2a>
    csHigh();
   d799a:	4620      	mov	r0, r4
   d799c:	f7ff fe66 	bl	d766c <_ZN12Adafruit_EPD6csHighEv>
}
   d79a0:	4628      	mov	r0, r5
   d79a2:	b002      	add	sp, #8
   d79a4:	bd70      	pop	{r4, r5, r6, pc}

000d79a6 <_ZN12Adafruit_EPD11EPD_commandEhPKht>:
{
   d79a6:	b570      	push	{r4, r5, r6, lr}
   d79a8:	4604      	mov	r4, r0
   d79aa:	4615      	mov	r5, r2
   d79ac:	461e      	mov	r6, r3
  EPD_command(c, false);
   d79ae:	2200      	movs	r2, #0
   d79b0:	f7ff ffe1 	bl	d7976 <_ZN12Adafruit_EPD11EPD_commandEhb>
  EPD_data(buf, len);
   d79b4:	4632      	mov	r2, r6
   d79b6:	4629      	mov	r1, r5
   d79b8:	4620      	mov	r0, r4
}
   d79ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  EPD_data(buf, len);
   d79be:	f7ff bfc6 	b.w	d794e <_ZN12Adafruit_EPD8EPD_dataEPKht>
	...

000d79c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d79c4:	b508      	push	{r3, lr}
   d79c6:	4b02      	ldr	r3, [pc, #8]	; (d79d0 <netdb_freeaddrinfo+0xc>)
   d79c8:	681b      	ldr	r3, [r3, #0]
   d79ca:	689b      	ldr	r3, [r3, #8]
   d79cc:	9301      	str	r3, [sp, #4]
   d79ce:	bd08      	pop	{r3, pc}
   d79d0:	00030268 	.word	0x00030268

000d79d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d79d4:	b508      	push	{r3, lr}
   d79d6:	4b02      	ldr	r3, [pc, #8]	; (d79e0 <netdb_getaddrinfo+0xc>)
   d79d8:	681b      	ldr	r3, [r3, #0]
   d79da:	68db      	ldr	r3, [r3, #12]
   d79dc:	9301      	str	r3, [sp, #4]
   d79de:	bd08      	pop	{r3, pc}
   d79e0:	00030268 	.word	0x00030268

000d79e4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d79e4:	b508      	push	{r3, lr}
   d79e6:	4b02      	ldr	r3, [pc, #8]	; (d79f0 <HAL_Pin_Mode+0xc>)
   d79e8:	681b      	ldr	r3, [r3, #0]
   d79ea:	689b      	ldr	r3, [r3, #8]
   d79ec:	9301      	str	r3, [sp, #4]
   d79ee:	bd08      	pop	{r3, pc}
   d79f0:	0003022c 	.word	0x0003022c

000d79f4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d79f4:	b508      	push	{r3, lr}
   d79f6:	4b02      	ldr	r3, [pc, #8]	; (d7a00 <HAL_Get_Pin_Mode+0xc>)
   d79f8:	681b      	ldr	r3, [r3, #0]
   d79fa:	68db      	ldr	r3, [r3, #12]
   d79fc:	9301      	str	r3, [sp, #4]
   d79fe:	bd08      	pop	{r3, pc}
   d7a00:	0003022c 	.word	0x0003022c

000d7a04 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7a04:	b508      	push	{r3, lr}
   d7a06:	4b02      	ldr	r3, [pc, #8]	; (d7a10 <HAL_GPIO_Write+0xc>)
   d7a08:	681b      	ldr	r3, [r3, #0]
   d7a0a:	691b      	ldr	r3, [r3, #16]
   d7a0c:	9301      	str	r3, [sp, #4]
   d7a0e:	bd08      	pop	{r3, pc}
   d7a10:	0003022c 	.word	0x0003022c

000d7a14 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7a14:	b508      	push	{r3, lr}
   d7a16:	4b02      	ldr	r3, [pc, #8]	; (d7a20 <HAL_GPIO_Read+0xc>)
   d7a18:	681b      	ldr	r3, [r3, #0]
   d7a1a:	695b      	ldr	r3, [r3, #20]
   d7a1c:	9301      	str	r3, [sp, #4]
   d7a1e:	bd08      	pop	{r3, pc}
   d7a20:	0003022c 	.word	0x0003022c

000d7a24 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7a24:	b508      	push	{r3, lr}
   d7a26:	4b02      	ldr	r3, [pc, #8]	; (d7a30 <HAL_RNG_GetRandomNumber+0xc>)
   d7a28:	681b      	ldr	r3, [r3, #0]
   d7a2a:	685b      	ldr	r3, [r3, #4]
   d7a2c:	9301      	str	r3, [sp, #4]
   d7a2e:	bd08      	pop	{r3, pc}
   d7a30:	00030218 	.word	0x00030218

000d7a34 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7a34:	b508      	push	{r3, lr}
   d7a36:	4b02      	ldr	r3, [pc, #8]	; (d7a40 <HAL_Delay_Microseconds+0xc>)
   d7a38:	681b      	ldr	r3, [r3, #0]
   d7a3a:	68db      	ldr	r3, [r3, #12]
   d7a3c:	9301      	str	r3, [sp, #4]
   d7a3e:	bd08      	pop	{r3, pc}
   d7a40:	00030218 	.word	0x00030218

000d7a44 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7a44:	b508      	push	{r3, lr}
   d7a46:	4b02      	ldr	r3, [pc, #8]	; (d7a50 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7a48:	681b      	ldr	r3, [r3, #0]
   d7a4a:	691b      	ldr	r3, [r3, #16]
   d7a4c:	9301      	str	r3, [sp, #4]
   d7a4e:	bd08      	pop	{r3, pc}
   d7a50:	00030218 	.word	0x00030218

000d7a54 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7a54:	b508      	push	{r3, lr}
   d7a56:	4b02      	ldr	r3, [pc, #8]	; (d7a60 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7a58:	681b      	ldr	r3, [r3, #0]
   d7a5a:	695b      	ldr	r3, [r3, #20]
   d7a5c:	9301      	str	r3, [sp, #4]
   d7a5e:	bd08      	pop	{r3, pc}
   d7a60:	00030218 	.word	0x00030218

000d7a64 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d7a64:	b508      	push	{r3, lr}
   d7a66:	4b02      	ldr	r3, [pc, #8]	; (d7a70 <HAL_EEPROM_Init+0xc>)
   d7a68:	681b      	ldr	r3, [r3, #0]
   d7a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7a6c:	9301      	str	r3, [sp, #4]
   d7a6e:	bd08      	pop	{r3, pc}
   d7a70:	00030218 	.word	0x00030218

000d7a74 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d7a74:	b508      	push	{r3, lr}
   d7a76:	4b02      	ldr	r3, [pc, #8]	; (d7a80 <HAL_EEPROM_Get+0xc>)
   d7a78:	681b      	ldr	r3, [r3, #0]
   d7a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7a7c:	9301      	str	r3, [sp, #4]
   d7a7e:	bd08      	pop	{r3, pc}
   d7a80:	00030218 	.word	0x00030218

000d7a84 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d7a84:	b508      	push	{r3, lr}
   d7a86:	4b02      	ldr	r3, [pc, #8]	; (d7a90 <HAL_EEPROM_Put+0xc>)
   d7a88:	681b      	ldr	r3, [r3, #0]
   d7a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7a8c:	9301      	str	r3, [sp, #4]
   d7a8e:	bd08      	pop	{r3, pc}
   d7a90:	00030218 	.word	0x00030218

000d7a94 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d7a94:	b508      	push	{r3, lr}
   d7a96:	4b02      	ldr	r3, [pc, #8]	; (d7aa0 <hal_ble_stack_init+0xc>)
   d7a98:	681b      	ldr	r3, [r3, #0]
   d7a9a:	689b      	ldr	r3, [r3, #8]
   d7a9c:	9301      	str	r3, [sp, #4]
   d7a9e:	bd08      	pop	{r3, pc}
   d7aa0:	00030278 	.word	0x00030278

000d7aa4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d7aa4:	b508      	push	{r3, lr}
   d7aa6:	4b02      	ldr	r3, [pc, #8]	; (d7ab0 <hal_ble_gap_set_advertising_data+0xc>)
   d7aa8:	681b      	ldr	r3, [r3, #0]
   d7aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7aac:	9301      	str	r3, [sp, #4]
   d7aae:	bd08      	pop	{r3, pc}
   d7ab0:	00030278 	.word	0x00030278

000d7ab4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d7ab4:	b508      	push	{r3, lr}
   d7ab6:	4b02      	ldr	r3, [pc, #8]	; (d7ac0 <hal_ble_gap_set_scan_response_data+0xc>)
   d7ab8:	681b      	ldr	r3, [r3, #0]
   d7aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7abc:	9301      	str	r3, [sp, #4]
   d7abe:	bd08      	pop	{r3, pc}
   d7ac0:	00030278 	.word	0x00030278

000d7ac4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d7ac4:	b508      	push	{r3, lr}
   d7ac6:	4b02      	ldr	r3, [pc, #8]	; (d7ad0 <hal_ble_gap_start_advertising+0xc>)
   d7ac8:	681b      	ldr	r3, [r3, #0]
   d7aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d7acc:	9301      	str	r3, [sp, #4]
   d7ace:	bd08      	pop	{r3, pc}
   d7ad0:	00030278 	.word	0x00030278

000d7ad4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d7ad4:	b508      	push	{r3, lr}
   d7ad6:	4b03      	ldr	r3, [pc, #12]	; (d7ae4 <hal_ble_gap_disconnect+0x10>)
   d7ad8:	681b      	ldr	r3, [r3, #0]
   d7ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7ade:	9301      	str	r3, [sp, #4]
   d7ae0:	bd08      	pop	{r3, pc}
   d7ae2:	0000      	.short	0x0000
   d7ae4:	00030278 	.word	0x00030278

000d7ae8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d7ae8:	b508      	push	{r3, lr}
   d7aea:	4b03      	ldr	r3, [pc, #12]	; (d7af8 <hal_ble_gatt_server_add_service+0x10>)
   d7aec:	681b      	ldr	r3, [r3, #0]
   d7aee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7af2:	9301      	str	r3, [sp, #4]
   d7af4:	bd08      	pop	{r3, pc}
   d7af6:	0000      	.short	0x0000
   d7af8:	00030278 	.word	0x00030278

000d7afc <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d7afc:	b508      	push	{r3, lr}
   d7afe:	4b03      	ldr	r3, [pc, #12]	; (d7b0c <hal_ble_gatt_server_add_characteristic+0x10>)
   d7b00:	681b      	ldr	r3, [r3, #0]
   d7b02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d7b06:	9301      	str	r3, [sp, #4]
   d7b08:	bd08      	pop	{r3, pc}
   d7b0a:	0000      	.short	0x0000
   d7b0c:	00030278 	.word	0x00030278

000d7b10 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d7b10:	b508      	push	{r3, lr}
   d7b12:	4b03      	ldr	r3, [pc, #12]	; (d7b20 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d7b14:	681b      	ldr	r3, [r3, #0]
   d7b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d7b1a:	9301      	str	r3, [sp, #4]
   d7b1c:	bd08      	pop	{r3, pc}
   d7b1e:	0000      	.short	0x0000
   d7b20:	00030278 	.word	0x00030278

000d7b24 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7b24:	b508      	push	{r3, lr}
   d7b26:	4b02      	ldr	r3, [pc, #8]	; (d7b30 <os_mutex_recursive_create+0xc>)
   d7b28:	681b      	ldr	r3, [r3, #0]
   d7b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7b2c:	9301      	str	r3, [sp, #4]
   d7b2e:	bd08      	pop	{r3, pc}
   d7b30:	00030248 	.word	0x00030248

000d7b34 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7b34:	b508      	push	{r3, lr}
   d7b36:	4b02      	ldr	r3, [pc, #8]	; (d7b40 <os_mutex_recursive_destroy+0xc>)
   d7b38:	681b      	ldr	r3, [r3, #0]
   d7b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7b3c:	9301      	str	r3, [sp, #4]
   d7b3e:	bd08      	pop	{r3, pc}
   d7b40:	00030248 	.word	0x00030248

000d7b44 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7b44:	b508      	push	{r3, lr}
   d7b46:	4b02      	ldr	r3, [pc, #8]	; (d7b50 <os_mutex_recursive_lock+0xc>)
   d7b48:	681b      	ldr	r3, [r3, #0]
   d7b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7b4c:	9301      	str	r3, [sp, #4]
   d7b4e:	bd08      	pop	{r3, pc}
   d7b50:	00030248 	.word	0x00030248

000d7b54 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7b54:	b508      	push	{r3, lr}
   d7b56:	4b02      	ldr	r3, [pc, #8]	; (d7b60 <os_mutex_recursive_unlock+0xc>)
   d7b58:	681b      	ldr	r3, [r3, #0]
   d7b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7b5c:	9301      	str	r3, [sp, #4]
   d7b5e:	bd08      	pop	{r3, pc}
   d7b60:	00030248 	.word	0x00030248

000d7b64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7b64:	b508      	push	{r3, lr}
   d7b66:	4b02      	ldr	r3, [pc, #8]	; (d7b70 <inet_inet_ntop+0xc>)
   d7b68:	681b      	ldr	r3, [r3, #0]
   d7b6a:	695b      	ldr	r3, [r3, #20]
   d7b6c:	9301      	str	r3, [sp, #4]
   d7b6e:	bd08      	pop	{r3, pc}
   d7b70:	00030264 	.word	0x00030264

000d7b74 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7b74:	b508      	push	{r3, lr}
   d7b76:	4b02      	ldr	r3, [pc, #8]	; (d7b80 <hal_usart_init+0xc>)
   d7b78:	681b      	ldr	r3, [r3, #0]
   d7b7a:	681b      	ldr	r3, [r3, #0]
   d7b7c:	9301      	str	r3, [sp, #4]
   d7b7e:	bd08      	pop	{r3, pc}
   d7b80:	0003023c 	.word	0x0003023c

000d7b84 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7b84:	b508      	push	{r3, lr}
   d7b86:	4b02      	ldr	r3, [pc, #8]	; (d7b90 <hal_usart_write+0xc>)
   d7b88:	681b      	ldr	r3, [r3, #0]
   d7b8a:	68db      	ldr	r3, [r3, #12]
   d7b8c:	9301      	str	r3, [sp, #4]
   d7b8e:	bd08      	pop	{r3, pc}
   d7b90:	0003023c 	.word	0x0003023c

000d7b94 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7b94:	b508      	push	{r3, lr}
   d7b96:	4b02      	ldr	r3, [pc, #8]	; (d7ba0 <hal_usart_available+0xc>)
   d7b98:	681b      	ldr	r3, [r3, #0]
   d7b9a:	691b      	ldr	r3, [r3, #16]
   d7b9c:	9301      	str	r3, [sp, #4]
   d7b9e:	bd08      	pop	{r3, pc}
   d7ba0:	0003023c 	.word	0x0003023c

000d7ba4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7ba4:	b508      	push	{r3, lr}
   d7ba6:	4b02      	ldr	r3, [pc, #8]	; (d7bb0 <hal_usart_read+0xc>)
   d7ba8:	681b      	ldr	r3, [r3, #0]
   d7baa:	695b      	ldr	r3, [r3, #20]
   d7bac:	9301      	str	r3, [sp, #4]
   d7bae:	bd08      	pop	{r3, pc}
   d7bb0:	0003023c 	.word	0x0003023c

000d7bb4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7bb4:	b508      	push	{r3, lr}
   d7bb6:	4b02      	ldr	r3, [pc, #8]	; (d7bc0 <hal_usart_peek+0xc>)
   d7bb8:	681b      	ldr	r3, [r3, #0]
   d7bba:	699b      	ldr	r3, [r3, #24]
   d7bbc:	9301      	str	r3, [sp, #4]
   d7bbe:	bd08      	pop	{r3, pc}
   d7bc0:	0003023c 	.word	0x0003023c

000d7bc4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7bc4:	b508      	push	{r3, lr}
   d7bc6:	4b02      	ldr	r3, [pc, #8]	; (d7bd0 <hal_usart_flush+0xc>)
   d7bc8:	681b      	ldr	r3, [r3, #0]
   d7bca:	69db      	ldr	r3, [r3, #28]
   d7bcc:	9301      	str	r3, [sp, #4]
   d7bce:	bd08      	pop	{r3, pc}
   d7bd0:	0003023c 	.word	0x0003023c

000d7bd4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7bd4:	b508      	push	{r3, lr}
   d7bd6:	4b02      	ldr	r3, [pc, #8]	; (d7be0 <hal_usart_is_enabled+0xc>)
   d7bd8:	681b      	ldr	r3, [r3, #0]
   d7bda:	6a1b      	ldr	r3, [r3, #32]
   d7bdc:	9301      	str	r3, [sp, #4]
   d7bde:	bd08      	pop	{r3, pc}
   d7be0:	0003023c 	.word	0x0003023c

000d7be4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7be4:	b508      	push	{r3, lr}
   d7be6:	4b02      	ldr	r3, [pc, #8]	; (d7bf0 <hal_usart_available_data_for_write+0xc>)
   d7be8:	681b      	ldr	r3, [r3, #0]
   d7bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7bec:	9301      	str	r3, [sp, #4]
   d7bee:	bd08      	pop	{r3, pc}
   d7bf0:	0003023c 	.word	0x0003023c

000d7bf4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7bf4:	b508      	push	{r3, lr}
   d7bf6:	4b02      	ldr	r3, [pc, #8]	; (d7c00 <hal_i2c_begin+0xc>)
   d7bf8:	681b      	ldr	r3, [r3, #0]
   d7bfa:	68db      	ldr	r3, [r3, #12]
   d7bfc:	9301      	str	r3, [sp, #4]
   d7bfe:	bd08      	pop	{r3, pc}
   d7c00:	00030228 	.word	0x00030228

000d7c04 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7c04:	b508      	push	{r3, lr}
   d7c06:	4b02      	ldr	r3, [pc, #8]	; (d7c10 <hal_i2c_begin_transmission+0xc>)
   d7c08:	681b      	ldr	r3, [r3, #0]
   d7c0a:	699b      	ldr	r3, [r3, #24]
   d7c0c:	9301      	str	r3, [sp, #4]
   d7c0e:	bd08      	pop	{r3, pc}
   d7c10:	00030228 	.word	0x00030228

000d7c14 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7c14:	b508      	push	{r3, lr}
   d7c16:	4b02      	ldr	r3, [pc, #8]	; (d7c20 <hal_i2c_end_transmission+0xc>)
   d7c18:	681b      	ldr	r3, [r3, #0]
   d7c1a:	69db      	ldr	r3, [r3, #28]
   d7c1c:	9301      	str	r3, [sp, #4]
   d7c1e:	bd08      	pop	{r3, pc}
   d7c20:	00030228 	.word	0x00030228

000d7c24 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7c24:	b508      	push	{r3, lr}
   d7c26:	4b02      	ldr	r3, [pc, #8]	; (d7c30 <hal_i2c_write+0xc>)
   d7c28:	681b      	ldr	r3, [r3, #0]
   d7c2a:	6a1b      	ldr	r3, [r3, #32]
   d7c2c:	9301      	str	r3, [sp, #4]
   d7c2e:	bd08      	pop	{r3, pc}
   d7c30:	00030228 	.word	0x00030228

000d7c34 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7c34:	b508      	push	{r3, lr}
   d7c36:	4b02      	ldr	r3, [pc, #8]	; (d7c40 <hal_i2c_available+0xc>)
   d7c38:	681b      	ldr	r3, [r3, #0]
   d7c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7c3c:	9301      	str	r3, [sp, #4]
   d7c3e:	bd08      	pop	{r3, pc}
   d7c40:	00030228 	.word	0x00030228

000d7c44 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7c44:	b508      	push	{r3, lr}
   d7c46:	4b02      	ldr	r3, [pc, #8]	; (d7c50 <hal_i2c_read+0xc>)
   d7c48:	681b      	ldr	r3, [r3, #0]
   d7c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7c4c:	9301      	str	r3, [sp, #4]
   d7c4e:	bd08      	pop	{r3, pc}
   d7c50:	00030228 	.word	0x00030228

000d7c54 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7c54:	b508      	push	{r3, lr}
   d7c56:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <hal_i2c_peek+0xc>)
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c5c:	9301      	str	r3, [sp, #4]
   d7c5e:	bd08      	pop	{r3, pc}
   d7c60:	00030228 	.word	0x00030228

000d7c64 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7c64:	b508      	push	{r3, lr}
   d7c66:	4b02      	ldr	r3, [pc, #8]	; (d7c70 <hal_i2c_flush+0xc>)
   d7c68:	681b      	ldr	r3, [r3, #0]
   d7c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c6c:	9301      	str	r3, [sp, #4]
   d7c6e:	bd08      	pop	{r3, pc}
   d7c70:	00030228 	.word	0x00030228

000d7c74 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7c74:	b508      	push	{r3, lr}
   d7c76:	4b02      	ldr	r3, [pc, #8]	; (d7c80 <hal_i2c_is_enabled+0xc>)
   d7c78:	681b      	ldr	r3, [r3, #0]
   d7c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7c7c:	9301      	str	r3, [sp, #4]
   d7c7e:	bd08      	pop	{r3, pc}
   d7c80:	00030228 	.word	0x00030228

000d7c84 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7c84:	b508      	push	{r3, lr}
   d7c86:	4b02      	ldr	r3, [pc, #8]	; (d7c90 <hal_i2c_init+0xc>)
   d7c88:	681b      	ldr	r3, [r3, #0]
   d7c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7c8c:	9301      	str	r3, [sp, #4]
   d7c8e:	bd08      	pop	{r3, pc}
   d7c90:	00030228 	.word	0x00030228

000d7c94 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7c94:	b508      	push	{r3, lr}
   d7c96:	4b02      	ldr	r3, [pc, #8]	; (d7ca0 <hal_i2c_lock+0xc>)
   d7c98:	681b      	ldr	r3, [r3, #0]
   d7c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7c9c:	9301      	str	r3, [sp, #4]
   d7c9e:	bd08      	pop	{r3, pc}
   d7ca0:	00030228 	.word	0x00030228

000d7ca4 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7ca4:	b508      	push	{r3, lr}
   d7ca6:	4b02      	ldr	r3, [pc, #8]	; (d7cb0 <hal_i2c_unlock+0xc>)
   d7ca8:	681b      	ldr	r3, [r3, #0]
   d7caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7cac:	9301      	str	r3, [sp, #4]
   d7cae:	bd08      	pop	{r3, pc}
   d7cb0:	00030228 	.word	0x00030228

000d7cb4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7cb4:	b508      	push	{r3, lr}
   d7cb6:	4b02      	ldr	r3, [pc, #8]	; (d7cc0 <hal_i2c_request_ex+0xc>)
   d7cb8:	681b      	ldr	r3, [r3, #0]
   d7cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7cbc:	9301      	str	r3, [sp, #4]
   d7cbe:	bd08      	pop	{r3, pc}
   d7cc0:	00030228 	.word	0x00030228

000d7cc4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7cc4:	b508      	push	{r3, lr}
   d7cc6:	4b02      	ldr	r3, [pc, #8]	; (d7cd0 <hal_spi_begin+0xc>)
   d7cc8:	681b      	ldr	r3, [r3, #0]
   d7cca:	681b      	ldr	r3, [r3, #0]
   d7ccc:	9301      	str	r3, [sp, #4]
   d7cce:	bd08      	pop	{r3, pc}
   d7cd0:	00030230 	.word	0x00030230

000d7cd4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7cd4:	b508      	push	{r3, lr}
   d7cd6:	4b02      	ldr	r3, [pc, #8]	; (d7ce0 <hal_spi_transfer+0xc>)
   d7cd8:	681b      	ldr	r3, [r3, #0]
   d7cda:	695b      	ldr	r3, [r3, #20]
   d7cdc:	9301      	str	r3, [sp, #4]
   d7cde:	bd08      	pop	{r3, pc}
   d7ce0:	00030230 	.word	0x00030230

000d7ce4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7ce4:	b508      	push	{r3, lr}
   d7ce6:	4b02      	ldr	r3, [pc, #8]	; (d7cf0 <hal_spi_init+0xc>)
   d7ce8:	681b      	ldr	r3, [r3, #0]
   d7cea:	69db      	ldr	r3, [r3, #28]
   d7cec:	9301      	str	r3, [sp, #4]
   d7cee:	bd08      	pop	{r3, pc}
   d7cf0:	00030230 	.word	0x00030230

000d7cf4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7cf4:	b508      	push	{r3, lr}
   d7cf6:	4b02      	ldr	r3, [pc, #8]	; (d7d00 <hal_spi_is_enabled+0xc>)
   d7cf8:	681b      	ldr	r3, [r3, #0]
   d7cfa:	6a1b      	ldr	r3, [r3, #32]
   d7cfc:	9301      	str	r3, [sp, #4]
   d7cfe:	bd08      	pop	{r3, pc}
   d7d00:	00030230 	.word	0x00030230

000d7d04 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7d04:	b508      	push	{r3, lr}
   d7d06:	4b02      	ldr	r3, [pc, #8]	; (d7d10 <hal_spi_info+0xc>)
   d7d08:	681b      	ldr	r3, [r3, #0]
   d7d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7d0c:	9301      	str	r3, [sp, #4]
   d7d0e:	bd08      	pop	{r3, pc}
   d7d10:	00030230 	.word	0x00030230

000d7d14 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   d7d14:	b508      	push	{r3, lr}
   d7d16:	4b02      	ldr	r3, [pc, #8]	; (d7d20 <hal_spi_transfer_dma+0xc>)
   d7d18:	681b      	ldr	r3, [r3, #0]
   d7d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7d1c:	9301      	str	r3, [sp, #4]
   d7d1e:	bd08      	pop	{r3, pc}
   d7d20:	00030230 	.word	0x00030230

000d7d24 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d7d24:	b508      	push	{r3, lr}
   d7d26:	4b02      	ldr	r3, [pc, #8]	; (d7d30 <hal_spi_transfer_dma_status+0xc>)
   d7d28:	681b      	ldr	r3, [r3, #0]
   d7d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7d2c:	9301      	str	r3, [sp, #4]
   d7d2e:	bd08      	pop	{r3, pc}
   d7d30:	00030230 	.word	0x00030230

000d7d34 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7d34:	b508      	push	{r3, lr}
   d7d36:	4b02      	ldr	r3, [pc, #8]	; (d7d40 <hal_spi_set_settings+0xc>)
   d7d38:	681b      	ldr	r3, [r3, #0]
   d7d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7d3c:	9301      	str	r3, [sp, #4]
   d7d3e:	bd08      	pop	{r3, pc}
   d7d40:	00030230 	.word	0x00030230

000d7d44 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7d44:	b508      	push	{r3, lr}
   d7d46:	4b02      	ldr	r3, [pc, #8]	; (d7d50 <hal_spi_acquire+0xc>)
   d7d48:	681b      	ldr	r3, [r3, #0]
   d7d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7d4c:	9301      	str	r3, [sp, #4]
   d7d4e:	bd08      	pop	{r3, pc}
   d7d50:	00030230 	.word	0x00030230

000d7d54 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7d54:	b508      	push	{r3, lr}
   d7d56:	4b02      	ldr	r3, [pc, #8]	; (d7d60 <hal_spi_release+0xc>)
   d7d58:	681b      	ldr	r3, [r3, #0]
   d7d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d5c:	9301      	str	r3, [sp, #4]
   d7d5e:	bd08      	pop	{r3, pc}
   d7d60:	00030230 	.word	0x00030230

000d7d64 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   d7d64:	b508      	push	{r3, lr}
   d7d66:	4b02      	ldr	r3, [pc, #8]	; (d7d70 <cellular_signal+0xc>)
   d7d68:	681b      	ldr	r3, [r3, #0]
   d7d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d6c:	9301      	str	r3, [sp, #4]
   d7d6e:	bd08      	pop	{r3, pc}
   d7d70:	00030274 	.word	0x00030274

000d7d74 <cellular_set_active_sim>:
#if !HAL_PLATFORM_NCP
DYNALIB_FN(34, hal_cellular, cellular_connect, cellular_result_t(void*))
DYNALIB_FN(35, hal_cellular, cellular_disconnect, cellular_result_t(void*))
#define BASE_CELL_IDX 36 // Base index for all subsequent functions
#else // HAL_PLATFORM_NCP
DYNALIB_FN(34, hal_cellular, cellular_set_active_sim, cellular_result_t(int, void*))
   d7d74:	b508      	push	{r3, lr}
   d7d76:	4b03      	ldr	r3, [pc, #12]	; (d7d84 <cellular_set_active_sim+0x10>)
   d7d78:	681b      	ldr	r3, [r3, #0]
   d7d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7d7e:	9301      	str	r3, [sp, #4]
   d7d80:	bd08      	pop	{r3, pc}
   d7d82:	0000      	.short	0x0000
   d7d84:	00030274 	.word	0x00030274

000d7d88 <cellular_credentials_clear>:
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
   d7d88:	b508      	push	{r3, lr}
   d7d8a:	4b03      	ldr	r3, [pc, #12]	; (d7d98 <cellular_credentials_clear+0x10>)
   d7d8c:	681b      	ldr	r3, [r3, #0]
   d7d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   d7d92:	9301      	str	r3, [sp, #4]
   d7d94:	bd08      	pop	{r3, pc}
   d7d96:	0000      	.short	0x0000
   d7d98:	00030274 	.word	0x00030274

000d7d9c <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d7d9c:	b508      	push	{r3, lr}
   d7d9e:	4b02      	ldr	r3, [pc, #8]	; (d7da8 <dct_write_app_data+0xc>)
   d7da0:	681b      	ldr	r3, [r3, #0]
   d7da2:	685b      	ldr	r3, [r3, #4]
   d7da4:	9301      	str	r3, [sp, #4]
   d7da6:	bd08      	pop	{r3, pc}
   d7da8:	00030258 	.word	0x00030258

000d7dac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7dac:	b508      	push	{r3, lr}
   d7dae:	4b02      	ldr	r3, [pc, #8]	; (d7db8 <HAL_USB_USART_Init+0xc>)
   d7db0:	681b      	ldr	r3, [r3, #0]
   d7db2:	681b      	ldr	r3, [r3, #0]
   d7db4:	9301      	str	r3, [sp, #4]
   d7db6:	bd08      	pop	{r3, pc}
   d7db8:	0003024c 	.word	0x0003024c

000d7dbc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7dbc:	b508      	push	{r3, lr}
   d7dbe:	4b02      	ldr	r3, [pc, #8]	; (d7dc8 <HAL_USB_USART_Begin+0xc>)
   d7dc0:	681b      	ldr	r3, [r3, #0]
   d7dc2:	685b      	ldr	r3, [r3, #4]
   d7dc4:	9301      	str	r3, [sp, #4]
   d7dc6:	bd08      	pop	{r3, pc}
   d7dc8:	0003024c 	.word	0x0003024c

000d7dcc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7dcc:	b508      	push	{r3, lr}
   d7dce:	4b02      	ldr	r3, [pc, #8]	; (d7dd8 <HAL_USB_USART_Available_Data+0xc>)
   d7dd0:	681b      	ldr	r3, [r3, #0]
   d7dd2:	691b      	ldr	r3, [r3, #16]
   d7dd4:	9301      	str	r3, [sp, #4]
   d7dd6:	bd08      	pop	{r3, pc}
   d7dd8:	0003024c 	.word	0x0003024c

000d7ddc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7ddc:	b508      	push	{r3, lr}
   d7dde:	4b02      	ldr	r3, [pc, #8]	; (d7de8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7de0:	681b      	ldr	r3, [r3, #0]
   d7de2:	695b      	ldr	r3, [r3, #20]
   d7de4:	9301      	str	r3, [sp, #4]
   d7de6:	bd08      	pop	{r3, pc}
   d7de8:	0003024c 	.word	0x0003024c

000d7dec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7dec:	b508      	push	{r3, lr}
   d7dee:	4b02      	ldr	r3, [pc, #8]	; (d7df8 <HAL_USB_USART_Receive_Data+0xc>)
   d7df0:	681b      	ldr	r3, [r3, #0]
   d7df2:	699b      	ldr	r3, [r3, #24]
   d7df4:	9301      	str	r3, [sp, #4]
   d7df6:	bd08      	pop	{r3, pc}
   d7df8:	0003024c 	.word	0x0003024c

000d7dfc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7dfc:	b508      	push	{r3, lr}
   d7dfe:	4b02      	ldr	r3, [pc, #8]	; (d7e08 <HAL_USB_USART_Send_Data+0xc>)
   d7e00:	681b      	ldr	r3, [r3, #0]
   d7e02:	69db      	ldr	r3, [r3, #28]
   d7e04:	9301      	str	r3, [sp, #4]
   d7e06:	bd08      	pop	{r3, pc}
   d7e08:	0003024c 	.word	0x0003024c

000d7e0c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7e0c:	b508      	push	{r3, lr}
   d7e0e:	4b02      	ldr	r3, [pc, #8]	; (d7e18 <HAL_USB_USART_Flush_Data+0xc>)
   d7e10:	681b      	ldr	r3, [r3, #0]
   d7e12:	6a1b      	ldr	r3, [r3, #32]
   d7e14:	9301      	str	r3, [sp, #4]
   d7e16:	bd08      	pop	{r3, pc}
   d7e18:	0003024c 	.word	0x0003024c

000d7e1c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7e1c:	b508      	push	{r3, lr}
   d7e1e:	4b02      	ldr	r3, [pc, #8]	; (d7e28 <panic_+0xc>)
   d7e20:	681b      	ldr	r3, [r3, #0]
   d7e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7e24:	9301      	str	r3, [sp, #4]
   d7e26:	bd08      	pop	{r3, pc}
   d7e28:	00030260 	.word	0x00030260

000d7e2c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7e2c:	b508      	push	{r3, lr}
   d7e2e:	4b02      	ldr	r3, [pc, #8]	; (d7e38 <log_message+0xc>)
   d7e30:	681b      	ldr	r3, [r3, #0]
   d7e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7e34:	9301      	str	r3, [sp, #4]
   d7e36:	bd08      	pop	{r3, pc}
   d7e38:	00030260 	.word	0x00030260

000d7e3c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d7e3c:	b508      	push	{r3, lr}
   d7e3e:	4b03      	ldr	r3, [pc, #12]	; (d7e4c <diag_get_source+0x10>)
   d7e40:	681b      	ldr	r3, [r3, #0]
   d7e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7e46:	9301      	str	r3, [sp, #4]
   d7e48:	bd08      	pop	{r3, pc}
   d7e4a:	0000      	.short	0x0000
   d7e4c:	00030260 	.word	0x00030260

000d7e50 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7e50:	b508      	push	{r3, lr}
   d7e52:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <set_system_mode+0xc>)
   d7e54:	681b      	ldr	r3, [r3, #0]
   d7e56:	685b      	ldr	r3, [r3, #4]
   d7e58:	9301      	str	r3, [sp, #4]
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	00030220 	.word	0x00030220

000d7e60 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7e60:	b508      	push	{r3, lr}
   d7e62:	4b02      	ldr	r3, [pc, #8]	; (d7e6c <system_delay_ms+0xc>)
   d7e64:	681b      	ldr	r3, [r3, #0]
   d7e66:	695b      	ldr	r3, [r3, #20]
   d7e68:	9301      	str	r3, [sp, #4]
   d7e6a:	bd08      	pop	{r3, pc}
   d7e6c:	00030220 	.word	0x00030220

000d7e70 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7e70:	b508      	push	{r3, lr}
   d7e72:	4b02      	ldr	r3, [pc, #8]	; (d7e7c <system_thread_set_state+0xc>)
   d7e74:	681b      	ldr	r3, [r3, #0]
   d7e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e78:	9301      	str	r3, [sp, #4]
   d7e7a:	bd08      	pop	{r3, pc}
   d7e7c:	00030220 	.word	0x00030220

000d7e80 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7e80:	b508      	push	{r3, lr}
   d7e82:	4b03      	ldr	r3, [pc, #12]	; (d7e90 <system_ctrl_set_app_request_handler+0x10>)
   d7e84:	681b      	ldr	r3, [r3, #0]
   d7e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7e8a:	9301      	str	r3, [sp, #4]
   d7e8c:	bd08      	pop	{r3, pc}
   d7e8e:	0000      	.short	0x0000
   d7e90:	00030220 	.word	0x00030220

000d7e94 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7e94:	b508      	push	{r3, lr}
   d7e96:	4b03      	ldr	r3, [pc, #12]	; (d7ea4 <system_ctrl_set_result+0x10>)
   d7e98:	681b      	ldr	r3, [r3, #0]
   d7e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7e9e:	9301      	str	r3, [sp, #4]
   d7ea0:	bd08      	pop	{r3, pc}
   d7ea2:	0000      	.short	0x0000
   d7ea4:	00030220 	.word	0x00030220

000d7ea8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7ea8:	b508      	push	{r3, lr}
   d7eaa:	4b02      	ldr	r3, [pc, #8]	; (d7eb4 <network_connect+0xc>)
   d7eac:	681b      	ldr	r3, [r3, #0]
   d7eae:	685b      	ldr	r3, [r3, #4]
   d7eb0:	9301      	str	r3, [sp, #4]
   d7eb2:	bd08      	pop	{r3, pc}
   d7eb4:	00030240 	.word	0x00030240

000d7eb8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7eb8:	b508      	push	{r3, lr}
   d7eba:	4b02      	ldr	r3, [pc, #8]	; (d7ec4 <network_connecting+0xc>)
   d7ebc:	681b      	ldr	r3, [r3, #0]
   d7ebe:	689b      	ldr	r3, [r3, #8]
   d7ec0:	9301      	str	r3, [sp, #4]
   d7ec2:	bd08      	pop	{r3, pc}
   d7ec4:	00030240 	.word	0x00030240

000d7ec8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7ec8:	b508      	push	{r3, lr}
   d7eca:	4b02      	ldr	r3, [pc, #8]	; (d7ed4 <network_disconnect+0xc>)
   d7ecc:	681b      	ldr	r3, [r3, #0]
   d7ece:	68db      	ldr	r3, [r3, #12]
   d7ed0:	9301      	str	r3, [sp, #4]
   d7ed2:	bd08      	pop	{r3, pc}
   d7ed4:	00030240 	.word	0x00030240

000d7ed8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7ed8:	b508      	push	{r3, lr}
   d7eda:	4b02      	ldr	r3, [pc, #8]	; (d7ee4 <network_ready+0xc>)
   d7edc:	681b      	ldr	r3, [r3, #0]
   d7ede:	691b      	ldr	r3, [r3, #16]
   d7ee0:	9301      	str	r3, [sp, #4]
   d7ee2:	bd08      	pop	{r3, pc}
   d7ee4:	00030240 	.word	0x00030240

000d7ee8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7ee8:	b508      	push	{r3, lr}
   d7eea:	4b02      	ldr	r3, [pc, #8]	; (d7ef4 <network_on+0xc>)
   d7eec:	681b      	ldr	r3, [r3, #0]
   d7eee:	695b      	ldr	r3, [r3, #20]
   d7ef0:	9301      	str	r3, [sp, #4]
   d7ef2:	bd08      	pop	{r3, pc}
   d7ef4:	00030240 	.word	0x00030240

000d7ef8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7ef8:	b508      	push	{r3, lr}
   d7efa:	4b02      	ldr	r3, [pc, #8]	; (d7f04 <network_off+0xc>)
   d7efc:	681b      	ldr	r3, [r3, #0]
   d7efe:	699b      	ldr	r3, [r3, #24]
   d7f00:	9301      	str	r3, [sp, #4]
   d7f02:	bd08      	pop	{r3, pc}
   d7f04:	00030240 	.word	0x00030240

000d7f08 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7f08:	b508      	push	{r3, lr}
   d7f0a:	4b02      	ldr	r3, [pc, #8]	; (d7f14 <network_listen+0xc>)
   d7f0c:	681b      	ldr	r3, [r3, #0]
   d7f0e:	69db      	ldr	r3, [r3, #28]
   d7f10:	9301      	str	r3, [sp, #4]
   d7f12:	bd08      	pop	{r3, pc}
   d7f14:	00030240 	.word	0x00030240

000d7f18 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7f18:	b508      	push	{r3, lr}
   d7f1a:	4b02      	ldr	r3, [pc, #8]	; (d7f24 <network_listening+0xc>)
   d7f1c:	681b      	ldr	r3, [r3, #0]
   d7f1e:	6a1b      	ldr	r3, [r3, #32]
   d7f20:	9301      	str	r3, [sp, #4]
   d7f22:	bd08      	pop	{r3, pc}
   d7f24:	00030240 	.word	0x00030240

000d7f28 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7f28:	b508      	push	{r3, lr}
   d7f2a:	4b02      	ldr	r3, [pc, #8]	; (d7f34 <network_set_listen_timeout+0xc>)
   d7f2c:	681b      	ldr	r3, [r3, #0]
   d7f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7f30:	9301      	str	r3, [sp, #4]
   d7f32:	bd08      	pop	{r3, pc}
   d7f34:	00030240 	.word	0x00030240

000d7f38 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7f38:	b508      	push	{r3, lr}
   d7f3a:	4b02      	ldr	r3, [pc, #8]	; (d7f44 <network_get_listen_timeout+0xc>)
   d7f3c:	681b      	ldr	r3, [r3, #0]
   d7f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7f40:	9301      	str	r3, [sp, #4]
   d7f42:	bd08      	pop	{r3, pc}
   d7f44:	00030240 	.word	0x00030240

000d7f48 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7f48:	b508      	push	{r3, lr}
   d7f4a:	4b02      	ldr	r3, [pc, #8]	; (d7f54 <network_is_on+0xc>)
   d7f4c:	681b      	ldr	r3, [r3, #0]
   d7f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f50:	9301      	str	r3, [sp, #4]
   d7f52:	bd08      	pop	{r3, pc}
   d7f54:	00030240 	.word	0x00030240

000d7f58 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7f58:	b508      	push	{r3, lr}
   d7f5a:	4b02      	ldr	r3, [pc, #8]	; (d7f64 <network_is_off+0xc>)
   d7f5c:	681b      	ldr	r3, [r3, #0]
   d7f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7f60:	9301      	str	r3, [sp, #4]
   d7f62:	bd08      	pop	{r3, pc}
   d7f64:	00030240 	.word	0x00030240

000d7f68 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7f68:	b508      	push	{r3, lr}
   d7f6a:	4b02      	ldr	r3, [pc, #8]	; (d7f74 <spark_variable+0xc>)
   d7f6c:	681b      	ldr	r3, [r3, #0]
   d7f6e:	681b      	ldr	r3, [r3, #0]
   d7f70:	9301      	str	r3, [sp, #4]
   d7f72:	bd08      	pop	{r3, pc}
   d7f74:	00030244 	.word	0x00030244

000d7f78 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d7f78:	b508      	push	{r3, lr}
   d7f7a:	4b02      	ldr	r3, [pc, #8]	; (d7f84 <spark_function+0xc>)
   d7f7c:	681b      	ldr	r3, [r3, #0]
   d7f7e:	685b      	ldr	r3, [r3, #4]
   d7f80:	9301      	str	r3, [sp, #4]
   d7f82:	bd08      	pop	{r3, pc}
   d7f84:	00030244 	.word	0x00030244

000d7f88 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7f88:	b508      	push	{r3, lr}
   d7f8a:	4b02      	ldr	r3, [pc, #8]	; (d7f94 <spark_process+0xc>)
   d7f8c:	681b      	ldr	r3, [r3, #0]
   d7f8e:	689b      	ldr	r3, [r3, #8]
   d7f90:	9301      	str	r3, [sp, #4]
   d7f92:	bd08      	pop	{r3, pc}
   d7f94:	00030244 	.word	0x00030244

000d7f98 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7f98:	b508      	push	{r3, lr}
   d7f9a:	4b02      	ldr	r3, [pc, #8]	; (d7fa4 <spark_deviceID+0xc>)
   d7f9c:	681b      	ldr	r3, [r3, #0]
   d7f9e:	69db      	ldr	r3, [r3, #28]
   d7fa0:	9301      	str	r3, [sp, #4]
   d7fa2:	bd08      	pop	{r3, pc}
   d7fa4:	00030244 	.word	0x00030244

000d7fa8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7fa8:	b508      	push	{r3, lr}
   d7faa:	4b02      	ldr	r3, [pc, #8]	; (d7fb4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7fac:	681b      	ldr	r3, [r3, #0]
   d7fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7fb0:	9301      	str	r3, [sp, #4]
   d7fb2:	bd08      	pop	{r3, pc}
   d7fb4:	00030244 	.word	0x00030244

000d7fb8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7fb8:	b508      	push	{r3, lr}
   d7fba:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <malloc+0xc>)
   d7fbc:	681b      	ldr	r3, [r3, #0]
   d7fbe:	681b      	ldr	r3, [r3, #0]
   d7fc0:	9301      	str	r3, [sp, #4]
   d7fc2:	bd08      	pop	{r3, pc}
   d7fc4:	0003021c 	.word	0x0003021c

000d7fc8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7fc8:	b508      	push	{r3, lr}
   d7fca:	4b02      	ldr	r3, [pc, #8]	; (d7fd4 <free+0xc>)
   d7fcc:	681b      	ldr	r3, [r3, #0]
   d7fce:	685b      	ldr	r3, [r3, #4]
   d7fd0:	9301      	str	r3, [sp, #4]
   d7fd2:	bd08      	pop	{r3, pc}
   d7fd4:	0003021c 	.word	0x0003021c

000d7fd8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7fd8:	b508      	push	{r3, lr}
   d7fda:	4b02      	ldr	r3, [pc, #8]	; (d7fe4 <realloc+0xc>)
   d7fdc:	681b      	ldr	r3, [r3, #0]
   d7fde:	689b      	ldr	r3, [r3, #8]
   d7fe0:	9301      	str	r3, [sp, #4]
   d7fe2:	bd08      	pop	{r3, pc}
   d7fe4:	0003021c 	.word	0x0003021c

000d7fe8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7fe8:	b508      	push	{r3, lr}
   d7fea:	4b02      	ldr	r3, [pc, #8]	; (d7ff4 <vsnprintf+0xc>)
   d7fec:	681b      	ldr	r3, [r3, #0]
   d7fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ff0:	9301      	str	r3, [sp, #4]
   d7ff2:	bd08      	pop	{r3, pc}
   d7ff4:	0003021c 	.word	0x0003021c

000d7ff8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7ff8:	b508      	push	{r3, lr}
   d7ffa:	4b02      	ldr	r3, [pc, #8]	; (d8004 <abort+0xc>)
   d7ffc:	681b      	ldr	r3, [r3, #0]
   d7ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8000:	9301      	str	r3, [sp, #4]
   d8002:	bd08      	pop	{r3, pc}
   d8004:	0003021c 	.word	0x0003021c

000d8008 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8008:	b508      	push	{r3, lr}
   d800a:	4b02      	ldr	r3, [pc, #8]	; (d8014 <newlib_impure_ptr_callback+0xc>)
   d800c:	681b      	ldr	r3, [r3, #0]
   d800e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8010:	9301      	str	r3, [sp, #4]
   d8012:	bd08      	pop	{r3, pc}
   d8014:	0003021c 	.word	0x0003021c

000d8018 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8018:	2200      	movs	r2, #0
   d801a:	6840      	ldr	r0, [r0, #4]
   d801c:	4611      	mov	r1, r2
   d801e:	f7ff bf7b 	b.w	d7f18 <network_listening>

000d8022 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8022:	2200      	movs	r2, #0
   d8024:	6840      	ldr	r0, [r0, #4]
   d8026:	4611      	mov	r1, r2
   d8028:	f7ff bf86 	b.w	d7f38 <network_get_listen_timeout>

000d802c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d802c:	6840      	ldr	r0, [r0, #4]
   d802e:	2200      	movs	r2, #0
   d8030:	f7ff bf7a 	b.w	d7f28 <network_set_listen_timeout>

000d8034 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8034:	6840      	ldr	r0, [r0, #4]
   d8036:	2200      	movs	r2, #0
   d8038:	f081 0101 	eor.w	r1, r1, #1
   d803c:	f7ff bf64 	b.w	d7f08 <network_listen>

000d8040 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8040:	2300      	movs	r3, #0
   d8042:	6840      	ldr	r0, [r0, #4]
   d8044:	461a      	mov	r2, r3
   d8046:	4619      	mov	r1, r3
   d8048:	f7ff bf56 	b.w	d7ef8 <network_off>

000d804c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d804c:	2300      	movs	r3, #0
   d804e:	6840      	ldr	r0, [r0, #4]
   d8050:	461a      	mov	r2, r3
   d8052:	4619      	mov	r1, r3
   d8054:	f7ff bf48 	b.w	d7ee8 <network_on>

000d8058 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8058:	2200      	movs	r2, #0
   d805a:	6840      	ldr	r0, [r0, #4]
   d805c:	4611      	mov	r1, r2
   d805e:	f7ff bf3b 	b.w	d7ed8 <network_ready>

000d8062 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8062:	2200      	movs	r2, #0
   d8064:	6840      	ldr	r0, [r0, #4]
   d8066:	4611      	mov	r1, r2
   d8068:	f7ff bf26 	b.w	d7eb8 <network_connecting>

000d806c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d806c:	6840      	ldr	r0, [r0, #4]
   d806e:	2200      	movs	r2, #0
   d8070:	2102      	movs	r1, #2
   d8072:	f7ff bf29 	b.w	d7ec8 <network_disconnect>

000d8076 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8076:	2300      	movs	r3, #0
   d8078:	6840      	ldr	r0, [r0, #4]
   d807a:	461a      	mov	r2, r3
   d807c:	f7ff bf14 	b.w	d7ea8 <network_connect>

000d8080 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8080:	4b02      	ldr	r3, [pc, #8]	; (d808c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8082:	2203      	movs	r2, #3
   d8084:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8086:	4a02      	ldr	r2, [pc, #8]	; (d8090 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8088:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d808a:	4770      	bx	lr
   d808c:	2003e5fc 	.word	0x2003e5fc
   d8090:	000dbd84 	.word	0x000dbd84

000d8094 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d8094:	2100      	movs	r1, #0
   d8096:	f7ff be55 	b.w	d7d44 <hal_spi_acquire>

000d809a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d809a:	2100      	movs	r1, #0
   d809c:	f7ff be5a 	b.w	d7d54 <hal_spi_release>

000d80a0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d80a0:	b510      	push	{r4, lr}
   d80a2:	4604      	mov	r4, r0
   d80a4:	4608      	mov	r0, r1
{
    _spi = spi;
   d80a6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d80a8:	f7ff fe1c 	bl	d7ce4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d80ac:	2300      	movs	r3, #0
   d80ae:	6063      	str	r3, [r4, #4]
}
   d80b0:	4620      	mov	r0, r4
   d80b2:	bd10      	pop	{r4, pc}

000d80b4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d80b4:	b510      	push	{r4, lr}
   d80b6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d80b8:	7800      	ldrb	r0, [r0, #0]
   d80ba:	f7ff ffeb 	bl	d8094 <_ZN8SPIClass4lockEv.isra.0>
   d80be:	b948      	cbnz	r0, d80d4 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d80c0:	7820      	ldrb	r0, [r4, #0]
   d80c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d80c6:	f7ff fdfd 	bl	d7cc4 <hal_spi_begin>
        unlock();
   d80ca:	7820      	ldrb	r0, [r4, #0]
    }
}
   d80cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d80d0:	f7ff bfe3 	b.w	d809a <_ZN8SPIClass6unlockEv.isra.0>
}
   d80d4:	bd10      	pop	{r4, pc}

000d80d6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d80d6:	7800      	ldrb	r0, [r0, #0]
   d80d8:	f7ff bfdf 	b.w	d809a <_ZN8SPIClass6unlockEv.isra.0>

000d80dc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d80dc:	0840      	lsrs	r0, r0, #1
{
   d80de:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d80e0:	6018      	str	r0, [r3, #0]
   d80e2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d80e4:	6818      	ldr	r0, [r3, #0]
   d80e6:	4288      	cmp	r0, r1
   d80e8:	b2e5      	uxtb	r5, r4
   d80ea:	d906      	bls.n	d80fa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d80ec:	3401      	adds	r4, #1
   d80ee:	2c08      	cmp	r4, #8
   d80f0:	d002      	beq.n	d80f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d80f2:	0840      	lsrs	r0, r0, #1
   d80f4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d80f6:	e7f5      	b.n	d80e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d80f8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d80fa:	4b02      	ldr	r3, [pc, #8]	; (d8104 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d80fc:	5d5b      	ldrb	r3, [r3, r5]
   d80fe:	7013      	strb	r3, [r2, #0]
}
   d8100:	bd30      	pop	{r4, r5, pc}
   d8102:	bf00      	nop
   d8104:	000dbdb8 	.word	0x000dbdb8

000d8108 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d8108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d810c:	4606      	mov	r6, r0
   d810e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8110:	7800      	ldrb	r0, [r0, #0]
{
   d8112:	460c      	mov	r4, r1
    CHECK(lock());
   d8114:	f7ff ffbe 	bl	d8094 <_ZN8SPIClass4lockEv.isra.0>
   d8118:	2800      	cmp	r0, #0
   d811a:	db1b      	blt.n	d8154 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d811c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d811e:	2214      	movs	r2, #20
   d8120:	2100      	movs	r1, #0
   d8122:	a809      	add	r0, sp, #36	; 0x24
   d8124:	f003 f814 	bl	db150 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8128:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d812a:	2200      	movs	r2, #0
   d812c:	a909      	add	r1, sp, #36	; 0x24
   d812e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8130:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d8134:	f7ff fde6 	bl	d7d04 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d8138:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d813c:	b113      	cbz	r3, d8144 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d813e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8142:	b155      	cbz	r5, d815a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d8144:	2700      	movs	r7, #0
   d8146:	46b9      	mov	r9, r7
   d8148:	46b8      	mov	r8, r7
   d814a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d814c:	7923      	ldrb	r3, [r4, #4]
   d814e:	b15d      	cbz	r5, d8168 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d8150:	b1c3      	cbz	r3, d8184 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d8152:	2000      	movs	r0, #0
}
   d8154:	b00f      	add	sp, #60	; 0x3c
   d8156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d815a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d815e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d8162:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d8166:	e7f1      	b.n	d814c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d8168:	2b00      	cmp	r3, #0
   d816a:	d135      	bne.n	d81d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d816c:	68a3      	ldr	r3, [r4, #8]
   d816e:	4543      	cmp	r3, r8
   d8170:	d108      	bne.n	d8184 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d8172:	f88d 9020 	strb.w	r9, [sp, #32]
   d8176:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d817a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d817e:	89a3      	ldrh	r3, [r4, #12]
   d8180:	429a      	cmp	r2, r3
   d8182:	d0e6      	beq.n	d8152 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d8184:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d8186:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d8188:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d818c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d818e:	ab04      	add	r3, sp, #16
   d8190:	f10d 020f 	add.w	r2, sp, #15
   d8194:	f7ff ffa2 	bl	d80dc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d8198:	7921      	ldrb	r1, [r4, #4]
   d819a:	b985      	cbnz	r5, d81be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d819c:	b989      	cbnz	r1, d81c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d819e:	68a3      	ldr	r3, [r4, #8]
   d81a0:	4543      	cmp	r3, r8
   d81a2:	d30e      	bcc.n	d81c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d81a4:	f88d 9020 	strb.w	r9, [sp, #32]
   d81a8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d81ac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d81b0:	89a3      	ldrh	r3, [r4, #12]
   d81b2:	429a      	cmp	r2, r3
   d81b4:	d105      	bne.n	d81c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d81b6:	9b04      	ldr	r3, [sp, #16]
   d81b8:	4543      	cmp	r3, r8
   d81ba:	d102      	bne.n	d81c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d81bc:	e7c9      	b.n	d8152 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d81be:	2900      	cmp	r1, #0
   d81c0:	d1f9      	bne.n	d81b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d81c2:	2300      	movs	r3, #0
   d81c4:	9301      	str	r3, [sp, #4]
   d81c6:	7b63      	ldrb	r3, [r4, #13]
   d81c8:	9300      	str	r3, [sp, #0]
   d81ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d81ce:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d81d0:	7830      	ldrb	r0, [r6, #0]
   d81d2:	f7ff fdaf 	bl	d7d34 <hal_spi_set_settings>
   d81d6:	e7bc      	b.n	d8152 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d81d8:	e9cd 5500 	strd	r5, r5, [sp]
   d81dc:	462b      	mov	r3, r5
   d81de:	462a      	mov	r2, r5
   d81e0:	2101      	movs	r1, #1
   d81e2:	e7f5      	b.n	d81d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d81e4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d81e4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d81e6:	7800      	ldrb	r0, [r0, #0]
   d81e8:	f7ff fd74 	bl	d7cd4 <hal_spi_transfer>
}
   d81ec:	b2c0      	uxtb	r0, r0
   d81ee:	bd08      	pop	{r3, pc}

000d81f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d81f0:	b530      	push	{r4, r5, lr}
   d81f2:	b087      	sub	sp, #28
   d81f4:	4604      	mov	r4, r0
   d81f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d81f8:	9500      	str	r5, [sp, #0]
   d81fa:	7800      	ldrb	r0, [r0, #0]
   d81fc:	f7ff fd8a 	bl	d7d14 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d8200:	b93d      	cbnz	r5, d8212 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d8202:	7820      	ldrb	r0, [r4, #0]
   d8204:	a902      	add	r1, sp, #8
   d8206:	f7ff fd8d 	bl	d7d24 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d820a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d820e:	07db      	lsls	r3, r3, #31
   d8210:	d4f7      	bmi.n	d8202 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   d8212:	b007      	add	sp, #28
   d8214:	bd30      	pop	{r4, r5, pc}
	...

000d8218 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8218:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d821a:	4b09      	ldr	r3, [pc, #36]	; (d8240 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d821c:	4c09      	ldr	r4, [pc, #36]	; (d8244 <_GLOBAL__sub_I_System+0x2c>)
   d821e:	2202      	movs	r2, #2
   d8220:	2000      	movs	r0, #0
   d8222:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d8224:	4b08      	ldr	r3, [pc, #32]	; (d8248 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d8226:	6020      	str	r0, [r4, #0]
   d8228:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d822a:	71a0      	strb	r0, [r4, #6]
   d822c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d822e:	f7ff fe0f 	bl	d7e50 <set_system_mode>
SystemClass System;
   d8232:	4620      	mov	r0, r4
   d8234:	4a05      	ldr	r2, [pc, #20]	; (d824c <_GLOBAL__sub_I_System+0x34>)
   d8236:	4906      	ldr	r1, [pc, #24]	; (d8250 <_GLOBAL__sub_I_System+0x38>)
   d8238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d823c:	f002 b96e 	b.w	da51c <__aeabi_atexit>
   d8240:	2003e610 	.word	0x2003e610
   d8244:	2003e604 	.word	0x2003e604
   d8248:	ffff0000 	.word	0xffff0000
   d824c:	2003de48 	.word	0x2003de48
   d8250:	000d4165 	.word	0x000d4165

000d8254 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8254:	b510      	push	{r4, lr}
   d8256:	4604      	mov	r4, r0
{
	free(buffer);
   d8258:	6800      	ldr	r0, [r0, #0]
   d825a:	f7ff feb5 	bl	d7fc8 <free>
}
   d825e:	4620      	mov	r0, r4
   d8260:	bd10      	pop	{r4, pc}

000d8262 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8262:	b510      	push	{r4, lr}
   d8264:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8266:	6800      	ldr	r0, [r0, #0]
   d8268:	b108      	cbz	r0, d826e <_ZN6String10invalidateEv+0xc>
   d826a:	f7ff fead 	bl	d7fc8 <free>
	buffer = NULL;
   d826e:	2300      	movs	r3, #0
	capacity = len = 0;
   d8270:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8274:	6023      	str	r3, [r4, #0]
}
   d8276:	bd10      	pop	{r4, pc}

000d8278 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8278:	b538      	push	{r3, r4, r5, lr}
   d827a:	4604      	mov	r4, r0
   d827c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d827e:	6800      	ldr	r0, [r0, #0]
   d8280:	3101      	adds	r1, #1
   d8282:	f7ff fea9 	bl	d7fd8 <realloc>
	if (newbuffer) {
   d8286:	b110      	cbz	r0, d828e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8288:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d828c:	2001      	movs	r0, #1
	}
	return 0;
}
   d828e:	bd38      	pop	{r3, r4, r5, pc}

000d8290 <_ZN6String7reserveEj>:
{
   d8290:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8292:	6803      	ldr	r3, [r0, #0]
{
   d8294:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8296:	b123      	cbz	r3, d82a2 <_ZN6String7reserveEj+0x12>
   d8298:	6843      	ldr	r3, [r0, #4]
   d829a:	428b      	cmp	r3, r1
   d829c:	d301      	bcc.n	d82a2 <_ZN6String7reserveEj+0x12>
   d829e:	2001      	movs	r0, #1
}
   d82a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d82a2:	4620      	mov	r0, r4
   d82a4:	f7ff ffe8 	bl	d8278 <_ZN6String12changeBufferEj>
   d82a8:	2800      	cmp	r0, #0
   d82aa:	d0f9      	beq.n	d82a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d82ac:	68a3      	ldr	r3, [r4, #8]
   d82ae:	2b00      	cmp	r3, #0
   d82b0:	d1f5      	bne.n	d829e <_ZN6String7reserveEj+0xe>
   d82b2:	6822      	ldr	r2, [r4, #0]
   d82b4:	7013      	strb	r3, [r2, #0]
   d82b6:	e7f2      	b.n	d829e <_ZN6String7reserveEj+0xe>

000d82b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d82b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d82ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d82bc:	4611      	mov	r1, r2
   d82be:	9201      	str	r2, [sp, #4]
{
   d82c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d82c2:	f7ff ffe5 	bl	d8290 <_ZN6String7reserveEj>
   d82c6:	9a01      	ldr	r2, [sp, #4]
   d82c8:	b928      	cbnz	r0, d82d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d82ca:	4620      	mov	r0, r4
   d82cc:	f7ff ffc9 	bl	d8262 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d82d0:	4620      	mov	r0, r4
   d82d2:	b003      	add	sp, #12
   d82d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d82d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d82d8:	4629      	mov	r1, r5
   d82da:	6820      	ldr	r0, [r4, #0]
   d82dc:	f002 ff10 	bl	db100 <memcpy>
	buffer[len] = 0;
   d82e0:	6822      	ldr	r2, [r4, #0]
   d82e2:	68a3      	ldr	r3, [r4, #8]
   d82e4:	2100      	movs	r1, #0
   d82e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d82e8:	e7f2      	b.n	d82d0 <_ZN6String4copyEPKcj+0x18>

000d82ea <_ZN6StringC1EPKc>:
	buffer = NULL;
   d82ea:	2300      	movs	r3, #0
String::String(const char *cstr)
   d82ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d82ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d82f2:	4604      	mov	r4, r0
	len = 0;
   d82f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d82f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d82f8:	b141      	cbz	r1, d830c <_ZN6StringC1EPKc+0x22>
   d82fa:	4608      	mov	r0, r1
   d82fc:	9101      	str	r1, [sp, #4]
   d82fe:	f002 ff65 	bl	db1cc <strlen>
   d8302:	9901      	ldr	r1, [sp, #4]
   d8304:	4602      	mov	r2, r0
   d8306:	4620      	mov	r0, r4
   d8308:	f7ff ffd6 	bl	d82b8 <_ZN6String4copyEPKcj>
}
   d830c:	4620      	mov	r0, r4
   d830e:	b002      	add	sp, #8
   d8310:	bd10      	pop	{r4, pc}

000d8312 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8312:	b538      	push	{r3, r4, r5, lr}
   d8314:	4605      	mov	r5, r0
	if (buffer) {
   d8316:	6800      	ldr	r0, [r0, #0]
{
   d8318:	460c      	mov	r4, r1
	if (buffer) {
   d831a:	b168      	cbz	r0, d8338 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d831c:	686a      	ldr	r2, [r5, #4]
   d831e:	688b      	ldr	r3, [r1, #8]
   d8320:	429a      	cmp	r2, r3
   d8322:	d307      	bcc.n	d8334 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d8324:	6809      	ldr	r1, [r1, #0]
   d8326:	f002 ff49 	bl	db1bc <strcpy>
			len = rhs.len;
   d832a:	68a3      	ldr	r3, [r4, #8]
   d832c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d832e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d8330:	60a3      	str	r3, [r4, #8]
}
   d8332:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d8334:	f7ff fe48 	bl	d7fc8 <free>
	buffer = rhs.buffer;
   d8338:	6823      	ldr	r3, [r4, #0]
   d833a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d833c:	6863      	ldr	r3, [r4, #4]
   d833e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8340:	68a3      	ldr	r3, [r4, #8]
   d8342:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8344:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d8346:	e9c4 3300 	strd	r3, r3, [r4]
   d834a:	e7f1      	b.n	d8330 <_ZN6String4moveERS_+0x1e>

000d834c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d834c:	4288      	cmp	r0, r1
{
   d834e:	b510      	push	{r4, lr}
   d8350:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8352:	d005      	beq.n	d8360 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8354:	680b      	ldr	r3, [r1, #0]
   d8356:	b12b      	cbz	r3, d8364 <_ZN6StringaSERKS_+0x18>
   d8358:	688a      	ldr	r2, [r1, #8]
   d835a:	4619      	mov	r1, r3
   d835c:	f7ff ffac 	bl	d82b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8360:	4620      	mov	r0, r4
   d8362:	bd10      	pop	{r4, pc}
	else invalidate();
   d8364:	f7ff ff7d 	bl	d8262 <_ZN6String10invalidateEv>
   d8368:	e7fa      	b.n	d8360 <_ZN6StringaSERKS_+0x14>

000d836a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d836a:	b510      	push	{r4, lr}
	buffer = NULL;
   d836c:	2300      	movs	r3, #0
String::String(const String &value)
   d836e:	4604      	mov	r4, r0
	capacity = 0;
   d8370:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d8374:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8376:	7303      	strb	r3, [r0, #12]
	*this = value;
   d8378:	f7ff ffe8 	bl	d834c <_ZN6StringaSERKS_>
}
   d837c:	4620      	mov	r0, r4
   d837e:	bd10      	pop	{r4, pc}

000d8380 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d8380:	4288      	cmp	r0, r1
{
   d8382:	b510      	push	{r4, lr}
   d8384:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d8386:	d001      	beq.n	d838c <_ZN6StringaSEOS_+0xc>
   d8388:	f7ff ffc3 	bl	d8312 <_ZN6String4moveERS_>
	return *this;
}
   d838c:	4620      	mov	r0, r4
   d838e:	bd10      	pop	{r4, pc}

000d8390 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8390:	b513      	push	{r0, r1, r4, lr}
   d8392:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8394:	b159      	cbz	r1, d83ae <_ZN6StringaSEPKc+0x1e>
   d8396:	4608      	mov	r0, r1
   d8398:	9101      	str	r1, [sp, #4]
   d839a:	f002 ff17 	bl	db1cc <strlen>
   d839e:	9901      	ldr	r1, [sp, #4]
   d83a0:	4602      	mov	r2, r0
   d83a2:	4620      	mov	r0, r4
   d83a4:	f7ff ff88 	bl	d82b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d83a8:	4620      	mov	r0, r4
   d83aa:	b002      	add	sp, #8
   d83ac:	bd10      	pop	{r4, pc}
	else invalidate();
   d83ae:	f7ff ff58 	bl	d8262 <_ZN6String10invalidateEv>
   d83b2:	e7f9      	b.n	d83a8 <_ZN6StringaSEPKc+0x18>

000d83b4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d83b4:	b570      	push	{r4, r5, r6, lr}
   d83b6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d83b8:	460e      	mov	r6, r1
   d83ba:	b909      	cbnz	r1, d83c0 <_ZN6String6concatEPKcj+0xc>
   d83bc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d83be:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d83c0:	b16a      	cbz	r2, d83de <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d83c2:	6884      	ldr	r4, [r0, #8]
   d83c4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d83c6:	4621      	mov	r1, r4
   d83c8:	f7ff ff62 	bl	d8290 <_ZN6String7reserveEj>
   d83cc:	2800      	cmp	r0, #0
   d83ce:	d0f5      	beq.n	d83bc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d83d0:	6828      	ldr	r0, [r5, #0]
   d83d2:	68ab      	ldr	r3, [r5, #8]
   d83d4:	4631      	mov	r1, r6
   d83d6:	4418      	add	r0, r3
   d83d8:	f002 fef0 	bl	db1bc <strcpy>
	len = newlen;
   d83dc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d83de:	2001      	movs	r0, #1
   d83e0:	e7ed      	b.n	d83be <_ZN6String6concatEPKcj+0xa>

000d83e2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d83e2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d83e4:	688a      	ldr	r2, [r1, #8]
   d83e6:	6809      	ldr	r1, [r1, #0]
{
   d83e8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d83ea:	f7ff ffe3 	bl	d83b4 <_ZN6String6concatEPKcj>
   d83ee:	b910      	cbnz	r0, d83f6 <_ZplRK15StringSumHelperRK6String+0x14>
   d83f0:	4620      	mov	r0, r4
   d83f2:	f7ff ff36 	bl	d8262 <_ZN6String10invalidateEv>
	return a;
}
   d83f6:	4620      	mov	r0, r4
   d83f8:	bd10      	pop	{r4, pc}

000d83fa <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d83fa:	b513      	push	{r0, r1, r4, lr}
   d83fc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d83fe:	b929      	cbnz	r1, d840c <_ZplRK15StringSumHelperPKc+0x12>
   d8400:	4620      	mov	r0, r4
   d8402:	f7ff ff2e 	bl	d8262 <_ZN6String10invalidateEv>
	return a;
}
   d8406:	4620      	mov	r0, r4
   d8408:	b002      	add	sp, #8
   d840a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d840c:	4608      	mov	r0, r1
   d840e:	9101      	str	r1, [sp, #4]
   d8410:	f002 fedc 	bl	db1cc <strlen>
   d8414:	9901      	ldr	r1, [sp, #4]
   d8416:	4602      	mov	r2, r0
   d8418:	4620      	mov	r0, r4
   d841a:	f7ff ffcb 	bl	d83b4 <_ZN6String6concatEPKcj>
   d841e:	2800      	cmp	r0, #0
   d8420:	d0ee      	beq.n	d8400 <_ZplRK15StringSumHelperPKc+0x6>
   d8422:	e7f0      	b.n	d8406 <_ZplRK15StringSumHelperPKc+0xc>

000d8424 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d8424:	b558      	push	{r3, r4, r6, lr}
   d8426:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d8428:	b12a      	cbz	r2, d8436 <_ZNK6String8getBytesEPhjj+0x12>
   d842a:	b121      	cbz	r1, d8436 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d842c:	6884      	ldr	r4, [r0, #8]
   d842e:	42a3      	cmp	r3, r4
   d8430:	d302      	bcc.n	d8438 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d8432:	2300      	movs	r3, #0
   d8434:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d8436:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d8438:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d843a:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d843c:	6801      	ldr	r1, [r0, #0]
   d843e:	4294      	cmp	r4, r2
   d8440:	bf28      	it	cs
   d8442:	4614      	movcs	r4, r2
   d8444:	4419      	add	r1, r3
   d8446:	4622      	mov	r2, r4
   d8448:	4630      	mov	r0, r6
   d844a:	f002 fec7 	bl	db1dc <strncpy>
	buf[n] = 0;
   d844e:	2300      	movs	r3, #0
   d8450:	5533      	strb	r3, [r6, r4]
   d8452:	e7f0      	b.n	d8436 <_ZNK6String8getBytesEPhjj+0x12>

000d8454 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d8454:	6800      	ldr	r0, [r0, #0]
   d8456:	b108      	cbz	r0, d845c <_ZNK6String5toIntEv+0x8>
   d8458:	f002 be32 	b.w	db0c0 <atol>
	return 0;
}
   d845c:	4770      	bx	lr

000d845e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d845e:	4770      	bx	lr

000d8460 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d8460:	4770      	bx	lr

000d8462 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d8462:	4770      	bx	lr

000d8464 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d8464:	4770      	bx	lr
	...

000d8468 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d8468:	4b06      	ldr	r3, [pc, #24]	; (d8484 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d846a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d846c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d846e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d8472:	d005      	beq.n	d8480 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d8474:	4608      	mov	r0, r1
   d8476:	f002 f85d 	bl	da534 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d847a:	2800      	cmp	r0, #0
	return nullptr;
   d847c:	bf08      	it	eq
   d847e:	2400      	moveq	r4, #0
      }
   d8480:	4620      	mov	r0, r4
   d8482:	bd10      	pop	{r4, pc}
   d8484:	000dbf08 	.word	0x000dbf08

000d8488 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d8488:	4b06      	ldr	r3, [pc, #24]	; (d84a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d848a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d848c:	b510      	push	{r4, lr}
   d848e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d8492:	d005      	beq.n	d84a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d8494:	4608      	mov	r0, r1
   d8496:	f002 f84d 	bl	da534 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d849a:	2800      	cmp	r0, #0
	return nullptr;
   d849c:	bf08      	it	eq
   d849e:	2400      	moveq	r4, #0
      }
   d84a0:	4620      	mov	r0, r4
   d84a2:	bd10      	pop	{r4, pc}
   d84a4:	000dbf08 	.word	0x000dbf08

000d84a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d84a8:	4b06      	ldr	r3, [pc, #24]	; (d84c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d84aa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d84ac:	b510      	push	{r4, lr}
   d84ae:	f100 040c 	add.w	r4, r0, #12
	    ||
   d84b2:	d005      	beq.n	d84c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d84b4:	4608      	mov	r0, r1
   d84b6:	f002 f83d 	bl	da534 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d84ba:	2800      	cmp	r0, #0
	return nullptr;
   d84bc:	bf08      	it	eq
   d84be:	2400      	moveq	r4, #0
      }
   d84c0:	4620      	mov	r0, r4
   d84c2:	bd10      	pop	{r4, pc}
   d84c4:	000dbf08 	.word	0x000dbf08

000d84c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d84c8:	b510      	push	{r4, lr}
   d84ca:	2168      	movs	r1, #104	; 0x68
   d84cc:	4604      	mov	r4, r0
   d84ce:	f002 f82a 	bl	da526 <_ZdlPvj>
   d84d2:	4620      	mov	r0, r4
   d84d4:	bd10      	pop	{r4, pc}

000d84d6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d84d6:	b510      	push	{r4, lr}
   d84d8:	2128      	movs	r1, #40	; 0x28
   d84da:	4604      	mov	r4, r0
   d84dc:	f002 f823 	bl	da526 <_ZdlPvj>
   d84e0:	4620      	mov	r0, r4
   d84e2:	bd10      	pop	{r4, pc}

000d84e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d84e4:	b510      	push	{r4, lr}
   d84e6:	2130      	movs	r1, #48	; 0x30
   d84e8:	4604      	mov	r4, r0
   d84ea:	f002 f81c 	bl	da526 <_ZdlPvj>
   d84ee:	4620      	mov	r0, r4
   d84f0:	bd10      	pop	{r4, pc}

000d84f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d84f2:	f7fb bdd2 	b.w	d409a <_ZdlPv>

000d84f6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d84f6:	f7fb bdd0 	b.w	d409a <_ZdlPv>

000d84fa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d84fa:	f7fb bdce 	b.w	d409a <_ZdlPv>

000d84fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d84fe:	b510      	push	{r4, lr}
          _M_dispose();
   d8500:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8502:	4604      	mov	r4, r0
          _M_dispose();
   d8504:	689b      	ldr	r3, [r3, #8]
   d8506:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8508:	68a3      	ldr	r3, [r4, #8]
   d850a:	3b01      	subs	r3, #1
   d850c:	60a3      	str	r3, [r4, #8]
   d850e:	b92b      	cbnz	r3, d851c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8510:	6823      	ldr	r3, [r4, #0]
   d8512:	4620      	mov	r0, r4
   d8514:	68db      	ldr	r3, [r3, #12]
    }
   d8516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d851a:	4718      	bx	r3
    }
   d851c:	bd10      	pop	{r4, pc}

000d851e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d851e:	b510      	push	{r4, lr}
   d8520:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8522:	6800      	ldr	r0, [r0, #0]
   d8524:	b108      	cbz	r0, d852a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8526:	f7ff fb05 	bl	d7b34 <os_mutex_recursive_destroy>
    }
   d852a:	4620      	mov	r0, r4
   d852c:	bd10      	pop	{r4, pc}
	...

000d8530 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d8530:	b510      	push	{r4, lr}
        mutex_.lock();
   d8532:	4b04      	ldr	r3, [pc, #16]	; (d8544 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d8534:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d8536:	6818      	ldr	r0, [r3, #0]
   d8538:	f7ff fb04 	bl	d7b44 <os_mutex_recursive_lock>
        locked_ = true;
   d853c:	2301      	movs	r3, #1
   d853e:	7023      	strb	r3, [r4, #0]
    }
   d8540:	bd10      	pop	{r4, pc}
   d8542:	bf00      	nop
   d8544:	2003e61c 	.word	0x2003e61c

000d8548 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d8548:	b510      	push	{r4, lr}
        mutex_.unlock();
   d854a:	4b04      	ldr	r3, [pc, #16]	; (d855c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d854c:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d854e:	6818      	ldr	r0, [r3, #0]
   d8550:	f7ff fb00 	bl	d7b54 <os_mutex_recursive_unlock>
        locked_ = false;
   d8554:	2300      	movs	r3, #0
   d8556:	7023      	strb	r3, [r4, #0]
    }
   d8558:	bd10      	pop	{r4, pc}
   d855a:	bf00      	nop
   d855c:	2003e61c 	.word	0x2003e61c

000d8560 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d8560:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d8562:	2500      	movs	r5, #0
   d8564:	1cec      	adds	r4, r5, #3
   d8566:	428c      	cmp	r4, r1
   d8568:	d80d      	bhi.n	d8586 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d856a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d856c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d856e:	5d87      	ldrb	r7, [r0, r6]
   d8570:	4297      	cmp	r7, r2
   d8572:	d105      	bne.n	d8580 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d8574:	4426      	add	r6, r4
   d8576:	42b1      	cmp	r1, r6
   d8578:	d305      	bcc.n	d8586 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d857a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d857c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d857e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d8580:	3401      	adds	r4, #1
   d8582:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d8584:	e7ee      	b.n	d8564 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d8586:	2000      	movs	r0, #0
   d8588:	e7f9      	b.n	d857e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d858a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d858a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d858e:	4604      	mov	r4, r0
   d8590:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d8594:	461e      	mov	r6, r3
   d8596:	4689      	mov	r9, r1
   d8598:	ab01      	add	r3, sp, #4
   d859a:	4690      	mov	r8, r2
   d859c:	460a      	mov	r2, r1
   d859e:	6a01      	ldr	r1, [r0, #32]
   d85a0:	f7ff ffde 	bl	d8560 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d85a4:	6a25      	ldr	r5, [r4, #32]
   d85a6:	1cb3      	adds	r3, r6, #2
   d85a8:	bb17      	cbnz	r7, d85f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d85aa:	b308      	cbz	r0, d85f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d85ac:	195f      	adds	r7, r3, r5
   d85ae:	1a3f      	subs	r7, r7, r0
   d85b0:	2f1f      	cmp	r7, #31
   d85b2:	d819      	bhi.n	d85e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d85b4:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d85b8:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d85bc:	eba5 0209 	sub.w	r2, r5, r9
   d85c0:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d85c2:	eb00 0109 	add.w	r1, r0, r9
   d85c6:	eb06 000a 	add.w	r0, r6, sl
   d85ca:	b292      	uxth	r2, r2
   d85cc:	4421      	add	r1, r4
   d85ce:	4420      	add	r0, r4
   d85d0:	f002 fda4 	bl	db11c <memmove>
            selfData_[offset] = len + 1;
   d85d4:	1c73      	adds	r3, r6, #1
   d85d6:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d85da:	4632      	mov	r2, r6
   d85dc:	4641      	mov	r1, r8
   d85de:	eb04 000a 	add.w	r0, r4, sl
   d85e2:	f002 fd8d 	bl	db100 <memcpy>
            selfLen_ = staLen + len + 2;
   d85e6:	6227      	str	r7, [r4, #32]
}
   d85e8:	6a20      	ldr	r0, [r4, #32]
   d85ea:	b002      	add	sp, #8
   d85ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d85f0:	442b      	add	r3, r5
   d85f2:	2b1f      	cmp	r3, #31
   d85f4:	d8f8      	bhi.n	d85e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d85f6:	1c73      	adds	r3, r6, #1
   d85f8:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d85fa:	1ca8      	adds	r0, r5, #2
   d85fc:	4425      	add	r5, r4
   d85fe:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d8600:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d8602:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d8606:	4641      	mov	r1, r8
   d8608:	4420      	add	r0, r4
   d860a:	f002 fd79 	bl	db100 <memcpy>
        selfLen_ += len;
   d860e:	6a23      	ldr	r3, [r4, #32]
   d8610:	4433      	add	r3, r6
   d8612:	6223      	str	r3, [r4, #32]
   d8614:	e7e8      	b.n	d85e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d8618 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d8618:	4a02      	ldr	r2, [pc, #8]	; (d8624 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d861a:	2100      	movs	r1, #0
   d861c:	200a      	movs	r0, #10
   d861e:	f7ff bbfd 	b.w	d7e1c <panic_>
   d8622:	bf00      	nop
   d8624:	000d7a35 	.word	0x000d7a35

000d8628 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8628:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d862a:	b538      	push	{r3, r4, r5, lr}
   d862c:	4604      	mov	r4, r0
	  switch (__op)
   d862e:	d007      	beq.n	d8640 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d8630:	2a03      	cmp	r2, #3
   d8632:	d011      	beq.n	d8658 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d8634:	2a01      	cmp	r2, #1
   d8636:	d101      	bne.n	d863c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8638:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d863a:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d863c:	2000      	movs	r0, #0
   d863e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8640:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d8642:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8644:	f7fb fd25 	bl	d4092 <_Znwj>
   d8648:	4603      	mov	r3, r0
   d864a:	2800      	cmp	r0, #0
   d864c:	d0f5      	beq.n	d863a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d864e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8652:	e883 0003 	stmia.w	r3, {r0, r1}
   d8656:	e7f0      	b.n	d863a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d8658:	6800      	ldr	r0, [r0, #0]
   d865a:	2800      	cmp	r0, #0
   d865c:	d0ee      	beq.n	d863c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d865e:	2108      	movs	r1, #8
   d8660:	f001 ff61 	bl	da526 <_ZdlPvj>
   d8664:	e7ea      	b.n	d863c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d8666 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8666:	b430      	push	{r4, r5}
   d8668:	460d      	mov	r5, r1
   d866a:	4611      	mov	r1, r2
   d866c:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d866e:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8670:	6809      	ldr	r1, [r1, #0]
   d8672:	6828      	ldr	r0, [r5, #0]
   d8674:	e9d3 4300 	ldrd	r4, r3, [r3]
   d8678:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d867a:	bc30      	pop	{r4, r5}
   d867c:	4760      	bx	ip

000d867e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d867e:	b510      	push	{r4, lr}
      if (_M_manager)
   d8680:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d8682:	4604      	mov	r4, r0
      if (_M_manager)
   d8684:	b113      	cbz	r3, d868c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8686:	2203      	movs	r2, #3
   d8688:	4601      	mov	r1, r0
   d868a:	4798      	blx	r3
    }
   d868c:	4620      	mov	r0, r4
   d868e:	bd10      	pop	{r4, pc}

000d8690 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8690:	b510      	push	{r4, lr}
   d8692:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8694:	3058      	adds	r0, #88	; 0x58
   d8696:	f7ff fff2 	bl	d867e <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d869a:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d869e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d86a2:	f7ff bdd7 	b.w	d8254 <_ZN6StringD1Ev>

000d86a6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d86a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d86aa:	b2da      	uxtb	r2, r3
   d86ac:	2a09      	cmp	r2, #9
   d86ae:	d801      	bhi.n	d86b4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d86b0:	4618      	mov	r0, r3
   d86b2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d86b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d86b8:	2b05      	cmp	r3, #5
   d86ba:	d801      	bhi.n	d86c0 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d86bc:	3857      	subs	r0, #87	; 0x57
   d86be:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d86c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d86c4:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d86c6:	bf94      	ite	ls
   d86c8:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d86ca:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d86ce:	4770      	bx	lr

000d86d0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d86d0:	b510      	push	{r4, lr}
            locked_(false) {
   d86d2:	2300      	movs	r3, #0
    WiringBleLock() :
   d86d4:	4604      	mov	r4, r0
            locked_(false) {
   d86d6:	7003      	strb	r3, [r0, #0]
        lock();
   d86d8:	f7ff ff2a 	bl	d8530 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d86dc:	4620      	mov	r0, r4
   d86de:	bd10      	pop	{r4, pc}

000d86e0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d86e0:	b510      	push	{r4, lr}
        if (locked_) {
   d86e2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d86e4:	4604      	mov	r4, r0
        if (locked_) {
   d86e6:	b10b      	cbz	r3, d86ec <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d86e8:	f7ff ff2e 	bl	d8548 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d86ec:	4620      	mov	r0, r4
   d86ee:	bd10      	pop	{r4, pc}

000d86f0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d86f0:	b082      	sub	sp, #8
   d86f2:	4603      	mov	r3, r0
    address_ = addr;
   d86f4:	6808      	ldr	r0, [r1, #0]
   d86f6:	6849      	ldr	r1, [r1, #4]
   d86f8:	466a      	mov	r2, sp
   d86fa:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d86fc:	466a      	mov	r2, sp
   d86fe:	ca03      	ldmia	r2!, {r0, r1}
   d8700:	6018      	str	r0, [r3, #0]
}
   d8702:	4618      	mov	r0, r3
    address_ = addr.address_;
   d8704:	6059      	str	r1, [r3, #4]
}
   d8706:	b002      	add	sp, #8
   d8708:	4770      	bx	lr

000d870a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d870a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d870c:	7982      	ldrb	r2, [r0, #6]
   d870e:	798b      	ldrb	r3, [r1, #6]
   d8710:	429a      	cmp	r2, r3
   d8712:	d106      	bne.n	d8722 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d8714:	2206      	movs	r2, #6
   d8716:	f002 fce5 	bl	db0e4 <memcmp>
   d871a:	fab0 f080 	clz	r0, r0
   d871e:	0940      	lsrs	r0, r0, #5
}
   d8720:	bd08      	pop	{r3, pc}
    return false;
   d8722:	2000      	movs	r0, #0
   d8724:	e7fc      	b.n	d8720 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d8726 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d8726:	f04f 33ff 	mov.w	r3, #4294967295
   d872a:	6003      	str	r3, [r0, #0]
   d872c:	8083      	strh	r3, [r0, #4]
}
   d872e:	2000      	movs	r0, #0
   d8730:	4770      	bx	lr

000d8732 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d8732:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d8734:	b508      	push	{r3, lr}
        : address_{} {
   d8736:	6001      	str	r1, [r0, #0]
   d8738:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d873a:	4602      	mov	r2, r0
    clear();
   d873c:	f7ff fff3 	bl	d8726 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d8740:	7191      	strb	r1, [r2, #6]
}
   d8742:	4610      	mov	r0, r2
   d8744:	bd08      	pop	{r3, pc}
	...

000d8748 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d8748:	2201      	movs	r2, #1
   d874a:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d874c:	4a06      	ldr	r2, [pc, #24]	; (d8768 <_ZN8particle7BleUuidC1Ev+0x20>)
   d874e:	6811      	ldr	r1, [r2, #0]
   d8750:	6001      	str	r1, [r0, #0]
   d8752:	6851      	ldr	r1, [r2, #4]
   d8754:	6041      	str	r1, [r0, #4]
   d8756:	8911      	ldrh	r1, [r2, #8]
   d8758:	7a92      	ldrb	r2, [r2, #10]
   d875a:	7282      	strb	r2, [r0, #10]
   d875c:	2200      	movs	r2, #0
   d875e:	8101      	strh	r1, [r0, #8]
   d8760:	f8c0 200b 	str.w	r2, [r0, #11]
   d8764:	73c2      	strb	r2, [r0, #15]
}
   d8766:	4770      	bx	lr
   d8768:	000dbf10 	.word	0x000dbf10

000d876c <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d876c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d876e:	690b      	ldr	r3, [r1, #16]
   d8770:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d8772:	f101 0210 	add.w	r2, r1, #16
   d8776:	4603      	mov	r3, r0
   d8778:	f851 4b04 	ldr.w	r4, [r1], #4
   d877c:	f843 4b04 	str.w	r4, [r3], #4
   d8780:	4291      	cmp	r1, r2
   d8782:	d1f9      	bne.n	d8778 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d8784:	bd10      	pop	{r4, pc}

000d8786 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d8786:	b510      	push	{r4, lr}
    if (uuid128) {
   d8788:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d878a:	4604      	mov	r4, r0
    if (uuid128) {
   d878c:	b1b1      	cbz	r1, d87bc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d878e:	2a01      	cmp	r2, #1
   d8790:	f101 0210 	add.w	r2, r1, #16
   d8794:	d10a      	bne.n	d87ac <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d8796:	4601      	mov	r1, r0
   d8798:	f853 0b04 	ldr.w	r0, [r3], #4
   d879c:	f841 0b04 	str.w	r0, [r1], #4
   d87a0:	4293      	cmp	r3, r2
   d87a2:	d1f9      	bne.n	d8798 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d87a4:	2301      	movs	r3, #1
   d87a6:	6123      	str	r3, [r4, #16]
}
   d87a8:	4620      	mov	r0, r4
   d87aa:	bd10      	pop	{r4, pc}
   d87ac:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d87ae:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d87b2:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d87b6:	429a      	cmp	r2, r3
   d87b8:	d1f9      	bne.n	d87ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d87ba:	e7f3      	b.n	d87a4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d87bc:	2210      	movs	r2, #16
   d87be:	f002 fcc7 	bl	db150 <memset>
   d87c2:	e7f1      	b.n	d87a8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d87c4 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d87c4:	b538      	push	{r3, r4, r5, lr}
   d87c6:	4604      	mov	r4, r0
   d87c8:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d87ca:	461a      	mov	r2, r3
   d87cc:	f7ff ffdb 	bl	d8786 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d87d0:	81a5      	strh	r5, [r4, #12]
}
   d87d2:	4620      	mov	r0, r4
   d87d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d87d8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d87d8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d87da:	6902      	ldr	r2, [r0, #16]
   d87dc:	b922      	cbnz	r2, d87e8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d87de:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d87e0:	3800      	subs	r0, #0
   d87e2:	bf18      	it	ne
   d87e4:	2001      	movne	r0, #1
}
   d87e6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d87e8:	4902      	ldr	r1, [pc, #8]	; (d87f4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d87ea:	2210      	movs	r2, #16
   d87ec:	f002 fc7a 	bl	db0e4 <memcmp>
   d87f0:	e7f6      	b.n	d87e0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d87f2:	bf00      	nop
   d87f4:	000dbf30 	.word	0x000dbf30

000d87f8 <_ZNK8particle7BleUuid4typeEv>:
}
   d87f8:	6900      	ldr	r0, [r0, #16]
   d87fa:	4770      	bx	lr

000d87fc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d87fc:	b538      	push	{r3, r4, r5, lr}
   d87fe:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d8800:	2214      	movs	r2, #20
   d8802:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d8804:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d8806:	f002 fca3 	bl	db150 <memset>
    if (type_ == BleUuidType::SHORT) {
   d880a:	6923      	ldr	r3, [r4, #16]
   d880c:	b93b      	cbnz	r3, d881e <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d880e:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d8810:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d8812:	7b23      	ldrb	r3, [r4, #12]
   d8814:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d8818:	802b      	strh	r3, [r5, #0]
}
   d881a:	4628      	mov	r0, r5
   d881c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d881e:	2301      	movs	r3, #1
   d8820:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d8822:	f104 0210 	add.w	r2, r4, #16
   d8826:	462b      	mov	r3, r5
   d8828:	f854 1b04 	ldr.w	r1, [r4], #4
   d882c:	f843 1b04 	str.w	r1, [r3], #4
   d8830:	4294      	cmp	r4, r2
   d8832:	d1f9      	bne.n	d8828 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d8834:	e7f1      	b.n	d881a <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d8836 <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d8836:	7b42      	ldrb	r2, [r0, #13]
   d8838:	7b00      	ldrb	r0, [r0, #12]
}
   d883a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d883e:	4770      	bx	lr

000d8840 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d8840:	4770      	bx	lr

000d8842 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d8842:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d8844:	6902      	ldr	r2, [r0, #16]
   d8846:	690b      	ldr	r3, [r1, #16]
   d8848:	429a      	cmp	r2, r3
   d884a:	d106      	bne.n	d885a <_ZNK8particle7BleUuideqERKS0_+0x18>
   d884c:	2210      	movs	r2, #16
   d884e:	f002 fc49 	bl	db0e4 <memcmp>
   d8852:	fab0 f080 	clz	r0, r0
   d8856:	0940      	lsrs	r0, r0, #5
}
   d8858:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d885a:	2000      	movs	r0, #0
   d885c:	e7fc      	b.n	d8858 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d8860 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d8860:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d8862:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d8866:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d8868:	4b32      	ldr	r3, [pc, #200]	; (d8934 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d886a:	681a      	ldr	r2, [r3, #0]
   d886c:	6002      	str	r2, [r0, #0]
   d886e:	685a      	ldr	r2, [r3, #4]
   d8870:	6042      	str	r2, [r0, #4]
   d8872:	2500      	movs	r5, #0
   d8874:	891a      	ldrh	r2, [r3, #8]
   d8876:	7a9b      	ldrb	r3, [r3, #10]
   d8878:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d887a:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d887c:	7283      	strb	r3, [r0, #10]
   d887e:	f8c0 500b 	str.w	r5, [r0, #11]
   d8882:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d8884:	460e      	mov	r6, r1
   d8886:	b321      	cbz	r1, d88d2 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d8888:	2124      	movs	r1, #36	; 0x24
   d888a:	4630      	mov	r0, r6
   d888c:	f002 fcb9 	bl	db202 <strnlen>
   d8890:	2804      	cmp	r0, #4
   d8892:	d121      	bne.n	d88d8 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d8894:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8898:	af01      	add	r7, sp, #4
   d889a:	1cb5      	adds	r5, r6, #2
   d889c:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d889e:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d88a2:	f7ff ff00 	bl	d86a6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d88a6:	f1b0 0800 	subs.w	r8, r0, #0
   d88aa:	db10      	blt.n	d88ce <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d88ac:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d88b0:	f7ff fef9 	bl	d86a6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d88b4:	2800      	cmp	r0, #0
   d88b6:	db0a      	blt.n	d88ce <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d88b8:	3502      	adds	r5, #2
   d88ba:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d88be:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d88c0:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d88c4:	d1eb      	bne.n	d889e <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d88c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d88ca:	ba5b      	rev16	r3, r3
   d88cc:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d88ce:	2300      	movs	r3, #0
   d88d0:	6123      	str	r3, [r4, #16]
}
   d88d2:	b002      	add	sp, #8
   d88d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d88d8:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d88da:	2124      	movs	r1, #36	; 0x24
   d88dc:	4630      	mov	r0, r6
   d88de:	f002 fc90 	bl	db202 <strnlen>
   d88e2:	42a8      	cmp	r0, r5
   d88e4:	d806      	bhi.n	d88f4 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d88e6:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d88e8:	2300      	movs	r3, #0
    while (len > 0) {
   d88ea:	42bc      	cmp	r4, r7
   d88ec:	d0f1      	beq.n	d88d2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d88ee:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d88f2:	e7fa      	b.n	d88ea <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d88f4:	2f00      	cmp	r7, #0
   d88f6:	d0ec      	beq.n	d88d2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d88f8:	5d70      	ldrb	r0, [r6, r5]
   d88fa:	f7ff fed4 	bl	d86a6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d88fe:	0603      	lsls	r3, r0, #24
   d8900:	d415      	bmi.n	d892e <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d8902:	0100      	lsls	r0, r0, #4
   d8904:	3f01      	subs	r7, #1
   d8906:	fa5f f880 	uxtb.w	r8, r0
   d890a:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d890e:	2124      	movs	r1, #36	; 0x24
   d8910:	4630      	mov	r0, r6
   d8912:	f002 fc76 	bl	db202 <strnlen>
   d8916:	3501      	adds	r5, #1
   d8918:	42a8      	cmp	r0, r5
   d891a:	d908      	bls.n	d892e <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d891c:	5d70      	ldrb	r0, [r6, r5]
   d891e:	f7ff fec2 	bl	d86a6 <_ZN8particle11hexToNibbleEc>
   d8922:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d8924:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d8926:	bfa4      	itt	ge
   d8928:	ea40 0008 	orrge.w	r0, r0, r8
   d892c:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d892e:	3501      	adds	r5, #1
   d8930:	e7d3      	b.n	d88da <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d8932:	bf00      	nop
   d8934:	000dbf10 	.word	0x000dbf10

000d8938 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d8938:	b513      	push	{r0, r1, r4, lr}
   d893a:	4604      	mov	r4, r0
   d893c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d893e:	f7ff ff03 	bl	d8748 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d8942:	4620      	mov	r0, r4
   d8944:	9901      	ldr	r1, [sp, #4]
   d8946:	f7ff ff8b 	bl	d8860 <_ZN8particle7BleUuid9constructEPKc>
}
   d894a:	4620      	mov	r0, r4
   d894c:	b002      	add	sp, #8
   d894e:	bd10      	pop	{r4, pc}

000d8950 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d8950:	b430      	push	{r4, r5}
   d8952:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d8956:	b912      	cbnz	r2, d895e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d8958:	6a00      	ldr	r0, [r0, #32]
}
   d895a:	bc30      	pop	{r4, r5}
   d895c:	4770      	bx	lr
   d895e:	9502      	str	r5, [sp, #8]
   d8960:	bc30      	pop	{r4, r5}
   d8962:	f7ff be12 	b.w	d858a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d8966 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d8966:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8968:	4604      	mov	r4, r0
          selfLen_(0) {
   d896a:	4602      	mov	r2, r0
   d896c:	f100 011f 	add.w	r1, r0, #31
   d8970:	2300      	movs	r3, #0
   d8972:	f802 3b01 	strb.w	r3, [r2], #1
   d8976:	4291      	cmp	r1, r2
   d8978:	d1fb      	bne.n	d8972 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d897a:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d897c:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d897e:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d8980:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d8982:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d8986:	4619      	mov	r1, r3
   d8988:	f10d 020f 	add.w	r2, sp, #15
   d898c:	4620      	mov	r0, r4
   d898e:	f7ff ffdf 	bl	d8950 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d8992:	4620      	mov	r0, r4
   d8994:	b004      	add	sp, #16
   d8996:	bd10      	pop	{r4, pc}

000d8998 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   d8998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d899a:	460a      	mov	r2, r1
   d899c:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d899e:	2114      	movs	r1, #20
   d89a0:	4610      	mov	r0, r2
   d89a2:	9203      	str	r2, [sp, #12]
   d89a4:	f002 fc2d 	bl	db202 <strnlen>
   d89a8:	2100      	movs	r1, #0
   d89aa:	4603      	mov	r3, r0
   d89ac:	9100      	str	r1, [sp, #0]
   d89ae:	9a03      	ldr	r2, [sp, #12]
   d89b0:	2109      	movs	r1, #9
   d89b2:	4620      	mov	r0, r4
   d89b4:	f7ff ffcc 	bl	d8950 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d89b8:	b004      	add	sp, #16
   d89ba:	bd10      	pop	{r4, pc}

000d89bc <_ZN8particle18BleAdvertisingData15appendLocalNameERK6String>:
    return appendLocalName(name.c_str());
   d89bc:	6809      	ldr	r1, [r1, #0]
   d89be:	f7ff bfeb 	b.w	d8998 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>

000d89c2 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   d89c2:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   d89c4:	9300      	str	r3, [sp, #0]
   d89c6:	4613      	mov	r3, r2
   d89c8:	460a      	mov	r2, r1
   d89ca:	21ff      	movs	r1, #255	; 0xff
   d89cc:	f7ff ffc0 	bl	d8950 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d89d0:	b003      	add	sp, #12
   d89d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d89d6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d89d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d89d8:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d89da:	460e      	mov	r6, r1
   d89dc:	ab01      	add	r3, sp, #4
   d89de:	6a01      	ldr	r1, [r0, #32]
   d89e0:	4604      	mov	r4, r0
   d89e2:	f7ff fdbd 	bl	d8560 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d89e6:	4605      	mov	r5, r0
   d89e8:	b178      	cbz	r0, d8a0a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d89ea:	9801      	ldr	r0, [sp, #4]
   d89ec:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d89ee:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d89f0:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d89f2:	4421      	add	r1, r4
   d89f4:	1b52      	subs	r2, r2, r5
   d89f6:	4420      	add	r0, r4
   d89f8:	f002 fb82 	bl	db100 <memcpy>
        selfLen_ -= len;
   d89fc:	6a20      	ldr	r0, [r4, #32]
   d89fe:	1b40      	subs	r0, r0, r5
   d8a00:	6220      	str	r0, [r4, #32]
        remove(type);
   d8a02:	4631      	mov	r1, r6
   d8a04:	4620      	mov	r0, r4
   d8a06:	f7ff ffe6 	bl	d89d6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d8a0a:	b002      	add	sp, #8
   d8a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8a10 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d8a10:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d8a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8a16:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d8a18:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d8a1a:	8043      	strh	r3, [r0, #2]
   d8a1c:	220e      	movs	r2, #14
   d8a1e:	4629      	mov	r1, r5
   d8a20:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d8a22:	7105      	strb	r5, [r0, #4]
   d8a24:	3006      	adds	r0, #6
   d8a26:	f002 fb93 	bl	db150 <memset>
   d8a2a:	f104 0014 	add.w	r0, r4, #20
   d8a2e:	f7ff fe8b 	bl	d8748 <_ZN8particle7BleUuidC1Ev>
   d8a32:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8a36:	f7ff fe87 	bl	d8748 <_ZN8particle7BleUuidC1Ev>
   d8a3a:	4904      	ldr	r1, [pc, #16]	; (d8a4c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d8a3c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d8a40:	f7ff fc53 	bl	d82ea <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d8a44:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d8a46:	4620      	mov	r0, r4
   d8a48:	bd38      	pop	{r3, r4, r5, pc}
   d8a4a:	bf00      	nop
   d8a4c:	000db39b 	.word	0x000db39b

000d8a50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d8a50:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8a52:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d8a56:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d8a5a:	4293      	cmp	r3, r2
   d8a5c:	4618      	mov	r0, r3
   d8a5e:	d006      	beq.n	d8a6e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d8a60:	6804      	ldr	r4, [r0, #0]
   d8a62:	8824      	ldrh	r4, [r4, #0]
   d8a64:	428c      	cmp	r4, r1
   d8a66:	f103 0308 	add.w	r3, r3, #8
   d8a6a:	d1f6      	bne.n	d8a5a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d8a6c:	bd10      	pop	{r4, pc}
        return nullptr;
   d8a6e:	2000      	movs	r0, #0
   d8a70:	e7fc      	b.n	d8a6c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d8a74 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d8a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d8a78:	2600      	movs	r6, #0
   d8a7a:	6006      	str	r6, [r0, #0]
   d8a7c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8a7e:	2028      	movs	r0, #40	; 0x28
   d8a80:	460c      	mov	r4, r1
   d8a82:	f7fb fb06 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d8a86:	1e05      	subs	r5, r0, #0
   d8a88:	f105 080c 	add.w	r8, r5, #12
   d8a8c:	d00f      	beq.n	d8aae <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d8a8e:	2301      	movs	r3, #1
   d8a90:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8a94:	4b08      	ldr	r3, [pc, #32]	; (d8ab8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d8a96:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d8a98:	4640      	mov	r0, r8
   d8a9a:	f7ff fe55 	bl	d8748 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d8a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d8aa0:	622e      	str	r6, [r5, #32]
   d8aa2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d8aa6:	4646      	mov	r6, r8
   d8aa8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d8aaa:	6823      	ldr	r3, [r4, #0]
   d8aac:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d8aae:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d8ab2:	4638      	mov	r0, r7
   d8ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8ab8:	000dbed8 	.word	0x000dbed8

000d8abc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d8abc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d8abe:	2500      	movs	r5, #0
   d8ac0:	6005      	str	r5, [r0, #0]
   d8ac2:	4606      	mov	r6, r0
   d8ac4:	2030      	movs	r0, #48	; 0x30
   d8ac6:	f7fb fae4 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d8aca:	4604      	mov	r4, r0
   d8acc:	b188      	cbz	r0, d8af2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d8ace:	2301      	movs	r3, #1
   d8ad0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d8ad4:	4b09      	ldr	r3, [pc, #36]	; (d8afc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d8ad6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d8ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8adc:	8183      	strh	r3, [r0, #12]
   d8ade:	300e      	adds	r0, #14
   d8ae0:	f7ff fe27 	bl	d8732 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d8ae4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d8ae8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d8aec:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d8af0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d8af2:	6074      	str	r4, [r6, #4]
   d8af4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d8af6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d8af8:	4630      	mov	r0, r6
   d8afa:	bd70      	pop	{r4, r5, r6, pc}
   d8afc:	000dbef4 	.word	0x000dbef4

000d8b00 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d8b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8b02:	460d      	mov	r5, r1
   d8b04:	4604      	mov	r4, r0
    WiringBleLock lk;
   d8b06:	a801      	add	r0, sp, #4
   d8b08:	f7ff fde2 	bl	d86d0 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d8b0c:	682a      	ldr	r2, [r5, #0]
   d8b0e:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d8b12:	6023      	str	r3, [r4, #0]
   d8b14:	6853      	ldr	r3, [r2, #4]
   d8b16:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d8b18:	a801      	add	r0, sp, #4
   d8b1a:	f7ff fde1 	bl	d86e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d8b1e:	4620      	mov	r0, r4
   d8b20:	b003      	add	sp, #12
   d8b22:	bd30      	pop	{r4, r5, pc}

000d8b24 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d8b24:	b530      	push	{r4, r5, lr}
   d8b26:	4605      	mov	r5, r0
   d8b28:	b087      	sub	sp, #28
   d8b2a:	460c      	mov	r4, r1
    WiringBleLock lk;
   d8b2c:	a801      	add	r0, sp, #4
   d8b2e:	f7ff fdcf 	bl	d86d0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d8b32:	682a      	ldr	r2, [r5, #0]
   d8b34:	6823      	ldr	r3, [r4, #0]
   d8b36:	8812      	ldrh	r2, [r2, #0]
   d8b38:	881b      	ldrh	r3, [r3, #0]
   d8b3a:	429a      	cmp	r2, r3
   d8b3c:	d10d      	bne.n	d8b5a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d8b3e:	4629      	mov	r1, r5
   d8b40:	a802      	add	r0, sp, #8
   d8b42:	f7ff ffdd 	bl	d8b00 <_ZNK8particle13BlePeerDevice7addressEv>
   d8b46:	4621      	mov	r1, r4
   d8b48:	a804      	add	r0, sp, #16
   d8b4a:	f7ff ffd9 	bl	d8b00 <_ZNK8particle13BlePeerDevice7addressEv>
   d8b4e:	a904      	add	r1, sp, #16
   d8b50:	a802      	add	r0, sp, #8
   d8b52:	f7ff fdda 	bl	d870a <_ZNK8particle10BleAddresseqERKS0_>
   d8b56:	4604      	mov	r4, r0
   d8b58:	b900      	cbnz	r0, d8b5c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d8b5a:	2400      	movs	r4, #0
    WiringBleLock lk;
   d8b5c:	a801      	add	r0, sp, #4
   d8b5e:	f7ff fdbf 	bl	d86e0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d8b62:	4620      	mov	r0, r4
   d8b64:	b007      	add	sp, #28
   d8b66:	bd30      	pop	{r4, r5, pc}

000d8b68 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d8b68:	b510      	push	{r4, lr}
   d8b6a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d8b6c:	2054      	movs	r0, #84	; 0x54
   d8b6e:	f7fb fa90 	bl	d4092 <_Znwj>
   d8b72:	4601      	mov	r1, r0
   d8b74:	b160      	cbz	r0, d8b90 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d8b76:	2300      	movs	r3, #0
   d8b78:	e9c0 3300 	strd	r3, r3, [r0]
   d8b7c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d8b80:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d8b84:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d8b88:	6203      	str	r3, [r0, #32]
   d8b8a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d8b8c:	63c3      	str	r3, [r0, #60]	; 0x3c
   d8b8e:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d8b90:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d8b92:	b919      	cbnz	r1, d8b9c <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d8b94:	4a09      	ldr	r2, [pc, #36]	; (d8bbc <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d8b96:	200a      	movs	r0, #10
   d8b98:	f7ff f940 	bl	d7e1c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d8b9c:	2000      	movs	r0, #0
   d8b9e:	f7fe ff79 	bl	d7a94 <hal_ble_stack_init>
   d8ba2:	b120      	cbz	r0, d8bae <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d8ba4:	4a05      	ldr	r2, [pc, #20]	; (d8bbc <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d8ba6:	2100      	movs	r1, #0
   d8ba8:	200a      	movs	r0, #10
   d8baa:	f7ff f937 	bl	d7e1c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d8bae:	6821      	ldr	r1, [r4, #0]
   d8bb0:	4803      	ldr	r0, [pc, #12]	; (d8bc0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d8bb2:	2200      	movs	r2, #0
   d8bb4:	f7fe ffac 	bl	d7b10 <hal_ble_set_callback_on_periph_link_events>
}
   d8bb8:	4620      	mov	r0, r4
   d8bba:	bd10      	pop	{r4, pc}
   d8bbc:	000d7a35 	.word	0x000d7a35
   d8bc0:	000d8f4d 	.word	0x000d8f4d

000d8bc4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d8bc4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d8bc6:	4c0b      	ldr	r4, [pc, #44]	; (d8bf4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d8bc8:	7823      	ldrb	r3, [r4, #0]
   d8bca:	f3bf 8f5b 	dmb	ish
   d8bce:	07db      	lsls	r3, r3, #31
   d8bd0:	d40e      	bmi.n	d8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d8bd2:	4620      	mov	r0, r4
   d8bd4:	f7fb fa6e 	bl	d40b4 <__cxa_guard_acquire>
   d8bd8:	b150      	cbz	r0, d8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d8bda:	4807      	ldr	r0, [pc, #28]	; (d8bf8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d8bdc:	f7ff ffc4 	bl	d8b68 <_ZN8particle14BleLocalDeviceC1Ev>
   d8be0:	4620      	mov	r0, r4
   d8be2:	f7fb fa6c 	bl	d40be <__cxa_guard_release>
   d8be6:	4a05      	ldr	r2, [pc, #20]	; (d8bfc <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d8be8:	4905      	ldr	r1, [pc, #20]	; (d8c00 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d8bea:	4803      	ldr	r0, [pc, #12]	; (d8bf8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d8bec:	f001 fc96 	bl	da51c <__aeabi_atexit>
    return instance;
}
   d8bf0:	4801      	ldr	r0, [pc, #4]	; (d8bf8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d8bf2:	bd10      	pop	{r4, pc}
   d8bf4:	2003e614 	.word	0x2003e614
   d8bf8:	2003e620 	.word	0x2003e620
   d8bfc:	2003de48 	.word	0x2003de48
   d8c00:	000d8dcd 	.word	0x000d8dcd

000d8c04 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d8c04:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d8c06:	6803      	ldr	r3, [r0, #0]
   d8c08:	3b09      	subs	r3, #9
   d8c0a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d8c0c:	b08d      	sub	sp, #52	; 0x34
   d8c0e:	4604      	mov	r4, r0
   d8c10:	460d      	mov	r5, r1
    switch (event->type) {
   d8c12:	d811      	bhi.n	d8c38 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d8c14:	f7ff ffd6 	bl	d8bc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d8c18:	88a1      	ldrh	r1, [r4, #4]
   d8c1a:	6800      	ldr	r0, [r0, #0]
   d8c1c:	f7ff ff18 	bl	d8a50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d8c20:	4603      	mov	r3, r0
   d8c22:	b958      	cbnz	r0, d8c3c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d8c24:	2220      	movs	r2, #32
   d8c26:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d8c2a:	4a0b      	ldr	r2, [pc, #44]	; (d8c58 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d8c2c:	9200      	str	r2, [sp, #0]
   d8c2e:	490b      	ldr	r1, [pc, #44]	; (d8c5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d8c30:	aa04      	add	r2, sp, #16
   d8c32:	2032      	movs	r0, #50	; 0x32
   d8c34:	f7ff f8fa 	bl	d7e2c <log_message>
}
   d8c38:	b00d      	add	sp, #52	; 0x34
   d8c3a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d8c3c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d8c3e:	2a00      	cmp	r2, #0
   d8c40:	d0fa      	beq.n	d8c38 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d8c42:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8c46:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d8c4a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d8c4e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d8c50:	aa04      	add	r2, sp, #16
   d8c52:	a903      	add	r1, sp, #12
   d8c54:	47a0      	blx	r4
}
   d8c56:	e7ef      	b.n	d8c38 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d8c58:	000dbde7 	.word	0x000dbde7
   d8c5c:	000dbdc0 	.word	0x000dbdc0

000d8c60 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d8c60:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d8c62:	2000      	movs	r0, #0
   d8c64:	f7fe ff16 	bl	d7a94 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d8c68:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d8c6c:	bd08      	pop	{r3, pc}

000d8c6e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d8c6e:	4608      	mov	r0, r1
   d8c70:	b911      	cbnz	r1, d8c78 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d8c72:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d8c74:	f7fe bf16 	b.w	d7aa4 <hal_ble_gap_set_advertising_data>
   d8c78:	6a09      	ldr	r1, [r1, #32]
   d8c7a:	2200      	movs	r2, #0
   d8c7c:	e7fa      	b.n	d8c74 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d8c7e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d8c7e:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d8c80:	4608      	mov	r0, r1
   d8c82:	b929      	cbnz	r1, d8c90 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d8c84:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d8c86:	b003      	add	sp, #12
   d8c88:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d8c8c:	f7fe bf12 	b.w	d7ab4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d8c90:	2101      	movs	r1, #1
   d8c92:	9001      	str	r0, [sp, #4]
   d8c94:	f7ff fe9f 	bl	d89d6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d8c98:	9801      	ldr	r0, [sp, #4]
   d8c9a:	2200      	movs	r2, #0
   d8c9c:	6a01      	ldr	r1, [r0, #32]
   d8c9e:	e7f2      	b.n	d8c86 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d8ca0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d8ca0:	b538      	push	{r3, r4, r5, lr}
   d8ca2:	4604      	mov	r4, r0
   d8ca4:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d8ca6:	f7ff ffe2 	bl	d8c6e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d8caa:	2800      	cmp	r0, #0
   d8cac:	db0a      	blt.n	d8cc4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d8cae:	4629      	mov	r1, r5
   d8cb0:	4620      	mov	r0, r4
   d8cb2:	f7ff ffe4 	bl	d8c7e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d8cb6:	2800      	cmp	r0, #0
   d8cb8:	db04      	blt.n	d8cc4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d8cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d8cbe:	2000      	movs	r0, #0
   d8cc0:	f7fe bf00 	b.w	d7ac4 <hal_ble_gap_start_advertising>
}
   d8cc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8cc8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d8cc8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8cca:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d8ccc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d8cce:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8cd0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d8cd2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8cd4:	f7fb f9dd 	bl	d4092 <_Znwj>
   d8cd8:	b118      	cbz	r0, d8ce2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d8cda:	682b      	ldr	r3, [r5, #0]
   d8cdc:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8cde:	686b      	ldr	r3, [r5, #4]
   d8ce0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d8ce2:	4b03      	ldr	r3, [pc, #12]	; (d8cf0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d8ce4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8ce6:	4b03      	ldr	r3, [pc, #12]	; (d8cf4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8ce8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8cea:	60a3      	str	r3, [r4, #8]
      }
   d8cec:	4620      	mov	r0, r4
   d8cee:	bd38      	pop	{r3, r4, r5, pc}
   d8cf0:	000d8667 	.word	0x000d8667
   d8cf4:	000d8629 	.word	0x000d8629

000d8cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d8cf8:	680b      	ldr	r3, [r1, #0]
   d8cfa:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d8cfc:	b113      	cbz	r3, d8d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8cfe:	685a      	ldr	r2, [r3, #4]
   d8d00:	3201      	adds	r2, #1
   d8d02:	605a      	str	r2, [r3, #4]
      }
   d8d04:	4770      	bx	lr

000d8d06 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d8d06:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8d08:	f851 3b04 	ldr.w	r3, [r1], #4
   d8d0c:	4604      	mov	r4, r0
   d8d0e:	f840 3b04 	str.w	r3, [r0], #4
   d8d12:	f7ff fff1 	bl	d8cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d8d16:	6823      	ldr	r3, [r4, #0]
   d8d18:	b90b      	cbnz	r3, d8d1e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d8d1a:	f7ff fc7d 	bl	d8618 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d8d1e:	4620      	mov	r0, r4
   d8d20:	bd10      	pop	{r4, pc}

000d8d22 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d8d22:	b510      	push	{r4, lr}
   d8d24:	f851 3b04 	ldr.w	r3, [r1], #4
   d8d28:	4604      	mov	r4, r0
   d8d2a:	f840 3b04 	str.w	r3, [r0], #4
   d8d2e:	f7ff ffe3 	bl	d8cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d8d32:	4620      	mov	r0, r4
   d8d34:	bd10      	pop	{r4, pc}

000d8d36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d8d36:	b510      	push	{r4, lr}
   d8d38:	f851 3b04 	ldr.w	r3, [r1], #4
   d8d3c:	4604      	mov	r4, r0
   d8d3e:	f840 3b04 	str.w	r3, [r0], #4
   d8d42:	f7ff ffd9 	bl	d8cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d8d46:	4620      	mov	r0, r4
   d8d48:	bd10      	pop	{r4, pc}

000d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d8d4a:	b510      	push	{r4, lr}
   d8d4c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d8d4e:	6800      	ldr	r0, [r0, #0]
   d8d50:	b128      	cbz	r0, d8d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d8d52:	6843      	ldr	r3, [r0, #4]
   d8d54:	3b01      	subs	r3, #1
   d8d56:	6043      	str	r3, [r0, #4]
   d8d58:	b90b      	cbnz	r3, d8d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d8d5a:	f7ff fbd0 	bl	d84fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d8d5e:	4620      	mov	r0, r4
   d8d60:	bd10      	pop	{r4, pc}

000d8d62 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d8d62:	b510      	push	{r4, lr}
   d8d64:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d8d66:	3004      	adds	r0, #4
   d8d68:	f7ff ffef 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8d6c:	4620      	mov	r0, r4
   d8d6e:	bd10      	pop	{r4, pc}

000d8d70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8d70:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8d72:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8d76:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8d78:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d8d7c:	42ae      	cmp	r6, r5
   d8d7e:	d004      	beq.n	d8d8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d8d80:	1d28      	adds	r0, r5, #4
   d8d82:	f7ff ffe2 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8d86:	3508      	adds	r5, #8
   d8d88:	e7f8      	b.n	d8d7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d8d8a:	6820      	ldr	r0, [r4, #0]
   d8d8c:	f7ff f91c 	bl	d7fc8 <free>
}
   d8d90:	4620      	mov	r0, r4
   d8d92:	bd70      	pop	{r4, r5, r6, pc}

000d8d94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8d94:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8d96:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8d9a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8d9c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d8da0:	42ae      	cmp	r6, r5
   d8da2:	d004      	beq.n	d8dae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d8da4:	1d28      	adds	r0, r5, #4
   d8da6:	f7ff ffd0 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8daa:	3508      	adds	r5, #8
   d8dac:	e7f8      	b.n	d8da0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d8dae:	6820      	ldr	r0, [r4, #0]
   d8db0:	f7ff f90a 	bl	d7fc8 <free>
}
   d8db4:	4620      	mov	r0, r4
   d8db6:	bd70      	pop	{r4, r5, r6, pc}

000d8db8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8db8:	b510      	push	{r4, lr}
   d8dba:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d8dbc:	3024      	adds	r0, #36	; 0x24
   d8dbe:	f7ff ffe9 	bl	d8d94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d8dc2:	f104 0018 	add.w	r0, r4, #24
   d8dc6:	f7ff ffd3 	bl	d8d70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d8dca:	bd10      	pop	{r4, pc}

000d8dcc <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d8dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d8dce:	6804      	ldr	r4, [r0, #0]
   d8dd0:	4606      	mov	r6, r0
   d8dd2:	b324      	cbz	r4, d8e1e <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d8dd4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d8dd8:	f7ff fc51 	bl	d867e <_ZNSt14_Function_baseD1Ev>
   d8ddc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d8de0:	f7ff fc4d 	bl	d867e <_ZNSt14_Function_baseD1Ev>
   d8de4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8de8:	f7ff fc49 	bl	d867e <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d8dec:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d8df0:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d8df4:	42af      	cmp	r7, r5
   d8df6:	d004      	beq.n	d8e02 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d8df8:	1d28      	adds	r0, r5, #4
   d8dfa:	f7ff ffa6 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8dfe:	3508      	adds	r5, #8
   d8e00:	e7f8      	b.n	d8df4 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d8e02:	69a0      	ldr	r0, [r4, #24]
   d8e04:	f7ff f8e0 	bl	d7fc8 <free>
    ~BleLocalDeviceImpl() = default;
   d8e08:	f104 000c 	add.w	r0, r4, #12
   d8e0c:	f7ff ffc2 	bl	d8d94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d8e10:	4620      	mov	r0, r4
   d8e12:	f7ff ffad 	bl	d8d70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d8e16:	2154      	movs	r1, #84	; 0x54
   d8e18:	4620      	mov	r0, r4
   d8e1a:	f001 fb84 	bl	da526 <_ZdlPvj>
   d8e1e:	4630      	mov	r0, r6
   d8e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8e22 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d8e22:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8e24:	b510      	push	{r4, lr}
      if (_M_empty())
   d8e26:	b90a      	cbnz	r2, d8e2c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d8e28:	f001 fb81 	bl	da52e <_ZSt25__throw_bad_function_callv>
    }
   d8e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8e30:	68c3      	ldr	r3, [r0, #12]
   d8e32:	4718      	bx	r3

000d8e34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d8e34:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d8e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8e38:	4604      	mov	r4, r0
   d8e3a:	460d      	mov	r5, r1
   d8e3c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d8e3e:	d914      	bls.n	d8e6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d8e40:	4290      	cmp	r0, r2
   d8e42:	d213      	bcs.n	d8e6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d8e44:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d8e48:	1a75      	subs	r5, r6, r1
   d8e4a:	f1a1 0708 	sub.w	r7, r1, #8
   d8e4e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d8e50:	42b7      	cmp	r7, r6
   d8e52:	d018      	beq.n	d8e86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d8e54:	b11c      	cbz	r4, d8e5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d8e56:	4631      	mov	r1, r6
   d8e58:	4620      	mov	r0, r4
   d8e5a:	f7ff ff6c 	bl	d8d36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d8e5e:	1d30      	adds	r0, r6, #4
   d8e60:	f7ff ff73 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d8e64:	3e08      	subs	r6, #8
   d8e66:	3c08      	subs	r4, #8
   d8e68:	e7f2      	b.n	d8e50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d8e6a:	d00c      	beq.n	d8e86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d8e6c:	42b5      	cmp	r5, r6
   d8e6e:	d00a      	beq.n	d8e86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d8e70:	b11c      	cbz	r4, d8e7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d8e72:	4629      	mov	r1, r5
   d8e74:	4620      	mov	r0, r4
   d8e76:	f7ff ff5e 	bl	d8d36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d8e7a:	1d28      	adds	r0, r5, #4
   d8e7c:	f7ff ff65 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d8e80:	3508      	adds	r5, #8
   d8e82:	3408      	adds	r4, #8
   d8e84:	e7f2      	b.n	d8e6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d8e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8e88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d8e8c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8e90:	4605      	mov	r5, r0
   d8e92:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d8e94:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d8e98:	42a7      	cmp	r7, r4
   d8e9a:	d103      	bne.n	d8ea4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d8e9c:	2600      	movs	r6, #0
}
   d8e9e:	4630      	mov	r0, r6
   d8ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d8ea4:	4641      	mov	r1, r8
   d8ea6:	4620      	mov	r0, r4
   d8ea8:	f7ff fe3c 	bl	d8b24 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d8eac:	4606      	mov	r6, r0
   d8eae:	b908      	cbnz	r0, d8eb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d8eb0:	3408      	adds	r4, #8
   d8eb2:	e7f1      	b.n	d8e98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d8eb4:	2c00      	cmp	r4, #0
   d8eb6:	d0f1      	beq.n	d8e9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d8eb8:	1d20      	adds	r0, r4, #4
   d8eba:	f7ff ff46 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d8ebe:	e9d5 3200 	ldrd	r3, r2, [r5]
   d8ec2:	f104 0108 	add.w	r1, r4, #8
   d8ec6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8eca:	4620      	mov	r0, r4
   d8ecc:	f7ff ffb2 	bl	d8e34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d8ed0:	686b      	ldr	r3, [r5, #4]
   d8ed2:	3b01      	subs	r3, #1
   d8ed4:	606b      	str	r3, [r5, #4]
    return true;
   d8ed6:	e7e2      	b.n	d8e9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d8ed8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8eda:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d8edc:	6846      	ldr	r6, [r0, #4]
   d8ede:	4668      	mov	r0, sp
   d8ee0:	f7ff ff29 	bl	d8d36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8ee4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d8ee8:	429f      	cmp	r7, r3
   d8eea:	db12      	blt.n	d8f12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d8eec:	3701      	adds	r7, #1
        if (n > 0) {
   d8eee:	2f00      	cmp	r7, #0
   d8ef0:	dd29      	ble.n	d8f46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d8ef2:	00f8      	lsls	r0, r7, #3
   d8ef4:	f7ff f860 	bl	d7fb8 <malloc>
            if (!d) {
   d8ef8:	4605      	mov	r5, r0
   d8efa:	b1f0      	cbz	r0, d8f3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d8efc:	e9d4 1200 	ldrd	r1, r2, [r4]
   d8f00:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d8f04:	f7ff ff96 	bl	d8e34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d8f08:	6820      	ldr	r0, [r4, #0]
   d8f0a:	f7ff f85d 	bl	d7fc8 <free>
        data_ = d;
   d8f0e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d8f10:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d8f12:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d8f14:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d8f16:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d8f1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8f1e:	4631      	mov	r1, r6
   d8f20:	f106 0008 	add.w	r0, r6, #8
   d8f24:	f7ff ff86 	bl	d8e34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8f28:	b11e      	cbz	r6, d8f32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d8f2a:	4669      	mov	r1, sp
   d8f2c:	4630      	mov	r0, r6
   d8f2e:	f7ff ff02 	bl	d8d36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d8f32:	6863      	ldr	r3, [r4, #4]
   d8f34:	3301      	adds	r3, #1
   d8f36:	6063      	str	r3, [r4, #4]
    return true;
   d8f38:	2501      	movs	r5, #1
   d8f3a:	a801      	add	r0, sp, #4
   d8f3c:	f7ff ff05 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8f40:	4628      	mov	r0, r5
   d8f42:	b003      	add	sp, #12
   d8f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d8f46:	2500      	movs	r5, #0
   d8f48:	e7de      	b.n	d8f08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d8f4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d8f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8f50:	4605      	mov	r5, r0
   d8f52:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d8f54:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d8f56:	460c      	mov	r4, r1
        WiringBleLock lk;
   d8f58:	f7ff fbba 	bl	d86d0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d8f5c:	682e      	ldr	r6, [r5, #0]
   d8f5e:	2e04      	cmp	r6, #4
   d8f60:	d06b      	beq.n	d903a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d8f62:	d807      	bhi.n	d8f74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d8f64:	2e03      	cmp	r6, #3
   d8f66:	d028      	beq.n	d8fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d8f68:	a803      	add	r0, sp, #12
   d8f6a:	f7ff fbb9 	bl	d86e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d8f6e:	b00e      	add	sp, #56	; 0x38
   d8f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d8f74:	f1a6 030c 	sub.w	r3, r6, #12
   d8f78:	2b03      	cmp	r3, #3
   d8f7a:	d8f5      	bhi.n	d8f68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d8f7c:	89a9      	ldrh	r1, [r5, #12]
   d8f7e:	4620      	mov	r0, r4
   d8f80:	f7ff fd66 	bl	d8a50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d8f84:	4607      	mov	r7, r0
   d8f86:	2800      	cmp	r0, #0
   d8f88:	d0ee      	beq.n	d8f68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d8f8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d8f8c:	2b00      	cmp	r3, #0
   d8f8e:	d0eb      	beq.n	d8f68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d8f90:	2210      	movs	r2, #16
   d8f92:	2100      	movs	r1, #0
   d8f94:	a807      	add	r0, sp, #28
   d8f96:	f002 f8db 	bl	db150 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d8f9a:	2e0d      	cmp	r6, #13
                        };
   d8f9c:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d8f9e:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d8fa2:	f040 8092 	bne.w	d90ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d8fa6:	686b      	ldr	r3, [r5, #4]
   d8fa8:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d8faa:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d8fac:	9308      	str	r3, [sp, #32]
   d8fae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d8fb0:	a906      	add	r1, sp, #24
   d8fb2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d8fb6:	4798      	blx	r3
   d8fb8:	e7d6      	b.n	d8f68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d8fba:	a804      	add	r0, sp, #16
   d8fbc:	f7ff fd7e 	bl	d8abc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d8fc0:	9b04      	ldr	r3, [sp, #16]
   d8fc2:	89aa      	ldrh	r2, [r5, #12]
   d8fc4:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d8fc6:	6869      	ldr	r1, [r5, #4]
   d8fc8:	9804      	ldr	r0, [sp, #16]
   d8fca:	3108      	adds	r1, #8
   d8fcc:	3002      	adds	r0, #2
   d8fce:	f7ff fb8f 	bl	d86f0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d8fd2:	a904      	add	r1, sp, #16
   d8fd4:	a806      	add	r0, sp, #24
   d8fd6:	f7ff feae 	bl	d8d36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d8fda:	a906      	add	r1, sp, #24
   d8fdc:	f104 0018 	add.w	r0, r4, #24
   d8fe0:	f7ff ff7a 	bl	d8ed8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d8fe4:	4605      	mov	r5, r0
   d8fe6:	a807      	add	r0, sp, #28
   d8fe8:	f7ff feaf 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8fec:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d8fee:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d8ff0:	b98d      	cbnz	r5, d9016 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d8ff2:	4b3e      	ldr	r3, [pc, #248]	; (d90ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d8ff4:	493e      	ldr	r1, [pc, #248]	; (d90f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d8ff6:	9300      	str	r3, [sp, #0]
   d8ff8:	2032      	movs	r0, #50	; 0x32
   d8ffa:	462b      	mov	r3, r5
   d8ffc:	aa06      	add	r2, sp, #24
   d8ffe:	9507      	str	r5, [sp, #28]
   d9000:	f7fe ff14 	bl	d7e2c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d9004:	9b04      	ldr	r3, [sp, #16]
   d9006:	4629      	mov	r1, r5
   d9008:	8818      	ldrh	r0, [r3, #0]
   d900a:	f7fe fd63 	bl	d7ad4 <hal_ble_gap_disconnect>
   d900e:	a805      	add	r0, sp, #20
   d9010:	f7ff fe9b 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9014:	e7a8      	b.n	d8f68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d9016:	4a37      	ldr	r2, [pc, #220]	; (d90f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d9018:	9200      	str	r2, [sp, #0]
   d901a:	2300      	movs	r3, #0
   d901c:	4934      	ldr	r1, [pc, #208]	; (d90f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d901e:	9307      	str	r3, [sp, #28]
   d9020:	aa06      	add	r2, sp, #24
   d9022:	2001      	movs	r0, #1
   d9024:	f7fe ff02 	bl	d7e2c <log_message>
                if (impl->connectedCallback_) {
   d9028:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d902a:	2b00      	cmp	r3, #0
   d902c:	d0ef      	beq.n	d900e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d902e:	a904      	add	r1, sp, #16
   d9030:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d9034:	f7ff fef5 	bl	d8e22 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d9038:	e7e9      	b.n	d900e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d903a:	89a9      	ldrh	r1, [r5, #12]
   d903c:	4620      	mov	r0, r4
   d903e:	f7ff fd07 	bl	d8a50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d9042:	4606      	mov	r6, r0
   d9044:	2800      	cmp	r0, #0
   d9046:	d08f      	beq.n	d8f68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d9048:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d904a:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d904e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d9052:	802a      	strh	r2, [r5, #0]
   d9054:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d9058:	4299      	cmp	r1, r3
   d905a:	d003      	beq.n	d9064 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d905c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d9060:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d9062:	e7f9      	b.n	d9058 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d9064:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d9068:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d906c:	45b8      	cmp	r8, r7
   d906e:	d004      	beq.n	d907a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d9070:	1d38      	adds	r0, r7, #4
   d9072:	f7ff fe6a 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9076:	3708      	adds	r7, #8
   d9078:	e7f8      	b.n	d906c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d907a:	2300      	movs	r3, #0
   d907c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d907e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d9082:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d9086:	45b8      	cmp	r8, r7
   d9088:	d004      	beq.n	d9094 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d908a:	1d38      	adds	r0, r7, #4
   d908c:	f7ff fe5d 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9090:	3708      	adds	r7, #8
   d9092:	e7f8      	b.n	d9086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d9094:	2300      	movs	r3, #0
   d9096:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d9098:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d909a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d909c:	b123      	cbz	r3, d90a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d909e:	4631      	mov	r1, r6
   d90a0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d90a4:	f7ff febd 	bl	d8e22 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d90a8:	2300      	movs	r3, #0
   d90aa:	2220      	movs	r2, #32
   d90ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d90b0:	4a11      	ldr	r2, [pc, #68]	; (d90f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d90b2:	9200      	str	r2, [sp, #0]
   d90b4:	490e      	ldr	r1, [pc, #56]	; (d90f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d90b6:	aa06      	add	r2, sp, #24
   d90b8:	2001      	movs	r0, #1
   d90ba:	f7fe feb7 	bl	d7e2c <log_message>
                    impl->peers_.removeOne(*peer);
   d90be:	4631      	mov	r1, r6
   d90c0:	f104 0018 	add.w	r0, r4, #24
   d90c4:	f7ff fee0 	bl	d8e88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d90c8:	e74e      	b.n	d8f68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d90ca:	2e0f      	cmp	r6, #15
   d90cc:	f47f af6f 	bne.w	d8fae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d90d0:	686b      	ldr	r3, [r5, #4]
   d90d2:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d90d4:	7a2b      	ldrb	r3, [r5, #8]
   d90d6:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d90da:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d90de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d90e2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d90e6:	2308      	movs	r3, #8
   d90e8:	e760      	b.n	d8fac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d90ea:	bf00      	nop
   d90ec:	000dbdff 	.word	0x000dbdff
   d90f0:	000dbdc0 	.word	0x000dbdc0
   d90f4:	000dbe25 	.word	0x000dbe25
   d90f8:	000dbe42 	.word	0x000dbe42

000d90fc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d90fc:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d90fe:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d9100:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9102:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d9106:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d910a:	6823      	ldr	r3, [r4, #0]
   d910c:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d910e:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9110:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d9112:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d9114:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d9116:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d9118:	f7ff fe17 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d911c:	4620      	mov	r0, r4
   d911e:	b002      	add	sp, #8
   d9120:	bd10      	pop	{r4, pc}

000d9122 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d9122:	b513      	push	{r0, r1, r4, lr}
   d9124:	460b      	mov	r3, r1
   d9126:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9128:	e9d0 0100 	ldrd	r0, r1, [r0]
   d912c:	466c      	mov	r4, sp
   d912e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d9132:	e893 0003 	ldmia.w	r3, {r0, r1}
   d9136:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d913a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d913e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d9142:	b002      	add	sp, #8
   d9144:	bd10      	pop	{r4, pc}

000d9146 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d9146:	b538      	push	{r3, r4, r5, lr}
   d9148:	4605      	mov	r5, r0
   d914a:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d914c:	f7ff ffe9 	bl	d9122 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9150:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9152:	68a2      	ldr	r2, [r4, #8]
   d9154:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9156:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9158:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d915a:	68e2      	ldr	r2, [r4, #12]
   d915c:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d915e:	60e3      	str	r3, [r4, #12]
      }
   d9160:	bd38      	pop	{r3, r4, r5, pc}

000d9162 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d9162:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d9164:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d9166:	4604      	mov	r4, r0
   d9168:	4608      	mov	r0, r1
	__x.swap(*this);
   d916a:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d916c:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d916e:	f7ff ffea 	bl	d9146 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d9172:	4621      	mov	r1, r4
   d9174:	4668      	mov	r0, sp
   d9176:	f7ff ffe6 	bl	d9146 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d917a:	4668      	mov	r0, sp
   d917c:	f7ff fa7f 	bl	d867e <_ZNSt14_Function_baseD1Ev>
      }
   d9180:	4620      	mov	r0, r4
   d9182:	b004      	add	sp, #16
   d9184:	bd10      	pop	{r4, pc}

000d9186 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d9186:	b570      	push	{r4, r5, r6, lr}
   d9188:	460e      	mov	r6, r1
   d918a:	b088      	sub	sp, #32
   d918c:	4604      	mov	r4, r0
   d918e:	9201      	str	r2, [sp, #4]
   d9190:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d9192:	f7ff fc3d 	bl	d8a10 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d9196:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d9198:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d919a:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d919c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d91a0:	f7ff f8f6 	bl	d8390 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d91a4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d91a8:	b185      	cbz	r5, d91cc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d91aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d91ac:	9502      	str	r5, [sp, #8]
   d91ae:	a902      	add	r1, sp, #8
   d91b0:	a804      	add	r0, sp, #16
   d91b2:	9303      	str	r3, [sp, #12]
   d91b4:	f7ff fd88 	bl	d8cc8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d91b8:	a904      	add	r1, sp, #16
   d91ba:	4630      	mov	r0, r6
   d91bc:	f7ff ffd1 	bl	d9162 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d91c0:	a804      	add	r0, sp, #16
   d91c2:	f7ff fa5c 	bl	d867e <_ZNSt14_Function_baseD1Ev>
    }
   d91c6:	4620      	mov	r0, r4
   d91c8:	b008      	add	sp, #32
   d91ca:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d91cc:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d91ce:	e7f3      	b.n	d91b8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d91d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d91d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d91d4:	b086      	sub	sp, #24
   d91d6:	4607      	mov	r7, r0
   d91d8:	461d      	mov	r5, r3
   d91da:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d91dc:	2300      	movs	r3, #0
   d91de:	4689      	mov	r9, r1
   d91e0:	4692      	mov	sl, r2
   d91e2:	9304      	str	r3, [sp, #16]
   d91e4:	f7fa ff55 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d91e8:	1e06      	subs	r6, r0, #0
   d91ea:	f106 080c 	add.w	r8, r6, #12
   d91ee:	d01d      	beq.n	d922c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d91f0:	2301      	movs	r3, #1
	: _M_impl(__a)
   d91f2:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d91f4:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d91f8:	4b15      	ldr	r3, [pc, #84]	; (d9250 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d91fa:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d91fe:	f89a 3000 	ldrb.w	r3, [sl]
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d9202:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d9206:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9208:	9300      	str	r3, [sp, #0]
   d920a:	464a      	mov	r2, r9
   d920c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d920e:	a903      	add	r1, sp, #12
   d9210:	4640      	mov	r0, r8
   d9212:	f7ff ffb8 	bl	d9186 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d9216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d921a:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d921c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d921e:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d9220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9222:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d9226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9228:	682b      	ldr	r3, [r5, #0]
   d922a:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d922c:	a904      	add	r1, sp, #16
   d922e:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d9230:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d9234:	f7ff ff62 	bl	d90fc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d9238:	a805      	add	r0, sp, #20
   d923a:	f7ff fd86 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d923e:	6839      	ldr	r1, [r7, #0]
   d9240:	b919      	cbnz	r1, d924a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d9242:	4a04      	ldr	r2, [pc, #16]	; (d9254 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d9244:	200a      	movs	r0, #10
   d9246:	f7fe fde9 	bl	d7e1c <panic_>
}
   d924a:	b006      	add	sp, #24
   d924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9250:	000dbebc 	.word	0x000dbebc
   d9254:	000d7a35 	.word	0x000d7a35

000d9258 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d9258:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d925a:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d925c:	b086      	sub	sp, #24
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d925e:	344c      	adds	r4, #76	; 0x4c
   d9260:	b171      	cbz	r1, d9280 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x28>
   d9262:	e9cd 1200 	strd	r1, r2, [sp]
   d9266:	a802      	add	r0, sp, #8
   d9268:	4669      	mov	r1, sp
   d926a:	f7ff fd2d 	bl	d8cc8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d926e:	a902      	add	r1, sp, #8
   d9270:	4620      	mov	r0, r4
   d9272:	f7ff ff76 	bl	d9162 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d9276:	a802      	add	r0, sp, #8
   d9278:	f7ff fa01 	bl	d867e <_ZNSt14_Function_baseD1Ev>
}
   d927c:	b006      	add	sp, #24
   d927e:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d9280:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d9282:	e7f4      	b.n	d926e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000d9284 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d9284:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9288:	4604      	mov	r4, r0
   d928a:	460d      	mov	r5, r1
   d928c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d928e:	d914      	bls.n	d92ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d9290:	4290      	cmp	r0, r2
   d9292:	d213      	bcs.n	d92bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d9294:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d9298:	1a75      	subs	r5, r6, r1
   d929a:	f1a1 0708 	sub.w	r7, r1, #8
   d929e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d92a0:	42b7      	cmp	r7, r6
   d92a2:	d018      	beq.n	d92d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d92a4:	b11c      	cbz	r4, d92ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d92a6:	4631      	mov	r1, r6
   d92a8:	4620      	mov	r0, r4
   d92aa:	f7ff fd3a 	bl	d8d22 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d92ae:	1d30      	adds	r0, r6, #4
   d92b0:	f7ff fd4b 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d92b4:	3e08      	subs	r6, #8
   d92b6:	3c08      	subs	r4, #8
   d92b8:	e7f2      	b.n	d92a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d92ba:	d00c      	beq.n	d92d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d92bc:	42b5      	cmp	r5, r6
   d92be:	d00a      	beq.n	d92d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d92c0:	b11c      	cbz	r4, d92ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d92c2:	4629      	mov	r1, r5
   d92c4:	4620      	mov	r0, r4
   d92c6:	f7ff fd2c 	bl	d8d22 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d92ca:	1d28      	adds	r0, r5, #4
   d92cc:	f7ff fd3d 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d92d0:	3508      	adds	r5, #8
   d92d2:	3408      	adds	r4, #8
   d92d4:	e7f2      	b.n	d92bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d92d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d92d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d92d8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d92da:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d92dc:	4605      	mov	r5, r0
        if (n > 0) {
   d92de:	dd11      	ble.n	d9304 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d92e0:	00f0      	lsls	r0, r6, #3
   d92e2:	f7fe fe69 	bl	d7fb8 <malloc>
            if (!d) {
   d92e6:	4604      	mov	r4, r0
   d92e8:	b158      	cbz	r0, d9302 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d92ea:	e9d5 1200 	ldrd	r1, r2, [r5]
   d92ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d92f2:	f7ff ffc7 	bl	d9284 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d92f6:	6828      	ldr	r0, [r5, #0]
   d92f8:	f7fe fe66 	bl	d7fc8 <free>
        data_ = d;
   d92fc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d92fe:	60ae      	str	r6, [r5, #8]
        return true;
   d9300:	2001      	movs	r0, #1
    }
   d9302:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d9304:	2400      	movs	r4, #0
   d9306:	e7f6      	b.n	d92f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d9308 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d9308:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d930a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d930c:	6845      	ldr	r5, [r0, #4]
   d930e:	4668      	mov	r0, sp
   d9310:	f7ff fd07 	bl	d8d22 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9314:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d9318:	4299      	cmp	r1, r3
   d931a:	da10      	bge.n	d933e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d931c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d931e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9320:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d9324:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d9328:	4629      	mov	r1, r5
   d932a:	f105 0008 	add.w	r0, r5, #8
   d932e:	f7ff ffa9 	bl	d9284 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d9332:	b98d      	cbnz	r5, d9358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d9334:	6863      	ldr	r3, [r4, #4]
   d9336:	3301      	adds	r3, #1
   d9338:	6063      	str	r3, [r4, #4]
    return true;
   d933a:	2601      	movs	r6, #1
   d933c:	e006      	b.n	d934c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d933e:	3101      	adds	r1, #1
   d9340:	4620      	mov	r0, r4
   d9342:	f7ff ffc9 	bl	d92d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d9346:	4606      	mov	r6, r0
   d9348:	2800      	cmp	r0, #0
   d934a:	d1e7      	bne.n	d931c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d934c:	a801      	add	r0, sp, #4
   d934e:	f7ff fcfc 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9352:	4630      	mov	r0, r6
   d9354:	b002      	add	sp, #8
   d9356:	bd70      	pop	{r4, r5, r6, pc}
   d9358:	4669      	mov	r1, sp
   d935a:	4628      	mov	r0, r5
   d935c:	f7ff fce1 	bl	d8d22 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d9360:	e7e8      	b.n	d9334 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d9362 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d9362:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9366:	4604      	mov	r4, r0
   d9368:	460d      	mov	r5, r1
   d936a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d936c:	d914      	bls.n	d9398 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d936e:	4290      	cmp	r0, r2
   d9370:	d213      	bcs.n	d939a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d9372:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d9376:	1a75      	subs	r5, r6, r1
   d9378:	f1a1 0708 	sub.w	r7, r1, #8
   d937c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d937e:	42b7      	cmp	r7, r6
   d9380:	d018      	beq.n	d93b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d9382:	b11c      	cbz	r4, d938c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d9384:	4631      	mov	r1, r6
   d9386:	4620      	mov	r0, r4
   d9388:	f7ff fcbd 	bl	d8d06 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d938c:	1d30      	adds	r0, r6, #4
   d938e:	f7ff fcdc 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d9392:	3e08      	subs	r6, #8
   d9394:	3c08      	subs	r4, #8
   d9396:	e7f2      	b.n	d937e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d9398:	d00c      	beq.n	d93b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d939a:	42b5      	cmp	r5, r6
   d939c:	d00a      	beq.n	d93b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d939e:	b11c      	cbz	r4, d93a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d93a0:	4629      	mov	r1, r5
   d93a2:	4620      	mov	r0, r4
   d93a4:	f7ff fcaf 	bl	d8d06 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d93a8:	1d28      	adds	r0, r5, #4
   d93aa:	f7ff fcce 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d93ae:	3508      	adds	r5, #8
   d93b0:	3408      	adds	r4, #8
   d93b2:	e7f2      	b.n	d939a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d93b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d93b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d93b6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d93b8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d93ba:	4605      	mov	r5, r0
        if (n > 0) {
   d93bc:	dd11      	ble.n	d93e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d93be:	00f0      	lsls	r0, r6, #3
   d93c0:	f7fe fdfa 	bl	d7fb8 <malloc>
            if (!d) {
   d93c4:	4604      	mov	r4, r0
   d93c6:	b158      	cbz	r0, d93e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d93c8:	e9d5 1200 	ldrd	r1, r2, [r5]
   d93cc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d93d0:	f7ff ffc7 	bl	d9362 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d93d4:	6828      	ldr	r0, [r5, #0]
   d93d6:	f7fe fdf7 	bl	d7fc8 <free>
        data_ = d;
   d93da:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d93dc:	60ae      	str	r6, [r5, #8]
        return true;
   d93de:	2001      	movs	r0, #1
    }
   d93e0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d93e2:	2400      	movs	r4, #0
   d93e4:	e7f6      	b.n	d93d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d93e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d93e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d93e8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d93ea:	6845      	ldr	r5, [r0, #4]
   d93ec:	4668      	mov	r0, sp
   d93ee:	f7ff fc8a 	bl	d8d06 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d93f2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d93f6:	4299      	cmp	r1, r3
   d93f8:	da10      	bge.n	d941c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d93fa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d93fc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d93fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d9402:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d9406:	4629      	mov	r1, r5
   d9408:	f105 0008 	add.w	r0, r5, #8
   d940c:	f7ff ffa9 	bl	d9362 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d9410:	b98d      	cbnz	r5, d9436 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d9412:	6863      	ldr	r3, [r4, #4]
   d9414:	3301      	adds	r3, #1
   d9416:	6063      	str	r3, [r4, #4]
    return true;
   d9418:	2601      	movs	r6, #1
   d941a:	e006      	b.n	d942a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d941c:	3101      	adds	r1, #1
   d941e:	4620      	mov	r0, r4
   d9420:	f7ff ffc9 	bl	d93b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d9424:	4606      	mov	r6, r0
   d9426:	2800      	cmp	r0, #0
   d9428:	d1e7      	bne.n	d93fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d942a:	a801      	add	r0, sp, #4
   d942c:	f7ff fc8d 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9430:	4630      	mov	r0, r6
   d9432:	b002      	add	sp, #8
   d9434:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d9436:	4669      	mov	r1, sp
   d9438:	4628      	mov	r0, r5
   d943a:	f7ff fc64 	bl	d8d06 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d943e:	e7e8      	b.n	d9412 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d9440 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d9440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9444:	4617      	mov	r7, r2
   d9446:	b0a1      	sub	sp, #132	; 0x84
   d9448:	4680      	mov	r8, r0
    WiringBleLock lk;
   d944a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d944c:	460e      	mov	r6, r1
    WiringBleLock lk;
   d944e:	f7ff f93f 	bl	d86d0 <_ZN8particle3ble13WiringBleLockC1Ev>
   d9452:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d9454:	7923      	ldrb	r3, [r4, #4]
   d9456:	b953      	cbnz	r3, d946e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d9458:	4639      	mov	r1, r7
   d945a:	4640      	mov	r0, r8
   d945c:	f7ff fc53 	bl	d8d06 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d9460:	a80a      	add	r0, sp, #40	; 0x28
   d9462:	f7ff f93d 	bl	d86e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d9466:	4640      	mov	r0, r8
   d9468:	b021      	add	sp, #132	; 0x84
   d946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d946e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d9470:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d9474:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d9478:	9303      	str	r3, [sp, #12]
   d947a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d947e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d9482:	9b03      	ldr	r3, [sp, #12]
   d9484:	429d      	cmp	r5, r3
   d9486:	d021      	beq.n	d94cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d9488:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d948c:	4658      	mov	r0, fp
   d948e:	f109 0114 	add.w	r1, r9, #20
   d9492:	f7ff f9d6 	bl	d8842 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d9496:	b1b8      	cbz	r0, d94c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d9498:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d949c:	4650      	mov	r0, sl
   d949e:	f7ff f9d0 	bl	d8842 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d94a2:	b188      	cbz	r0, d94c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d94a4:	6823      	ldr	r3, [r4, #0]
   d94a6:	f8d9 2000 	ldr.w	r2, [r9]
   d94aa:	4053      	eors	r3, r2
   d94ac:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d94b0:	d10a      	bne.n	d94c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d94b2:	2220      	movs	r2, #32
   d94b4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d94b8:	4a5e      	ldr	r2, [pc, #376]	; (d9634 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d94ba:	9200      	str	r2, [sp, #0]
   d94bc:	aa15      	add	r2, sp, #84	; 0x54
   d94be:	495e      	ldr	r1, [pc, #376]	; (d9638 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d94c0:	2032      	movs	r0, #50	; 0x32
   d94c2:	f7fe fcb3 	bl	d7e2c <log_message>
   d94c6:	e7c7      	b.n	d9458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d94c8:	3508      	adds	r5, #8
   d94ca:	e7da      	b.n	d9482 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d94cc:	4650      	mov	r0, sl
   d94ce:	f7ff f983 	bl	d87d8 <_ZNK8particle7BleUuid7isValidEv>
   d94d2:	b960      	cbnz	r0, d94ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d94d4:	4959      	ldr	r1, [pc, #356]	; (d963c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d94d6:	2201      	movs	r2, #1
   d94d8:	a815      	add	r0, sp, #84	; 0x54
   d94da:	ad15      	add	r5, sp, #84	; 0x54
   d94dc:	f7ff f953 	bl	d8786 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d94e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d94e2:	46d4      	mov	ip, sl
   d94e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d94e8:	682b      	ldr	r3, [r5, #0]
   d94ea:	f8cc 3000 	str.w	r3, [ip]
   d94ee:	6833      	ldr	r3, [r6, #0]
   d94f0:	e9d3 5300 	ldrd	r5, r3, [r3]
   d94f4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d94f8:	455d      	cmp	r5, fp
   d94fa:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d94fc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d94fe:	d06e      	beq.n	d95de <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d9500:	f855 0b08 	ldr.w	r0, [r5], #8
   d9504:	f7ff f99d 	bl	d8842 <_ZNK8particle7BleUuideqERKS0_>
   d9508:	2800      	cmp	r0, #0
   d950a:	d0f5      	beq.n	d94f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d950c:	f104 0a14 	add.w	sl, r4, #20
   d9510:	4650      	mov	r0, sl
   d9512:	f7ff f961 	bl	d87d8 <_ZNK8particle7BleUuid7isValidEv>
   d9516:	b988      	cbnz	r0, d953c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d9518:	4b49      	ldr	r3, [pc, #292]	; (d9640 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d951a:	4948      	ldr	r1, [pc, #288]	; (d963c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d951c:	881a      	ldrh	r2, [r3, #0]
   d951e:	3201      	adds	r2, #1
   d9520:	b292      	uxth	r2, r2
   d9522:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d9524:	a815      	add	r0, sp, #84	; 0x54
   d9526:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d9528:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d952a:	f7ff f94b 	bl	d87c4 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d952e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9530:	46d4      	mov	ip, sl
   d9532:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d9536:	682b      	ldr	r3, [r5, #0]
   d9538:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d953c:	2228      	movs	r2, #40	; 0x28
   d953e:	2100      	movs	r1, #0
   d9540:	a816      	add	r0, sp, #88	; 0x58
   d9542:	f001 fe05 	bl	db150 <memset>
    charInit.version = BLE_API_VERSION;
   d9546:	4b3f      	ldr	r3, [pc, #252]	; (d9644 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d9548:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d954a:	4651      	mov	r1, sl
   d954c:	a804      	add	r0, sp, #16
   d954e:	f7ff f955 	bl	d87fc <_ZN8particle7BleUuid7halUUIDEv>
   d9552:	ab04      	add	r3, sp, #16
   d9554:	aa18      	add	r2, sp, #96	; 0x60
   d9556:	f10d 0c20 	add.w	ip, sp, #32
   d955a:	6818      	ldr	r0, [r3, #0]
   d955c:	6859      	ldr	r1, [r3, #4]
   d955e:	4615      	mov	r5, r2
   d9560:	c503      	stmia	r5!, {r0, r1}
   d9562:	3308      	adds	r3, #8
   d9564:	4563      	cmp	r3, ip
   d9566:	462a      	mov	r2, r5
   d9568:	d1f7      	bne.n	d955a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d956a:	6818      	ldr	r0, [r3, #0]
   d956c:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d956e:	7923      	ldrb	r3, [r4, #4]
   d9570:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d9574:	f8d9 3000 	ldr.w	r3, [r9]
   d9578:	8a9b      	ldrh	r3, [r3, #20]
   d957a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d957e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9580:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d9582:	4b31      	ldr	r3, [pc, #196]	; (d9648 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d9584:	2200      	movs	r2, #0
   d9586:	1da1      	adds	r1, r4, #6
   d9588:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d958a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d958e:	f7fe fab5 	bl	d7afc <hal_ble_gatt_server_add_characteristic>
   d9592:	2800      	cmp	r0, #0
   d9594:	f47f af60 	bne.w	d9458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d9598:	2301      	movs	r3, #1
   d959a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d959c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d959e:	4639      	mov	r1, r7
        return characteristics_;
   d95a0:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d95a2:	a80d      	add	r0, sp, #52	; 0x34
   d95a4:	f7ff fbaf 	bl	d8d06 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d95a8:	4620      	mov	r0, r4
   d95aa:	a90d      	add	r1, sp, #52	; 0x34
   d95ac:	f7ff ff1b 	bl	d93e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d95b0:	4604      	mov	r4, r0
   d95b2:	a80e      	add	r0, sp, #56	; 0x38
   d95b4:	f7ff fbc9 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d95b8:	2c00      	cmp	r4, #0
   d95ba:	f47f af4d 	bne.w	d9458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d95be:	2320      	movs	r3, #32
   d95c0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d95c4:	4b21      	ldr	r3, [pc, #132]	; (d964c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d95c6:	9300      	str	r3, [sp, #0]
   d95c8:	aa0d      	add	r2, sp, #52	; 0x34
   d95ca:	4623      	mov	r3, r4
   d95cc:	e777      	b.n	d94be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d95ce:	4639      	mov	r1, r7
   d95d0:	4640      	mov	r0, r8
   d95d2:	f7ff fb98 	bl	d8d06 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d95d6:	a80c      	add	r0, sp, #48	; 0x30
   d95d8:	f7ff fbb7 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d95dc:	e740      	b.n	d9460 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d95de:	a80b      	add	r0, sp, #44	; 0x2c
   d95e0:	f7ff fa48 	bl	d8a74 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d95e4:	4651      	mov	r1, sl
   d95e6:	a815      	add	r0, sp, #84	; 0x54
   d95e8:	f7ff f908 	bl	d87fc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d95ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d95ee:	2300      	movs	r3, #0
   d95f0:	3214      	adds	r2, #20
   d95f2:	a915      	add	r1, sp, #84	; 0x54
   d95f4:	2001      	movs	r0, #1
   d95f6:	f7fe fa77 	bl	d7ae8 <hal_ble_gatt_server_add_service>
   d95fa:	2800      	cmp	r0, #0
   d95fc:	d1e7      	bne.n	d95ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d95fe:	6835      	ldr	r5, [r6, #0]
   d9600:	a90b      	add	r1, sp, #44	; 0x2c
   d9602:	a80d      	add	r0, sp, #52	; 0x34
   d9604:	f7ff fb8d 	bl	d8d22 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d9608:	4628      	mov	r0, r5
   d960a:	a90d      	add	r1, sp, #52	; 0x34
   d960c:	f7ff fe7c 	bl	d9308 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d9610:	4605      	mov	r5, r0
   d9612:	a80e      	add	r0, sp, #56	; 0x38
   d9614:	f7ff fb99 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9618:	2d00      	cmp	r5, #0
   d961a:	d0d8      	beq.n	d95ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d961c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d961e:	6853      	ldr	r3, [r2, #4]
   d9620:	6812      	ldr	r2, [r2, #0]
   d9622:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d9626:	3b01      	subs	r3, #1
   d9628:	a80c      	add	r0, sp, #48	; 0x30
   d962a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d962e:	f7ff fb8c 	bl	d8d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9632:	e76b      	b.n	d950c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d9634:	000dbe61 	.word	0x000dbe61
   d9638:	000dbdc0 	.word	0x000dbdc0
   d963c:	000dbf20 	.word	0x000dbf20
   d9640:	2003e618 	.word	0x2003e618
   d9644:	002c0001 	.word	0x002c0001
   d9648:	000d8c05 	.word	0x000d8c05
   d964c:	000dbe8c 	.word	0x000dbe8c

000d9650 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d9650:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d9652:	4c06      	ldr	r4, [pc, #24]	; (d966c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d9654:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d9656:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d9658:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d965a:	f7fe fa63 	bl	d7b24 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d965e:	4620      	mov	r0, r4
   d9660:	4a03      	ldr	r2, [pc, #12]	; (d9670 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d9662:	4904      	ldr	r1, [pc, #16]	; (d9674 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d9664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d9668:	f000 bf58 	b.w	da51c <__aeabi_atexit>
   d966c:	2003e61c 	.word	0x2003e61c
   d9670:	2003de48 	.word	0x2003de48
   d9674:	000d851f 	.word	0x000d851f

000d9678 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d967a:	4606      	mov	r6, r0
   d967c:	460d      	mov	r5, r1
  size_t n = 0;
   d967e:	188f      	adds	r7, r1, r2
   d9680:	2400      	movs	r4, #0
  while (size--) {
   d9682:	42bd      	cmp	r5, r7
   d9684:	d00c      	beq.n	d96a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9686:	6833      	ldr	r3, [r6, #0]
   d9688:	f815 1b01 	ldrb.w	r1, [r5], #1
   d968c:	689b      	ldr	r3, [r3, #8]
   d968e:	4630      	mov	r0, r6
   d9690:	4798      	blx	r3
     if (chunk>=0)
   d9692:	1e03      	subs	r3, r0, #0
   d9694:	db01      	blt.n	d969a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9696:	441c      	add	r4, r3
  while (size--) {
   d9698:	e7f3      	b.n	d9682 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d969a:	2c00      	cmp	r4, #0
   d969c:	bf08      	it	eq
   d969e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d96a0:	4620      	mov	r0, r4
   d96a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d96a4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d96a4:	b508      	push	{r3, lr}
  return write(str);
   d96a6:	f7fc feb9 	bl	d641c <_ZN5Print5writeEPKc>
}
   d96aa:	bd08      	pop	{r3, pc}

000d96ac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d96ac:	6803      	ldr	r3, [r0, #0]
   d96ae:	689b      	ldr	r3, [r3, #8]
   d96b0:	4718      	bx	r3

000d96b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d96b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d96b4:	210d      	movs	r1, #13
{
   d96b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d96b8:	f7ff fff8 	bl	d96ac <_ZN5Print5printEc>
  n += print('\n');
   d96bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d96be:	4604      	mov	r4, r0
  n += print('\n');
   d96c0:	4628      	mov	r0, r5
   d96c2:	f7ff fff3 	bl	d96ac <_ZN5Print5printEc>
  return n;
}
   d96c6:	4420      	add	r0, r4
   d96c8:	bd38      	pop	{r3, r4, r5, pc}

000d96ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d96ca:	b538      	push	{r3, r4, r5, lr}
   d96cc:	4605      	mov	r5, r0
  return write(str);
   d96ce:	f7fc fea5 	bl	d641c <_ZN5Print5writeEPKc>
   d96d2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d96d4:	4628      	mov	r0, r5
   d96d6:	f7ff ffec 	bl	d96b2 <_ZN5Print7printlnEv>
  return n;
}
   d96da:	4420      	add	r0, r4
   d96dc:	bd38      	pop	{r3, r4, r5, pc}

000d96de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d96de:	b530      	push	{r4, r5, lr}
   d96e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d96e2:	2300      	movs	r3, #0
   d96e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d96e8:	2a01      	cmp	r2, #1
   d96ea:	bf98      	it	ls
   d96ec:	220a      	movls	r2, #10
   d96ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d96f0:	460d      	mov	r5, r1
   d96f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d96f6:	fb01 5312 	mls	r3, r1, r2, r5
   d96fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d96fe:	2b09      	cmp	r3, #9
   d9700:	bf94      	ite	ls
   d9702:	3330      	addls	r3, #48	; 0x30
   d9704:	3337      	addhi	r3, #55	; 0x37
   d9706:	b2db      	uxtb	r3, r3
  } while(n);
   d9708:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d970a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d970e:	d9ef      	bls.n	d96f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9710:	4621      	mov	r1, r4
   d9712:	f7fc fe83 	bl	d641c <_ZN5Print5writeEPKc>
}
   d9716:	b00b      	add	sp, #44	; 0x2c
   d9718:	bd30      	pop	{r4, r5, pc}
	...

000d971c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d971c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9720:	ec55 4b10 	vmov	r4, r5, d0
   d9724:	4606      	mov	r6, r0
   d9726:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d9728:	ee10 2a10 	vmov	r2, s0
   d972c:	ee10 0a10 	vmov	r0, s0
   d9730:	462b      	mov	r3, r5
   d9732:	4629      	mov	r1, r5
   d9734:	f001 fc66 	bl	db004 <__aeabi_dcmpun>
   d9738:	b140      	cbz	r0, d974c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d973a:	4953      	ldr	r1, [pc, #332]	; (d9888 <_ZN5Print10printFloatEdh+0x16c>)
   d973c:	4630      	mov	r0, r6
   d973e:	f7fc fe6d 	bl	d641c <_ZN5Print5writeEPKc>
   d9742:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d9744:	4650      	mov	r0, sl
   d9746:	b003      	add	sp, #12
   d9748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d974c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d9750:	4b4e      	ldr	r3, [pc, #312]	; (d988c <_ZN5Print10printFloatEdh+0x170>)
   d9752:	f04f 32ff 	mov.w	r2, #4294967295
   d9756:	4620      	mov	r0, r4
   d9758:	4649      	mov	r1, r9
   d975a:	f001 fc53 	bl	db004 <__aeabi_dcmpun>
   d975e:	b948      	cbnz	r0, d9774 <_ZN5Print10printFloatEdh+0x58>
   d9760:	4b4a      	ldr	r3, [pc, #296]	; (d988c <_ZN5Print10printFloatEdh+0x170>)
   d9762:	f04f 32ff 	mov.w	r2, #4294967295
   d9766:	4620      	mov	r0, r4
   d9768:	4649      	mov	r1, r9
   d976a:	f001 fc2d 	bl	dafc8 <__aeabi_dcmple>
   d976e:	b908      	cbnz	r0, d9774 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d9770:	4947      	ldr	r1, [pc, #284]	; (d9890 <_ZN5Print10printFloatEdh+0x174>)
   d9772:	e7e3      	b.n	d973c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d9774:	4b47      	ldr	r3, [pc, #284]	; (d9894 <_ZN5Print10printFloatEdh+0x178>)
   d9776:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d977a:	4620      	mov	r0, r4
   d977c:	4629      	mov	r1, r5
   d977e:	f001 fc37 	bl	daff0 <__aeabi_dcmpgt>
   d9782:	b108      	cbz	r0, d9788 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d9784:	4944      	ldr	r1, [pc, #272]	; (d9898 <_ZN5Print10printFloatEdh+0x17c>)
   d9786:	e7d9      	b.n	d973c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d9788:	4b44      	ldr	r3, [pc, #272]	; (d989c <_ZN5Print10printFloatEdh+0x180>)
   d978a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d978e:	4620      	mov	r0, r4
   d9790:	4629      	mov	r1, r5
   d9792:	f001 fc0f 	bl	dafb4 <__aeabi_dcmplt>
   d9796:	2800      	cmp	r0, #0
   d9798:	d1f4      	bne.n	d9784 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d979a:	2200      	movs	r2, #0
   d979c:	2300      	movs	r3, #0
   d979e:	4620      	mov	r0, r4
   d97a0:	4629      	mov	r1, r5
   d97a2:	f001 fc07 	bl	dafb4 <__aeabi_dcmplt>
   d97a6:	b1d0      	cbz	r0, d97de <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d97a8:	212d      	movs	r1, #45	; 0x2d
   d97aa:	4630      	mov	r0, r6
   d97ac:	f7ff ff7e 	bl	d96ac <_ZN5Print5printEc>
     number = -number;
   d97b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d97b4:	4682      	mov	sl, r0
     number = -number;
   d97b6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d97b8:	4939      	ldr	r1, [pc, #228]	; (d98a0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d97ba:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d98a8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d97be:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d97c2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d97c4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d97c8:	fa5f f38b 	uxtb.w	r3, fp
   d97cc:	429f      	cmp	r7, r3
   d97ce:	d908      	bls.n	d97e2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d97d0:	4642      	mov	r2, r8
   d97d2:	464b      	mov	r3, r9
   d97d4:	f001 faa6 	bl	dad24 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d97d8:	f10b 0b01 	add.w	fp, fp, #1
   d97dc:	e7f4      	b.n	d97c8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d97de:	4682      	mov	sl, r0
   d97e0:	e7ea      	b.n	d97b8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d97e2:	4622      	mov	r2, r4
   d97e4:	462b      	mov	r3, r5
   d97e6:	f000 ffbd 	bl	da764 <__adddf3>
   d97ea:	460d      	mov	r5, r1
   d97ec:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d97ee:	f001 fc47 	bl	db080 <__aeabi_d2uiz>
   d97f2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d97f4:	f001 f8f2 	bl	da9dc <__aeabi_ui2d>
   d97f8:	4602      	mov	r2, r0
   d97fa:	460b      	mov	r3, r1
   d97fc:	4620      	mov	r0, r4
   d97fe:	4629      	mov	r1, r5
   d9800:	f000 ffae 	bl	da760 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d9804:	220a      	movs	r2, #10
   d9806:	4604      	mov	r4, r0
   d9808:	460d      	mov	r5, r1
   d980a:	4630      	mov	r0, r6
   d980c:	4641      	mov	r1, r8
   d980e:	f7ff ff66 	bl	d96de <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d9812:	4482      	add	sl, r0
  if (digits > 0) {
   d9814:	b127      	cbz	r7, d9820 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d9816:	4923      	ldr	r1, [pc, #140]	; (d98a4 <_ZN5Print10printFloatEdh+0x188>)
   d9818:	4630      	mov	r0, r6
   d981a:	f7fc fdff 	bl	d641c <_ZN5Print5writeEPKc>
    n += print(".");
   d981e:	4482      	add	sl, r0
    remainder *= 10.0;
   d9820:	f8df 9084 	ldr.w	r9, [pc, #132]	; d98a8 <_ZN5Print10printFloatEdh+0x18c>
   d9824:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d9828:	3f01      	subs	r7, #1
   d982a:	b2ff      	uxtb	r7, r7
   d982c:	2fff      	cmp	r7, #255	; 0xff
   d982e:	d089      	beq.n	d9744 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d9830:	4642      	mov	r2, r8
   d9832:	464b      	mov	r3, r9
   d9834:	4620      	mov	r0, r4
   d9836:	4629      	mov	r1, r5
   d9838:	f001 f94a 	bl	daad0 <__aeabi_dmul>
   d983c:	4604      	mov	r4, r0
   d983e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d9840:	f001 fbf6 	bl	db030 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d9844:	f1b0 0b00 	subs.w	fp, r0, #0
   d9848:	da1a      	bge.n	d9880 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d984a:	212d      	movs	r1, #45	; 0x2d
   d984c:	4630      	mov	r0, r6
   d984e:	f7ff ff2d 	bl	d96ac <_ZN5Print5printEc>
            val = -n;
   d9852:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d9856:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d9858:	220a      	movs	r2, #10
   d985a:	4630      	mov	r0, r6
   d985c:	9301      	str	r3, [sp, #4]
   d985e:	f7ff ff3e 	bl	d96de <_ZN5Print11printNumberEmh>
   d9862:	9b01      	ldr	r3, [sp, #4]
   d9864:	4418      	add	r0, r3
    n += print(toPrint);
   d9866:	4482      	add	sl, r0
    remainder -= toPrint;
   d9868:	4658      	mov	r0, fp
   d986a:	f001 f8c7 	bl	da9fc <__aeabi_i2d>
   d986e:	4602      	mov	r2, r0
   d9870:	460b      	mov	r3, r1
   d9872:	4620      	mov	r0, r4
   d9874:	4629      	mov	r1, r5
   d9876:	f000 ff73 	bl	da760 <__aeabi_dsub>
   d987a:	4604      	mov	r4, r0
   d987c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d987e:	e7d3      	b.n	d9828 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d9880:	4659      	mov	r1, fp
        size_t t = 0;
   d9882:	2300      	movs	r3, #0
   d9884:	e7e8      	b.n	d9858 <_ZN5Print10printFloatEdh+0x13c>
   d9886:	bf00      	nop
   d9888:	000dbf40 	.word	0x000dbf40
   d988c:	7fefffff 	.word	0x7fefffff
   d9890:	000dbf44 	.word	0x000dbf44
   d9894:	41efffff 	.word	0x41efffff
   d9898:	000dbf48 	.word	0x000dbf48
   d989c:	c1efffff 	.word	0xc1efffff
   d98a0:	3fe00000 	.word	0x3fe00000
   d98a4:	000dbeb1 	.word	0x000dbeb1
   d98a8:	40240000 	.word	0x40240000

000d98ac <_ZN5Print5printEfi>:
{
   d98ac:	b538      	push	{r3, r4, r5, lr}
   d98ae:	4604      	mov	r4, r0
   d98b0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d98b4:	b2cd      	uxtb	r5, r1
   d98b6:	f001 f8b3 	bl	daa20 <__aeabi_f2d>
   d98ba:	ec41 0b10 	vmov	d0, r0, r1
   d98be:	4629      	mov	r1, r5
   d98c0:	4620      	mov	r0, r4
}
   d98c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d98c6:	f7ff bf29 	b.w	d971c <_ZN5Print10printFloatEdh>

000d98ca <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d98ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d98ce:	b086      	sub	sp, #24
   d98d0:	af00      	add	r7, sp, #0
   d98d2:	4605      	mov	r5, r0
   d98d4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d98d6:	1d38      	adds	r0, r7, #4
   d98d8:	2114      	movs	r1, #20
{
   d98da:	4614      	mov	r4, r2
    va_copy(args2, args);
   d98dc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d98de:	f7fe fb83 	bl	d7fe8 <vsnprintf>

    if (n<bufsize)
   d98e2:	2813      	cmp	r0, #19
   d98e4:	d80e      	bhi.n	d9904 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d98e6:	1d39      	adds	r1, r7, #4
   d98e8:	4628      	mov	r0, r5
   d98ea:	f7fc fd97 	bl	d641c <_ZN5Print5writeEPKc>
   d98ee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d98f0:	b11e      	cbz	r6, d98fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d98f2:	4628      	mov	r0, r5
   d98f4:	f7ff fedd 	bl	d96b2 <_ZN5Print7printlnEv>
   d98f8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d98fa:	4620      	mov	r0, r4
   d98fc:	3718      	adds	r7, #24
   d98fe:	46bd      	mov	sp, r7
   d9900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d9904:	f100 0308 	add.w	r3, r0, #8
   d9908:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d990c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d990e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d9912:	4622      	mov	r2, r4
   d9914:	1c41      	adds	r1, r0, #1
   d9916:	683b      	ldr	r3, [r7, #0]
   d9918:	4668      	mov	r0, sp
   d991a:	f7fe fb65 	bl	d7fe8 <vsnprintf>
  return write(str);
   d991e:	4669      	mov	r1, sp
   d9920:	4628      	mov	r0, r5
   d9922:	f7fc fd7b 	bl	d641c <_ZN5Print5writeEPKc>
   d9926:	4604      	mov	r4, r0
   d9928:	46c5      	mov	sp, r8
   d992a:	e7e1      	b.n	d98f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d992c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d992c:	4b01      	ldr	r3, [pc, #4]	; (d9934 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d992e:	4a02      	ldr	r2, [pc, #8]	; (d9938 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9930:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d9932:	4770      	bx	lr
   d9934:	2003e624 	.word	0x2003e624
   d9938:	000dbf4c 	.word	0x000dbf4c

000d993c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d993c:	4b02      	ldr	r3, [pc, #8]	; (d9948 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d993e:	681a      	ldr	r2, [r3, #0]
   d9940:	4b02      	ldr	r3, [pc, #8]	; (d994c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9942:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9944:	4770      	bx	lr
   d9946:	bf00      	nop
   d9948:	2003dde0 	.word	0x2003dde0
   d994c:	2003e628 	.word	0x2003e628

000d9950 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d9950:	2100      	movs	r1, #0
   d9952:	f7fe ba85 	b.w	d7e60 <system_delay_ms>

000d9956 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9956:	b510      	push	{r4, lr}
   d9958:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d995a:	f7fe fe90 	bl	d867e <_ZNSt14_Function_baseD1Ev>
   d995e:	4620      	mov	r0, r4
   d9960:	bd10      	pop	{r4, pc}
	...

000d9964 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9964:	4803      	ldr	r0, [pc, #12]	; (d9974 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9966:	4a04      	ldr	r2, [pc, #16]	; (d9978 <_GLOBAL__sub_I_RGB+0x14>)
   d9968:	4904      	ldr	r1, [pc, #16]	; (d997c <_GLOBAL__sub_I_RGB+0x18>)
   d996a:	2300      	movs	r3, #0
   d996c:	6083      	str	r3, [r0, #8]
   d996e:	f000 bdd5 	b.w	da51c <__aeabi_atexit>
   d9972:	bf00      	nop
   d9974:	2003e62c 	.word	0x2003e62c
   d9978:	2003de48 	.word	0x2003de48
   d997c:	000d9957 	.word	0x000d9957

000d9980 <_ZN14CellularSignalD1Ev>:
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d9980:	4770      	bx	lr

000d9982 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d9982:	7b00      	ldrb	r0, [r0, #12]
   d9984:	4770      	bx	lr

000d9986 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d9986:	7b03      	ldrb	r3, [r0, #12]
   d9988:	b14b      	cbz	r3, d999e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d998a:	6903      	ldr	r3, [r0, #16]
   d998c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d9990:	d005      	beq.n	d999e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d9992:	6980      	ldr	r0, [r0, #24]
   d9994:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d9998:	bf18      	it	ne
   d999a:	2001      	movne	r0, #1
   d999c:	4770      	bx	lr
   d999e:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d99a0:	4770      	bx	lr

000d99a2 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d99a2:	6803      	ldr	r3, [r0, #0]
   d99a4:	6a1b      	ldr	r3, [r3, #32]
   d99a6:	4718      	bx	r3

000d99a8 <_ZNK14CellularSignal7printToER5Print>:
{
   d99a8:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   d99aa:	6803      	ldr	r3, [r0, #0]
{
   d99ac:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   d99ae:	691b      	ldr	r3, [r3, #16]
{
   d99b0:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   d99b2:	4798      	blx	r3
   d99b4:	2102      	movs	r1, #2
   d99b6:	4628      	mov	r0, r5
   d99b8:	f7ff ff78 	bl	d98ac <_ZN5Print5printEfi>
    n += p.print(',');
   d99bc:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   d99be:	4604      	mov	r4, r0
    n += p.print(',');
   d99c0:	4628      	mov	r0, r5
   d99c2:	f7ff fe73 	bl	d96ac <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   d99c6:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   d99c8:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   d99ca:	699b      	ldr	r3, [r3, #24]
   d99cc:	4630      	mov	r0, r6
   d99ce:	4798      	blx	r3
   d99d0:	2102      	movs	r1, #2
   d99d2:	4628      	mov	r0, r5
   d99d4:	f7ff ff6a 	bl	d98ac <_ZN5Print5printEfi>
}
   d99d8:	4420      	add	r0, r4
   d99da:	bd70      	pop	{r4, r5, r6, pc}

000d99dc <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d99dc:	f1a0 0004 	sub.w	r0, r0, #4
   d99e0:	f7ff bfe2 	b.w	d99a8 <_ZNK14CellularSignal7printToER5Print>

000d99e4 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   d99e4:	b510      	push	{r4, lr}
   d99e6:	2120      	movs	r1, #32
   d99e8:	4604      	mov	r4, r0
   d99ea:	f000 fd9c 	bl	da526 <_ZdlPvj>
   d99ee:	4620      	mov	r0, r4
   d99f0:	bd10      	pop	{r4, pc}
	...

000d99f4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d99f4:	7b03      	ldrb	r3, [r0, #12]
   d99f6:	b17b      	cbz	r3, d9a18 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d99f8:	6943      	ldr	r3, [r0, #20]
   d99fa:	2b00      	cmp	r3, #0
   d99fc:	db0c      	blt.n	d9a18 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d99fe:	ee07 3a90 	vmov	s15, r3
   d9a02:	ed9f 7a07 	vldr	s14, [pc, #28]	; d9a20 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d9a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9a0a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d9a0e:	eddf 7a05 	vldr	s15, [pc, #20]	; d9a24 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d9a12:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9a16:	4770      	bx	lr
    return -1.0f;
   d9a18:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d9a1c:	4770      	bx	lr
   d9a1e:	bf00      	nop
   d9a20:	477fff00 	.word	0x477fff00
   d9a24:	42c80000 	.word	0x42c80000

000d9a28 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d9a28:	7b03      	ldrb	r3, [r0, #12]
   d9a2a:	b163      	cbz	r3, d9a46 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d9a2c:	6903      	ldr	r3, [r0, #16]
   d9a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d9a32:	d008      	beq.n	d9a46 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d9a34:	ee07 3a90 	vmov	s15, r3
   d9a38:	ed9f 7a04 	vldr	s14, [pc, #16]	; d9a4c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d9a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9a40:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d9a44:	4770      	bx	lr
    return 0.0f;
   d9a46:	ed9f 0a02 	vldr	s0, [pc, #8]	; d9a50 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d9a4a:	4770      	bx	lr
   d9a4c:	42c80000 	.word	0x42c80000
   d9a50:	00000000 	.word	0x00000000

000d9a54 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d9a54:	7b03      	ldrb	r3, [r0, #12]
   d9a56:	b17b      	cbz	r3, d9a78 <_ZNK14CellularSignal10getQualityEv+0x24>
   d9a58:	69c3      	ldr	r3, [r0, #28]
   d9a5a:	2b00      	cmp	r3, #0
   d9a5c:	db0c      	blt.n	d9a78 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d9a5e:	ee07 3a90 	vmov	s15, r3
   d9a62:	ed9f 7a07 	vldr	s14, [pc, #28]	; d9a80 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d9a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9a6a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d9a6e:	eddf 7a05 	vldr	s15, [pc, #20]	; d9a84 <_ZNK14CellularSignal10getQualityEv+0x30>
   d9a72:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9a76:	4770      	bx	lr
    return -1.0f;
   d9a78:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d9a7c:	4770      	bx	lr
   d9a7e:	bf00      	nop
   d9a80:	477fff00 	.word	0x477fff00
   d9a84:	42c80000 	.word	0x42c80000

000d9a88 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d9a88:	7b03      	ldrb	r3, [r0, #12]
   d9a8a:	b163      	cbz	r3, d9aa6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d9a8c:	6983      	ldr	r3, [r0, #24]
   d9a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d9a92:	d008      	beq.n	d9aa6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d9a94:	ee07 3a90 	vmov	s15, r3
   d9a98:	ed9f 7a04 	vldr	s14, [pc, #16]	; d9aac <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d9a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9aa0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d9aa4:	4770      	bx	lr
    return 0.0f;
   d9aa6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d9ab0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d9aaa:	4770      	bx	lr
   d9aac:	42c80000 	.word	0x42c80000
   d9ab0:	00000000 	.word	0x00000000

000d9ab4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d9ab4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d9ab6:	460d      	mov	r5, r1
   d9ab8:	f100 0408 	add.w	r4, r0, #8
   d9abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9ac0:	e895 0003 	ldmia.w	r5, {r0, r1}
   d9ac4:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d9ac8:	2001      	movs	r0, #1
   d9aca:	bd30      	pop	{r4, r5, pc}

000d9acc <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d9acc:	6800      	ldr	r0, [r0, #0]
   d9ace:	f000 bb4b 	b.w	da168 <_ZN7TwoWire4lockEv>

000d9ad2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d9ad2:	b510      	push	{r4, lr}
   d9ad4:	4604      	mov	r4, r0
      lock_(_lock) {
   d9ad6:	6001      	str	r1, [r0, #0]
   d9ad8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d9ada:	b10a      	cbz	r2, d9ae0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d9adc:	f7ff fff6 	bl	d9acc <_ZN9FuelGauge4lockEv>
}
   d9ae0:	4620      	mov	r0, r4
   d9ae2:	bd10      	pop	{r4, pc}

000d9ae4 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d9ae4:	b513      	push	{r0, r1, r4, lr}
   d9ae6:	4604      	mov	r4, r0
   d9ae8:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d9aea:	f000 fcef 	bl	da4cc <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d9aee:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d9af0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d9af2:	4620      	mov	r0, r4
   d9af4:	f7ff ffed 	bl	d9ad2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d9af8:	4620      	mov	r0, r4
   d9afa:	b002      	add	sp, #8
   d9afc:	bd10      	pop	{r4, pc}

000d9afe <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d9afe:	6800      	ldr	r0, [r0, #0]
   d9b00:	f000 bb3b 	b.w	da17a <_ZN7TwoWire6unlockEv>

000d9b04 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d9b04:	b510      	push	{r4, lr}
    if (lock_) {
   d9b06:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d9b08:	4604      	mov	r4, r0
    if (lock_) {
   d9b0a:	b10b      	cbz	r3, d9b10 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d9b0c:	f7ff fff7 	bl	d9afe <_ZN9FuelGauge6unlockEv>
}
   d9b10:	4620      	mov	r0, r4
   d9b12:	bd10      	pop	{r4, pc}

000d9b14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9b14:	4b01      	ldr	r3, [pc, #4]	; (d9b1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9b16:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9b18:	4770      	bx	lr
   d9b1a:	bf00      	nop
   d9b1c:	2003dde4 	.word	0x2003dde4

000d9b20 <serialEventRun>:
{
   d9b20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9b22:	4b0b      	ldr	r3, [pc, #44]	; (d9b50 <serialEventRun+0x30>)
   d9b24:	b143      	cbz	r3, d9b38 <serialEventRun+0x18>
   d9b26:	f000 f983 	bl	d9e30 <_Z16_fetch_usbserialv>
   d9b2a:	6803      	ldr	r3, [r0, #0]
   d9b2c:	691b      	ldr	r3, [r3, #16]
   d9b2e:	4798      	blx	r3
   d9b30:	2800      	cmp	r0, #0
   d9b32:	dd01      	ble.n	d9b38 <serialEventRun+0x18>
        serialEvent();
   d9b34:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9b38:	4b06      	ldr	r3, [pc, #24]	; (d9b54 <serialEventRun+0x34>)
   d9b3a:	b143      	cbz	r3, d9b4e <serialEventRun+0x2e>
   d9b3c:	f000 fa6c 	bl	da018 <_Z22__fetch_global_Serial1v>
   d9b40:	6803      	ldr	r3, [r0, #0]
   d9b42:	691b      	ldr	r3, [r3, #16]
   d9b44:	4798      	blx	r3
   d9b46:	2800      	cmp	r0, #0
   d9b48:	dd01      	ble.n	d9b4e <serialEventRun+0x2e>
        serialEvent1();
   d9b4a:	f3af 8000 	nop.w
}
   d9b4e:	bd08      	pop	{r3, pc}
	...

000d9b58 <_post_loop>:
{
   d9b58:	b508      	push	{r3, lr}
	serialEventRun();
   d9b5a:	f7ff ffe1 	bl	d9b20 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9b5e:	f7fd ff79 	bl	d7a54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9b62:	4b01      	ldr	r3, [pc, #4]	; (d9b68 <_post_loop+0x10>)
   d9b64:	6018      	str	r0, [r3, #0]
}
   d9b66:	bd08      	pop	{r3, pc}
   d9b68:	2003e7b4 	.word	0x2003e7b4

000d9b6c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9b6c:	4802      	ldr	r0, [pc, #8]	; (d9b78 <_Z33system_initialize_user_backup_ramv+0xc>)
   d9b6e:	4a03      	ldr	r2, [pc, #12]	; (d9b7c <_Z33system_initialize_user_backup_ramv+0x10>)
   d9b70:	4903      	ldr	r1, [pc, #12]	; (d9b80 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9b72:	1a12      	subs	r2, r2, r0
   d9b74:	f001 bac4 	b.w	db100 <memcpy>
   d9b78:	2003f400 	.word	0x2003f400
   d9b7c:	2003f404 	.word	0x2003f404
   d9b80:	000dc2e0 	.word	0x000dc2e0

000d9b84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9b84:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9b86:	2300      	movs	r3, #0
   d9b88:	9300      	str	r3, [sp, #0]
   d9b8a:	461a      	mov	r2, r3
   d9b8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9b90:	f7fe f980 	bl	d7e94 <system_ctrl_set_result>
}
   d9b94:	b003      	add	sp, #12
   d9b96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9b9c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d9b9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9b9e:	8843      	ldrh	r3, [r0, #2]
   d9ba0:	2b0a      	cmp	r3, #10
   d9ba2:	d008      	beq.n	d9bb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9ba4:	2b50      	cmp	r3, #80	; 0x50
   d9ba6:	d10b      	bne.n	d9bc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9ba8:	4b09      	ldr	r3, [pc, #36]	; (d9bd0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9baa:	681b      	ldr	r3, [r3, #0]
   d9bac:	b14b      	cbz	r3, d9bc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d9bae:	b003      	add	sp, #12
   d9bb0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9bb4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9bb6:	f7ff ffe5 	bl	d9b84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9bba:	b003      	add	sp, #12
   d9bbc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9bc0:	2300      	movs	r3, #0
   d9bc2:	9300      	str	r3, [sp, #0]
   d9bc4:	461a      	mov	r2, r3
   d9bc6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9bca:	f7fe f963 	bl	d7e94 <system_ctrl_set_result>
}
   d9bce:	e7f4      	b.n	d9bba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9bd0:	2003e640 	.word	0x2003e640

000d9bd4 <module_user_init_hook>:
{
   d9bd4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9bd6:	4c12      	ldr	r4, [pc, #72]	; (d9c20 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9bd8:	4812      	ldr	r0, [pc, #72]	; (d9c24 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9bda:	4d13      	ldr	r5, [pc, #76]	; (d9c28 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9bdc:	2100      	movs	r1, #0
   d9bde:	f7fe fa13 	bl	d8008 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9be2:	6823      	ldr	r3, [r4, #0]
   d9be4:	42ab      	cmp	r3, r5
   d9be6:	4b11      	ldr	r3, [pc, #68]	; (d9c2c <module_user_init_hook+0x58>)
   d9be8:	bf0c      	ite	eq
   d9bea:	2201      	moveq	r2, #1
   d9bec:	2200      	movne	r2, #0
   d9bee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9bf0:	d002      	beq.n	d9bf8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d9bf2:	f7ff ffbb 	bl	d9b6c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9bf6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9bf8:	f7fd ff14 	bl	d7a24 <HAL_RNG_GetRandomNumber>
   d9bfc:	4604      	mov	r4, r0
    srand(seed);
   d9bfe:	f001 faaf 	bl	db160 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9c02:	4b0b      	ldr	r3, [pc, #44]	; (d9c30 <module_user_init_hook+0x5c>)
   d9c04:	b113      	cbz	r3, d9c0c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d9c06:	4620      	mov	r0, r4
   d9c08:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9c0c:	2100      	movs	r1, #0
   d9c0e:	4808      	ldr	r0, [pc, #32]	; (d9c30 <module_user_init_hook+0x5c>)
   d9c10:	f7fe f9ca 	bl	d7fa8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9c18:	4806      	ldr	r0, [pc, #24]	; (d9c34 <module_user_init_hook+0x60>)
   d9c1a:	2100      	movs	r1, #0
   d9c1c:	f7fe b930 	b.w	d7e80 <system_ctrl_set_app_request_handler>
   d9c20:	2003f400 	.word	0x2003f400
   d9c24:	000d9b15 	.word	0x000d9b15
   d9c28:	9a271c1e 	.word	0x9a271c1e
   d9c2c:	2003e63c 	.word	0x2003e63c
   d9c30:	00000000 	.word	0x00000000
   d9c34:	000d9b9d 	.word	0x000d9b9d

000d9c38 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d9c38:	b510      	push	{r4, lr}
   d9c3a:	b088      	sub	sp, #32
   d9c3c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d9c3e:	4668      	mov	r0, sp
   d9c40:	f7fe fb53 	bl	d82ea <_ZN6StringC1EPKc>
    return (*fn)(p);
   d9c44:	4669      	mov	r1, sp
   d9c46:	a804      	add	r0, sp, #16
   d9c48:	f7fe fb8f 	bl	d836a <_ZN6StringC1ERKS_>
   d9c4c:	a804      	add	r0, sp, #16
   d9c4e:	47a0      	blx	r4
   d9c50:	4604      	mov	r4, r0
   d9c52:	a804      	add	r0, sp, #16
   d9c54:	f7fe fafe 	bl	d8254 <_ZN6StringD1Ev>
    String p(param);
   d9c58:	4668      	mov	r0, sp
   d9c5a:	f7fe fafb 	bl	d8254 <_ZN6StringD1Ev>
}
   d9c5e:	4620      	mov	r0, r4
   d9c60:	b008      	add	sp, #32
   d9c62:	bd10      	pop	{r4, pc}

000d9c64 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d9c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d9c66:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d9c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d9c6c:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d9c6e:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d9c70:	461a      	mov	r2, r3
   d9c72:	4669      	mov	r1, sp
   d9c74:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d9c76:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d9c7a:	f8ad 4000 	strh.w	r4, [sp]
   d9c7e:	f7fe f97b 	bl	d7f78 <spark_function>
}
   d9c82:	b004      	add	sp, #16
   d9c84:	bd10      	pop	{r4, pc}

000d9c86 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9c86:	4770      	bx	lr

000d9c88 <_ZN9IPAddressD0Ev>:
   d9c88:	b510      	push	{r4, lr}
   d9c8a:	2118      	movs	r1, #24
   d9c8c:	4604      	mov	r4, r0
   d9c8e:	f000 fc4a 	bl	da526 <_ZdlPvj>
   d9c92:	4620      	mov	r0, r4
   d9c94:	bd10      	pop	{r4, pc}

000d9c96 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9c96:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9c98:	7d03      	ldrb	r3, [r0, #20]
   d9c9a:	2b06      	cmp	r3, #6
{
   d9c9c:	b08d      	sub	sp, #52	; 0x34
   d9c9e:	460e      	mov	r6, r1
   d9ca0:	f100 0704 	add.w	r7, r0, #4
   d9ca4:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d9ca8:	d012      	beq.n	d9cd0 <_ZNK9IPAddress7printToER5Print+0x3a>
   d9caa:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d9cae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9cb2:	220a      	movs	r2, #10
   d9cb4:	4630      	mov	r0, r6
   d9cb6:	f7ff fd12 	bl	d96de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9cba:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9cbc:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d9cbe:	d019      	beq.n	d9cf4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d9cc0:	2c00      	cmp	r4, #0
   d9cc2:	d0f4      	beq.n	d9cae <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d9cc4:	212e      	movs	r1, #46	; 0x2e
   d9cc6:	4630      	mov	r0, r6
   d9cc8:	f7ff fcf0 	bl	d96ac <_ZN5Print5printEc>
   d9ccc:	4404      	add	r4, r0
   d9cce:	e7ee      	b.n	d9cae <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9cd0:	232f      	movs	r3, #47	; 0x2f
   d9cd2:	466a      	mov	r2, sp
   d9cd4:	4639      	mov	r1, r7
   d9cd6:	200a      	movs	r0, #10
		buf[0] = 0;
   d9cd8:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9cdc:	f7fd ff42 	bl	d7b64 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d9ce0:	4668      	mov	r0, sp
   d9ce2:	f001 fa73 	bl	db1cc <strlen>
   d9ce6:	6833      	ldr	r3, [r6, #0]
   d9ce8:	4602      	mov	r2, r0
   d9cea:	68db      	ldr	r3, [r3, #12]
   d9cec:	4669      	mov	r1, sp
   d9cee:	4630      	mov	r0, r6
   d9cf0:	4798      	blx	r3
   d9cf2:	4604      	mov	r4, r0
    }
    return n;
}
   d9cf4:	4620      	mov	r0, r4
   d9cf6:	b00d      	add	sp, #52	; 0x34
   d9cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d9cfc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9cfc:	b510      	push	{r4, lr}
   d9cfe:	4b05      	ldr	r3, [pc, #20]	; (d9d14 <_ZN9IPAddressC1Ev+0x18>)
   d9d00:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9d02:	2211      	movs	r2, #17
   d9d04:	f840 3b04 	str.w	r3, [r0], #4
   d9d08:	2100      	movs	r1, #0
   d9d0a:	f001 fa21 	bl	db150 <memset>
}
   d9d0e:	4620      	mov	r0, r4
   d9d10:	bd10      	pop	{r4, pc}
   d9d12:	bf00      	nop
   d9d14:	000dbfb0 	.word	0x000dbfb0

000d9d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9d18:	4603      	mov	r3, r0
   d9d1a:	4a07      	ldr	r2, [pc, #28]	; (d9d38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9d1c:	b510      	push	{r4, lr}
   d9d1e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d9d22:	f101 0210 	add.w	r2, r1, #16
   d9d26:	f851 4b04 	ldr.w	r4, [r1], #4
   d9d2a:	f843 4b04 	str.w	r4, [r3], #4
   d9d2e:	4291      	cmp	r1, r2
   d9d30:	d1f9      	bne.n	d9d26 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9d32:	780a      	ldrb	r2, [r1, #0]
   d9d34:	701a      	strb	r2, [r3, #0]
}
   d9d36:	bd10      	pop	{r4, pc}
   d9d38:	000dbfb0 	.word	0x000dbfb0

000d9d3c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9d3c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9d3e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9d42:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9d46:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9d4a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d9d4e:	2304      	movs	r3, #4
   d9d50:	6041      	str	r1, [r0, #4]
   d9d52:	7503      	strb	r3, [r0, #20]
}
   d9d54:	bd10      	pop	{r4, pc}
	...

000d9d58 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d9d58:	b513      	push	{r0, r1, r4, lr}
   d9d5a:	4b05      	ldr	r3, [pc, #20]	; (d9d70 <_ZN9IPAddressC1EPKh+0x18>)
   d9d5c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d9d5e:	78cb      	ldrb	r3, [r1, #3]
   d9d60:	9300      	str	r3, [sp, #0]
   d9d62:	788b      	ldrb	r3, [r1, #2]
   d9d64:	784a      	ldrb	r2, [r1, #1]
   d9d66:	7809      	ldrb	r1, [r1, #0]
   d9d68:	f7ff ffe8 	bl	d9d3c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9d6c:	b002      	add	sp, #8
   d9d6e:	bd10      	pop	{r4, pc}
   d9d70:	000dbfb0 	.word	0x000dbfb0

000d9d74 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9d74:	7441      	strb	r1, [r0, #17]
}
   d9d76:	4770      	bx	lr

000d9d78 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9d78:	4770      	bx	lr

000d9d7a <_ZN9USBSerial4readEv>:
{
   d9d7a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9d7c:	2100      	movs	r1, #0
   d9d7e:	7c00      	ldrb	r0, [r0, #16]
   d9d80:	f7fe f834 	bl	d7dec <HAL_USB_USART_Receive_Data>
}
   d9d84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9d88:	bd08      	pop	{r3, pc}

000d9d8a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d9d8a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9d8c:	2101      	movs	r1, #1
   d9d8e:	7c00      	ldrb	r0, [r0, #16]
   d9d90:	f7fe f82c 	bl	d7dec <HAL_USB_USART_Receive_Data>
}
   d9d94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9d98:	bd08      	pop	{r3, pc}

000d9d9a <_ZN9USBSerial17availableForWriteEv>:
{
   d9d9a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9d9c:	7c00      	ldrb	r0, [r0, #16]
   d9d9e:	f7fe f81d 	bl	d7ddc <HAL_USB_USART_Available_Data_For_Write>
}
   d9da2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9da6:	bd08      	pop	{r3, pc}

000d9da8 <_ZN9USBSerial9availableEv>:
{
   d9da8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9daa:	7c00      	ldrb	r0, [r0, #16]
   d9dac:	f7fe f80e 	bl	d7dcc <HAL_USB_USART_Available_Data>
}
   d9db0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9db4:	bd08      	pop	{r3, pc}

000d9db6 <_ZN9USBSerial5writeEh>:
{
   d9db6:	b513      	push	{r0, r1, r4, lr}
   d9db8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9dba:	7c00      	ldrb	r0, [r0, #16]
{
   d9dbc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9dbe:	f7fe f80d 	bl	d7ddc <HAL_USB_USART_Available_Data_For_Write>
   d9dc2:	2800      	cmp	r0, #0
   d9dc4:	9901      	ldr	r1, [sp, #4]
   d9dc6:	dc01      	bgt.n	d9dcc <_ZN9USBSerial5writeEh+0x16>
   d9dc8:	7c60      	ldrb	r0, [r4, #17]
   d9dca:	b120      	cbz	r0, d9dd6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9dcc:	7c20      	ldrb	r0, [r4, #16]
   d9dce:	f7fe f815 	bl	d7dfc <HAL_USB_USART_Send_Data>
   d9dd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9dd6:	b002      	add	sp, #8
   d9dd8:	bd10      	pop	{r4, pc}

000d9dda <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9dda:	7c00      	ldrb	r0, [r0, #16]
   d9ddc:	f7fe b816 	b.w	d7e0c <HAL_USB_USART_Flush_Data>

000d9de0 <_ZN9USBSerialD0Ev>:
   d9de0:	b510      	push	{r4, lr}
   d9de2:	2114      	movs	r1, #20
   d9de4:	4604      	mov	r4, r0
   d9de6:	f000 fb9e 	bl	da526 <_ZdlPvj>
   d9dea:	4620      	mov	r0, r4
   d9dec:	bd10      	pop	{r4, pc}
	...

000d9df0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9df0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9df6:	4604      	mov	r4, r0
   d9df8:	4608      	mov	r0, r1
   d9dfa:	2100      	movs	r1, #0
   d9dfc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9e00:	4b04      	ldr	r3, [pc, #16]	; (d9e14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9e02:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9e04:	2301      	movs	r3, #1
  _serial = serial;
   d9e06:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9e08:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9e0a:	4611      	mov	r1, r2
   d9e0c:	f7fd ffce 	bl	d7dac <HAL_USB_USART_Init>
}
   d9e10:	4620      	mov	r0, r4
   d9e12:	bd10      	pop	{r4, pc}
   d9e14:	000dbfc4 	.word	0x000dbfc4

000d9e18 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9e18:	7c00      	ldrb	r0, [r0, #16]
   d9e1a:	2200      	movs	r2, #0
   d9e1c:	f7fd bfce 	b.w	d7dbc <HAL_USB_USART_Begin>

000d9e20 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9e20:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9e22:	2214      	movs	r2, #20
{
   d9e24:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9e26:	2100      	movs	r1, #0
   d9e28:	f001 f992 	bl	db150 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9e2c:	4620      	mov	r0, r4
   d9e2e:	bd10      	pop	{r4, pc}

000d9e30 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9e30:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9e32:	4c10      	ldr	r4, [pc, #64]	; (d9e74 <_Z16_fetch_usbserialv+0x44>)
{
   d9e34:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9e36:	a803      	add	r0, sp, #12
   d9e38:	f7ff fff2 	bl	d9e20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9e3c:	7821      	ldrb	r1, [r4, #0]
   d9e3e:	f3bf 8f5b 	dmb	ish
   d9e42:	f011 0101 	ands.w	r1, r1, #1
   d9e46:	d111      	bne.n	d9e6c <_Z16_fetch_usbserialv+0x3c>
   d9e48:	4620      	mov	r0, r4
   d9e4a:	9101      	str	r1, [sp, #4]
   d9e4c:	f7fa f932 	bl	d40b4 <__cxa_guard_acquire>
   d9e50:	9901      	ldr	r1, [sp, #4]
   d9e52:	b158      	cbz	r0, d9e6c <_Z16_fetch_usbserialv+0x3c>
   d9e54:	aa03      	add	r2, sp, #12
   d9e56:	4808      	ldr	r0, [pc, #32]	; (d9e78 <_Z16_fetch_usbserialv+0x48>)
   d9e58:	f7ff ffca 	bl	d9df0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9e5c:	4620      	mov	r0, r4
   d9e5e:	f7fa f92e 	bl	d40be <__cxa_guard_release>
   d9e62:	4a06      	ldr	r2, [pc, #24]	; (d9e7c <_Z16_fetch_usbserialv+0x4c>)
   d9e64:	4906      	ldr	r1, [pc, #24]	; (d9e80 <_Z16_fetch_usbserialv+0x50>)
   d9e66:	4804      	ldr	r0, [pc, #16]	; (d9e78 <_Z16_fetch_usbserialv+0x48>)
   d9e68:	f000 fb58 	bl	da51c <__aeabi_atexit>
	return _usbserial;
}
   d9e6c:	4802      	ldr	r0, [pc, #8]	; (d9e78 <_Z16_fetch_usbserialv+0x48>)
   d9e6e:	b008      	add	sp, #32
   d9e70:	bd10      	pop	{r4, pc}
   d9e72:	bf00      	nop
   d9e74:	2003e644 	.word	0x2003e644
   d9e78:	2003e648 	.word	0x2003e648
   d9e7c:	2003de48 	.word	0x2003de48
   d9e80:	000d9d79 	.word	0x000d9d79

000d9e84 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9e84:	2200      	movs	r2, #0
   d9e86:	6840      	ldr	r0, [r0, #4]
   d9e88:	4611      	mov	r1, r2
   d9e8a:	f7fe b825 	b.w	d7ed8 <network_ready>

000d9e8e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d9e8e:	2200      	movs	r2, #0
   d9e90:	6840      	ldr	r0, [r0, #4]
   d9e92:	4611      	mov	r1, r2
   d9e94:	f7fe b840 	b.w	d7f18 <network_listening>

000d9e98 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d9e98:	2200      	movs	r2, #0
   d9e9a:	6840      	ldr	r0, [r0, #4]
   d9e9c:	4611      	mov	r1, r2
   d9e9e:	f7fe b84b 	b.w	d7f38 <network_get_listen_timeout>

000d9ea2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9ea2:	6840      	ldr	r0, [r0, #4]
   d9ea4:	2200      	movs	r2, #0
   d9ea6:	f7fe b83f 	b.w	d7f28 <network_set_listen_timeout>

000d9eaa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d9eaa:	6840      	ldr	r0, [r0, #4]
   d9eac:	2200      	movs	r2, #0
   d9eae:	f081 0101 	eor.w	r1, r1, #1
   d9eb2:	f7fe b829 	b.w	d7f08 <network_listen>

000d9eb6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9eb6:	2300      	movs	r3, #0
   d9eb8:	6840      	ldr	r0, [r0, #4]
   d9eba:	461a      	mov	r2, r3
   d9ebc:	4619      	mov	r1, r3
   d9ebe:	f7fe b81b 	b.w	d7ef8 <network_off>

000d9ec2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9ec2:	2300      	movs	r3, #0
   d9ec4:	6840      	ldr	r0, [r0, #4]
   d9ec6:	461a      	mov	r2, r3
   d9ec8:	4619      	mov	r1, r3
   d9eca:	f7fe b80d 	b.w	d7ee8 <network_on>

000d9ece <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9ece:	2200      	movs	r2, #0
   d9ed0:	6840      	ldr	r0, [r0, #4]
   d9ed2:	4611      	mov	r1, r2
   d9ed4:	f7fd bff0 	b.w	d7eb8 <network_connecting>

000d9ed8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9ed8:	6840      	ldr	r0, [r0, #4]
   d9eda:	2200      	movs	r2, #0
   d9edc:	2102      	movs	r1, #2
   d9ede:	f7fd bff3 	b.w	d7ec8 <network_disconnect>

000d9ee2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9ee2:	2300      	movs	r3, #0
   d9ee4:	6840      	ldr	r0, [r0, #4]
   d9ee6:	461a      	mov	r2, r3
   d9ee8:	f7fd bfde 	b.w	d7ea8 <network_connect>

000d9eec <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d9eec:	b570      	push	{r4, r5, r6, lr}
    CellularSignal() {}
   d9eee:	4b13      	ldr	r3, [pc, #76]	; (d9f3c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   d9ef0:	6003      	str	r3, [r0, #0]
   d9ef2:	2518      	movs	r5, #24
   d9ef4:	3330      	adds	r3, #48	; 0x30
   d9ef6:	b086      	sub	sp, #24
   d9ef8:	460e      	mov	r6, r1
   d9efa:	6043      	str	r3, [r0, #4]
   d9efc:	462a      	mov	r2, r5
   d9efe:	2100      	movs	r1, #0
   d9f00:	4604      	mov	r4, r0
   d9f02:	3008      	adds	r0, #8
   d9f04:	f001 f924 	bl	db150 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d9f08:	2200      	movs	r2, #0
   d9f0a:	6870      	ldr	r0, [r6, #4]
   d9f0c:	4611      	mov	r1, r2
   d9f0e:	f7fd ffe3 	bl	d7ed8 <network_ready>
   d9f12:	b178      	cbz	r0, d9f34 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {0};
   d9f14:	2100      	movs	r1, #0
   d9f16:	462a      	mov	r2, r5
   d9f18:	4668      	mov	r0, sp
   d9f1a:	f001 f919 	bl	db150 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   d9f1e:	4669      	mov	r1, sp
   d9f20:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   d9f22:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   d9f26:	f7fd ff1d 	bl	d7d64 <cellular_signal>
   d9f2a:	b918      	cbnz	r0, d9f34 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   d9f2c:	4669      	mov	r1, sp
   d9f2e:	4620      	mov	r0, r4
   d9f30:	f7ff fdc0 	bl	d9ab4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d9f34:	4620      	mov	r0, r4
   d9f36:	b006      	add	sp, #24
   d9f38:	bd70      	pop	{r4, r5, r6, pc}
   d9f3a:	bf00      	nop
   d9f3c:	000dbf74 	.word	0x000dbf74

000d9f40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d9f40:	4b08      	ldr	r3, [pc, #32]	; (d9f64 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9f42:	b510      	push	{r4, lr}
   d9f44:	2428      	movs	r4, #40	; 0x28
   d9f46:	4622      	mov	r2, r4
   d9f48:	4618      	mov	r0, r3
   d9f4a:	2100      	movs	r1, #0
   d9f4c:	f001 f900 	bl	db150 <memset>
   d9f50:	4b05      	ldr	r3, [pc, #20]	; (d9f68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d9f52:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d9f54:	f04f 32ff 	mov.w	r2, #4294967295
   d9f58:	6042      	str	r2, [r0, #4]
   d9f5a:	2204      	movs	r2, #4
   d9f5c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d9f5e:	4a03      	ldr	r2, [pc, #12]	; (d9f6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d9f60:	601a      	str	r2, [r3, #0]
   d9f62:	bd10      	pop	{r4, pc}
   d9f64:	2003e664 	.word	0x2003e664
   d9f68:	2003e65c 	.word	0x2003e65c
   d9f6c:	000dbff4 	.word	0x000dbff4

000d9f70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9f70:	4770      	bx	lr

000d9f72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9f72:	7441      	strb	r1, [r0, #17]
}
   d9f74:	4770      	bx	lr

000d9f76 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d9f76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9f78:	7c00      	ldrb	r0, [r0, #16]
   d9f7a:	f7fd fe33 	bl	d7be4 <hal_usart_available_data_for_write>
}
   d9f7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9f82:	bd08      	pop	{r3, pc}

000d9f84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9f84:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9f86:	7c00      	ldrb	r0, [r0, #16]
   d9f88:	f7fd fe04 	bl	d7b94 <hal_usart_available>
}
   d9f8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9f90:	bd08      	pop	{r3, pc}

000d9f92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9f92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9f94:	7c00      	ldrb	r0, [r0, #16]
   d9f96:	f7fd fe0d 	bl	d7bb4 <hal_usart_peek>
}
   d9f9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9f9e:	bd08      	pop	{r3, pc}

000d9fa0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9fa0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9fa2:	7c00      	ldrb	r0, [r0, #16]
   d9fa4:	f7fd fdfe 	bl	d7ba4 <hal_usart_read>
}
   d9fa8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9fac:	bd08      	pop	{r3, pc}

000d9fae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d9fae:	7c00      	ldrb	r0, [r0, #16]
   d9fb0:	f7fd be08 	b.w	d7bc4 <hal_usart_flush>

000d9fb4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9fb6:	7c45      	ldrb	r5, [r0, #17]
{
   d9fb8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9fba:	b12d      	cbz	r5, d9fc8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d9fbc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9fbe:	b003      	add	sp, #12
   d9fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9fc4:	f7fd bdde 	b.w	d7b84 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9fc8:	7c00      	ldrb	r0, [r0, #16]
   d9fca:	9101      	str	r1, [sp, #4]
   d9fcc:	f7fd fe0a 	bl	d7be4 <hal_usart_available_data_for_write>
   d9fd0:	2800      	cmp	r0, #0
   d9fd2:	9901      	ldr	r1, [sp, #4]
   d9fd4:	dcf2      	bgt.n	d9fbc <_ZN11USARTSerial5writeEh+0x8>
}
   d9fd6:	4628      	mov	r0, r5
   d9fd8:	b003      	add	sp, #12
   d9fda:	bd30      	pop	{r4, r5, pc}

000d9fdc <_ZN11USARTSerialD0Ev>:
   d9fdc:	b510      	push	{r4, lr}
   d9fde:	2114      	movs	r1, #20
   d9fe0:	4604      	mov	r4, r0
   d9fe2:	f000 faa0 	bl	da526 <_ZdlPvj>
   d9fe6:	4620      	mov	r0, r4
   d9fe8:	bd10      	pop	{r4, pc}
	...

000d9fec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9fec:	b510      	push	{r4, lr}
   d9fee:	f04f 0c00 	mov.w	ip, #0
   d9ff2:	4604      	mov	r4, r0
   d9ff4:	4608      	mov	r0, r1
   d9ff6:	4611      	mov	r1, r2
   d9ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9ffc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   da000:	4a04      	ldr	r2, [pc, #16]	; (da014 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   da002:	6022      	str	r2, [r4, #0]
  _blocking = true;
   da004:	2201      	movs	r2, #1
  _serial = serial;
   da006:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da008:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   da00a:	461a      	mov	r2, r3
   da00c:	f7fd fdb2 	bl	d7b74 <hal_usart_init>
}
   da010:	4620      	mov	r0, r4
   da012:	bd10      	pop	{r4, pc}
   da014:	000dc030 	.word	0x000dc030

000da018 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   da018:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da01a:	4c0e      	ldr	r4, [pc, #56]	; (da054 <_Z22__fetch_global_Serial1v+0x3c>)
   da01c:	7821      	ldrb	r1, [r4, #0]
   da01e:	f3bf 8f5b 	dmb	ish
   da022:	f011 0101 	ands.w	r1, r1, #1
   da026:	d112      	bne.n	da04e <_Z22__fetch_global_Serial1v+0x36>
   da028:	4620      	mov	r0, r4
   da02a:	9101      	str	r1, [sp, #4]
   da02c:	f7fa f842 	bl	d40b4 <__cxa_guard_acquire>
   da030:	9901      	ldr	r1, [sp, #4]
   da032:	b160      	cbz	r0, da04e <_Z22__fetch_global_Serial1v+0x36>
   da034:	4a08      	ldr	r2, [pc, #32]	; (da058 <_Z22__fetch_global_Serial1v+0x40>)
   da036:	4b09      	ldr	r3, [pc, #36]	; (da05c <_Z22__fetch_global_Serial1v+0x44>)
   da038:	4809      	ldr	r0, [pc, #36]	; (da060 <_Z22__fetch_global_Serial1v+0x48>)
   da03a:	f7ff ffd7 	bl	d9fec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   da03e:	4620      	mov	r0, r4
   da040:	f7fa f83d 	bl	d40be <__cxa_guard_release>
   da044:	4a07      	ldr	r2, [pc, #28]	; (da064 <_Z22__fetch_global_Serial1v+0x4c>)
   da046:	4908      	ldr	r1, [pc, #32]	; (da068 <_Z22__fetch_global_Serial1v+0x50>)
   da048:	4805      	ldr	r0, [pc, #20]	; (da060 <_Z22__fetch_global_Serial1v+0x48>)
   da04a:	f000 fa67 	bl	da51c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   da04e:	4804      	ldr	r0, [pc, #16]	; (da060 <_Z22__fetch_global_Serial1v+0x48>)
   da050:	b002      	add	sp, #8
   da052:	bd10      	pop	{r4, pc}
   da054:	2003e68c 	.word	0x2003e68c
   da058:	2003e690 	.word	0x2003e690
   da05c:	2003e714 	.word	0x2003e714
   da060:	2003e798 	.word	0x2003e798
   da064:	2003de48 	.word	0x2003de48
   da068:	000d9f71 	.word	0x000d9f71

000da06c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   da06c:	4770      	bx	lr

000da06e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   da06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da070:	4606      	mov	r6, r0
   da072:	4615      	mov	r5, r2
   da074:	460c      	mov	r4, r1
   da076:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   da078:	42bc      	cmp	r4, r7
   da07a:	d006      	beq.n	da08a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   da07c:	6833      	ldr	r3, [r6, #0]
   da07e:	f814 1b01 	ldrb.w	r1, [r4], #1
   da082:	689b      	ldr	r3, [r3, #8]
   da084:	4630      	mov	r0, r6
   da086:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   da088:	e7f6      	b.n	da078 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   da08a:	4628      	mov	r0, r5
   da08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da08e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   da08e:	7c00      	ldrb	r0, [r0, #16]
   da090:	2200      	movs	r2, #0
   da092:	f7fd bdc7 	b.w	d7c24 <hal_i2c_write>

000da096 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   da096:	7c00      	ldrb	r0, [r0, #16]
   da098:	2100      	movs	r1, #0
   da09a:	f7fd bdcb 	b.w	d7c34 <hal_i2c_available>

000da09e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   da09e:	7c00      	ldrb	r0, [r0, #16]
   da0a0:	2100      	movs	r1, #0
   da0a2:	f7fd bdcf 	b.w	d7c44 <hal_i2c_read>

000da0a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   da0a6:	7c00      	ldrb	r0, [r0, #16]
   da0a8:	2100      	movs	r1, #0
   da0aa:	f7fd bdd3 	b.w	d7c54 <hal_i2c_peek>

000da0ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   da0ae:	7c00      	ldrb	r0, [r0, #16]
   da0b0:	2100      	movs	r1, #0
   da0b2:	f7fd bdd7 	b.w	d7c64 <hal_i2c_flush>

000da0b6 <_ZN7TwoWireD0Ev>:
   da0b6:	b510      	push	{r4, lr}
   da0b8:	2114      	movs	r1, #20
   da0ba:	4604      	mov	r4, r0
   da0bc:	f000 fa33 	bl	da526 <_ZdlPvj>
   da0c0:	4620      	mov	r0, r4
   da0c2:	bd10      	pop	{r4, pc}

000da0c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   da0c4:	b510      	push	{r4, lr}
   da0c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da0ca:	4604      	mov	r4, r0
   da0cc:	4608      	mov	r0, r1
   da0ce:	2100      	movs	r1, #0
   da0d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   da0d4:	4b03      	ldr	r3, [pc, #12]	; (da0e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   da0d6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   da0d8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   da0da:	4611      	mov	r1, r2
   da0dc:	f7fd fdd2 	bl	d7c84 <hal_i2c_init>
}
   da0e0:	4620      	mov	r0, r4
   da0e2:	bd10      	pop	{r4, pc}
   da0e4:	000dc060 	.word	0x000dc060

000da0e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   da0e8:	2300      	movs	r3, #0
   da0ea:	7c00      	ldrb	r0, [r0, #16]
   da0ec:	461a      	mov	r2, r3
   da0ee:	4619      	mov	r1, r3
   da0f0:	f7fd bd80 	b.w	d7bf4 <hal_i2c_begin>

000da0f4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   da0f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   da0f6:	2200      	movs	r2, #0
   da0f8:	2314      	movs	r3, #20
   da0fa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   da0fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   da102:	780b      	ldrb	r3, [r1, #0]
   da104:	f88d 3008 	strb.w	r3, [sp, #8]
   da108:	684b      	ldr	r3, [r1, #4]
   da10a:	9303      	str	r3, [sp, #12]
   da10c:	68cb      	ldr	r3, [r1, #12]
   da10e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   da110:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   da112:	7a0b      	ldrb	r3, [r1, #8]
   da114:	9305      	str	r3, [sp, #20]
   da116:	a901      	add	r1, sp, #4
   da118:	f7fd fdcc 	bl	d7cb4 <hal_i2c_request_ex>
}
   da11c:	b007      	add	sp, #28
   da11e:	f85d fb04 	ldr.w	pc, [sp], #4

000da122 <_ZN7TwoWire11requestFromEhjh>:
{
   da122:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   da124:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da126:	f88d 1000 	strb.w	r1, [sp]
   da12a:	f04f 0164 	mov.w	r1, #100	; 0x64
   da12e:	9103      	str	r1, [sp, #12]
   da130:	bf18      	it	ne
   da132:	2301      	movne	r3, #1
   da134:	4669      	mov	r1, sp
    size_ = size;
   da136:	9201      	str	r2, [sp, #4]
   da138:	f88d 3008 	strb.w	r3, [sp, #8]
   da13c:	f7ff ffda 	bl	da0f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   da140:	b005      	add	sp, #20
   da142:	f85d fb04 	ldr.w	pc, [sp], #4

000da146 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   da146:	2301      	movs	r3, #1
   da148:	f7ff bfeb 	b.w	da122 <_ZN7TwoWire11requestFromEhjh>

000da14c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   da14c:	7c00      	ldrb	r0, [r0, #16]
   da14e:	2200      	movs	r2, #0
   da150:	f7fd bd58 	b.w	d7c04 <hal_i2c_begin_transmission>

000da154 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   da154:	b2c9      	uxtb	r1, r1
   da156:	f7ff bff9 	b.w	da14c <_ZN7TwoWire17beginTransmissionEh>

000da15a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   da15a:	7c00      	ldrb	r0, [r0, #16]
   da15c:	2200      	movs	r2, #0
   da15e:	f7fd bd59 	b.w	d7c14 <hal_i2c_end_transmission>

000da162 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   da162:	2101      	movs	r1, #1
   da164:	f7ff bff9 	b.w	da15a <_ZN7TwoWire15endTransmissionEh>

000da168 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   da168:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   da16a:	2100      	movs	r1, #0
   da16c:	7c00      	ldrb	r0, [r0, #16]
   da16e:	f7fd fd91 	bl	d7c94 <hal_i2c_lock>
}
   da172:	fab0 f080 	clz	r0, r0
   da176:	0940      	lsrs	r0, r0, #5
   da178:	bd08      	pop	{r3, pc}

000da17a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   da17a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   da17c:	2100      	movs	r1, #0
   da17e:	7c00      	ldrb	r0, [r0, #16]
   da180:	f7fd fd90 	bl	d7ca4 <hal_i2c_unlock>
}
   da184:	fab0 f080 	clz	r0, r0
   da188:	0940      	lsrs	r0, r0, #5
   da18a:	bd08      	pop	{r3, pc}

000da18c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da18c:	2300      	movs	r3, #0
   da18e:	6840      	ldr	r0, [r0, #4]
   da190:	461a      	mov	r2, r3
   da192:	f7fd be89 	b.w	d7ea8 <network_connect>

000da196 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da196:	6840      	ldr	r0, [r0, #4]
   da198:	2200      	movs	r2, #0
   da19a:	2102      	movs	r1, #2
   da19c:	f7fd be94 	b.w	d7ec8 <network_disconnect>

000da1a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da1a0:	2200      	movs	r2, #0
   da1a2:	6840      	ldr	r0, [r0, #4]
   da1a4:	4611      	mov	r1, r2
   da1a6:	f7fd be87 	b.w	d7eb8 <network_connecting>

000da1aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da1aa:	2200      	movs	r2, #0
   da1ac:	6840      	ldr	r0, [r0, #4]
   da1ae:	4611      	mov	r1, r2
   da1b0:	f7fd be92 	b.w	d7ed8 <network_ready>

000da1b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da1b4:	2300      	movs	r3, #0
   da1b6:	6840      	ldr	r0, [r0, #4]
   da1b8:	461a      	mov	r2, r3
   da1ba:	4619      	mov	r1, r3
   da1bc:	f7fd be94 	b.w	d7ee8 <network_on>

000da1c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da1c0:	2300      	movs	r3, #0
   da1c2:	6840      	ldr	r0, [r0, #4]
   da1c4:	461a      	mov	r2, r3
   da1c6:	4619      	mov	r1, r3
   da1c8:	f7fd be96 	b.w	d7ef8 <network_off>

000da1cc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   da1cc:	6840      	ldr	r0, [r0, #4]
   da1ce:	2100      	movs	r1, #0
   da1d0:	f7fd beba 	b.w	d7f48 <network_is_on>

000da1d4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   da1d4:	6840      	ldr	r0, [r0, #4]
   da1d6:	2100      	movs	r1, #0
   da1d8:	f7fd bebe 	b.w	d7f58 <network_is_off>

000da1dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da1dc:	6840      	ldr	r0, [r0, #4]
   da1de:	2200      	movs	r2, #0
   da1e0:	f081 0101 	eor.w	r1, r1, #1
   da1e4:	f7fd be90 	b.w	d7f08 <network_listen>

000da1e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da1e8:	6840      	ldr	r0, [r0, #4]
   da1ea:	2200      	movs	r2, #0
   da1ec:	f7fd be9c 	b.w	d7f28 <network_set_listen_timeout>

000da1f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da1f0:	2200      	movs	r2, #0
   da1f2:	6840      	ldr	r0, [r0, #4]
   da1f4:	4611      	mov	r1, r2
   da1f6:	f7fd be9f 	b.w	d7f38 <network_get_listen_timeout>

000da1fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da1fa:	2200      	movs	r2, #0
   da1fc:	6840      	ldr	r0, [r0, #4]
   da1fe:	4611      	mov	r1, r2
   da200:	f7fd be8a 	b.w	d7f18 <network_listening>

000da204 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da208:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   da20a:	b095      	sub	sp, #84	; 0x54
   da20c:	4616      	mov	r6, r2
   da20e:	460d      	mov	r5, r1
   da210:	4607      	mov	r7, r0
    IPAddress addr;
   da212:	f7ff fd73 	bl	d9cfc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   da216:	4621      	mov	r1, r4
   da218:	2218      	movs	r2, #24
   da21a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   da21c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da21e:	f000 ff97 	bl	db150 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da222:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   da224:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da228:	4621      	mov	r1, r4
   da22a:	466b      	mov	r3, sp
   da22c:	aa0c      	add	r2, sp, #48	; 0x30
   da22e:	4630      	mov	r0, r6
   da230:	f7fd fbd0 	bl	d79d4 <netdb_getaddrinfo>
    if (!r) {
   da234:	4604      	mov	r4, r0
   da236:	2800      	cmp	r0, #0
   da238:	d14c      	bne.n	da2d4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da23a:	4602      	mov	r2, r0
   da23c:	2101      	movs	r1, #1
   da23e:	6868      	ldr	r0, [r5, #4]
   da240:	f7fd fe4a 	bl	d7ed8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da244:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da246:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da248:	4622      	mov	r2, r4
   da24a:	6868      	ldr	r0, [r5, #4]
   da24c:	f7fd fe44 	bl	d7ed8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da250:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da252:	4681      	mov	r9, r0
        bool ok = false;
   da254:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da256:	2e00      	cmp	r6, #0
   da258:	d03c      	beq.n	da2d4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   da25a:	2900      	cmp	r1, #0
   da25c:	d13a      	bne.n	da2d4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da25e:	6873      	ldr	r3, [r6, #4]
   da260:	2b02      	cmp	r3, #2
   da262:	d003      	beq.n	da26c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   da264:	2b0a      	cmp	r3, #10
   da266:	d011      	beq.n	da28c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da268:	69f6      	ldr	r6, [r6, #28]
   da26a:	e7f4      	b.n	da256 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   da26c:	f1b8 0f00 	cmp.w	r8, #0
   da270:	d00a      	beq.n	da288 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da272:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   da274:	a806      	add	r0, sp, #24
   da276:	3104      	adds	r1, #4
class IPAddress : public Printable {
   da278:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   da27a:	f7ff fd6d 	bl	d9d58 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   da27e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da280:	1d3c      	adds	r4, r7, #4
   da282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da284:	682b      	ldr	r3, [r5, #0]
   da286:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   da288:	4641      	mov	r1, r8
   da28a:	e7ed      	b.n	da268 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   da28c:	f1b9 0f00 	cmp.w	r9, #0
   da290:	d101      	bne.n	da296 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   da292:	4649      	mov	r1, r9
   da294:	e7e8      	b.n	da268 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da296:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da298:	2210      	movs	r2, #16
   da29a:	a801      	add	r0, sp, #4
   da29c:	f000 ff58 	bl	db150 <memset>
                    a.v = 6;
   da2a0:	2306      	movs	r3, #6
   da2a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da2a6:	ad01      	add	r5, sp, #4
   da2a8:	f104 0308 	add.w	r3, r4, #8
   da2ac:	3418      	adds	r4, #24
   da2ae:	6818      	ldr	r0, [r3, #0]
   da2b0:	6859      	ldr	r1, [r3, #4]
   da2b2:	462a      	mov	r2, r5
   da2b4:	c203      	stmia	r2!, {r0, r1}
   da2b6:	3308      	adds	r3, #8
   da2b8:	42a3      	cmp	r3, r4
   da2ba:	4615      	mov	r5, r2
   da2bc:	d1f7      	bne.n	da2ae <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   da2be:	a901      	add	r1, sp, #4
   da2c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   da2c2:	ad07      	add	r5, sp, #28
   da2c4:	f7ff fd28 	bl	d9d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da2c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da2ca:	1d3c      	adds	r4, r7, #4
   da2cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da2ce:	682b      	ldr	r3, [r5, #0]
   da2d0:	7023      	strb	r3, [r4, #0]
   da2d2:	e7de      	b.n	da292 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da2d4:	9800      	ldr	r0, [sp, #0]
   da2d6:	f7fd fb75 	bl	d79c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da2da:	4638      	mov	r0, r7
   da2dc:	b015      	add	sp, #84	; 0x54
   da2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da2e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da2e4:	4b02      	ldr	r3, [pc, #8]	; (da2f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da2e6:	4a03      	ldr	r2, [pc, #12]	; (da2f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da2e8:	601a      	str	r2, [r3, #0]
   da2ea:	2200      	movs	r2, #0
   da2ec:	605a      	str	r2, [r3, #4]

} // spark
   da2ee:	4770      	bx	lr
   da2f0:	2003e7ac 	.word	0x2003e7ac
   da2f4:	000dc088 	.word	0x000dc088

000da2f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da2f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da2fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da2fc:	d902      	bls.n	da304 <pinAvailable+0xc>
    return false;
   da2fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da300:	b002      	add	sp, #8
   da302:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da304:	f1a0 030b 	sub.w	r3, r0, #11
   da308:	2b02      	cmp	r3, #2
   da30a:	d81a      	bhi.n	da342 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da30c:	4c17      	ldr	r4, [pc, #92]	; (da36c <pinAvailable+0x74>)
   da30e:	7821      	ldrb	r1, [r4, #0]
   da310:	f3bf 8f5b 	dmb	ish
   da314:	f011 0101 	ands.w	r1, r1, #1
   da318:	d10b      	bne.n	da332 <pinAvailable+0x3a>
   da31a:	4620      	mov	r0, r4
   da31c:	9101      	str	r1, [sp, #4]
   da31e:	f7f9 fec9 	bl	d40b4 <__cxa_guard_acquire>
   da322:	9901      	ldr	r1, [sp, #4]
   da324:	b128      	cbz	r0, da332 <pinAvailable+0x3a>
   da326:	4812      	ldr	r0, [pc, #72]	; (da370 <pinAvailable+0x78>)
   da328:	f7fd feba 	bl	d80a0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da32c:	4620      	mov	r0, r4
   da32e:	f7f9 fec6 	bl	d40be <__cxa_guard_release>
   da332:	4b0f      	ldr	r3, [pc, #60]	; (da370 <pinAvailable+0x78>)
   da334:	7818      	ldrb	r0, [r3, #0]
   da336:	f7fd fcdd 	bl	d7cf4 <hal_spi_is_enabled>
   da33a:	2800      	cmp	r0, #0
   da33c:	d1df      	bne.n	da2fe <pinAvailable+0x6>
  return true; // 'pin' is available
   da33e:	2001      	movs	r0, #1
   da340:	e7de      	b.n	da300 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da342:	2801      	cmp	r0, #1
   da344:	d809      	bhi.n	da35a <pinAvailable+0x62>
   da346:	f000 f899 	bl	da47c <_Z19__fetch_global_Wirev>
   da34a:	2100      	movs	r1, #0
   da34c:	7c00      	ldrb	r0, [r0, #16]
   da34e:	f7fd fc91 	bl	d7c74 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da352:	f080 0001 	eor.w	r0, r0, #1
   da356:	b2c0      	uxtb	r0, r0
   da358:	e7d2      	b.n	da300 <pinAvailable+0x8>
   da35a:	3809      	subs	r0, #9
   da35c:	2801      	cmp	r0, #1
   da35e:	d8ee      	bhi.n	da33e <pinAvailable+0x46>
   da360:	f7ff fe5a 	bl	da018 <_Z22__fetch_global_Serial1v>
   da364:	7c00      	ldrb	r0, [r0, #16]
   da366:	f7fd fc35 	bl	d7bd4 <hal_usart_is_enabled>
   da36a:	e7f2      	b.n	da352 <pinAvailable+0x5a>
   da36c:	2003de4c 	.word	0x2003de4c
   da370:	2003de50 	.word	0x2003de50

000da374 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da374:	2823      	cmp	r0, #35	; 0x23
{
   da376:	b538      	push	{r3, r4, r5, lr}
   da378:	4604      	mov	r4, r0
   da37a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da37c:	d80a      	bhi.n	da394 <pinMode+0x20>
   da37e:	29ff      	cmp	r1, #255	; 0xff
   da380:	d008      	beq.n	da394 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da382:	f7ff ffb9 	bl	da2f8 <pinAvailable>
   da386:	b128      	cbz	r0, da394 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da388:	4629      	mov	r1, r5
   da38a:	4620      	mov	r0, r4
}
   da38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da390:	f7fd bb28 	b.w	d79e4 <HAL_Pin_Mode>
}
   da394:	bd38      	pop	{r3, r4, r5, pc}

000da396 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da396:	b538      	push	{r3, r4, r5, lr}
   da398:	4604      	mov	r4, r0
   da39a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da39c:	f7fd fb2a 	bl	d79f4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da3a0:	28ff      	cmp	r0, #255	; 0xff
   da3a2:	d010      	beq.n	da3c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da3a4:	2806      	cmp	r0, #6
   da3a6:	d804      	bhi.n	da3b2 <digitalWrite+0x1c>
   da3a8:	234d      	movs	r3, #77	; 0x4d
   da3aa:	fa23 f000 	lsr.w	r0, r3, r0
   da3ae:	07c3      	lsls	r3, r0, #31
   da3b0:	d409      	bmi.n	da3c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da3b2:	4620      	mov	r0, r4
   da3b4:	f7ff ffa0 	bl	da2f8 <pinAvailable>
   da3b8:	b128      	cbz	r0, da3c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da3ba:	4629      	mov	r1, r5
   da3bc:	4620      	mov	r0, r4
}
   da3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da3c2:	f7fd bb1f 	b.w	d7a04 <HAL_GPIO_Write>
}
   da3c6:	bd38      	pop	{r3, r4, r5, pc}

000da3c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da3c8:	b510      	push	{r4, lr}
   da3ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da3cc:	f7fd fb12 	bl	d79f4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   da3d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   da3d2:	b2db      	uxtb	r3, r3
   da3d4:	2b01      	cmp	r3, #1
   da3d6:	d908      	bls.n	da3ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da3d8:	4620      	mov	r0, r4
   da3da:	f7ff ff8d 	bl	da2f8 <pinAvailable>
   da3de:	b120      	cbz	r0, da3ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da3e0:	4620      	mov	r0, r4
}
   da3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   da3e6:	f7fd bb15 	b.w	d7a14 <HAL_GPIO_Read>
}
   da3ea:	2000      	movs	r0, #0
   da3ec:	bd10      	pop	{r4, pc}
	...

000da3f0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   da3f0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   da3f2:	4c08      	ldr	r4, [pc, #32]	; (da414 <_Z21__fetch_global_EEPROMv+0x24>)
   da3f4:	7823      	ldrb	r3, [r4, #0]
   da3f6:	f3bf 8f5b 	dmb	ish
   da3fa:	07db      	lsls	r3, r3, #31
   da3fc:	d408      	bmi.n	da410 <_Z21__fetch_global_EEPROMv+0x20>
   da3fe:	4620      	mov	r0, r4
   da400:	f7f9 fe58 	bl	d40b4 <__cxa_guard_acquire>
   da404:	b120      	cbz	r0, da410 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   da406:	f7fd fb2d 	bl	d7a64 <HAL_EEPROM_Init>
   da40a:	4620      	mov	r0, r4
   da40c:	f7f9 fe57 	bl	d40be <__cxa_guard_release>
	return eeprom;
}
   da410:	4801      	ldr	r0, [pc, #4]	; (da418 <_Z21__fetch_global_EEPROMv+0x28>)
   da412:	bd10      	pop	{r4, pc}
   da414:	2003e7b8 	.word	0x2003e7b8
   da418:	2003e7bc 	.word	0x2003e7bc

000da41c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   da41c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da41e:	2300      	movs	r3, #0
   da420:	2520      	movs	r5, #32
   da422:	8043      	strh	r3, [r0, #2]
   da424:	2314      	movs	r3, #20
{
   da426:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da428:	8003      	strh	r3, [r0, #0]
   da42a:	6085      	str	r5, [r0, #8]
   da42c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da42e:	4906      	ldr	r1, [pc, #24]	; (da448 <_Z17acquireWireBufferv+0x2c>)
   da430:	4628      	mov	r0, r5
   da432:	f000 f87a 	bl	da52a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da436:	4904      	ldr	r1, [pc, #16]	; (da448 <_Z17acquireWireBufferv+0x2c>)
	};
   da438:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da43a:	4628      	mov	r0, r5
   da43c:	f000 f875 	bl	da52a <_ZnajRKSt9nothrow_t>
	};
   da440:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   da442:	4620      	mov	r0, r4
   da444:	bd38      	pop	{r3, r4, r5, pc}
   da446:	bf00      	nop
   da448:	000dc0bc 	.word	0x000dc0bc

000da44c <_Z18acquireWire1Bufferv>:
   da44c:	b538      	push	{r3, r4, r5, lr}
   da44e:	2300      	movs	r3, #0
   da450:	2520      	movs	r5, #32
   da452:	8043      	strh	r3, [r0, #2]
   da454:	2314      	movs	r3, #20
   da456:	4604      	mov	r4, r0
   da458:	8003      	strh	r3, [r0, #0]
   da45a:	6085      	str	r5, [r0, #8]
   da45c:	6105      	str	r5, [r0, #16]
   da45e:	4906      	ldr	r1, [pc, #24]	; (da478 <_Z18acquireWire1Bufferv+0x2c>)
   da460:	4628      	mov	r0, r5
   da462:	f000 f862 	bl	da52a <_ZnajRKSt9nothrow_t>
   da466:	4904      	ldr	r1, [pc, #16]	; (da478 <_Z18acquireWire1Bufferv+0x2c>)
   da468:	6060      	str	r0, [r4, #4]
   da46a:	4628      	mov	r0, r5
   da46c:	f000 f85d 	bl	da52a <_ZnajRKSt9nothrow_t>
   da470:	60e0      	str	r0, [r4, #12]
   da472:	4620      	mov	r0, r4
   da474:	bd38      	pop	{r3, r4, r5, pc}
   da476:	bf00      	nop
   da478:	000dc0bc 	.word	0x000dc0bc

000da47c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da47c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da47e:	4d0f      	ldr	r5, [pc, #60]	; (da4bc <_Z19__fetch_global_Wirev+0x40>)
   da480:	7829      	ldrb	r1, [r5, #0]
   da482:	f3bf 8f5b 	dmb	ish
   da486:	f011 0401 	ands.w	r4, r1, #1
{
   da48a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da48c:	d113      	bne.n	da4b6 <_Z19__fetch_global_Wirev+0x3a>
   da48e:	4628      	mov	r0, r5
   da490:	f7f9 fe10 	bl	d40b4 <__cxa_guard_acquire>
   da494:	b178      	cbz	r0, da4b6 <_Z19__fetch_global_Wirev+0x3a>
   da496:	a801      	add	r0, sp, #4
   da498:	f7ff ffc0 	bl	da41c <_Z17acquireWireBufferv>
   da49c:	aa01      	add	r2, sp, #4
   da49e:	4621      	mov	r1, r4
   da4a0:	4807      	ldr	r0, [pc, #28]	; (da4c0 <_Z19__fetch_global_Wirev+0x44>)
   da4a2:	f7ff fe0f 	bl	da0c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da4a6:	4628      	mov	r0, r5
   da4a8:	f7f9 fe09 	bl	d40be <__cxa_guard_release>
   da4ac:	4a05      	ldr	r2, [pc, #20]	; (da4c4 <_Z19__fetch_global_Wirev+0x48>)
   da4ae:	4906      	ldr	r1, [pc, #24]	; (da4c8 <_Z19__fetch_global_Wirev+0x4c>)
   da4b0:	4803      	ldr	r0, [pc, #12]	; (da4c0 <_Z19__fetch_global_Wirev+0x44>)
   da4b2:	f000 f833 	bl	da51c <__aeabi_atexit>
	return wire;
}
   da4b6:	4802      	ldr	r0, [pc, #8]	; (da4c0 <_Z19__fetch_global_Wirev+0x44>)
   da4b8:	b007      	add	sp, #28
   da4ba:	bd30      	pop	{r4, r5, pc}
   da4bc:	2003e7c0 	.word	0x2003e7c0
   da4c0:	2003e7c8 	.word	0x2003e7c8
   da4c4:	2003de48 	.word	0x2003de48
   da4c8:	000da06d 	.word	0x000da06d

000da4cc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   da4cc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da4ce:	4c0f      	ldr	r4, [pc, #60]	; (da50c <_Z20__fetch_global_Wire1v+0x40>)
   da4d0:	7823      	ldrb	r3, [r4, #0]
   da4d2:	f3bf 8f5b 	dmb	ish
   da4d6:	07db      	lsls	r3, r3, #31
{
   da4d8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da4da:	d413      	bmi.n	da504 <_Z20__fetch_global_Wire1v+0x38>
   da4dc:	4620      	mov	r0, r4
   da4de:	f7f9 fde9 	bl	d40b4 <__cxa_guard_acquire>
   da4e2:	b178      	cbz	r0, da504 <_Z20__fetch_global_Wire1v+0x38>
   da4e4:	a801      	add	r0, sp, #4
   da4e6:	f7ff ffb1 	bl	da44c <_Z18acquireWire1Bufferv>
   da4ea:	aa01      	add	r2, sp, #4
   da4ec:	2101      	movs	r1, #1
   da4ee:	4808      	ldr	r0, [pc, #32]	; (da510 <_Z20__fetch_global_Wire1v+0x44>)
   da4f0:	f7ff fde8 	bl	da0c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da4f4:	4620      	mov	r0, r4
   da4f6:	f7f9 fde2 	bl	d40be <__cxa_guard_release>
   da4fa:	4a06      	ldr	r2, [pc, #24]	; (da514 <_Z20__fetch_global_Wire1v+0x48>)
   da4fc:	4906      	ldr	r1, [pc, #24]	; (da518 <_Z20__fetch_global_Wire1v+0x4c>)
   da4fe:	4804      	ldr	r0, [pc, #16]	; (da510 <_Z20__fetch_global_Wire1v+0x44>)
   da500:	f000 f80c 	bl	da51c <__aeabi_atexit>
	return wire;
}
   da504:	4802      	ldr	r0, [pc, #8]	; (da510 <_Z20__fetch_global_Wire1v+0x44>)
   da506:	b006      	add	sp, #24
   da508:	bd10      	pop	{r4, pc}
   da50a:	bf00      	nop
   da50c:	2003e7c4 	.word	0x2003e7c4
   da510:	2003e7dc 	.word	0x2003e7dc
   da514:	2003de48 	.word	0x2003de48
   da518:	000da06d 	.word	0x000da06d

000da51c <__aeabi_atexit>:
   da51c:	460b      	mov	r3, r1
   da51e:	4601      	mov	r1, r0
   da520:	4618      	mov	r0, r3
   da522:	f000 bdd1 	b.w	db0c8 <__cxa_atexit>

000da526 <_ZdlPvj>:
   da526:	f7f9 bdb8 	b.w	d409a <_ZdlPv>

000da52a <_ZnajRKSt9nothrow_t>:
   da52a:	f7f9 bdb4 	b.w	d4096 <_Znaj>

000da52e <_ZSt25__throw_bad_function_callv>:
   da52e:	b508      	push	{r3, lr}
   da530:	f7fd fd62 	bl	d7ff8 <abort>

000da534 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   da534:	4901      	ldr	r1, [pc, #4]	; (da53c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   da536:	f000 b8f9 	b.w	da72c <_ZNKSt9type_infoeqERKS_>
   da53a:	bf00      	nop
   da53c:	000dc0d8 	.word	0x000dc0d8

000da540 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   da540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da542:	2400      	movs	r4, #0
   da544:	2310      	movs	r3, #16
   da546:	e9cd 3402 	strd	r3, r4, [sp, #8]
   da54a:	6803      	ldr	r3, [r0, #0]
   da54c:	9400      	str	r4, [sp, #0]
   da54e:	699e      	ldr	r6, [r3, #24]
   da550:	f88d 4004 	strb.w	r4, [sp, #4]
   da554:	4615      	mov	r5, r2
   da556:	466b      	mov	r3, sp
   da558:	6812      	ldr	r2, [r2, #0]
   da55a:	47b0      	blx	r6
   da55c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   da560:	f003 0306 	and.w	r3, r3, #6
   da564:	2b06      	cmp	r3, #6
   da566:	bf03      	ittte	eq
   da568:	9b00      	ldreq	r3, [sp, #0]
   da56a:	602b      	streq	r3, [r5, #0]
   da56c:	2001      	moveq	r0, #1
   da56e:	4620      	movne	r0, r4
   da570:	b004      	add	sp, #16
   da572:	bd70      	pop	{r4, r5, r6, pc}

000da574 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   da574:	9800      	ldr	r0, [sp, #0]
   da576:	4290      	cmp	r0, r2
   da578:	bf14      	ite	ne
   da57a:	2001      	movne	r0, #1
   da57c:	2006      	moveq	r0, #6
   da57e:	4770      	bx	lr

000da580 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   da580:	b510      	push	{r4, lr}
   da582:	4b03      	ldr	r3, [pc, #12]	; (da590 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   da584:	6003      	str	r3, [r0, #0]
   da586:	4604      	mov	r4, r0
   da588:	f000 f8cd 	bl	da726 <_ZNSt9type_infoD1Ev>
   da58c:	4620      	mov	r0, r4
   da58e:	bd10      	pop	{r4, pc}
   da590:	000dc118 	.word	0x000dc118

000da594 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   da594:	b510      	push	{r4, lr}
   da596:	4604      	mov	r4, r0
   da598:	f7ff fff2 	bl	da580 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   da59c:	4620      	mov	r0, r4
   da59e:	2108      	movs	r1, #8
   da5a0:	f7ff ffc1 	bl	da526 <_ZdlPvj>
   da5a4:	4620      	mov	r0, r4
   da5a6:	bd10      	pop	{r4, pc}

000da5a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   da5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da5ac:	461f      	mov	r7, r3
   da5ae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   da5b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   da5b6:	4598      	cmp	r8, r3
   da5b8:	4606      	mov	r6, r0
   da5ba:	4615      	mov	r5, r2
   da5bc:	d107      	bne.n	da5ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   da5be:	9907      	ldr	r1, [sp, #28]
   da5c0:	f000 f8b4 	bl	da72c <_ZNKSt9type_infoeqERKS_>
   da5c4:	b118      	cbz	r0, da5ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   da5c6:	7165      	strb	r5, [r4, #5]
   da5c8:	2000      	movs	r0, #0
   da5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da5ce:	4639      	mov	r1, r7
   da5d0:	4630      	mov	r0, r6
   da5d2:	f000 f8ab 	bl	da72c <_ZNKSt9type_infoeqERKS_>
   da5d6:	2800      	cmp	r0, #0
   da5d8:	d0f6      	beq.n	da5c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   da5da:	2301      	movs	r3, #1
   da5dc:	f8c4 8000 	str.w	r8, [r4]
   da5e0:	7125      	strb	r5, [r4, #4]
   da5e2:	71a3      	strb	r3, [r4, #6]
   da5e4:	e7f0      	b.n	da5c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000da5e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   da5e6:	b538      	push	{r3, r4, r5, lr}
   da5e8:	4615      	mov	r5, r2
   da5ea:	461c      	mov	r4, r3
   da5ec:	f000 f89e 	bl	da72c <_ZNKSt9type_infoeqERKS_>
   da5f0:	b120      	cbz	r0, da5fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   da5f2:	2308      	movs	r3, #8
   da5f4:	60e3      	str	r3, [r4, #12]
   da5f6:	2306      	movs	r3, #6
   da5f8:	6025      	str	r5, [r4, #0]
   da5fa:	7123      	strb	r3, [r4, #4]
   da5fc:	bd38      	pop	{r3, r4, r5, pc}

000da5fe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   da5fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da600:	4605      	mov	r5, r0
   da602:	460c      	mov	r4, r1
   da604:	9201      	str	r2, [sp, #4]
   da606:	461e      	mov	r6, r3
   da608:	f000 f890 	bl	da72c <_ZNKSt9type_infoeqERKS_>
   da60c:	b950      	cbnz	r0, da624 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   da60e:	2e03      	cmp	r6, #3
   da610:	d808      	bhi.n	da624 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   da612:	6823      	ldr	r3, [r4, #0]
   da614:	9a01      	ldr	r2, [sp, #4]
   da616:	695b      	ldr	r3, [r3, #20]
   da618:	4629      	mov	r1, r5
   da61a:	4620      	mov	r0, r4
   da61c:	b002      	add	sp, #8
   da61e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da622:	4718      	bx	r3
   da624:	b002      	add	sp, #8
   da626:	bd70      	pop	{r4, r5, r6, pc}

000da628 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   da628:	b510      	push	{r4, lr}
   da62a:	4b03      	ldr	r3, [pc, #12]	; (da638 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   da62c:	6003      	str	r3, [r0, #0]
   da62e:	4604      	mov	r4, r0
   da630:	f7ff ffa6 	bl	da580 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   da634:	4620      	mov	r0, r4
   da636:	bd10      	pop	{r4, pc}
   da638:	000dc178 	.word	0x000dc178

000da63c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   da63c:	b510      	push	{r4, lr}
   da63e:	4604      	mov	r4, r0
   da640:	f7ff fff2 	bl	da628 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   da644:	4620      	mov	r0, r4
   da646:	210c      	movs	r1, #12
   da648:	f7ff ff6d 	bl	da526 <_ZdlPvj>
   da64c:	4620      	mov	r0, r4
   da64e:	bd10      	pop	{r4, pc}

000da650 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   da650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da652:	9f08      	ldr	r7, [sp, #32]
   da654:	4297      	cmp	r7, r2
   da656:	4605      	mov	r5, r0
   da658:	460e      	mov	r6, r1
   da65a:	4614      	mov	r4, r2
   da65c:	d00a      	beq.n	da674 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   da65e:	68a8      	ldr	r0, [r5, #8]
   da660:	6802      	ldr	r2, [r0, #0]
   da662:	9708      	str	r7, [sp, #32]
   da664:	6a15      	ldr	r5, [r2, #32]
   da666:	4631      	mov	r1, r6
   da668:	4622      	mov	r2, r4
   da66a:	46ac      	mov	ip, r5
   da66c:	b003      	add	sp, #12
   da66e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   da672:	4760      	bx	ip
   da674:	4619      	mov	r1, r3
   da676:	9301      	str	r3, [sp, #4]
   da678:	f000 f858 	bl	da72c <_ZNKSt9type_infoeqERKS_>
   da67c:	9b01      	ldr	r3, [sp, #4]
   da67e:	2800      	cmp	r0, #0
   da680:	d0ed      	beq.n	da65e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   da682:	2006      	movs	r0, #6
   da684:	b003      	add	sp, #12
   da686:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da688 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   da688:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da68c:	460d      	mov	r5, r1
   da68e:	4619      	mov	r1, r3
   da690:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   da694:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   da698:	4681      	mov	r9, r0
   da69a:	4617      	mov	r7, r2
   da69c:	4698      	mov	r8, r3
   da69e:	f000 f845 	bl	da72c <_ZNKSt9type_infoeqERKS_>
   da6a2:	b190      	cbz	r0, da6ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   da6a4:	2d00      	cmp	r5, #0
   da6a6:	6034      	str	r4, [r6, #0]
   da6a8:	7137      	strb	r7, [r6, #4]
   da6aa:	db09      	blt.n	da6c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   da6ac:	1961      	adds	r1, r4, r5
   da6ae:	458a      	cmp	sl, r1
   da6b0:	bf0c      	ite	eq
   da6b2:	2106      	moveq	r1, #6
   da6b4:	2101      	movne	r1, #1
   da6b6:	71b1      	strb	r1, [r6, #6]
   da6b8:	2000      	movs	r0, #0
   da6ba:	b001      	add	sp, #4
   da6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da6c0:	3502      	adds	r5, #2
   da6c2:	d1f9      	bne.n	da6b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   da6c4:	2301      	movs	r3, #1
   da6c6:	71b3      	strb	r3, [r6, #6]
   da6c8:	e7f6      	b.n	da6b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   da6ca:	4554      	cmp	r4, sl
   da6cc:	d106      	bne.n	da6dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   da6ce:	4659      	mov	r1, fp
   da6d0:	4648      	mov	r0, r9
   da6d2:	f000 f82b 	bl	da72c <_ZNKSt9type_infoeqERKS_>
   da6d6:	b108      	cbz	r0, da6dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   da6d8:	7177      	strb	r7, [r6, #5]
   da6da:	e7ed      	b.n	da6b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   da6dc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   da6e0:	6803      	ldr	r3, [r0, #0]
   da6e2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   da6e6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   da6ea:	69dc      	ldr	r4, [r3, #28]
   da6ec:	463a      	mov	r2, r7
   da6ee:	4643      	mov	r3, r8
   da6f0:	4629      	mov	r1, r5
   da6f2:	46a4      	mov	ip, r4
   da6f4:	b001      	add	sp, #4
   da6f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da6fa:	4760      	bx	ip

000da6fc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   da6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da700:	4607      	mov	r7, r0
   da702:	460c      	mov	r4, r1
   da704:	4615      	mov	r5, r2
   da706:	461e      	mov	r6, r3
   da708:	f7ff ff6d 	bl	da5e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   da70c:	b948      	cbnz	r0, da722 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   da70e:	68b8      	ldr	r0, [r7, #8]
   da710:	6803      	ldr	r3, [r0, #0]
   da712:	699f      	ldr	r7, [r3, #24]
   da714:	462a      	mov	r2, r5
   da716:	4633      	mov	r3, r6
   da718:	4621      	mov	r1, r4
   da71a:	46bc      	mov	ip, r7
   da71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   da720:	4760      	bx	ip
   da722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da726 <_ZNSt9type_infoD1Ev>:
   da726:	4770      	bx	lr

000da728 <_ZNKSt9type_info14__is_pointer_pEv>:
   da728:	2000      	movs	r0, #0
   da72a:	4770      	bx	lr

000da72c <_ZNKSt9type_infoeqERKS_>:
   da72c:	4281      	cmp	r1, r0
   da72e:	b508      	push	{r3, lr}
   da730:	d00e      	beq.n	da750 <_ZNKSt9type_infoeqERKS_+0x24>
   da732:	6840      	ldr	r0, [r0, #4]
   da734:	7803      	ldrb	r3, [r0, #0]
   da736:	2b2a      	cmp	r3, #42	; 0x2a
   da738:	d00c      	beq.n	da754 <_ZNKSt9type_infoeqERKS_+0x28>
   da73a:	6849      	ldr	r1, [r1, #4]
   da73c:	780b      	ldrb	r3, [r1, #0]
   da73e:	2b2a      	cmp	r3, #42	; 0x2a
   da740:	bf08      	it	eq
   da742:	3101      	addeq	r1, #1
   da744:	f000 fd30 	bl	db1a8 <strcmp>
   da748:	fab0 f080 	clz	r0, r0
   da74c:	0940      	lsrs	r0, r0, #5
   da74e:	bd08      	pop	{r3, pc}
   da750:	2001      	movs	r0, #1
   da752:	e7fc      	b.n	da74e <_ZNKSt9type_infoeqERKS_+0x22>
   da754:	2000      	movs	r0, #0
   da756:	e7fa      	b.n	da74e <_ZNKSt9type_infoeqERKS_+0x22>

000da758 <__aeabi_drsub>:
   da758:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da75c:	e002      	b.n	da764 <__adddf3>
   da75e:	bf00      	nop

000da760 <__aeabi_dsub>:
   da760:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da764 <__adddf3>:
   da764:	b530      	push	{r4, r5, lr}
   da766:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da76a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da76e:	ea94 0f05 	teq	r4, r5
   da772:	bf08      	it	eq
   da774:	ea90 0f02 	teqeq	r0, r2
   da778:	bf1f      	itttt	ne
   da77a:	ea54 0c00 	orrsne.w	ip, r4, r0
   da77e:	ea55 0c02 	orrsne.w	ip, r5, r2
   da782:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da786:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da78a:	f000 80e2 	beq.w	da952 <__adddf3+0x1ee>
   da78e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da792:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da796:	bfb8      	it	lt
   da798:	426d      	neglt	r5, r5
   da79a:	dd0c      	ble.n	da7b6 <__adddf3+0x52>
   da79c:	442c      	add	r4, r5
   da79e:	ea80 0202 	eor.w	r2, r0, r2
   da7a2:	ea81 0303 	eor.w	r3, r1, r3
   da7a6:	ea82 0000 	eor.w	r0, r2, r0
   da7aa:	ea83 0101 	eor.w	r1, r3, r1
   da7ae:	ea80 0202 	eor.w	r2, r0, r2
   da7b2:	ea81 0303 	eor.w	r3, r1, r3
   da7b6:	2d36      	cmp	r5, #54	; 0x36
   da7b8:	bf88      	it	hi
   da7ba:	bd30      	pophi	{r4, r5, pc}
   da7bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da7c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da7c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da7c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da7cc:	d002      	beq.n	da7d4 <__adddf3+0x70>
   da7ce:	4240      	negs	r0, r0
   da7d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da7d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da7d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da7dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da7e0:	d002      	beq.n	da7e8 <__adddf3+0x84>
   da7e2:	4252      	negs	r2, r2
   da7e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da7e8:	ea94 0f05 	teq	r4, r5
   da7ec:	f000 80a7 	beq.w	da93e <__adddf3+0x1da>
   da7f0:	f1a4 0401 	sub.w	r4, r4, #1
   da7f4:	f1d5 0e20 	rsbs	lr, r5, #32
   da7f8:	db0d      	blt.n	da816 <__adddf3+0xb2>
   da7fa:	fa02 fc0e 	lsl.w	ip, r2, lr
   da7fe:	fa22 f205 	lsr.w	r2, r2, r5
   da802:	1880      	adds	r0, r0, r2
   da804:	f141 0100 	adc.w	r1, r1, #0
   da808:	fa03 f20e 	lsl.w	r2, r3, lr
   da80c:	1880      	adds	r0, r0, r2
   da80e:	fa43 f305 	asr.w	r3, r3, r5
   da812:	4159      	adcs	r1, r3
   da814:	e00e      	b.n	da834 <__adddf3+0xd0>
   da816:	f1a5 0520 	sub.w	r5, r5, #32
   da81a:	f10e 0e20 	add.w	lr, lr, #32
   da81e:	2a01      	cmp	r2, #1
   da820:	fa03 fc0e 	lsl.w	ip, r3, lr
   da824:	bf28      	it	cs
   da826:	f04c 0c02 	orrcs.w	ip, ip, #2
   da82a:	fa43 f305 	asr.w	r3, r3, r5
   da82e:	18c0      	adds	r0, r0, r3
   da830:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da838:	d507      	bpl.n	da84a <__adddf3+0xe6>
   da83a:	f04f 0e00 	mov.w	lr, #0
   da83e:	f1dc 0c00 	rsbs	ip, ip, #0
   da842:	eb7e 0000 	sbcs.w	r0, lr, r0
   da846:	eb6e 0101 	sbc.w	r1, lr, r1
   da84a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da84e:	d31b      	bcc.n	da888 <__adddf3+0x124>
   da850:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da854:	d30c      	bcc.n	da870 <__adddf3+0x10c>
   da856:	0849      	lsrs	r1, r1, #1
   da858:	ea5f 0030 	movs.w	r0, r0, rrx
   da85c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da860:	f104 0401 	add.w	r4, r4, #1
   da864:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da868:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da86c:	f080 809a 	bcs.w	da9a4 <__adddf3+0x240>
   da870:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da874:	bf08      	it	eq
   da876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da87a:	f150 0000 	adcs.w	r0, r0, #0
   da87e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da882:	ea41 0105 	orr.w	r1, r1, r5
   da886:	bd30      	pop	{r4, r5, pc}
   da888:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da88c:	4140      	adcs	r0, r0
   da88e:	eb41 0101 	adc.w	r1, r1, r1
   da892:	3c01      	subs	r4, #1
   da894:	bf28      	it	cs
   da896:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da89a:	d2e9      	bcs.n	da870 <__adddf3+0x10c>
   da89c:	f091 0f00 	teq	r1, #0
   da8a0:	bf04      	itt	eq
   da8a2:	4601      	moveq	r1, r0
   da8a4:	2000      	moveq	r0, #0
   da8a6:	fab1 f381 	clz	r3, r1
   da8aa:	bf08      	it	eq
   da8ac:	3320      	addeq	r3, #32
   da8ae:	f1a3 030b 	sub.w	r3, r3, #11
   da8b2:	f1b3 0220 	subs.w	r2, r3, #32
   da8b6:	da0c      	bge.n	da8d2 <__adddf3+0x16e>
   da8b8:	320c      	adds	r2, #12
   da8ba:	dd08      	ble.n	da8ce <__adddf3+0x16a>
   da8bc:	f102 0c14 	add.w	ip, r2, #20
   da8c0:	f1c2 020c 	rsb	r2, r2, #12
   da8c4:	fa01 f00c 	lsl.w	r0, r1, ip
   da8c8:	fa21 f102 	lsr.w	r1, r1, r2
   da8cc:	e00c      	b.n	da8e8 <__adddf3+0x184>
   da8ce:	f102 0214 	add.w	r2, r2, #20
   da8d2:	bfd8      	it	le
   da8d4:	f1c2 0c20 	rsble	ip, r2, #32
   da8d8:	fa01 f102 	lsl.w	r1, r1, r2
   da8dc:	fa20 fc0c 	lsr.w	ip, r0, ip
   da8e0:	bfdc      	itt	le
   da8e2:	ea41 010c 	orrle.w	r1, r1, ip
   da8e6:	4090      	lslle	r0, r2
   da8e8:	1ae4      	subs	r4, r4, r3
   da8ea:	bfa2      	ittt	ge
   da8ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da8f0:	4329      	orrge	r1, r5
   da8f2:	bd30      	popge	{r4, r5, pc}
   da8f4:	ea6f 0404 	mvn.w	r4, r4
   da8f8:	3c1f      	subs	r4, #31
   da8fa:	da1c      	bge.n	da936 <__adddf3+0x1d2>
   da8fc:	340c      	adds	r4, #12
   da8fe:	dc0e      	bgt.n	da91e <__adddf3+0x1ba>
   da900:	f104 0414 	add.w	r4, r4, #20
   da904:	f1c4 0220 	rsb	r2, r4, #32
   da908:	fa20 f004 	lsr.w	r0, r0, r4
   da90c:	fa01 f302 	lsl.w	r3, r1, r2
   da910:	ea40 0003 	orr.w	r0, r0, r3
   da914:	fa21 f304 	lsr.w	r3, r1, r4
   da918:	ea45 0103 	orr.w	r1, r5, r3
   da91c:	bd30      	pop	{r4, r5, pc}
   da91e:	f1c4 040c 	rsb	r4, r4, #12
   da922:	f1c4 0220 	rsb	r2, r4, #32
   da926:	fa20 f002 	lsr.w	r0, r0, r2
   da92a:	fa01 f304 	lsl.w	r3, r1, r4
   da92e:	ea40 0003 	orr.w	r0, r0, r3
   da932:	4629      	mov	r1, r5
   da934:	bd30      	pop	{r4, r5, pc}
   da936:	fa21 f004 	lsr.w	r0, r1, r4
   da93a:	4629      	mov	r1, r5
   da93c:	bd30      	pop	{r4, r5, pc}
   da93e:	f094 0f00 	teq	r4, #0
   da942:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da946:	bf06      	itte	eq
   da948:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da94c:	3401      	addeq	r4, #1
   da94e:	3d01      	subne	r5, #1
   da950:	e74e      	b.n	da7f0 <__adddf3+0x8c>
   da952:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da956:	bf18      	it	ne
   da958:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da95c:	d029      	beq.n	da9b2 <__adddf3+0x24e>
   da95e:	ea94 0f05 	teq	r4, r5
   da962:	bf08      	it	eq
   da964:	ea90 0f02 	teqeq	r0, r2
   da968:	d005      	beq.n	da976 <__adddf3+0x212>
   da96a:	ea54 0c00 	orrs.w	ip, r4, r0
   da96e:	bf04      	itt	eq
   da970:	4619      	moveq	r1, r3
   da972:	4610      	moveq	r0, r2
   da974:	bd30      	pop	{r4, r5, pc}
   da976:	ea91 0f03 	teq	r1, r3
   da97a:	bf1e      	ittt	ne
   da97c:	2100      	movne	r1, #0
   da97e:	2000      	movne	r0, #0
   da980:	bd30      	popne	{r4, r5, pc}
   da982:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da986:	d105      	bne.n	da994 <__adddf3+0x230>
   da988:	0040      	lsls	r0, r0, #1
   da98a:	4149      	adcs	r1, r1
   da98c:	bf28      	it	cs
   da98e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da992:	bd30      	pop	{r4, r5, pc}
   da994:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da998:	bf3c      	itt	cc
   da99a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da99e:	bd30      	popcc	{r4, r5, pc}
   da9a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da9a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da9a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da9ac:	f04f 0000 	mov.w	r0, #0
   da9b0:	bd30      	pop	{r4, r5, pc}
   da9b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da9b6:	bf1a      	itte	ne
   da9b8:	4619      	movne	r1, r3
   da9ba:	4610      	movne	r0, r2
   da9bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da9c0:	bf1c      	itt	ne
   da9c2:	460b      	movne	r3, r1
   da9c4:	4602      	movne	r2, r0
   da9c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da9ca:	bf06      	itte	eq
   da9cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da9d0:	ea91 0f03 	teqeq	r1, r3
   da9d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da9d8:	bd30      	pop	{r4, r5, pc}
   da9da:	bf00      	nop

000da9dc <__aeabi_ui2d>:
   da9dc:	f090 0f00 	teq	r0, #0
   da9e0:	bf04      	itt	eq
   da9e2:	2100      	moveq	r1, #0
   da9e4:	4770      	bxeq	lr
   da9e6:	b530      	push	{r4, r5, lr}
   da9e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da9ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da9f0:	f04f 0500 	mov.w	r5, #0
   da9f4:	f04f 0100 	mov.w	r1, #0
   da9f8:	e750      	b.n	da89c <__adddf3+0x138>
   da9fa:	bf00      	nop

000da9fc <__aeabi_i2d>:
   da9fc:	f090 0f00 	teq	r0, #0
   daa00:	bf04      	itt	eq
   daa02:	2100      	moveq	r1, #0
   daa04:	4770      	bxeq	lr
   daa06:	b530      	push	{r4, r5, lr}
   daa08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   daa0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   daa10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   daa14:	bf48      	it	mi
   daa16:	4240      	negmi	r0, r0
   daa18:	f04f 0100 	mov.w	r1, #0
   daa1c:	e73e      	b.n	da89c <__adddf3+0x138>
   daa1e:	bf00      	nop

000daa20 <__aeabi_f2d>:
   daa20:	0042      	lsls	r2, r0, #1
   daa22:	ea4f 01e2 	mov.w	r1, r2, asr #3
   daa26:	ea4f 0131 	mov.w	r1, r1, rrx
   daa2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   daa2e:	bf1f      	itttt	ne
   daa30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   daa34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   daa38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   daa3c:	4770      	bxne	lr
   daa3e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   daa42:	bf08      	it	eq
   daa44:	4770      	bxeq	lr
   daa46:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   daa4a:	bf04      	itt	eq
   daa4c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   daa50:	4770      	bxeq	lr
   daa52:	b530      	push	{r4, r5, lr}
   daa54:	f44f 7460 	mov.w	r4, #896	; 0x380
   daa58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   daa5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   daa60:	e71c      	b.n	da89c <__adddf3+0x138>
   daa62:	bf00      	nop

000daa64 <__aeabi_ul2d>:
   daa64:	ea50 0201 	orrs.w	r2, r0, r1
   daa68:	bf08      	it	eq
   daa6a:	4770      	bxeq	lr
   daa6c:	b530      	push	{r4, r5, lr}
   daa6e:	f04f 0500 	mov.w	r5, #0
   daa72:	e00a      	b.n	daa8a <__aeabi_l2d+0x16>

000daa74 <__aeabi_l2d>:
   daa74:	ea50 0201 	orrs.w	r2, r0, r1
   daa78:	bf08      	it	eq
   daa7a:	4770      	bxeq	lr
   daa7c:	b530      	push	{r4, r5, lr}
   daa7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   daa82:	d502      	bpl.n	daa8a <__aeabi_l2d+0x16>
   daa84:	4240      	negs	r0, r0
   daa86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daa8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   daa8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   daa92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   daa96:	f43f aed8 	beq.w	da84a <__adddf3+0xe6>
   daa9a:	f04f 0203 	mov.w	r2, #3
   daa9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   daaa2:	bf18      	it	ne
   daaa4:	3203      	addne	r2, #3
   daaa6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   daaaa:	bf18      	it	ne
   daaac:	3203      	addne	r2, #3
   daaae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   daab2:	f1c2 0320 	rsb	r3, r2, #32
   daab6:	fa00 fc03 	lsl.w	ip, r0, r3
   daaba:	fa20 f002 	lsr.w	r0, r0, r2
   daabe:	fa01 fe03 	lsl.w	lr, r1, r3
   daac2:	ea40 000e 	orr.w	r0, r0, lr
   daac6:	fa21 f102 	lsr.w	r1, r1, r2
   daaca:	4414      	add	r4, r2
   daacc:	e6bd      	b.n	da84a <__adddf3+0xe6>
   daace:	bf00      	nop

000daad0 <__aeabi_dmul>:
   daad0:	b570      	push	{r4, r5, r6, lr}
   daad2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daad6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daada:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daade:	bf1d      	ittte	ne
   daae0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daae4:	ea94 0f0c 	teqne	r4, ip
   daae8:	ea95 0f0c 	teqne	r5, ip
   daaec:	f000 f8de 	bleq	dacac <__aeabi_dmul+0x1dc>
   daaf0:	442c      	add	r4, r5
   daaf2:	ea81 0603 	eor.w	r6, r1, r3
   daaf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   daafa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   daafe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dab02:	bf18      	it	ne
   dab04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dab08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dab0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dab10:	d038      	beq.n	dab84 <__aeabi_dmul+0xb4>
   dab12:	fba0 ce02 	umull	ip, lr, r0, r2
   dab16:	f04f 0500 	mov.w	r5, #0
   dab1a:	fbe1 e502 	umlal	lr, r5, r1, r2
   dab1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dab22:	fbe0 e503 	umlal	lr, r5, r0, r3
   dab26:	f04f 0600 	mov.w	r6, #0
   dab2a:	fbe1 5603 	umlal	r5, r6, r1, r3
   dab2e:	f09c 0f00 	teq	ip, #0
   dab32:	bf18      	it	ne
   dab34:	f04e 0e01 	orrne.w	lr, lr, #1
   dab38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dab3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dab40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dab44:	d204      	bcs.n	dab50 <__aeabi_dmul+0x80>
   dab46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dab4a:	416d      	adcs	r5, r5
   dab4c:	eb46 0606 	adc.w	r6, r6, r6
   dab50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dab54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dab58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dab5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dab60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dab64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dab68:	bf88      	it	hi
   dab6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dab6e:	d81e      	bhi.n	dabae <__aeabi_dmul+0xde>
   dab70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dab74:	bf08      	it	eq
   dab76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dab7a:	f150 0000 	adcs.w	r0, r0, #0
   dab7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dab82:	bd70      	pop	{r4, r5, r6, pc}
   dab84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dab88:	ea46 0101 	orr.w	r1, r6, r1
   dab8c:	ea40 0002 	orr.w	r0, r0, r2
   dab90:	ea81 0103 	eor.w	r1, r1, r3
   dab94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dab98:	bfc2      	ittt	gt
   dab9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dab9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   daba2:	bd70      	popgt	{r4, r5, r6, pc}
   daba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daba8:	f04f 0e00 	mov.w	lr, #0
   dabac:	3c01      	subs	r4, #1
   dabae:	f300 80ab 	bgt.w	dad08 <__aeabi_dmul+0x238>
   dabb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dabb6:	bfde      	ittt	le
   dabb8:	2000      	movle	r0, #0
   dabba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dabbe:	bd70      	pople	{r4, r5, r6, pc}
   dabc0:	f1c4 0400 	rsb	r4, r4, #0
   dabc4:	3c20      	subs	r4, #32
   dabc6:	da35      	bge.n	dac34 <__aeabi_dmul+0x164>
   dabc8:	340c      	adds	r4, #12
   dabca:	dc1b      	bgt.n	dac04 <__aeabi_dmul+0x134>
   dabcc:	f104 0414 	add.w	r4, r4, #20
   dabd0:	f1c4 0520 	rsb	r5, r4, #32
   dabd4:	fa00 f305 	lsl.w	r3, r0, r5
   dabd8:	fa20 f004 	lsr.w	r0, r0, r4
   dabdc:	fa01 f205 	lsl.w	r2, r1, r5
   dabe0:	ea40 0002 	orr.w	r0, r0, r2
   dabe4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dabe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dabec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dabf0:	fa21 f604 	lsr.w	r6, r1, r4
   dabf4:	eb42 0106 	adc.w	r1, r2, r6
   dabf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dabfc:	bf08      	it	eq
   dabfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dac02:	bd70      	pop	{r4, r5, r6, pc}
   dac04:	f1c4 040c 	rsb	r4, r4, #12
   dac08:	f1c4 0520 	rsb	r5, r4, #32
   dac0c:	fa00 f304 	lsl.w	r3, r0, r4
   dac10:	fa20 f005 	lsr.w	r0, r0, r5
   dac14:	fa01 f204 	lsl.w	r2, r1, r4
   dac18:	ea40 0002 	orr.w	r0, r0, r2
   dac1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dac20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dac24:	f141 0100 	adc.w	r1, r1, #0
   dac28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dac2c:	bf08      	it	eq
   dac2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dac32:	bd70      	pop	{r4, r5, r6, pc}
   dac34:	f1c4 0520 	rsb	r5, r4, #32
   dac38:	fa00 f205 	lsl.w	r2, r0, r5
   dac3c:	ea4e 0e02 	orr.w	lr, lr, r2
   dac40:	fa20 f304 	lsr.w	r3, r0, r4
   dac44:	fa01 f205 	lsl.w	r2, r1, r5
   dac48:	ea43 0302 	orr.w	r3, r3, r2
   dac4c:	fa21 f004 	lsr.w	r0, r1, r4
   dac50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dac54:	fa21 f204 	lsr.w	r2, r1, r4
   dac58:	ea20 0002 	bic.w	r0, r0, r2
   dac5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dac60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dac64:	bf08      	it	eq
   dac66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dac6a:	bd70      	pop	{r4, r5, r6, pc}
   dac6c:	f094 0f00 	teq	r4, #0
   dac70:	d10f      	bne.n	dac92 <__aeabi_dmul+0x1c2>
   dac72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dac76:	0040      	lsls	r0, r0, #1
   dac78:	eb41 0101 	adc.w	r1, r1, r1
   dac7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dac80:	bf08      	it	eq
   dac82:	3c01      	subeq	r4, #1
   dac84:	d0f7      	beq.n	dac76 <__aeabi_dmul+0x1a6>
   dac86:	ea41 0106 	orr.w	r1, r1, r6
   dac8a:	f095 0f00 	teq	r5, #0
   dac8e:	bf18      	it	ne
   dac90:	4770      	bxne	lr
   dac92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dac96:	0052      	lsls	r2, r2, #1
   dac98:	eb43 0303 	adc.w	r3, r3, r3
   dac9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   daca0:	bf08      	it	eq
   daca2:	3d01      	subeq	r5, #1
   daca4:	d0f7      	beq.n	dac96 <__aeabi_dmul+0x1c6>
   daca6:	ea43 0306 	orr.w	r3, r3, r6
   dacaa:	4770      	bx	lr
   dacac:	ea94 0f0c 	teq	r4, ip
   dacb0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dacb4:	bf18      	it	ne
   dacb6:	ea95 0f0c 	teqne	r5, ip
   dacba:	d00c      	beq.n	dacd6 <__aeabi_dmul+0x206>
   dacbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dacc0:	bf18      	it	ne
   dacc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dacc6:	d1d1      	bne.n	dac6c <__aeabi_dmul+0x19c>
   dacc8:	ea81 0103 	eor.w	r1, r1, r3
   daccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dacd0:	f04f 0000 	mov.w	r0, #0
   dacd4:	bd70      	pop	{r4, r5, r6, pc}
   dacd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dacda:	bf06      	itte	eq
   dacdc:	4610      	moveq	r0, r2
   dacde:	4619      	moveq	r1, r3
   dace0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dace4:	d019      	beq.n	dad1a <__aeabi_dmul+0x24a>
   dace6:	ea94 0f0c 	teq	r4, ip
   dacea:	d102      	bne.n	dacf2 <__aeabi_dmul+0x222>
   dacec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dacf0:	d113      	bne.n	dad1a <__aeabi_dmul+0x24a>
   dacf2:	ea95 0f0c 	teq	r5, ip
   dacf6:	d105      	bne.n	dad04 <__aeabi_dmul+0x234>
   dacf8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dacfc:	bf1c      	itt	ne
   dacfe:	4610      	movne	r0, r2
   dad00:	4619      	movne	r1, r3
   dad02:	d10a      	bne.n	dad1a <__aeabi_dmul+0x24a>
   dad04:	ea81 0103 	eor.w	r1, r1, r3
   dad08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dad0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dad10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dad14:	f04f 0000 	mov.w	r0, #0
   dad18:	bd70      	pop	{r4, r5, r6, pc}
   dad1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dad1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dad22:	bd70      	pop	{r4, r5, r6, pc}

000dad24 <__aeabi_ddiv>:
   dad24:	b570      	push	{r4, r5, r6, lr}
   dad26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dad2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dad2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dad32:	bf1d      	ittte	ne
   dad34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dad38:	ea94 0f0c 	teqne	r4, ip
   dad3c:	ea95 0f0c 	teqne	r5, ip
   dad40:	f000 f8a7 	bleq	dae92 <__aeabi_ddiv+0x16e>
   dad44:	eba4 0405 	sub.w	r4, r4, r5
   dad48:	ea81 0e03 	eor.w	lr, r1, r3
   dad4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dad50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dad54:	f000 8088 	beq.w	dae68 <__aeabi_ddiv+0x144>
   dad58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dad5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dad60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dad64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dad68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dad6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dad70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dad74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dad78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dad7c:	429d      	cmp	r5, r3
   dad7e:	bf08      	it	eq
   dad80:	4296      	cmpeq	r6, r2
   dad82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dad86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dad8a:	d202      	bcs.n	dad92 <__aeabi_ddiv+0x6e>
   dad8c:	085b      	lsrs	r3, r3, #1
   dad8e:	ea4f 0232 	mov.w	r2, r2, rrx
   dad92:	1ab6      	subs	r6, r6, r2
   dad94:	eb65 0503 	sbc.w	r5, r5, r3
   dad98:	085b      	lsrs	r3, r3, #1
   dad9a:	ea4f 0232 	mov.w	r2, r2, rrx
   dad9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dada2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dada6:	ebb6 0e02 	subs.w	lr, r6, r2
   dadaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   dadae:	bf22      	ittt	cs
   dadb0:	1ab6      	subcs	r6, r6, r2
   dadb2:	4675      	movcs	r5, lr
   dadb4:	ea40 000c 	orrcs.w	r0, r0, ip
   dadb8:	085b      	lsrs	r3, r3, #1
   dadba:	ea4f 0232 	mov.w	r2, r2, rrx
   dadbe:	ebb6 0e02 	subs.w	lr, r6, r2
   dadc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dadc6:	bf22      	ittt	cs
   dadc8:	1ab6      	subcs	r6, r6, r2
   dadca:	4675      	movcs	r5, lr
   dadcc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dadd0:	085b      	lsrs	r3, r3, #1
   dadd2:	ea4f 0232 	mov.w	r2, r2, rrx
   dadd6:	ebb6 0e02 	subs.w	lr, r6, r2
   dadda:	eb75 0e03 	sbcs.w	lr, r5, r3
   dadde:	bf22      	ittt	cs
   dade0:	1ab6      	subcs	r6, r6, r2
   dade2:	4675      	movcs	r5, lr
   dade4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dade8:	085b      	lsrs	r3, r3, #1
   dadea:	ea4f 0232 	mov.w	r2, r2, rrx
   dadee:	ebb6 0e02 	subs.w	lr, r6, r2
   dadf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dadf6:	bf22      	ittt	cs
   dadf8:	1ab6      	subcs	r6, r6, r2
   dadfa:	4675      	movcs	r5, lr
   dadfc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dae00:	ea55 0e06 	orrs.w	lr, r5, r6
   dae04:	d018      	beq.n	dae38 <__aeabi_ddiv+0x114>
   dae06:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dae0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dae0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dae12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dae16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dae1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dae1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dae22:	d1c0      	bne.n	dada6 <__aeabi_ddiv+0x82>
   dae24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dae28:	d10b      	bne.n	dae42 <__aeabi_ddiv+0x11e>
   dae2a:	ea41 0100 	orr.w	r1, r1, r0
   dae2e:	f04f 0000 	mov.w	r0, #0
   dae32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dae36:	e7b6      	b.n	dada6 <__aeabi_ddiv+0x82>
   dae38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dae3c:	bf04      	itt	eq
   dae3e:	4301      	orreq	r1, r0
   dae40:	2000      	moveq	r0, #0
   dae42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dae46:	bf88      	it	hi
   dae48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dae4c:	f63f aeaf 	bhi.w	dabae <__aeabi_dmul+0xde>
   dae50:	ebb5 0c03 	subs.w	ip, r5, r3
   dae54:	bf04      	itt	eq
   dae56:	ebb6 0c02 	subseq.w	ip, r6, r2
   dae5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dae5e:	f150 0000 	adcs.w	r0, r0, #0
   dae62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dae66:	bd70      	pop	{r4, r5, r6, pc}
   dae68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dae6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dae70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dae74:	bfc2      	ittt	gt
   dae76:	ebd4 050c 	rsbsgt	r5, r4, ip
   dae7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dae7e:	bd70      	popgt	{r4, r5, r6, pc}
   dae80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dae84:	f04f 0e00 	mov.w	lr, #0
   dae88:	3c01      	subs	r4, #1
   dae8a:	e690      	b.n	dabae <__aeabi_dmul+0xde>
   dae8c:	ea45 0e06 	orr.w	lr, r5, r6
   dae90:	e68d      	b.n	dabae <__aeabi_dmul+0xde>
   dae92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dae96:	ea94 0f0c 	teq	r4, ip
   dae9a:	bf08      	it	eq
   dae9c:	ea95 0f0c 	teqeq	r5, ip
   daea0:	f43f af3b 	beq.w	dad1a <__aeabi_dmul+0x24a>
   daea4:	ea94 0f0c 	teq	r4, ip
   daea8:	d10a      	bne.n	daec0 <__aeabi_ddiv+0x19c>
   daeaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   daeae:	f47f af34 	bne.w	dad1a <__aeabi_dmul+0x24a>
   daeb2:	ea95 0f0c 	teq	r5, ip
   daeb6:	f47f af25 	bne.w	dad04 <__aeabi_dmul+0x234>
   daeba:	4610      	mov	r0, r2
   daebc:	4619      	mov	r1, r3
   daebe:	e72c      	b.n	dad1a <__aeabi_dmul+0x24a>
   daec0:	ea95 0f0c 	teq	r5, ip
   daec4:	d106      	bne.n	daed4 <__aeabi_ddiv+0x1b0>
   daec6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daeca:	f43f aefd 	beq.w	dacc8 <__aeabi_dmul+0x1f8>
   daece:	4610      	mov	r0, r2
   daed0:	4619      	mov	r1, r3
   daed2:	e722      	b.n	dad1a <__aeabi_dmul+0x24a>
   daed4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daed8:	bf18      	it	ne
   daeda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daede:	f47f aec5 	bne.w	dac6c <__aeabi_dmul+0x19c>
   daee2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   daee6:	f47f af0d 	bne.w	dad04 <__aeabi_dmul+0x234>
   daeea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   daeee:	f47f aeeb 	bne.w	dacc8 <__aeabi_dmul+0x1f8>
   daef2:	e712      	b.n	dad1a <__aeabi_dmul+0x24a>

000daef4 <__gedf2>:
   daef4:	f04f 3cff 	mov.w	ip, #4294967295
   daef8:	e006      	b.n	daf08 <__cmpdf2+0x4>
   daefa:	bf00      	nop

000daefc <__ledf2>:
   daefc:	f04f 0c01 	mov.w	ip, #1
   daf00:	e002      	b.n	daf08 <__cmpdf2+0x4>
   daf02:	bf00      	nop

000daf04 <__cmpdf2>:
   daf04:	f04f 0c01 	mov.w	ip, #1
   daf08:	f84d cd04 	str.w	ip, [sp, #-4]!
   daf0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daf10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daf14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daf18:	bf18      	it	ne
   daf1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   daf1e:	d01b      	beq.n	daf58 <__cmpdf2+0x54>
   daf20:	b001      	add	sp, #4
   daf22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   daf26:	bf0c      	ite	eq
   daf28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   daf2c:	ea91 0f03 	teqne	r1, r3
   daf30:	bf02      	ittt	eq
   daf32:	ea90 0f02 	teqeq	r0, r2
   daf36:	2000      	moveq	r0, #0
   daf38:	4770      	bxeq	lr
   daf3a:	f110 0f00 	cmn.w	r0, #0
   daf3e:	ea91 0f03 	teq	r1, r3
   daf42:	bf58      	it	pl
   daf44:	4299      	cmppl	r1, r3
   daf46:	bf08      	it	eq
   daf48:	4290      	cmpeq	r0, r2
   daf4a:	bf2c      	ite	cs
   daf4c:	17d8      	asrcs	r0, r3, #31
   daf4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   daf52:	f040 0001 	orr.w	r0, r0, #1
   daf56:	4770      	bx	lr
   daf58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daf5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daf60:	d102      	bne.n	daf68 <__cmpdf2+0x64>
   daf62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   daf66:	d107      	bne.n	daf78 <__cmpdf2+0x74>
   daf68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daf6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daf70:	d1d6      	bne.n	daf20 <__cmpdf2+0x1c>
   daf72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   daf76:	d0d3      	beq.n	daf20 <__cmpdf2+0x1c>
   daf78:	f85d 0b04 	ldr.w	r0, [sp], #4
   daf7c:	4770      	bx	lr
   daf7e:	bf00      	nop

000daf80 <__aeabi_cdrcmple>:
   daf80:	4684      	mov	ip, r0
   daf82:	4610      	mov	r0, r2
   daf84:	4662      	mov	r2, ip
   daf86:	468c      	mov	ip, r1
   daf88:	4619      	mov	r1, r3
   daf8a:	4663      	mov	r3, ip
   daf8c:	e000      	b.n	daf90 <__aeabi_cdcmpeq>
   daf8e:	bf00      	nop

000daf90 <__aeabi_cdcmpeq>:
   daf90:	b501      	push	{r0, lr}
   daf92:	f7ff ffb7 	bl	daf04 <__cmpdf2>
   daf96:	2800      	cmp	r0, #0
   daf98:	bf48      	it	mi
   daf9a:	f110 0f00 	cmnmi.w	r0, #0
   daf9e:	bd01      	pop	{r0, pc}

000dafa0 <__aeabi_dcmpeq>:
   dafa0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dafa4:	f7ff fff4 	bl	daf90 <__aeabi_cdcmpeq>
   dafa8:	bf0c      	ite	eq
   dafaa:	2001      	moveq	r0, #1
   dafac:	2000      	movne	r0, #0
   dafae:	f85d fb08 	ldr.w	pc, [sp], #8
   dafb2:	bf00      	nop

000dafb4 <__aeabi_dcmplt>:
   dafb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dafb8:	f7ff ffea 	bl	daf90 <__aeabi_cdcmpeq>
   dafbc:	bf34      	ite	cc
   dafbe:	2001      	movcc	r0, #1
   dafc0:	2000      	movcs	r0, #0
   dafc2:	f85d fb08 	ldr.w	pc, [sp], #8
   dafc6:	bf00      	nop

000dafc8 <__aeabi_dcmple>:
   dafc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dafcc:	f7ff ffe0 	bl	daf90 <__aeabi_cdcmpeq>
   dafd0:	bf94      	ite	ls
   dafd2:	2001      	movls	r0, #1
   dafd4:	2000      	movhi	r0, #0
   dafd6:	f85d fb08 	ldr.w	pc, [sp], #8
   dafda:	bf00      	nop

000dafdc <__aeabi_dcmpge>:
   dafdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dafe0:	f7ff ffce 	bl	daf80 <__aeabi_cdrcmple>
   dafe4:	bf94      	ite	ls
   dafe6:	2001      	movls	r0, #1
   dafe8:	2000      	movhi	r0, #0
   dafea:	f85d fb08 	ldr.w	pc, [sp], #8
   dafee:	bf00      	nop

000daff0 <__aeabi_dcmpgt>:
   daff0:	f84d ed08 	str.w	lr, [sp, #-8]!
   daff4:	f7ff ffc4 	bl	daf80 <__aeabi_cdrcmple>
   daff8:	bf34      	ite	cc
   daffa:	2001      	movcc	r0, #1
   daffc:	2000      	movcs	r0, #0
   daffe:	f85d fb08 	ldr.w	pc, [sp], #8
   db002:	bf00      	nop

000db004 <__aeabi_dcmpun>:
   db004:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db008:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db00c:	d102      	bne.n	db014 <__aeabi_dcmpun+0x10>
   db00e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db012:	d10a      	bne.n	db02a <__aeabi_dcmpun+0x26>
   db014:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db01c:	d102      	bne.n	db024 <__aeabi_dcmpun+0x20>
   db01e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db022:	d102      	bne.n	db02a <__aeabi_dcmpun+0x26>
   db024:	f04f 0000 	mov.w	r0, #0
   db028:	4770      	bx	lr
   db02a:	f04f 0001 	mov.w	r0, #1
   db02e:	4770      	bx	lr

000db030 <__aeabi_d2iz>:
   db030:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db034:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db038:	d215      	bcs.n	db066 <__aeabi_d2iz+0x36>
   db03a:	d511      	bpl.n	db060 <__aeabi_d2iz+0x30>
   db03c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db040:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db044:	d912      	bls.n	db06c <__aeabi_d2iz+0x3c>
   db046:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db04a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db04e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db052:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db056:	fa23 f002 	lsr.w	r0, r3, r2
   db05a:	bf18      	it	ne
   db05c:	4240      	negne	r0, r0
   db05e:	4770      	bx	lr
   db060:	f04f 0000 	mov.w	r0, #0
   db064:	4770      	bx	lr
   db066:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db06a:	d105      	bne.n	db078 <__aeabi_d2iz+0x48>
   db06c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   db070:	bf08      	it	eq
   db072:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db076:	4770      	bx	lr
   db078:	f04f 0000 	mov.w	r0, #0
   db07c:	4770      	bx	lr
   db07e:	bf00      	nop

000db080 <__aeabi_d2uiz>:
   db080:	004a      	lsls	r2, r1, #1
   db082:	d211      	bcs.n	db0a8 <__aeabi_d2uiz+0x28>
   db084:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db088:	d211      	bcs.n	db0ae <__aeabi_d2uiz+0x2e>
   db08a:	d50d      	bpl.n	db0a8 <__aeabi_d2uiz+0x28>
   db08c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db090:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db094:	d40e      	bmi.n	db0b4 <__aeabi_d2uiz+0x34>
   db096:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db09a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db09e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db0a2:	fa23 f002 	lsr.w	r0, r3, r2
   db0a6:	4770      	bx	lr
   db0a8:	f04f 0000 	mov.w	r0, #0
   db0ac:	4770      	bx	lr
   db0ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db0b2:	d102      	bne.n	db0ba <__aeabi_d2uiz+0x3a>
   db0b4:	f04f 30ff 	mov.w	r0, #4294967295
   db0b8:	4770      	bx	lr
   db0ba:	f04f 0000 	mov.w	r0, #0
   db0be:	4770      	bx	lr

000db0c0 <atol>:
   db0c0:	220a      	movs	r2, #10
   db0c2:	2100      	movs	r1, #0
   db0c4:	f000 b924 	b.w	db310 <strtol>

000db0c8 <__cxa_atexit>:
   db0c8:	b510      	push	{r4, lr}
   db0ca:	4c05      	ldr	r4, [pc, #20]	; (db0e0 <__cxa_atexit+0x18>)
   db0cc:	4613      	mov	r3, r2
   db0ce:	b12c      	cbz	r4, db0dc <__cxa_atexit+0x14>
   db0d0:	460a      	mov	r2, r1
   db0d2:	4601      	mov	r1, r0
   db0d4:	2002      	movs	r0, #2
   db0d6:	f3af 8000 	nop.w
   db0da:	bd10      	pop	{r4, pc}
   db0dc:	4620      	mov	r0, r4
   db0de:	e7fc      	b.n	db0da <__cxa_atexit+0x12>
   db0e0:	00000000 	.word	0x00000000

000db0e4 <memcmp>:
   db0e4:	b530      	push	{r4, r5, lr}
   db0e6:	3901      	subs	r1, #1
   db0e8:	2400      	movs	r4, #0
   db0ea:	42a2      	cmp	r2, r4
   db0ec:	d101      	bne.n	db0f2 <memcmp+0xe>
   db0ee:	2000      	movs	r0, #0
   db0f0:	e005      	b.n	db0fe <memcmp+0x1a>
   db0f2:	5d03      	ldrb	r3, [r0, r4]
   db0f4:	3401      	adds	r4, #1
   db0f6:	5d0d      	ldrb	r5, [r1, r4]
   db0f8:	42ab      	cmp	r3, r5
   db0fa:	d0f6      	beq.n	db0ea <memcmp+0x6>
   db0fc:	1b58      	subs	r0, r3, r5
   db0fe:	bd30      	pop	{r4, r5, pc}

000db100 <memcpy>:
   db100:	440a      	add	r2, r1
   db102:	4291      	cmp	r1, r2
   db104:	f100 33ff 	add.w	r3, r0, #4294967295
   db108:	d100      	bne.n	db10c <memcpy+0xc>
   db10a:	4770      	bx	lr
   db10c:	b510      	push	{r4, lr}
   db10e:	f811 4b01 	ldrb.w	r4, [r1], #1
   db112:	f803 4f01 	strb.w	r4, [r3, #1]!
   db116:	4291      	cmp	r1, r2
   db118:	d1f9      	bne.n	db10e <memcpy+0xe>
   db11a:	bd10      	pop	{r4, pc}

000db11c <memmove>:
   db11c:	4288      	cmp	r0, r1
   db11e:	b510      	push	{r4, lr}
   db120:	eb01 0402 	add.w	r4, r1, r2
   db124:	d902      	bls.n	db12c <memmove+0x10>
   db126:	4284      	cmp	r4, r0
   db128:	4623      	mov	r3, r4
   db12a:	d807      	bhi.n	db13c <memmove+0x20>
   db12c:	1e43      	subs	r3, r0, #1
   db12e:	42a1      	cmp	r1, r4
   db130:	d008      	beq.n	db144 <memmove+0x28>
   db132:	f811 2b01 	ldrb.w	r2, [r1], #1
   db136:	f803 2f01 	strb.w	r2, [r3, #1]!
   db13a:	e7f8      	b.n	db12e <memmove+0x12>
   db13c:	4402      	add	r2, r0
   db13e:	4601      	mov	r1, r0
   db140:	428a      	cmp	r2, r1
   db142:	d100      	bne.n	db146 <memmove+0x2a>
   db144:	bd10      	pop	{r4, pc}
   db146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   db14e:	e7f7      	b.n	db140 <memmove+0x24>

000db150 <memset>:
   db150:	4402      	add	r2, r0
   db152:	4603      	mov	r3, r0
   db154:	4293      	cmp	r3, r2
   db156:	d100      	bne.n	db15a <memset+0xa>
   db158:	4770      	bx	lr
   db15a:	f803 1b01 	strb.w	r1, [r3], #1
   db15e:	e7f9      	b.n	db154 <memset+0x4>

000db160 <srand>:
   db160:	b538      	push	{r3, r4, r5, lr}
   db162:	4b0d      	ldr	r3, [pc, #52]	; (db198 <srand+0x38>)
   db164:	681d      	ldr	r5, [r3, #0]
   db166:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db168:	4604      	mov	r4, r0
   db16a:	b97b      	cbnz	r3, db18c <srand+0x2c>
   db16c:	2018      	movs	r0, #24
   db16e:	f7fc ff23 	bl	d7fb8 <malloc>
   db172:	4a0a      	ldr	r2, [pc, #40]	; (db19c <srand+0x3c>)
   db174:	4b0a      	ldr	r3, [pc, #40]	; (db1a0 <srand+0x40>)
   db176:	63a8      	str	r0, [r5, #56]	; 0x38
   db178:	e9c0 2300 	strd	r2, r3, [r0]
   db17c:	4b09      	ldr	r3, [pc, #36]	; (db1a4 <srand+0x44>)
   db17e:	6083      	str	r3, [r0, #8]
   db180:	230b      	movs	r3, #11
   db182:	8183      	strh	r3, [r0, #12]
   db184:	2201      	movs	r2, #1
   db186:	2300      	movs	r3, #0
   db188:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db18c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db18e:	2200      	movs	r2, #0
   db190:	611c      	str	r4, [r3, #16]
   db192:	615a      	str	r2, [r3, #20]
   db194:	bd38      	pop	{r3, r4, r5, pc}
   db196:	bf00      	nop
   db198:	2003dde4 	.word	0x2003dde4
   db19c:	abcd330e 	.word	0xabcd330e
   db1a0:	e66d1234 	.word	0xe66d1234
   db1a4:	0005deec 	.word	0x0005deec

000db1a8 <strcmp>:
   db1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   db1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
   db1b0:	2a01      	cmp	r2, #1
   db1b2:	bf28      	it	cs
   db1b4:	429a      	cmpcs	r2, r3
   db1b6:	d0f7      	beq.n	db1a8 <strcmp>
   db1b8:	1ad0      	subs	r0, r2, r3
   db1ba:	4770      	bx	lr

000db1bc <strcpy>:
   db1bc:	4603      	mov	r3, r0
   db1be:	f811 2b01 	ldrb.w	r2, [r1], #1
   db1c2:	f803 2b01 	strb.w	r2, [r3], #1
   db1c6:	2a00      	cmp	r2, #0
   db1c8:	d1f9      	bne.n	db1be <strcpy+0x2>
   db1ca:	4770      	bx	lr

000db1cc <strlen>:
   db1cc:	4603      	mov	r3, r0
   db1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   db1d2:	2a00      	cmp	r2, #0
   db1d4:	d1fb      	bne.n	db1ce <strlen+0x2>
   db1d6:	1a18      	subs	r0, r3, r0
   db1d8:	3801      	subs	r0, #1
   db1da:	4770      	bx	lr

000db1dc <strncpy>:
   db1dc:	b510      	push	{r4, lr}
   db1de:	3901      	subs	r1, #1
   db1e0:	4603      	mov	r3, r0
   db1e2:	b132      	cbz	r2, db1f2 <strncpy+0x16>
   db1e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db1e8:	f803 4b01 	strb.w	r4, [r3], #1
   db1ec:	3a01      	subs	r2, #1
   db1ee:	2c00      	cmp	r4, #0
   db1f0:	d1f7      	bne.n	db1e2 <strncpy+0x6>
   db1f2:	441a      	add	r2, r3
   db1f4:	2100      	movs	r1, #0
   db1f6:	4293      	cmp	r3, r2
   db1f8:	d100      	bne.n	db1fc <strncpy+0x20>
   db1fa:	bd10      	pop	{r4, pc}
   db1fc:	f803 1b01 	strb.w	r1, [r3], #1
   db200:	e7f9      	b.n	db1f6 <strncpy+0x1a>

000db202 <strnlen>:
   db202:	b510      	push	{r4, lr}
   db204:	4602      	mov	r2, r0
   db206:	4401      	add	r1, r0
   db208:	428a      	cmp	r2, r1
   db20a:	4613      	mov	r3, r2
   db20c:	d101      	bne.n	db212 <strnlen+0x10>
   db20e:	1a18      	subs	r0, r3, r0
   db210:	bd10      	pop	{r4, pc}
   db212:	781c      	ldrb	r4, [r3, #0]
   db214:	3201      	adds	r2, #1
   db216:	2c00      	cmp	r4, #0
   db218:	d1f6      	bne.n	db208 <strnlen+0x6>
   db21a:	e7f8      	b.n	db20e <strnlen+0xc>

000db21c <_strtol_l.isra.0>:
   db21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db220:	4e3a      	ldr	r6, [pc, #232]	; (db30c <_strtol_l.isra.0+0xf0>)
   db222:	4686      	mov	lr, r0
   db224:	468c      	mov	ip, r1
   db226:	4660      	mov	r0, ip
   db228:	f81c 4b01 	ldrb.w	r4, [ip], #1
   db22c:	5da5      	ldrb	r5, [r4, r6]
   db22e:	f015 0508 	ands.w	r5, r5, #8
   db232:	d1f8      	bne.n	db226 <_strtol_l.isra.0+0xa>
   db234:	2c2d      	cmp	r4, #45	; 0x2d
   db236:	d133      	bne.n	db2a0 <_strtol_l.isra.0+0x84>
   db238:	f89c 4000 	ldrb.w	r4, [ip]
   db23c:	f04f 0801 	mov.w	r8, #1
   db240:	f100 0c02 	add.w	ip, r0, #2
   db244:	2b00      	cmp	r3, #0
   db246:	d05c      	beq.n	db302 <_strtol_l.isra.0+0xe6>
   db248:	2b10      	cmp	r3, #16
   db24a:	d10c      	bne.n	db266 <_strtol_l.isra.0+0x4a>
   db24c:	2c30      	cmp	r4, #48	; 0x30
   db24e:	d10a      	bne.n	db266 <_strtol_l.isra.0+0x4a>
   db250:	f89c 0000 	ldrb.w	r0, [ip]
   db254:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db258:	2858      	cmp	r0, #88	; 0x58
   db25a:	d14d      	bne.n	db2f8 <_strtol_l.isra.0+0xdc>
   db25c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   db260:	2310      	movs	r3, #16
   db262:	f10c 0c02 	add.w	ip, ip, #2
   db266:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   db26a:	3f01      	subs	r7, #1
   db26c:	2600      	movs	r6, #0
   db26e:	fbb7 f9f3 	udiv	r9, r7, r3
   db272:	4630      	mov	r0, r6
   db274:	fb03 7a19 	mls	sl, r3, r9, r7
   db278:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   db27c:	2d09      	cmp	r5, #9
   db27e:	d818      	bhi.n	db2b2 <_strtol_l.isra.0+0x96>
   db280:	462c      	mov	r4, r5
   db282:	42a3      	cmp	r3, r4
   db284:	dd24      	ble.n	db2d0 <_strtol_l.isra.0+0xb4>
   db286:	1c75      	adds	r5, r6, #1
   db288:	d007      	beq.n	db29a <_strtol_l.isra.0+0x7e>
   db28a:	4581      	cmp	r9, r0
   db28c:	d31d      	bcc.n	db2ca <_strtol_l.isra.0+0xae>
   db28e:	d101      	bne.n	db294 <_strtol_l.isra.0+0x78>
   db290:	45a2      	cmp	sl, r4
   db292:	db1a      	blt.n	db2ca <_strtol_l.isra.0+0xae>
   db294:	fb00 4003 	mla	r0, r0, r3, r4
   db298:	2601      	movs	r6, #1
   db29a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   db29e:	e7eb      	b.n	db278 <_strtol_l.isra.0+0x5c>
   db2a0:	2c2b      	cmp	r4, #43	; 0x2b
   db2a2:	bf08      	it	eq
   db2a4:	f89c 4000 	ldrbeq.w	r4, [ip]
   db2a8:	46a8      	mov	r8, r5
   db2aa:	bf08      	it	eq
   db2ac:	f100 0c02 	addeq.w	ip, r0, #2
   db2b0:	e7c8      	b.n	db244 <_strtol_l.isra.0+0x28>
   db2b2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   db2b6:	2d19      	cmp	r5, #25
   db2b8:	d801      	bhi.n	db2be <_strtol_l.isra.0+0xa2>
   db2ba:	3c37      	subs	r4, #55	; 0x37
   db2bc:	e7e1      	b.n	db282 <_strtol_l.isra.0+0x66>
   db2be:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   db2c2:	2d19      	cmp	r5, #25
   db2c4:	d804      	bhi.n	db2d0 <_strtol_l.isra.0+0xb4>
   db2c6:	3c57      	subs	r4, #87	; 0x57
   db2c8:	e7db      	b.n	db282 <_strtol_l.isra.0+0x66>
   db2ca:	f04f 36ff 	mov.w	r6, #4294967295
   db2ce:	e7e4      	b.n	db29a <_strtol_l.isra.0+0x7e>
   db2d0:	1c73      	adds	r3, r6, #1
   db2d2:	d106      	bne.n	db2e2 <_strtol_l.isra.0+0xc6>
   db2d4:	2322      	movs	r3, #34	; 0x22
   db2d6:	f8ce 3000 	str.w	r3, [lr]
   db2da:	4638      	mov	r0, r7
   db2dc:	b942      	cbnz	r2, db2f0 <_strtol_l.isra.0+0xd4>
   db2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db2e2:	f1b8 0f00 	cmp.w	r8, #0
   db2e6:	d000      	beq.n	db2ea <_strtol_l.isra.0+0xce>
   db2e8:	4240      	negs	r0, r0
   db2ea:	2a00      	cmp	r2, #0
   db2ec:	d0f7      	beq.n	db2de <_strtol_l.isra.0+0xc2>
   db2ee:	b10e      	cbz	r6, db2f4 <_strtol_l.isra.0+0xd8>
   db2f0:	f10c 31ff 	add.w	r1, ip, #4294967295
   db2f4:	6011      	str	r1, [r2, #0]
   db2f6:	e7f2      	b.n	db2de <_strtol_l.isra.0+0xc2>
   db2f8:	2430      	movs	r4, #48	; 0x30
   db2fa:	2b00      	cmp	r3, #0
   db2fc:	d1b3      	bne.n	db266 <_strtol_l.isra.0+0x4a>
   db2fe:	2308      	movs	r3, #8
   db300:	e7b1      	b.n	db266 <_strtol_l.isra.0+0x4a>
   db302:	2c30      	cmp	r4, #48	; 0x30
   db304:	d0a4      	beq.n	db250 <_strtol_l.isra.0+0x34>
   db306:	230a      	movs	r3, #10
   db308:	e7ad      	b.n	db266 <_strtol_l.isra.0+0x4a>
   db30a:	bf00      	nop
   db30c:	000dc1b2 	.word	0x000dc1b2

000db310 <strtol>:
   db310:	4613      	mov	r3, r2
   db312:	460a      	mov	r2, r1
   db314:	4601      	mov	r1, r0
   db316:	4802      	ldr	r0, [pc, #8]	; (db320 <strtol+0x10>)
   db318:	6800      	ldr	r0, [r0, #0]
   db31a:	f7ff bf7f 	b.w	db21c <_strtol_l.isra.0>
   db31e:	bf00      	nop
   db320:	2003dde4 	.word	0x2003dde4

000db324 <dynalib_user>:
   db324:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   db334:	00000000 61666564 20746c75 42534d00     ....default .MSB
   db344:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   db354:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   db364:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   db374:	45444f4d 003e7525 20656854 61446e6f     MODE%u>.The onDa
   db384:	65526174 65766963 73692064 726f7720     taRecived is wor
   db394:	676e696b 000a202e 68206557 72206461     king. ..We had r
   db3a4:	69656365 20646576 206c6c61 61746164     eceived all data
   db3b4:	54000a73 65726568 65726120 6d6f7320     s..There are som
   db3c4:	72652065 73726f72 206e6920 20656874     e errors in the 
   db3d4:	61746164 646e6120 20657720 6465656e     data and we need
   db3e4:	206f7420 6e617274 74696d73 74616420      to transmit dat
   db3f4:	67612061 206e6961 6854000a 61442065     a again ..The Da
   db404:	69206174 64252073 56000a20 2e322e32     ta is %d ..V2.2.
   db414:	65440032 65636976 4100203a 36306520     2.Device: .A e06
   db424:	6e655200 20656d61 69766544 53006563     .Rename Device.S
   db434:	44207465 6c707369 52207961 20657461     et Display Rate 
   db444:	332d3128 65530029 75502074 73696c62     (1-3).Set Publis
   db454:	61522068 28206574 29332d31 74655300     h Rate (1-3).Set
   db464:	6d615320 20656c70 65746152 2d312820      Sample Rate (1-
   db474:	44002933 6c707369 52207961 65726665     3).Display Refre
   db484:	52206873 00657461 736e6553 5320726f     sh Rate.Sensor S
   db494:	6c706d61 61522065 50006574 696c6275     ample Rate.Publi
   db4a4:	52206873 00657461 69766544 49206563     sh Rate.Device I
   db4b4:	65720044 00796461 002b2b20 002d2d20     D.ready. ++. --.
   db4c4:	6142002f 79726574 2500203a 43002020     /.Batery: .%  .C
   db4d4:	3a6c6c65 20202000 203a6843 20704400     ell:.   Ch: .Dp 
   db4e4:	3a332e30 20450020 31204d50 203a302e     0.3: .E PM 1.0: 
   db4f4:	20704400 3a352e30 20450020 32204d50     .Dp 0.5: .E PM 2
   db504:	203a352e 20704400 3a302e31 20450020     .5: .Dp 1.0: .E 
   db514:	31204d50 203a2030 20704400 3a352e32     PM 10 : .Dp 2.5:
   db524:	20530020 31204d50 203a302e 20704400      .S PM 1.0: .Dp 
   db534:	3a302e35 20530020 32204d50 203a352e     5.0: .S PM 2.5: 
   db544:	31704400 3a302e30 20530020 31204d50     .Dp10.0: .S PM 1
   db554:	203a2030 6d655400 00203a70 52202043     0 : .Temp: .C  R
   db564:	00203a48 50202025 6b00203a 53006150     H: .%  P: .kPa.S
   db574:	3a706d61 20730020 44202020 3a707369     amp: .s    Disp:
   db584:	20730020 50202020 203a6275 36006800      .s    Pub: .h.6
   db594:	30303445 2d313030 33413542 3933462d     E400001-B5A3-F39
   db5a4:	30452d33 452d3941 32453035 43434434     3-E0A9-E50E24DCC
   db5b4:	00453941 30344536 32303030 4135422d     A9E.6E400002-B5A
   db5c4:	33462d33 452d3339 2d394130 45303545     3-F393-E0A9-E50E
   db5d4:	43443432 45394143 34453600 30303030     24DCCA9E.6E40000
   db5e4:	35422d33 462d3341 2d333933 39413045     3-B5A3-F393-E0A9
   db5f4:	3035452d 44343245 39414343 78740045     -E50E24DCCA9E.tx
   db604:	00787200                                .rx.

000db608 <_ZTVN8particle11SPISettingsE>:
	...
   db610:	000d42c9 000d40c9 000d40e9              .B...@...@..

000db61c <_ZTV4File>:
	...
   db624:	000d40e5 000d40f7 000d410b 000d4105     .@...@...A...A..
   db634:	000d40cb 000d412f 000d4129 000d4123     .@../A..)A..#A..
   db644:	00080000 18000000 00000000 00000018     ................
   db654:	00003800 00300000 70000000 00000000     .8....0....p....
   db664:	000000e3 0000c300 80c70100 86010000     ................
   db674:	03000080 0000c08c 00600803 60180700     ..........`....`
   db684:	300e0000 0c000030 00001020 0018611c     ...00... ....a..
   db694:	08431800 c3380000 3100008c 00008687     ..C...8....1....
   db6a4:	00c68f71 c30ce300 00c30000 c60100e1     q...............
   db6b4:	01807100 80300086 38fe8f03 000003c0     .q....0....8....
   db6c4:	00076018 0e601c00 300c0000 feffff0f     .`....`....0....
   db6d4:	ffff1f10 001018ff 000c0000 0c000000     ................
   db6e4:	00000000 00000006 ff7f0600               ...............

000db6f3 <_ZL4font>:
   db6f3:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   db703:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   db713:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   db723:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   db733:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   db743:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   db753:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   db763:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   db773:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   db783:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   db793:	00000000 5f000000 07000000 14000700     ......._........
   db7a3:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   db7b3:	00502056 00030708 41221c00 22410000     V P......."A..A"
   db7c3:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   db7d3:	08080800 00000808 20006060 02040810     ........``. ....
   db7e3:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   db7f3:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   db803:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   db813:	00001e29 00000014 00003440 22140800     ).......@4....."
   db823:	14141441 41001414 02081422 06095901     A......A"....Y..
   db833:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   db843:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   db853:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   db863:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   db873:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   db883:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   db893:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   db8a3:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   db8b3:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   db8c3:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   db8d3:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   db8e3:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   db8f3:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   db903:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   db913:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   db923:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   db933:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   db943:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   db953:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   db963:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   db973:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   db983:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   db993:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   db9a3:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   db9b3:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   db9c3:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   db9d3:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   db9e3:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   db9f3:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   dba03:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   dba13:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   dba23:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   dba33:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   dba43:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   dba53:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   dba63:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   dba73:	00ff0000 ff101010 14141400 101000ff     ................
   dba83:	10ff00ff f010f010 fc141414 f7141400     ................
   dba93:	0000ff00 14ff00ff fc04f414 10171414     ................
   dbaa3:	1f10101f 14141f10 10001f14 00f01010     ................
   dbab3:	1f000000 10101010 1010101f 0010f010     ................
   dbac3:	10ff0000 10101010 10101010 000010ff     ................
   dbad3:	0014ff00 ff00ff00 101f0000 fc000017     ................
   dbae3:	1414f404 14171017 f404f414 00ff0000     ................
   dbaf3:	141414f7 14141414 14f700f7 14171414     ................
   dbb03:	101f1010 1414141f 101014f4 00f010f0     ................
   dbb13:	1f101f00 1f000000 00000014 000014fc     ................
   dbb23:	10f010f0 ff10ff10 ff141414 10101014     ................
   dbb33:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   dbb43:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   dbb53:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   dbb63:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   dbb73:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   dbb83:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   dbb93:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   dbba3:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   dbbb3:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   dbbc3:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   dbbd3:	00000018 30001010 0101ff40 01011f00     .......0@.......
   dbbe3:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000dbbf4 <_ZTV12Adafruit_GFX>:
	...
   dbc04:	000d5655 000d9679 000d40a1 000d5085     UV..y....@...P..
   dbc14:	000d5087 000d50b9 000d5095 000d50a7     .P...P...P...P..
   dbc24:	000d4fc9 000d5085 000d52b1 000d522b     .O...P...R..+R..
   dbc34:	000d50d1 000d510f 000d5149 000d518f     .P...Q..IQ...Q..
   dbc44:	000d522d 000d51ab                       -R...Q..

000dbc4c <_ZL11daysInMonth>:
   dbc4c:	1e1f1c1f 1f1f1e1f                        ...........

000dbc57 <_ZL8LUT_DATA>:
   dbc57:	00406080 10000000 00002060 60800000     .`@.....` .....`
   dbc67:	00000040 20601000 00000000 00000000     @.....` ........
   dbc77:	03000000 02000003 00000909 00030302     ................
   dbc87:	00000200 00000000 00000000 00000000     ................
   dbc97:	00000000 41150000 0a3032a8               .......A.20..

000dbca4 <_ZTV16Adafruit_SSD1675>:
	...
   dbcac:	000d4151 000d4d4d 000d5655 000d9679     QA..MM..UV..y...
   dbcbc:	000d734d 000d5085 000d5087 000d50b9     Ms...P...P...P..
   dbccc:	000d5095 000d50a7 000d4fc9 000d5085     .P...P...O...P..
   dbcdc:	000d52b1 000d522b 000d50d1 000d510f     .R..+R...P...Q..
   dbcec:	000d5149 000d518f 000d522d 000d51ab     IQ...Q..-R...Q..
   dbcfc:	000d6d13 000d6ce9 000d6e21 000d6de7     .m...l..!n...m..
   dbd0c:	000d6f71                                qo..

000dbd10 <_ZTV12Adafruit_EPD>:
	...
   dbd20:	000d5655 000d9679 000d734d 000d5085     UV..y...Ms...P..
   dbd30:	000d5087 000d50b9 000d5095 000d50a7     .P...P...P...P..
   dbd40:	000d4fc9 000d5085 000d52b1 000d522b     .O...P...R..+R..
   dbd50:	000d50d1 000d510f 000d5149 000d518f     .P...Q..IQ...Q..
   dbd60:	000d522d 000d51ab 000d40a1 000d40a1     -R...Q...@...@..
   dbd70:	000d40a1 000d40a1 000d40a1              .@...@...@..

000dbd7c <_ZTVN5spark13EthernetClassE>:
	...
   dbd84:	000d8077 000d806d 000d8063 000d8059     w...m...c...Y...
   dbd94:	000d804d 000d8041 000da1cd 000da1d5     M...A...........
   dbda4:	000d8035 000d802d 000d8023 000d8019     5...-...#.......
   dbdb4:	000da205                                ....

000dbdb8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dbdb8:	18100800 38302820 69726977 622e676e     .... (08wiring.b
   dbdc8:	5300656c 74726174 73696420 65766f63     le.Start discove
   dbdd8:	676e6972 72657320 65636976 50002e73     ring services..P
   dbde8:	20726565 69766564 69206563 696d2073     eer device is mi
   dbdf8:	6e697373 46002167 656c6961 6f742064     ssing!.Failed to
   dbe08:	70706120 20646e65 72656570 6e654320      append peer Cen
   dbe18:	6c617274 76656420 2e656369 6e6f4300     tral device..Con
   dbe28:	7463656e 62206465 65432079 6172746e     nected by Centra
   dbe38:	6564206c 65636976 6944002e 6e6f6373     l device..Discon
   dbe48:	7463656e 62206465 65722079 65746f6d     nected by remote
   dbe58:	76656420 2e656369 70754400 6163696c      device..Duplica
   dbe68:	20646574 72616863 65746361 74736972     ted characterist
   dbe78:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   dbe88:	002e6465 6c696146 74206465 7061206f     ed..Failed to ap
   dbe98:	646e6570 636f6c20 63206c61 61726168     pend local chara
   dbea8:	72657463 69747369 00002e63              cteristic...

000dbeb4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbebc:	000d8465 000d84c9 000d8691 000d84f3     e...............
   dbecc:	000d8469                                i...

000dbed0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbed8:	000d8461 000d84d7 000d8463 000d84f7     a.......c.......
   dbee8:	000d8489                                ....

000dbeec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbef4:	000d845f 000d84e5 000d8db9 000d84fb     _...............
   dbf04:	000d84a9                                ....

000dbf08 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   dbf10:	5f9b34fb 80000080 00001000 00000000     .4._............

000dbf20 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   dbf20:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000dbf30 <_ZN8particle7BleUuid9BASE_UUIDE>:
   dbf30:	5f9b34fb 80000080 00001000 00000000     .4._............
   dbf40:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   dbf50:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   dbf60:	007a2553 74637361 00656d69              S%z.asctime.

000dbf6c <_ZTV14CellularSignal>:
	...
   dbf74:	000d9981 000d99e5 000d9983 000d99f5     ................
   dbf84:	000d9a29 000d9a55 000d9a89 000d99a9     )...U...........
   dbf94:	000d9987 000d99a3 fffffffc 00000000     ................
   dbfa4:	000d99dd                                ....

000dbfa8 <_ZTV9IPAddress>:
	...
   dbfb0:	000d9c97 000d9c87 000d9c89              ............

000dbfbc <_ZTV9USBSerial>:
	...
   dbfc4:	000d9d79 000d9de1 000d9db7 000d9679     y...........y...
   dbfd4:	000d9da9 000d9d7b 000d9d8b 000d9ddb     ....{...........
   dbfe4:	000d9d9b 000d9d75                       ....u...

000dbfec <_ZTVN5spark13CellularClassE>:
	...
   dbff4:	000d9ee3 000d9ed9 000d9ecf 000d9e85     ................
   dc004:	000d9ec3 000d9eb7 000da1cd 000da1d5     ................
   dc014:	000d9eab 000d9ea3 000d9e99 000d9e8f     ................
   dc024:	000da205                                ....

000dc028 <_ZTV11USARTSerial>:
	...
   dc030:	000d9f71 000d9fdd 000d9fb5 000d9679     q...........y...
   dc040:	000d9f85 000d9fa1 000d9f93 000d9faf     ................
   dc050:	000d9f73 000d9f77                       s...w...

000dc058 <_ZTV7TwoWire>:
	...
   dc060:	000da06d 000da0b7 000da08f 000da06f     m...........o...
   dc070:	000da097 000da09f 000da0a7 000da0af     ................

000dc080 <_ZTVN5spark12NetworkClassE>:
	...
   dc088:	000da18d 000da197 000da1a1 000da1ab     ................
   dc098:	000da1b5 000da1c1 000da1cd 000da1d5     ................
   dc0a8:	000da1dd 000da1e9 000da1f1 000da1fb     ................
   dc0b8:	000da205                                ....

000dc0bc <_ZSt7nothrow>:
	...

000dc0bd <_ZTSSt19_Sp_make_shared_tag>:
   dc0bd:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   dc0cd:	5f646572 00676174                        red_tag....

000dc0d8 <_ZTISt19_Sp_make_shared_tag>:
   dc0d8:	000dc118 000dc0bd                       ........

000dc0e0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   dc0e0:	000dc178 000dc0ec 000dc19c              x...........

000dc0ec <_ZTSN10__cxxabiv117__class_type_infoE>:
   dc0ec:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   dc0fc:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   dc10c:	00000045                                E...

000dc110 <_ZTVN10__cxxabiv117__class_type_infoE>:
   dc110:	00000000 000dc0e0 000da581 000da595     ................
   dc120:	000da729 000da729 000da5ff 000da541     )...).......A...
   dc130:	000da5e7 000da5a9 000da575              ........u...

000dc13c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   dc13c:	000dc178 000dc148 000dc0e0              x...H.......

000dc148 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dc148:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   dc158:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   dc168:	456f666e 00000000                       nfoE....

000dc170 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dc170:	00000000 000dc13c 000da629 000da63d     ....<...)...=...
   dc180:	000da729 000da729 000da5ff 000da541     )...).......A...
   dc190:	000da6fd 000da689 000da651              ........Q...

000dc19c <_ZTISt9type_info>:
   dc19c:	000dc118 000dc1a4                       ........

000dc1a4 <_ZTSSt9type_info>:
   dc1a4:	74397453 5f657079 6f666e69               St9type_info.

000dc1b1 <_ctype_>:
   dc1b1:	20202000 20202020 28282020 20282828     .         ((((( 
   dc1c1:	20202020 20202020 20202020 20202020                     
   dc1d1:	10108820 10101010 10101010 10101010      ...............
   dc1e1:	04040410 04040404 10040404 10101010     ................
   dc1f1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dc201:	01010101 01010101 01010101 10101010     ................
   dc211:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dc221:	02020202 02020202 02020202 10101010     ................
   dc231:	00000020 00000000 00000000 00000000      ...............
	...

000dc2b2 <link_const_variable_data_end>:
	...

000dc2b4 <link_constructors_location>:
   dc2b4:	000d4d61 	.word	0x000d4d61
   dc2b8:	000d8081 	.word	0x000d8081
   dc2bc:	000d8219 	.word	0x000d8219
   dc2c0:	000d9651 	.word	0x000d9651
   dc2c4:	000d992d 	.word	0x000d992d
   dc2c8:	000d993d 	.word	0x000d993d
   dc2cc:	000d9965 	.word	0x000d9965
   dc2d0:	000d9f41 	.word	0x000d9f41
   dc2d4:	000da2e5 	.word	0x000da2e5

000dc2d8 <link_constructors_end>:
	...
