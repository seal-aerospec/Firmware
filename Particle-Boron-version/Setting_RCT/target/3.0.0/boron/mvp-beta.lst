
d:/Education/UW/Aerospec/Firmware/Particle-Boron-version/mvp-beta/target/3.0.0/boron/mvp-beta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b290  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000df2b0  000df2b0  0000f2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000df2b8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003ddac  000df2bc  0001ddac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009d4  2003de20  2003de20  0002de20  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000df32c  000df32c  0001f32c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000df354  000df354  0001f354  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002ddb07  00000000  00000000  0001f358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00026982  00000000  00000000  002fce5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004e615  00000000  00000000  003237e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003ca0  00000000  00000000  00371df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000c5c8  00000000  00000000  00375a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004bfb9  00000000  00000000  0038205e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000689f9  00000000  00000000  003ce017  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013b87a  00000000  00000000  00436a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b6e4  00000000  00000000  0057228c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f009 ffc9 	bl	ddfc8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f009 ffeb 	bl	de018 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ddac 	.word	0x2003ddac
   d404c:	000df2bc 	.word	0x000df2bc
   d4050:	2003de1c 	.word	0x2003de1c
   d4054:	2003de20 	.word	0x2003de20
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 f86b 	bl	db13c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000df28c 	.word	0x000df28c
   d4080:	000df2b0 	.word	0x000df2b0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bace 	b.w	d4624 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ff8f 	bl	d4fac <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 b815 	b.w	db0c0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f005 b90d 	b.w	d92b4 <malloc>

000d409a <_Znaj>:
   d409a:	f005 b90b 	b.w	d92b4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f005 b911 	b.w	d92c4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f005 f804 	bl	d90b8 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d8c3d 	.word	0x000d8c3d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40c8:	6810      	ldr	r0, [r2, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40cc:	4770      	bx	lr

000d40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ce:	7c03      	ldrb	r3, [r0, #16]
   d40d0:	f013 0308 	ands.w	r3, r3, #8
   d40d4:	bf1e      	ittt	ne
   d40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40dc:	2b00      	cmp	r3, #0
  }
   d40de:	bfac      	ite	ge
   d40e0:	4618      	movge	r0, r3
   d40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40e6:	4770      	bx	lr

000d40e8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d40e8:	4770      	bx	lr

000d40ea <_ZN5SdFatD1Ev>:
//==============================================================================
/**
 * \class SdFat
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
   d40ea:	4770      	bx	lr

000d40ec <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40ec:	b510      	push	{r4, lr}
  }
   d40ee:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40f0:	4604      	mov	r4, r0
  }
   d40f2:	f007 fccc 	bl	dba8e <_ZdlPvj>
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}

000d40fa <_ZN4FileD0Ev>:
   d40fa:	b510      	push	{r4, lr}
   d40fc:	2134      	movs	r1, #52	; 0x34
   d40fe:	4604      	mov	r4, r0
   d4100:	f007 fcc5 	bl	dba8e <_ZdlPvj>
   d4104:	4620      	mov	r0, r4
   d4106:	bd10      	pop	{r4, pc}

000d4108 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4108:	3010      	adds	r0, #16
   d410a:	f002 bf8f 	b.w	d702c <_ZN7FatFile4syncEv>

000d410e <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d410e:	3010      	adds	r0, #16
   d4110:	f002 bea9 	b.w	d6e66 <_ZN7FatFile4peekEv>

000d4114 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4114:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4116:	2201      	movs	r2, #1
   d4118:	f10d 0107 	add.w	r1, sp, #7
   d411c:	3010      	adds	r0, #16
   d411e:	f002 fdbf 	bl	d6ca0 <_ZN7FatFile4readEPvj>
   d4122:	2801      	cmp	r0, #1
   d4124:	bf0c      	ite	eq
   d4126:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d412a:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d412e:	b003      	add	sp, #12
   d4130:	f85d fb04 	ldr.w	pc, [sp], #4

000d4134 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4134:	3010      	adds	r0, #16
   d4136:	f003 b803 	b.w	d7140 <_ZN7FatFile5writeEPKvj>

000d413a <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d413a:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d413c:	2201      	movs	r2, #1
   d413e:	f88d 1007 	strb.w	r1, [sp, #7]
   d4142:	3010      	adds	r0, #16
   d4144:	f10d 0107 	add.w	r1, sp, #7
   d4148:	f002 fffa 	bl	d7140 <_ZN7FatFile5writeEPKvj>
  }
   d414c:	b003      	add	sp, #12
   d414e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4154 <_ZN16Adafruit_SSD1675D1Ev>:
/**************************************************************************/
/*!
    @brief  Class for interfacing with SSD1675 EPD drivers
*/
/**************************************************************************/
class Adafruit_SSD1675 : public Adafruit_EPD {
   d4154:	b510      	push	{r4, lr}
   d4156:	4b03      	ldr	r3, [pc, #12]	; (d4164 <_ZN16Adafruit_SSD1675D1Ev+0x10>)
   d4158:	6003      	str	r3, [r0, #0]
   d415a:	4604      	mov	r4, r0
   d415c:	f004 f952 	bl	d8404 <_ZN12Adafruit_EPDD1Ev>
   d4160:	4620      	mov	r0, r4
   d4162:	bd10      	pop	{r4, pc}
   d4164:	000dec64 	.word	0x000dec64

000d4168 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4168:	b510      	push	{r4, lr}
   d416a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d416c:	6800      	ldr	r0, [r0, #0]
   d416e:	b108      	cbz	r0, d4174 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4170:	f005 f8a8 	bl	d92c4 <free>
class SystemClass {
   d4174:	4620      	mov	r0, r4
   d4176:	bd10      	pop	{r4, pc}

000d4178 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d4178:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d417a:	2000      	movs	r0, #0
   d417c:	f005 f882 	bl	d9284 <spark_sync_time_pending>
   d4180:	b128      	cbz	r0, d418e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4182:	f005 f867 	bl	d9254 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4186:	f080 0001 	eor.w	r0, r0, #1
   d418a:	b2c0      	uxtb	r0, r0
    }
   d418c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d418e:	2001      	movs	r0, #1
   d4190:	e7fc      	b.n	d418c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d4192 <_ZN5Print5printIiLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d4192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4194:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d4196:	4607      	mov	r7, r0
   d4198:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d419a:	da0c      	bge.n	d41b6 <_ZN5Print5printIiLi0EEEjT_i.part.0+0x24>
   d419c:	2a0a      	cmp	r2, #10
   d419e:	d10a      	bne.n	d41b6 <_ZN5Print5printIiLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d41a0:	212d      	movs	r1, #45	; 0x2d
   d41a2:	f006 fc77 	bl	daa94 <_ZN5Print5printEc>
            val = -n;
   d41a6:	4261      	negs	r1, r4
            t = print('-');
   d41a8:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d41aa:	b2f2      	uxtb	r2, r6
   d41ac:	4638      	mov	r0, r7
   d41ae:	f006 fc8a 	bl	daac6 <_ZN5Print11printNumberEmh>
    }
}
   d41b2:	4428      	add	r0, r5
   d41b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d41b6:	4621      	mov	r1, r4
        size_t t = 0;
   d41b8:	2500      	movs	r5, #0
   d41ba:	e7f6      	b.n	d41aa <_ZN5Print5printIiLi0EEEjT_i.part.0+0x18>

000d41bc <_Z14setPublishRate6String>:

  return 0;

}

int setPublishRate(String usr_input){
   d41bc:	b507      	push	{r0, r1, r2, lr}

  unsigned long pubDuty;
  int num_input = usr_input.toInt();
   d41be:	f005 fad7 	bl	d9770 <_ZNK6String5toIntEv>

  TaskRates enum_input;
  enum_input = (TaskRates) num_input;


  switch(enum_input)
   d41c2:	b2c0      	uxtb	r0, r0
   d41c4:	2802      	cmp	r0, #2
   d41c6:	d017      	beq.n	d41f8 <_Z14setPublishRate6String+0x3c>
   d41c8:	2803      	cmp	r0, #3
   d41ca:	d005      	beq.n	d41d8 <_Z14setPublishRate6String+0x1c>
   d41cc:	2801      	cmp	r0, #1
   d41ce:	d016      	beq.n	d41fe <_Z14setPublishRate6String+0x42>
   d41d0:	2001      	movs	r0, #1

  EEPROM.put(DUTY_PUB_ADDR,pubDuty);
  PUBLISH_RATE = pubDuty;

  return 0;
}
   d41d2:	b003      	add	sp, #12
   d41d4:	f85d fb04 	ldr.w	pc, [sp], #4
      pubDuty = 60;
   d41d8:	233c      	movs	r3, #60	; 0x3c
      pubDuty = 600;
   d41da:	9301      	str	r3, [sp, #4]
  EEPROM.put(DUTY_PUB_ADDR,pubDuty);
   d41dc:	f007 fbbc 	bl	db958 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d41e0:	2204      	movs	r2, #4
   d41e2:	eb0d 0102 	add.w	r1, sp, r2
   d41e6:	f240 1009 	movw	r0, #265	; 0x109
   d41ea:	f004 fd4f 	bl	d8c8c <HAL_EEPROM_Put>
  PUBLISH_RATE = pubDuty;
   d41ee:	4b05      	ldr	r3, [pc, #20]	; (d4204 <_Z14setPublishRate6String+0x48>)
   d41f0:	9a01      	ldr	r2, [sp, #4]
   d41f2:	601a      	str	r2, [r3, #0]
  return 0;
   d41f4:	2000      	movs	r0, #0
   d41f6:	e7ec      	b.n	d41d2 <_Z14setPublishRate6String+0x16>
      pubDuty = 300;
   d41f8:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d41fc:	e7ed      	b.n	d41da <_Z14setPublishRate6String+0x1e>
      pubDuty = 600;
   d41fe:	f44f 7316 	mov.w	r3, #600	; 0x258
   d4202:	e7ea      	b.n	d41da <_Z14setPublishRate6String+0x1e>
   d4204:	2003de38 	.word	0x2003de38

000d4208 <_Z8renameID6String>:
int renameID(String name) {
   d4208:	b510      	push	{r4, lr}
   d420a:	b086      	sub	sp, #24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d420c:	2300      	movs	r3, #0
   d420e:	a901      	add	r1, sp, #4
   d4210:	2214      	movs	r2, #20
   d4212:	4604      	mov	r4, r0
   d4214:	f005 fa94 	bl	d9740 <_ZNK6String8getBytesEPhjj>
    EEPROM.put(NAME_ADDR,ID);
   d4218:	f007 fb9e 	bl	db958 <_Z21__fetch_global_EEPROMv>
   d421c:	2214      	movs	r2, #20
   d421e:	a901      	add	r1, sp, #4
   d4220:	200a      	movs	r0, #10
   d4222:	f004 fd33 	bl	d8c8c <HAL_EEPROM_Put>
    deviceID = name;
   d4226:	4621      	mov	r1, r4
   d4228:	4802      	ldr	r0, [pc, #8]	; (d4234 <_Z8renameID6String+0x2c>)
   d422a:	f005 fa1d 	bl	d9668 <_ZN6StringaSERKS_>
}
   d422e:	2000      	movs	r0, #0
   d4230:	b006      	add	sp, #24
   d4232:	bd10      	pop	{r4, pc}
   d4234:	2003e3c4 	.word	0x2003e3c4

000d4238 <_Z13setSampleRate6String>:
int setSampleRate(String usr_input){
   d4238:	b507      	push	{r0, r1, r2, lr}
  int num_input = usr_input.toInt();
   d423a:	f005 fa99 	bl	d9770 <_ZNK6String5toIntEv>
  switch(enum_input)
   d423e:	b2c0      	uxtb	r0, r0
   d4240:	2802      	cmp	r0, #2
   d4242:	d017      	beq.n	d4274 <_Z13setSampleRate6String+0x3c>
   d4244:	2803      	cmp	r0, #3
   d4246:	d005      	beq.n	d4254 <_Z13setSampleRate6String+0x1c>
   d4248:	2801      	cmp	r0, #1
   d424a:	d015      	beq.n	d4278 <_Z13setSampleRate6String+0x40>
   d424c:	2001      	movs	r0, #1
}
   d424e:	b003      	add	sp, #12
   d4250:	f85d fb04 	ldr.w	pc, [sp], #4
      senDuty = 5;
   d4254:	2305      	movs	r3, #5
      senDuty = 20;
   d4256:	9301      	str	r3, [sp, #4]
  EEPROM.put(DUTY_SEN_ADDR,senDuty);
   d4258:	f007 fb7e 	bl	db958 <_Z21__fetch_global_EEPROMv>
   d425c:	2204      	movs	r2, #4
   d425e:	eb0d 0102 	add.w	r1, sp, r2
   d4262:	f44f 7082 	mov.w	r0, #260	; 0x104
   d4266:	f004 fd11 	bl	d8c8c <HAL_EEPROM_Put>
  SENSOR_CYCLE = senDuty;
   d426a:	4b04      	ldr	r3, [pc, #16]	; (d427c <_Z13setSampleRate6String+0x44>)
   d426c:	9a01      	ldr	r2, [sp, #4]
   d426e:	601a      	str	r2, [r3, #0]
  return 0;
   d4270:	2000      	movs	r0, #0
   d4272:	e7ec      	b.n	d424e <_Z13setSampleRate6String+0x16>
      senDuty = 10;
   d4274:	230a      	movs	r3, #10
   d4276:	e7ee      	b.n	d4256 <_Z13setSampleRate6String+0x1e>
      senDuty = 20;
   d4278:	2314      	movs	r3, #20
   d427a:	e7ec      	b.n	d4256 <_Z13setSampleRate6String+0x1e>
   d427c:	2003e2c4 	.word	0x2003e2c4

000d4280 <_Z14setDisplayRate6String>:
int setDisplayRate(String usr_input){
   d4280:	b507      	push	{r0, r1, r2, lr}
  int num_input = usr_input.toInt();
   d4282:	f005 fa75 	bl	d9770 <_ZNK6String5toIntEv>
  switch(enum_input)
   d4286:	b2c0      	uxtb	r0, r0
   d4288:	2802      	cmp	r0, #2
   d428a:	d017      	beq.n	d42bc <_Z14setDisplayRate6String+0x3c>
   d428c:	2803      	cmp	r0, #3
   d428e:	d005      	beq.n	d429c <_Z14setDisplayRate6String+0x1c>
   d4290:	2801      	cmp	r0, #1
   d4292:	d015      	beq.n	d42c0 <_Z14setDisplayRate6String+0x40>
   d4294:	2001      	movs	r0, #1
}
   d4296:	b003      	add	sp, #12
   d4298:	f85d fb04 	ldr.w	pc, [sp], #4
      scrDuty = 5;
   d429c:	2305      	movs	r3, #5
      scrDuty = 20;
   d429e:	9301      	str	r3, [sp, #4]
  EEPROM.put(DUTY_SEN_ADDR,scrDuty);
   d42a0:	f007 fb5a 	bl	db958 <_Z21__fetch_global_EEPROMv>
   d42a4:	2204      	movs	r2, #4
   d42a6:	eb0d 0102 	add.w	r1, sp, r2
   d42aa:	f44f 7082 	mov.w	r0, #260	; 0x104
   d42ae:	f004 fced 	bl	d8c8c <HAL_EEPROM_Put>
  DISPLAY_REFRESH = scrDuty;
   d42b2:	4b04      	ldr	r3, [pc, #16]	; (d42c4 <_Z14setDisplayRate6String+0x44>)
   d42b4:	9a01      	ldr	r2, [sp, #4]
   d42b6:	601a      	str	r2, [r3, #0]
  return 0;
   d42b8:	2000      	movs	r0, #0
   d42ba:	e7ec      	b.n	d4296 <_Z14setDisplayRate6String+0x16>
      scrDuty = 10;
   d42bc:	230a      	movs	r3, #10
   d42be:	e7ee      	b.n	d429e <_Z14setDisplayRate6String+0x1e>
      scrDuty = 20;
   d42c0:	2314      	movs	r3, #20
   d42c2:	e7ec      	b.n	d429e <_Z14setDisplayRate6String+0x1e>
   d42c4:	2003de30 	.word	0x2003de30

000d42c8 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42c8:	b40e      	push	{r1, r2, r3}
   d42ca:	b503      	push	{r0, r1, lr}
   d42cc:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d42ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d42d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d42d6:	f006 fcec 	bl	dacb2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d42da:	b002      	add	sp, #8
   d42dc:	f85d eb04 	ldr.w	lr, [sp], #4
   d42e0:	b003      	add	sp, #12
   d42e2:	4770      	bx	lr

000d42e4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d42e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42e6:	4604      	mov	r4, r0
   d42e8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d42ea:	7922      	ldrb	r2, [r4, #4]
   d42ec:	68a3      	ldr	r3, [r4, #8]
   d42ee:	b132      	cbz	r2, d42fe <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d42f0:	b9a3      	cbnz	r3, d431c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d42f2:	490b      	ldr	r1, [pc, #44]	; (d4320 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d42f4:	b002      	add	sp, #8
   d42f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d42fa:	f006 bbc7 	b.w	daa8c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42fe:	4a09      	ldr	r2, [pc, #36]	; (d4324 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4300:	7b26      	ldrb	r6, [r4, #12]
   d4302:	4d09      	ldr	r5, [pc, #36]	; (d4328 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4304:	4909      	ldr	r1, [pc, #36]	; (d432c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4306:	7b64      	ldrb	r4, [r4, #13]
   d4308:	2e01      	cmp	r6, #1
   d430a:	bf18      	it	ne
   d430c:	4629      	movne	r1, r5
   d430e:	e9cd 1400 	strd	r1, r4, [sp]
   d4312:	4907      	ldr	r1, [pc, #28]	; (d4330 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4314:	f7ff ffd8 	bl	d42c8 <_ZN5Print6printfEPKcz>
  }
   d4318:	b002      	add	sp, #8
   d431a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d431c:	4a05      	ldr	r2, [pc, #20]	; (d4334 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d431e:	e7ef      	b.n	d4300 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4320:	000de22d 	.word	0x000de22d
   d4324:	000de27f 	.word	0x000de27f
   d4328:	000de229 	.word	0x000de229
   d432c:	000de225 	.word	0x000de225
   d4330:	000de243 	.word	0x000de243
   d4334:	000de21c 	.word	0x000de21c

000d4338 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4338:	b40e      	push	{r1, r2, r3}
   d433a:	b503      	push	{r0, r1, lr}
   d433c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   d433e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4340:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4344:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d4346:	f006 fcb4 	bl	dacb2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d434a:	b002      	add	sp, #8
   d434c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4350:	b003      	add	sp, #12
   d4352:	4770      	bx	lr

000d4354 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:


void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
   d4354:	b538      	push	{r3, r4, r5, lr}
   d4356:	4604      	mov	r4, r0
    // }
    
    // new version of onDataReceived
    //data[0] contains numbers of received data 
    int val = (int) data[0];
    if(val == count_flag){
   d4358:	4d0e      	ldr	r5, [pc, #56]	; (d4394 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   Serial.printlnf("The onDataRecived is working. \n");
   d435a:	f007 f81d 	bl	db398 <_Z16_fetch_usbserialv>
   d435e:	490e      	ldr	r1, [pc, #56]	; (d4398 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4360:	f7ff ffea 	bl	d4338 <_ZN5Print8printlnfEPKcz>
    int val = (int) data[0];
   d4364:	7824      	ldrb	r4, [r4, #0]
    if(val == count_flag){
   d4366:	682b      	ldr	r3, [r5, #0]
   d4368:	42a3      	cmp	r3, r4
   d436a:	d107      	bne.n	d437c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>

      Serial.printlnf("We had received all datas\n");
   d436c:	f007 f814 	bl	db398 <_Z16_fetch_usbserialv>
   d4370:	490a      	ldr	r1, [pc, #40]	; (d439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d4372:	f7ff ffe1 	bl	d4338 <_ZN5Print8printlnfEPKcz>
      count_flag = 0;
   d4376:	2300      	movs	r3, #0
   d4378:	602b      	str	r3, [r5, #0]

      Serial.printlnf("There are some errors in the data and we need to transmit data again \n");
      Serial.printlnf("The Data is %d \n", val);
    }

}
   d437a:	bd38      	pop	{r3, r4, r5, pc}
      Serial.printlnf("There are some errors in the data and we need to transmit data again \n");
   d437c:	f007 f80c 	bl	db398 <_Z16_fetch_usbserialv>
   d4380:	4907      	ldr	r1, [pc, #28]	; (d43a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d4382:	f7ff ffd9 	bl	d4338 <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("The Data is %d \n", val);
   d4386:	f007 f807 	bl	db398 <_Z16_fetch_usbserialv>
   d438a:	4906      	ldr	r1, [pc, #24]	; (d43a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   d438c:	4622      	mov	r2, r4
   d438e:	f7ff ffd3 	bl	d4338 <_ZN5Print8printlnfEPKcz>
}
   d4392:	e7f2      	b.n	d437a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
   d4394:	2003e3c0 	.word	0x2003e3c0
   d4398:	000de260 	.word	0x000de260
   d439c:	000de280 	.word	0x000de280
   d43a0:	000de29b 	.word	0x000de29b
   d43a4:	000de2e2 	.word	0x000de2e2

000d43a8 <_Z14update_averageP6SampleP12Data_average>:
  average->pt_03 = average->pt_03 + latest->pt_03;
   d43a8:	8842      	ldrh	r2, [r0, #2]
   d43aa:	684b      	ldr	r3, [r1, #4]
   d43ac:	4413      	add	r3, r2
   d43ae:	604b      	str	r3, [r1, #4]
  average->pt_05 = average->pt_05 + latest->pt_05;
   d43b0:	8882      	ldrh	r2, [r0, #4]
   d43b2:	688b      	ldr	r3, [r1, #8]
   d43b4:	4413      	add	r3, r2
   d43b6:	608b      	str	r3, [r1, #8]
  average->pt_10 = average->pt_10 + latest->pt_10;
   d43b8:	88c2      	ldrh	r2, [r0, #6]
   d43ba:	68cb      	ldr	r3, [r1, #12]
   d43bc:	4413      	add	r3, r2
   d43be:	60cb      	str	r3, [r1, #12]
  average->pt_25 = average->pt_25 + latest->pt_25;
   d43c0:	8902      	ldrh	r2, [r0, #8]
   d43c2:	690b      	ldr	r3, [r1, #16]
   d43c4:	4413      	add	r3, r2
   d43c6:	610b      	str	r3, [r1, #16]
  average->pt_50 = average->pt_50 + latest->pt_50;
   d43c8:	8942      	ldrh	r2, [r0, #10]
   d43ca:	694b      	ldr	r3, [r1, #20]
   d43cc:	4413      	add	r3, r2
   d43ce:	614b      	str	r3, [r1, #20]
  average->pt_100 = average->pt_100 + latest->pt_100;
   d43d0:	8982      	ldrh	r2, [r0, #12]
   d43d2:	698b      	ldr	r3, [r1, #24]
   d43d4:	4413      	add	r3, r2
   d43d6:	618b      	str	r3, [r1, #24]
  average->pm10_env = average->pm10_env + latest->pm10_env;
   d43d8:	89c2      	ldrh	r2, [r0, #14]
   d43da:	69cb      	ldr	r3, [r1, #28]
   d43dc:	4413      	add	r3, r2
   d43de:	61cb      	str	r3, [r1, #28]
  average->pm25_env = average->pm25_env + latest->pm25_env;
   d43e0:	8a02      	ldrh	r2, [r0, #16]
   d43e2:	6a0b      	ldr	r3, [r1, #32]
   d43e4:	4413      	add	r3, r2
   d43e6:	620b      	str	r3, [r1, #32]
  average->pm100_env = average->pm100_env + latest->pm100_env;
   d43e8:	8a42      	ldrh	r2, [r0, #18]
   d43ea:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   d43ec:	4413      	add	r3, r2
   d43ee:	624b      	str	r3, [r1, #36]	; 0x24
  average->pm10_st = average->pm10_st + latest->pm10_st;
   d43f0:	8a82      	ldrh	r2, [r0, #20]
   d43f2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   d43f4:	4413      	add	r3, r2
   d43f6:	628b      	str	r3, [r1, #40]	; 0x28
  average->pm25_st = average->pm25_st + latest->pm25_st;
   d43f8:	8ac2      	ldrh	r2, [r0, #22]
   d43fa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   d43fc:	4413      	add	r3, r2
   d43fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  average->pm100_st = average->pm100_st + latest->pm100_st;
   d4400:	8b02      	ldrh	r2, [r0, #24]
   d4402:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  average->temp = average->temp + latest->temp;
   d4404:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
  average->pm100_st = average->pm100_st + latest->pm100_st;
   d4408:	4413      	add	r3, r2
   d440a:	630b      	str	r3, [r1, #48]	; 0x30
  average->temp = average->temp + latest->temp;
   d440c:	ed90 7a07 	vldr	s14, [r0, #28]
  average->N++;
   d4410:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
  average->temp = average->temp + latest->temp;
   d4414:	ee77 7a87 	vadd.f32	s15, s15, s14
  average->N++;
   d4418:	3301      	adds	r3, #1
  average->temp = average->temp + latest->temp;
   d441a:	edc1 7a0d 	vstr	s15, [r1, #52]	; 0x34
  average->humidity = average->humidity + latest->humidity;
   d441e:	ed90 7a08 	vldr	s14, [r0, #32]
   d4422:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
   d4426:	ee77 7a87 	vadd.f32	s15, s15, s14
   d442a:	edc1 7a0e 	vstr	s15, [r1, #56]	; 0x38
  average->pressure = average->pressure + latest->pressure;
   d442e:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
   d4432:	edd1 7a0f 	vldr	s15, [r1, #60]	; 0x3c
   d4436:	ee77 7a87 	vadd.f32	s15, s15, s14
   d443a:	edc1 7a0f 	vstr	s15, [r1, #60]	; 0x3c
  average->altitude = average->altitude + latest->altitude;
   d443e:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
   d4442:	edd1 7a10 	vldr	s15, [r1, #64]	; 0x40
  average->N++;
   d4446:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
  average->altitude = average->altitude + latest->altitude;
   d444a:	ee77 7a87 	vadd.f32	s15, s15, s14
   d444e:	edc1 7a10 	vstr	s15, [r1, #64]	; 0x40
}
   d4452:	4770      	bx	lr

000d4454 <_Z11displayInitv>:
void displayInit(){
   d4454:	b530      	push	{r4, r5, lr}
  epd.clearBuffer();
   d4456:	4c26      	ldr	r4, [pc, #152]	; (d44f0 <_Z11displayInitv+0x9c>)
void displayInit(){
   d4458:	b0b7      	sub	sp, #220	; 0xdc
  epd.clearBuffer();
   d445a:	4620      	mov	r0, r4
   d445c:	f004 f83c 	bl	d84d8 <_ZN12Adafruit_EPD11clearBufferEv>
  epd.fillScreen(EPD_WHITE);
   d4460:	4620      	mov	r0, r4
   d4462:	2101      	movs	r1, #1
   d4464:	f001 f90f 	bl	d5686 <_ZN12Adafruit_GFX10fillScreenEt>
  const unsigned char myBitmapBitmap [] PROGMEM = {
   d4468:	4922      	ldr	r1, [pc, #136]	; (d44f4 <_Z11displayInitv+0xa0>)
   d446a:	22af      	movs	r2, #175	; 0xaf
   d446c:	a80a      	add	r0, sp, #40	; 0x28
   d446e:	f009 fdab 	bl	ddfc8 <memcpy>
  epd.drawBitmap(95, 40, myBitmapBitmap, 40, 35, EPD_BLACK);
   d4472:	2500      	movs	r5, #0
   d4474:	2228      	movs	r2, #40	; 0x28
   d4476:	2323      	movs	r3, #35	; 0x23
   d4478:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d447c:	9200      	str	r2, [sp, #0]
   d447e:	eb0d 0302 	add.w	r3, sp, r2
   d4482:	4620      	mov	r0, r4
   d4484:	215f      	movs	r1, #95	; 0x5f
   d4486:	f001 f9b1 	bl	d57ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  char ID[20] = "-";
   d448a:	232d      	movs	r3, #45	; 0x2d
   d448c:	4629      	mov	r1, r5
   d448e:	2210      	movs	r2, #16
   d4490:	a806      	add	r0, sp, #24
   d4492:	9305      	str	r3, [sp, #20]
   d4494:	f009 fdc0 	bl	de018 <memset>
  EEPROM.get(NAME_ADDR,ID);
   d4498:	f007 fa5e 	bl	db958 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d449c:	2214      	movs	r2, #20
   d449e:	eb0d 0102 	add.w	r1, sp, r2
   d44a2:	200a      	movs	r0, #10
   d44a4:	f004 fbea 	bl	d8c7c <HAL_EEPROM_Get>
  epd.setTextSize(1);
   d44a8:	4620      	mov	r0, r4
   d44aa:	2101      	movs	r1, #1
   d44ac:	f001 fbcc 	bl	d5c48 <_ZN12Adafruit_GFX11setTextSizeEh>
  epd.setCursor(97, 80);
   d44b0:	2250      	movs	r2, #80	; 0x50
   d44b2:	4620      	mov	r0, r4
   d44b4:	2161      	movs	r1, #97	; 0x61
   d44b6:	f001 fbc4 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.setTextColor(EPD_BLACK);
   d44ba:	4629      	mov	r1, r5
   d44bc:	4620      	mov	r0, r4
   d44be:	f001 fbc8 	bl	d5c52 <_ZN12Adafruit_GFX12setTextColorEt>
  epd.print(VERSION_R);
   d44c2:	490d      	ldr	r1, [pc, #52]	; (d44f8 <_Z11displayInitv+0xa4>)
   d44c4:	4620      	mov	r0, r4
   d44c6:	f006 fae1 	bl	daa8c <_ZN5Print5printEPKc>
  epd.setCursor(73, 90);
   d44ca:	225a      	movs	r2, #90	; 0x5a
   d44cc:	4620      	mov	r0, r4
   d44ce:	2149      	movs	r1, #73	; 0x49
   d44d0:	f001 fbb7 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Device: ");
   d44d4:	4909      	ldr	r1, [pc, #36]	; (d44fc <_Z11displayInitv+0xa8>)
   d44d6:	4620      	mov	r0, r4
   d44d8:	f006 fad8 	bl	daa8c <_ZN5Print5printEPKc>
  epd.print(ID);
   d44dc:	a905      	add	r1, sp, #20
   d44de:	4620      	mov	r0, r4
   d44e0:	f006 fad4 	bl	daa8c <_ZN5Print5printEPKc>
  epd.display();
   d44e4:	4620      	mov	r0, r4
   d44e6:	f004 f8f2 	bl	d86ce <_ZN12Adafruit_EPD7displayEv>
}
   d44ea:	b037      	add	sp, #220	; 0xdc
   d44ec:	bd30      	pop	{r4, r5, pc}
   d44ee:	bf00      	nop
   d44f0:	2003e3d4 	.word	0x2003e3d4
   d44f4:	000de608 	.word	0x000de608
   d44f8:	000de2f3 	.word	0x000de2f3
   d44fc:	000de2fa 	.word	0x000de2fa

000d4500 <_Z8ble_initv>:

void ble_init(){
   d4500:	b510      	push	{r4, lr}
   d4502:	b0a0      	sub	sp, #128	; 0x80

  BLE.on();
   d4504:	f005 fd4c 	bl	d9fa0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4508:	f005 fd98 	bl	da03c <_ZNK8particle14BleLocalDevice2onEv>

  // robert testing (possible solution)
  rxCharacteristic.onDataReceived(onDataReceived,NULL);
   d450c:	493d      	ldr	r1, [pc, #244]	; (d4604 <_Z8ble_initv+0x104>)
   d450e:	483e      	ldr	r0, [pc, #248]	; (d4608 <_Z8ble_initv+0x108>)
   d4510:	2200      	movs	r2, #0
   d4512:	f006 f895 	bl	da640 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>

  //heartRateMeasurementCharacteristic.onDataReceived(onDataReceived, NULL);

  //BLE.addCharacteristic(heartRateMeasurementCharacteristic);
  BLE.addCharacteristic(txCharacteristic);
   d4516:	f005 fd43 	bl	d9fa0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d451a:	4a3c      	ldr	r2, [pc, #240]	; (d460c <_Z8ble_initv+0x10c>)
   d451c:	4601      	mov	r1, r0
   d451e:	a817      	add	r0, sp, #92	; 0x5c
   d4520:	f006 f982 	bl	da828 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4524:	a817      	add	r0, sp, #92	; 0x5c
   d4526:	f005 fe10 	bl	da14a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d452a:	f005 fd39 	bl	d9fa0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d452e:	4a36      	ldr	r2, [pc, #216]	; (d4608 <_Z8ble_initv+0x108>)
   d4530:	4601      	mov	r1, r0
   d4532:	a817      	add	r0, sp, #92	; 0x5c
   d4534:	f006 f978 	bl	da828 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4538:	a817      	add	r0, sp, #92	; 0x5c
   d453a:	f005 fe06 	bl	da14a <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   d453e:	a817      	add	r0, sp, #92	; 0x5c
   d4540:	f005 fb9f 	bl	d9c82 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d4544:	4932      	ldr	r1, [pc, #200]	; (d4610 <_Z8ble_initv+0x110>)
   d4546:	a80a      	add	r0, sp, #40	; 0x28
   d4548:	f005 fa9e 	bl	d9a88 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d454c:	a90a      	add	r1, sp, #40	; 0x28
   d454e:	a80f      	add	r0, sp, #60	; 0x3c
   d4550:	f005 fa9a 	bl	d9a88 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4554:	a80f      	add	r0, sp, #60	; 0x3c
   d4556:	f005 fadd 	bl	d9b14 <_ZNK8particle7BleUuid4typeEv>
   d455a:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d455c:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   d455e:	2c00      	cmp	r4, #0
   d4560:	d147      	bne.n	d45f2 <_Z8ble_initv+0xf2>
            uint16_t uuid16 = tempUUID.shorted();
   d4562:	f005 faf6 	bl	d9b52 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4566:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4568:	f8ad 0018 	strh.w	r0, [sp, #24]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d456c:	2302      	movs	r3, #2
   d456e:	aa06      	add	r2, sp, #24
   d4570:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4572:	a817      	add	r0, sp, #92	; 0x5c
   d4574:	f005 fb7a 	bl	d9c6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4578:	a802      	add	r0, sp, #8
   d457a:	f004 fe73 	bl	d9264 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d457e:	4925      	ldr	r1, [pc, #148]	; (d4614 <_Z8ble_initv+0x114>)
   d4580:	a80f      	add	r0, sp, #60	; 0x3c
   d4582:	f005 f880 	bl	d9686 <_ZN6StringC1ERKS_>

  String myID = System.deviceID();
  String LocalName = deviceID + " " + myID;
   d4586:	4924      	ldr	r1, [pc, #144]	; (d4618 <_Z8ble_initv+0x118>)
   d4588:	a80f      	add	r0, sp, #60	; 0x3c
   d458a:	f005 f8c4 	bl	d9716 <_ZplRK15StringSumHelperPKc>
   d458e:	a902      	add	r1, sp, #8
   d4590:	f005 f8b5 	bl	d96fe <_ZplRK15StringSumHelperRK6String>
   d4594:	4601      	mov	r1, r0
   d4596:	a806      	add	r0, sp, #24
   d4598:	f005 f875 	bl	d9686 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d459c:	a80f      	add	r0, sp, #60	; 0x3c
   d459e:	f004 ffe7 	bl	d9570 <_ZN6StringD1Ev>
  String LocalName2 = "A e06";
   d45a2:	491e      	ldr	r1, [pc, #120]	; (d461c <_Z8ble_initv+0x11c>)
   d45a4:	a80a      	add	r0, sp, #40	; 0x28
   d45a6:	f005 f82e 	bl	d9606 <_ZN6StringC1EPKc>
  
  data.appendLocalName(deviceID);
   d45aa:	491a      	ldr	r1, [pc, #104]	; (d4614 <_Z8ble_initv+0x114>)
   d45ac:	a817      	add	r0, sp, #92	; 0x5c
   d45ae:	f005 fb93 	bl	d9cd8 <_ZN8particle18BleAdvertisingData15appendLocalNameERK6String>
  // 16-bit: Company ID (0xffff)
  // Byte: Internal packet identifier (0x55)
  // 32-bit: Color code

  // Company ID (0xffff internal use/testing)
  buf[offset++] = 0xff;
   d45b2:	4b1b      	ldr	r3, [pc, #108]	; (d4620 <_Z8ble_initv+0x120>)
   d45b4:	930f      	str	r3, [sp, #60]	; 0x3c
  // Internal packet type. This is arbitrary, but provides an extra
  // check to make sure the data is my data, since we use the 0xffff company
  // code.
  buf[offset++] = 0x55;
  const uint32_t myColor = 0xff0000;
  memcpy(&buf[offset], &myColor, 4);
   d45b6:	2400      	movs	r4, #0
   d45b8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  // Our specific data, color code
  
  offset += 4;

  data.appendCustomData(buf,offset );
   d45bc:	a90f      	add	r1, sp, #60	; 0x3c
  memcpy(&buf[offset], &myColor, 4);
   d45be:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  data.appendCustomData(buf,offset );
   d45c2:	2207      	movs	r2, #7
   d45c4:	4623      	mov	r3, r4
   d45c6:	a817      	add	r0, sp, #92	; 0x5c
  memcpy(&buf[offset], &myColor, 4);
   d45c8:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
  data.appendCustomData(buf,offset );
   d45cc:	f005 fb87 	bl	d9cde <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
  BLE.advertise(&data);
   d45d0:	f005 fce6 	bl	d9fa0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45d4:	4622      	mov	r2, r4
   d45d6:	a917      	add	r1, sp, #92	; 0x5c
   d45d8:	f005 fd50 	bl	da07c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  String LocalName2 = "A e06";
   d45dc:	a80a      	add	r0, sp, #40	; 0x28
   d45de:	f004 ffc7 	bl	d9570 <_ZN6StringD1Ev>
  String LocalName = deviceID + " " + myID;
   d45e2:	a806      	add	r0, sp, #24
   d45e4:	f004 ffc4 	bl	d9570 <_ZN6StringD1Ev>
  String myID = System.deviceID();
   d45e8:	a802      	add	r0, sp, #8
   d45ea:	f004 ffc1 	bl	d9570 <_ZN6StringD1Ev>

  
}
   d45ee:	b020      	add	sp, #128	; 0x80
   d45f0:	bd10      	pop	{r4, pc}
   d45f2:	f005 fab3 	bl	d9b5c <_ZNK8particle7BleUuid8rawBytesEv>
   d45f6:	2300      	movs	r3, #0
   d45f8:	9300      	str	r3, [sp, #0]
   d45fa:	4602      	mov	r2, r0
   d45fc:	2310      	movs	r3, #16
   d45fe:	2107      	movs	r1, #7
   d4600:	e7b7      	b.n	d4572 <_Z8ble_initv+0x72>
   d4602:	bf00      	nop
   d4604:	000d4355 	.word	0x000d4355
   d4608:	2003e5a4 	.word	0x2003e5a4
   d460c:	2003e5ac 	.word	0x2003e5ac
   d4610:	2003e2d4 	.word	0x2003e2d4
   d4614:	2003e3c4 	.word	0x2003e3c4
   d4618:	000de46e 	.word	0x000de46e
   d461c:	000de303 	.word	0x000de303
   d4620:	0055ffff 	.word	0x0055ffff

000d4624 <setup>:
{ 
   d4624:	b570      	push	{r4, r5, r6, lr}
  pinMode(PM_RST,OUTPUT);
   d4626:	2101      	movs	r1, #1
{ 
   d4628:	b08a      	sub	sp, #40	; 0x28
  pinMode(PM_RST,OUTPUT);
   d462a:	2013      	movs	r0, #19
   d462c:	f007 f956 	bl	db8dc <pinMode>
  pinMode(PP5V0_EN,OUTPUT);
   d4630:	2101      	movs	r1, #1
   d4632:	2008      	movs	r0, #8
   d4634:	f007 f952 	bl	db8dc <pinMode>
  digitalWrite(PM_RST,HIGH);
   d4638:	2101      	movs	r1, #1
   d463a:	2013      	movs	r0, #19
   d463c:	f007 f95f 	bl	db8fe <digitalWrite>
  digitalWrite(PP5V0_EN,HIGH);
   d4640:	2101      	movs	r1, #1
   d4642:	2008      	movs	r0, #8
   d4644:	f007 f95b 	bl	db8fe <digitalWrite>
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
   d4648:	4a66      	ldr	r2, [pc, #408]	; (d47e4 <setup+0x1c0>)
   d464a:	4967      	ldr	r1, [pc, #412]	; (d47e8 <setup+0x1c4>)
   d464c:	a805      	add	r0, sp, #20
   d464e:	f004 f974 	bl	d893a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
   d4652:	a805      	add	r0, sp, #20
   d4654:	f004 fa44 	bl	d8ae0 <_ZN10RTC_DS32316adjustERK8DateTime>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4658:	4a64      	ldr	r2, [pc, #400]	; (d47ec <setup+0x1c8>)
   d465a:	4965      	ldr	r1, [pc, #404]	; (d47f0 <setup+0x1cc>)
   d465c:	4865      	ldr	r0, [pc, #404]	; (d47f4 <setup+0x1d0>)
   d465e:	f006 fdb5 	bl	db1cc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4662:	4a65      	ldr	r2, [pc, #404]	; (d47f8 <setup+0x1d4>)
   d4664:	4965      	ldr	r1, [pc, #404]	; (d47fc <setup+0x1d8>)
   d4666:	4863      	ldr	r0, [pc, #396]	; (d47f4 <setup+0x1d0>)
   d4668:	f006 fdb0 	bl	db1cc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d466c:	4a64      	ldr	r2, [pc, #400]	; (d4800 <setup+0x1dc>)
   d466e:	4965      	ldr	r1, [pc, #404]	; (d4804 <setup+0x1e0>)
   d4670:	4860      	ldr	r0, [pc, #384]	; (d47f4 <setup+0x1d0>)
   d4672:	f006 fdab 	bl	db1cc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4676:	4a64      	ldr	r2, [pc, #400]	; (d4808 <setup+0x1e4>)
   d4678:	4964      	ldr	r1, [pc, #400]	; (d480c <setup+0x1e8>)
   d467a:	485e      	ldr	r0, [pc, #376]	; (d47f4 <setup+0x1d0>)
   d467c:	f006 fda6 	bl	db1cc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
   d4680:	4963      	ldr	r1, [pc, #396]	; (d4810 <setup+0x1ec>)
   d4682:	4864      	ldr	r0, [pc, #400]	; (d4814 <setup+0x1f0>)
   d4684:	2300      	movs	r3, #0
   d4686:	2202      	movs	r2, #2
   d4688:	f004 fdcc 	bl	d9224 <spark_variable>
   d468c:	4962      	ldr	r1, [pc, #392]	; (d4818 <setup+0x1f4>)
   d468e:	4863      	ldr	r0, [pc, #396]	; (d481c <setup+0x1f8>)
   d4690:	2300      	movs	r3, #0
   d4692:	2202      	movs	r2, #2
   d4694:	f004 fdc6 	bl	d9224 <spark_variable>
   d4698:	4961      	ldr	r1, [pc, #388]	; (d4820 <setup+0x1fc>)
   d469a:	4862      	ldr	r0, [pc, #392]	; (d4824 <setup+0x200>)
   d469c:	2300      	movs	r3, #0
   d469e:	2202      	movs	r2, #2
   d46a0:	f004 fdc0 	bl	d9224 <spark_variable>
        spark_variable_t extra = {};
   d46a4:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
   d46a6:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d46a8:	9405      	str	r4, [sp, #20]
        extra.size = sizeof(extra);
   d46aa:	f8ad 3014 	strh.w	r3, [sp, #20]
        extra.update = update_string_variable;
   d46ae:	4b5e      	ldr	r3, [pc, #376]	; (d4828 <setup+0x204>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d46b0:	495e      	ldr	r1, [pc, #376]	; (d482c <setup+0x208>)
        extra.update = update_string_variable;
   d46b2:	9306      	str	r3, [sp, #24]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d46b4:	2204      	movs	r2, #4
   d46b6:	ab05      	add	r3, sp, #20
   d46b8:	485d      	ldr	r0, [pc, #372]	; (d4830 <setup+0x20c>)
        spark_variable_t extra = {};
   d46ba:	9407      	str	r4, [sp, #28]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d46bc:	f004 fdb2 	bl	d9224 <spark_variable>

#if HAL_PLATFORM_NCP && HAL_PLATFORM_CELLULAR
// FIXME: there should be a separate macro to indicate that this functionality
// is available
    int setActiveSim(SimType sim) {
        return cellular_set_active_sim(sim, nullptr);
   d46c0:	4621      	mov	r1, r4
   d46c2:	2001      	movs	r0, #1
   d46c4:	f004 fca4 	bl	d9010 <cellular_set_active_sim>
  const uint8_t val = 0x01;
   d46c8:	2501      	movs	r5, #1
        cellular_credentials_clear(nullptr);
   d46ca:	4620      	mov	r0, r4
   d46cc:	f004 fcaa 	bl	d9024 <cellular_credentials_clear>
  dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d46d0:	462a      	mov	r2, r5
   d46d2:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d46d6:	f10d 0003 	add.w	r0, sp, #3
  const uint8_t val = 0x01;
   d46da:	f88d 5003 	strb.w	r5, [sp, #3]
  dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d46de:	f004 fcab 	bl	d9038 <dct_write_app_data>
        network_off(*this, 0, 0, NULL);
   d46e2:	4854      	ldr	r0, [pc, #336]	; (d4834 <setup+0x210>)
   d46e4:	4623      	mov	r3, r4
   d46e6:	4622      	mov	r2, r4
   d46e8:	4621      	mov	r1, r4
   d46ea:	6840      	ldr	r0, [r0, #4]
   d46ec:	f004 fd62 	bl	d91b4 <network_off>
  Serial.begin(115200);
   d46f0:	f006 fe52 	bl	db398 <_Z16_fetch_usbserialv>
   d46f4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d46f8:	f006 fe42 	bl	db380 <_ZN9USBSerial5beginEl>
  delay(1000);
   d46fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4700:	f006 fbda 	bl	daeb8 <delay>
class SPISettings : public Printable {
   d4704:	f88d 4018 	strb.w	r4, [sp, #24]
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4708:	4c4b      	ldr	r4, [pc, #300]	; (d4838 <setup+0x214>)
   d470a:	4b4c      	ldr	r3, [pc, #304]	; (d483c <setup+0x218>)
   d470c:	9305      	str	r3, [sp, #20]
   d470e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d4712:	4b4b      	ldr	r3, [pc, #300]	; (d4840 <setup+0x21c>)
   d4714:	9307      	str	r3, [sp, #28]
   d4716:	2202      	movs	r2, #2
   d4718:	ab05      	add	r3, sp, #20
   d471a:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d471e:	4630      	mov	r0, r6
   d4720:	f8ad 5020 	strh.w	r5, [sp, #32]
   d4724:	f003 f844 	bl	d77b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d4728:	b1f8      	cbz	r0, d476a <setup+0x146>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d472a:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d472c:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   d4730:	f002 fcb2 	bl	d7098 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4734:	4629      	mov	r1, r5
   d4736:	4620      	mov	r0, r4
   d4738:	f002 fee8 	bl	d750c <_ZN9FatVolume4initEh>
   d473c:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d4740:	4601      	mov	r1, r0
   d4742:	b168      	cbz	r0, d4760 <setup+0x13c>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4744:	493c      	ldr	r1, [pc, #240]	; (d4838 <setup+0x214>)
   d4746:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   d474a:	f002 fa90 	bl	d6c6e <_ZN7FatFile8openRootEP9FatVolume>
   d474e:	b160      	cbz	r0, d476a <setup+0x146>
    if (!dir->isDir()) {
   d4750:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4754:	f013 0f70 	tst.w	r3, #112	; 0x70
    m_cwd = dir;
   d4758:	bf1c      	itt	ne
   d475a:	4b3a      	ldrne	r3, [pc, #232]	; (d4844 <setup+0x220>)
   d475c:	601d      	strne	r5, [r3, #0]
    return true;
   d475e:	e004      	b.n	d476a <setup+0x146>
    return (part ? init(part) : init(1) || init(0))
   d4760:	4620      	mov	r0, r4
   d4762:	f002 fed3 	bl	d750c <_ZN9FatVolume4initEh>
   d4766:	2800      	cmp	r0, #0
   d4768:	d1ec      	bne.n	d4744 <setup+0x120>
  delay(1000);
   d476a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d476e:	f006 fba3 	bl	daeb8 <delay>
  bme.begin();
   d4772:	2176      	movs	r1, #118	; 0x76
   d4774:	4834      	ldr	r0, [pc, #208]	; (d4848 <setup+0x224>)
   d4776:	f001 feb3 	bl	d64e0 <_ZN15Adafruit_BME2805beginEh>
  pm.begin();
   d477a:	4834      	ldr	r0, [pc, #208]	; (d484c <setup+0x228>)
   d477c:	f000 fe51 	bl	d5422 <_ZN7PMSA0035beginEv>
  epd.begin();
   d4780:	2101      	movs	r1, #1
   d4782:	4833      	ldr	r0, [pc, #204]	; (d4850 <setup+0x22c>)
   d4784:	f003 fb84 	bl	d7e90 <_ZN16Adafruit_SSD16755beginEb>
  delay(5000);
   d4788:	f241 3088 	movw	r0, #5000	; 0x1388
   d478c:	f006 fb94 	bl	daeb8 <delay>
  EEPROM.get(NAME_ADDR,ID);
   d4790:	f007 f8e2 	bl	db958 <_Z21__fetch_global_EEPROMv>
   d4794:	2214      	movs	r2, #20
   d4796:	eb0d 0102 	add.w	r1, sp, r2
   d479a:	200a      	movs	r0, #10
   d479c:	f004 fa6e 	bl	d8c7c <HAL_EEPROM_Get>
  deviceID = String(ID);
   d47a0:	a905      	add	r1, sp, #20
   d47a2:	a801      	add	r0, sp, #4
   d47a4:	f004 ff2f 	bl	d9606 <_ZN6StringC1EPKc>
   d47a8:	a901      	add	r1, sp, #4
   d47aa:	4820      	ldr	r0, [pc, #128]	; (d482c <setup+0x208>)
   d47ac:	f004 ff76 	bl	d969c <_ZN6StringaSEOS_>
   d47b0:	a801      	add	r0, sp, #4
   d47b2:	f004 fedd 	bl	d9570 <_ZN6StringD1Ev>
  DISPLAY_REFRESH = 10;
   d47b6:	4b16      	ldr	r3, [pc, #88]	; (d4810 <setup+0x1ec>)
   d47b8:	220a      	movs	r2, #10
   d47ba:	601a      	str	r2, [r3, #0]
  SENSOR_CYCLE = 5;
   d47bc:	4b16      	ldr	r3, [pc, #88]	; (d4818 <setup+0x1f4>)
   d47be:	2205      	movs	r2, #5
   d47c0:	601a      	str	r2, [r3, #0]
  PUBLISH_RATE = 43200;
   d47c2:	4b17      	ldr	r3, [pc, #92]	; (d4820 <setup+0x1fc>)
   d47c4:	f64a 02c0 	movw	r2, #43200	; 0xa8c0
   d47c8:	601a      	str	r2, [r3, #0]
  ble_init();
   d47ca:	f7ff fe99 	bl	d4500 <_Z8ble_initv>
  PHONE_BACKUP_REQUEST = true;
   d47ce:	4b21      	ldr	r3, [pc, #132]	; (d4854 <setup+0x230>)
   d47d0:	2201      	movs	r2, #1
   d47d2:	701a      	strb	r2, [r3, #0]
  displayInit();  
   d47d4:	f7ff fe3e 	bl	d4454 <_Z11displayInitv>
  delay(5000);
   d47d8:	f241 3088 	movw	r0, #5000	; 0x1388
   d47dc:	f006 fb6c 	bl	daeb8 <delay>
}
   d47e0:	b00a      	add	sp, #40	; 0x28
   d47e2:	bd70      	pop	{r4, r5, r6, pc}
   d47e4:	000de309 	.word	0x000de309
   d47e8:	000de312 	.word	0x000de312
   d47ec:	000de31e 	.word	0x000de31e
   d47f0:	000d4209 	.word	0x000d4209
   d47f4:	000db1a1 	.word	0x000db1a1
   d47f8:	000de32c 	.word	0x000de32c
   d47fc:	000d4281 	.word	0x000d4281
   d4800:	000de343 	.word	0x000de343
   d4804:	000d41bd 	.word	0x000d41bd
   d4808:	000de35a 	.word	0x000de35a
   d480c:	000d4239 	.word	0x000d4239
   d4810:	2003de30 	.word	0x2003de30
   d4814:	000de370 	.word	0x000de370
   d4818:	2003e2c4 	.word	0x2003e2c4
   d481c:	000de385 	.word	0x000de385
   d4820:	2003de38 	.word	0x2003de38
   d4824:	000de398 	.word	0x000de398
   d4828:	000d40c9 	.word	0x000d40c9
   d482c:	2003e3c4 	.word	0x2003e3c4
   d4830:	000de3a5 	.word	0x000de3a5
   d4834:	2003e660 	.word	0x2003e660
   d4838:	2003de3c 	.word	0x2003de3c
   d483c:	000de5d4 	.word	0x000de5d4
   d4840:	02faf080 	.word	0x02faf080
   d4844:	2003e5b8 	.word	0x2003e5b8
   d4848:	2003e380 	.word	0x2003e380
   d484c:	2003e498 	.word	0x2003e498
   d4850:	2003e3d4 	.word	0x2003e3d4
   d4854:	2003de34 	.word	0x2003de34

000d4858 <_Z12write_to_blePc>:


void write_to_ble(char *packet){
   d4858:	b570      	push	{r4, r5, r6, lr}
   d485a:	b0c4      	sub	sp, #272	; 0x110
   d485c:	4605      	mov	r5, r0
   d485e:	2400      	movs	r4, #0
  uint8_t txBuf[UART_TX_BUF_SIZE];
  size_t txLen = 0;

  for (size_t i = 0; i < strlen(packet); i++)
  {
    txBuf[txLen++] = packet[i];
   d4860:	ae01      	add	r6, sp, #4
  for (size_t i = 0; i < strlen(packet); i++)
   d4862:	4628      	mov	r0, r5
   d4864:	f009 fc23 	bl	de0ae <strlen>
   d4868:	42a0      	cmp	r0, r4
   d486a:	d903      	bls.n	d4874 <_Z12write_to_blePc+0x1c>
    txBuf[txLen++] = packet[i];
   d486c:	5d2b      	ldrb	r3, [r5, r4]
   d486e:	55a3      	strb	r3, [r4, r6]
  for (size_t i = 0; i < strlen(packet); i++)
   d4870:	3401      	adds	r4, #1
   d4872:	e7f6      	b.n	d4862 <_Z12write_to_blePc+0xa>
    //Serial.write(txBuf[txLen - 1]);
  }
  if (txLen > 0)
   d4874:	b12c      	cbz	r4, d4882 <_Z12write_to_blePc+0x2a>
  {
    txCharacteristic.setValue(txBuf, txLen);
   d4876:	4804      	ldr	r0, [pc, #16]	; (d4888 <_Z12write_to_blePc+0x30>)
   d4878:	2300      	movs	r3, #0
   d487a:	4622      	mov	r2, r4
   d487c:	a901      	add	r1, sp, #4
   d487e:	f005 fa87 	bl	d9d90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
  }

}
   d4882:	b044      	add	sp, #272	; 0x110
   d4884:	bd70      	pop	{r4, r5, r6, pc}
   d4886:	bf00      	nop
   d4888:	2003e5ac 	.word	0x2003e5ac

000d488c <_Z10backUp2BLEPc>:

Robert's version.

*/

void backUp2BLE(char *output){
   d488c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d488e:	b091      	sub	sp, #68	; 0x44
   d4890:	4607      	mov	r7, r0
  Serial.println("I came here, please find me\n");
   d4892:	f006 fd81 	bl	db398 <_Z16_fetch_usbserialv>
   d4896:	494c      	ldr	r1, [pc, #304]	; (d49c8 <_Z10backUp2BLEPc+0x13c>)
class File : public FatFile, public Stream {
   d4898:	4e4c      	ldr	r6, [pc, #304]	; (d49cc <_Z10backUp2BLEPc+0x140>)
   d489a:	f006 f90a 	bl	daab2 <_ZN5Print7printlnEPKc>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d489e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d48a2:	9205      	str	r2, [sp, #20]
  File() {}
   d48a4:	4a4a      	ldr	r2, [pc, #296]	; (d49d0 <_Z10backUp2BLEPc+0x144>)
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d48a6:	494b      	ldr	r1, [pc, #300]	; (d49d4 <_Z10backUp2BLEPc+0x148>)
   d48a8:	9203      	str	r2, [sp, #12]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d48aa:	2300      	movs	r3, #0
   d48ac:	4a4a      	ldr	r2, [pc, #296]	; (d49d8 <_Z10backUp2BLEPc+0x14c>)
   d48ae:	f8ad 301c 	strh.w	r3, [sp, #28]
   d48b2:	a807      	add	r0, sp, #28
class File : public FatFile, public Stream {
   d48b4:	ac07      	add	r4, sp, #28
    Print() : write_error(0) {}
   d48b6:	9304      	str	r3, [sp, #16]
   d48b8:	f002 fbf5 	bl	d70a6 <_ZN7FatFile4openEPS_PKci>
   d48bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d48be:	f106 0510 	add.w	r5, r6, #16
   d48c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d48c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d48c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d48c8:	6823      	ldr	r3, [r4, #0]
   d48ca:	602b      	str	r3, [r5, #0]
class Print
   d48cc:	9b04      	ldr	r3, [sp, #16]
   d48ce:	6073      	str	r3, [r6, #4]
class Stream : public Print
   d48d0:	9b05      	ldr	r3, [sp, #20]
   d48d2:	60b3      	str	r3, [r6, #8]
   d48d4:	9b06      	ldr	r3, [sp, #24]
   d48d6:	60f3      	str	r3, [r6, #12]
  myFile = SD.open("Backup.txt");
  if(!myFile)
   d48d8:	7c33      	ldrb	r3, [r6, #16]
   d48da:	2b00      	cmp	r3, #0
   d48dc:	d048      	beq.n	d4970 <_Z10backUp2BLEPc+0xe4>
  {
  Serial.println("Ensure your macro file open\n");
  }
  if(myFile){
    Serial.println("File exist\n");
   d48de:	f006 fd5b 	bl	db398 <_Z16_fetch_usbserialv>
   d48e2:	493e      	ldr	r1, [pc, #248]	; (d49dc <_Z10backUp2BLEPc+0x150>)

    // This is the flag for counting the number has been sent;
    // The reason why it is -2 is becasue one for "device name" and the other for "header of the table" 
    count_flag = -2 ;
   d48e4:	4c3e      	ldr	r4, [pc, #248]	; (d49e0 <_Z10backUp2BLEPc+0x154>)
    Serial.println("File exist\n");
   d48e6:	f006 f8e4 	bl	daab2 <_ZN5Print7printlnEPKc>
    char start[12] ="BACKUPSTART";
   d48ea:	4a3e      	ldr	r2, [pc, #248]	; (d49e4 <_Z10backUp2BLEPc+0x158>)
    count_flag = -2 ;
   d48ec:	f06f 0301 	mvn.w	r3, #1
    char start[12] ="BACKUPSTART";
   d48f0:	6810      	ldr	r0, [r2, #0]
   d48f2:	6851      	ldr	r1, [r2, #4]
    count_flag = -2 ;
   d48f4:	6023      	str	r3, [r4, #0]
    char start[12] ="BACKUPSTART";
   d48f6:	ab03      	add	r3, sp, #12
   d48f8:	c303      	stmia	r3!, {r0, r1}
   d48fa:	6890      	ldr	r0, [r2, #8]
    char end[10] ="BACKUPEND";
   d48fc:	4a3a      	ldr	r2, [pc, #232]	; (d49e8 <_Z10backUp2BLEPc+0x15c>)
    char start[12] ="BACKUPSTART";
   d48fe:	6018      	str	r0, [r3, #0]
    char end[10] ="BACKUPEND";
   d4900:	6851      	ldr	r1, [r2, #4]
   d4902:	6810      	ldr	r0, [r2, #0]
   d4904:	8912      	ldrh	r2, [r2, #8]
   d4906:	466b      	mov	r3, sp
   d4908:	c303      	stmia	r3!, {r0, r1}

    write_to_ble(start);
   d490a:	a803      	add	r0, sp, #12
    char end[10] ="BACKUPEND";
   d490c:	801a      	strh	r2, [r3, #0]
    write_to_ble(start);
   d490e:	f7ff ffa3 	bl	d4858 <_Z12write_to_blePc>
    

    Serial.println(millis());
   d4912:	f006 fd41 	bl	db398 <_Z16_fetch_usbserialv>
   d4916:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4918:	f004 f9a0 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d491c:	220a      	movs	r2, #10
   d491e:	4601      	mov	r1, r0
   d4920:	4628      	mov	r0, r5
   d4922:	f006 f8d0 	bl	daac6 <_ZN5Print11printNumberEmh>
        n += println();
   d4926:	4628      	mov	r0, r5
   d4928:	f006 f8b7 	bl	daa9a <_ZN5Print7printlnEv>
    while (myFile.available()) {
   d492c:	4d27      	ldr	r5, [pc, #156]	; (d49cc <_Z10backUp2BLEPc+0x140>)
      if(!myFile.fgets(output,SAMPLE_CHAR_SIZE)) break;
   d492e:	f105 0610 	add.w	r6, r5, #16
    while (myFile.available()) {
   d4932:	4628      	mov	r0, r5
   d4934:	f7ff fbcb 	bl	d40ce <_ZN4File9availableEv>
   d4938:	b328      	cbz	r0, d4986 <_Z10backUp2BLEPc+0xfa>
      if(!myFile.fgets(output,SAMPLE_CHAR_SIZE)) break;
   d493a:	2300      	movs	r3, #0
   d493c:	f240 1209 	movw	r2, #265	; 0x109
   d4940:	4639      	mov	r1, r7
   d4942:	4630      	mov	r0, r6
   d4944:	f002 fa5a 	bl	d6dfc <_ZN7FatFile5fgetsEPcsS0_>
   d4948:	b1e8      	cbz	r0, d4986 <_Z10backUp2BLEPc+0xfa>
      write_to_ble(output);
   d494a:	4638      	mov	r0, r7
   d494c:	f7ff ff84 	bl	d4858 <_Z12write_to_blePc>
      count_flag++;
   d4950:	6823      	ldr	r3, [r4, #0]
   d4952:	3301      	adds	r3, #1
   d4954:	6023      	str	r3, [r4, #0]
      if(!BLE.connected()) {
   d4956:	f005 fb23 	bl	d9fa0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d495a:	f005 fba2 	bl	da0a2 <_ZNK8particle14BleLocalDevice9connectedEv>
   d495e:	2800      	cmp	r0, #0
   d4960:	d1e7      	bne.n	d4932 <_Z10backUp2BLEPc+0xa6>
        Serial.println("connection lost");
   d4962:	f006 fd19 	bl	db398 <_Z16_fetch_usbserialv>
   d4966:	4921      	ldr	r1, [pc, #132]	; (d49ec <_Z10backUp2BLEPc+0x160>)
   d4968:	f006 f8a3 	bl	daab2 <_ZN5Print7printlnEPKc>
  /*
    for cases where the phone starts and the backup file does not exist, SD.open
    will fail and the backup request will be turned off.
  */
    PHONE_BACKUP_REQUEST = false;
}
   d496c:	b011      	add	sp, #68	; 0x44
   d496e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Serial.println("Ensure your macro file open\n");
   d4970:	f006 fd12 	bl	db398 <_Z16_fetch_usbserialv>
   d4974:	491e      	ldr	r1, [pc, #120]	; (d49f0 <_Z10backUp2BLEPc+0x164>)
   d4976:	f006 f89c 	bl	daab2 <_ZN5Print7printlnEPKc>
  if(myFile){
   d497a:	7c33      	ldrb	r3, [r6, #16]
   d497c:	2b00      	cmp	r3, #0
   d497e:	d1ae      	bne.n	d48de <_Z10backUp2BLEPc+0x52>
    PHONE_BACKUP_REQUEST = false;
   d4980:	4a1c      	ldr	r2, [pc, #112]	; (d49f4 <_Z10backUp2BLEPc+0x168>)
   d4982:	7013      	strb	r3, [r2, #0]
    return;
   d4984:	e7f2      	b.n	d496c <_Z10backUp2BLEPc+0xe0>
    myFile.close();
   d4986:	481c      	ldr	r0, [pc, #112]	; (d49f8 <_Z10backUp2BLEPc+0x16c>)
   d4988:	f002 fb86 	bl	d7098 <_ZN7FatFile5closeEv>
    write_to_ble(end);
   d498c:	4668      	mov	r0, sp
   d498e:	f7ff ff63 	bl	d4858 <_Z12write_to_blePc>
    delay(1000);
   d4992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4996:	f006 fa8f 	bl	daeb8 <delay>
  Serial.printlnf("Communication Broadcast");
   d499a:	f006 fcfd 	bl	db398 <_Z16_fetch_usbserialv>
   d499e:	4917      	ldr	r1, [pc, #92]	; (d49fc <_Z10backUp2BLEPc+0x170>)
   d49a0:	f7ff fcca 	bl	d4338 <_ZN5Print8printlnfEPKcz>
  Serial.println(millis());
   d49a4:	f006 fcf8 	bl	db398 <_Z16_fetch_usbserialv>
   d49a8:	4604      	mov	r4, r0
   d49aa:	f004 f957 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d49ae:	220a      	movs	r2, #10
   d49b0:	4601      	mov	r1, r0
   d49b2:	4620      	mov	r0, r4
   d49b4:	f006 f887 	bl	daac6 <_ZN5Print11printNumberEmh>
        n += println();
   d49b8:	4620      	mov	r0, r4
   d49ba:	f006 f86e 	bl	daa9a <_ZN5Print7printlnEv>
    PHONE_BACKUP_REQUEST = false;
   d49be:	4b0d      	ldr	r3, [pc, #52]	; (d49f4 <_Z10backUp2BLEPc+0x168>)
   d49c0:	2200      	movs	r2, #0
   d49c2:	701a      	strb	r2, [r3, #0]
   d49c4:	e7d2      	b.n	d496c <_Z10backUp2BLEPc+0xe0>
   d49c6:	bf00      	nop
   d49c8:	000de3af 	.word	0x000de3af
   d49cc:	2003e464 	.word	0x2003e464
   d49d0:	000de5e8 	.word	0x000de5e8
   d49d4:	2003e278 	.word	0x2003e278
   d49d8:	000de3cc 	.word	0x000de3cc
   d49dc:	000de3d7 	.word	0x000de3d7
   d49e0:	2003e3c0 	.word	0x2003e3c0
   d49e4:	000de428 	.word	0x000de428
   d49e8:	000de434 	.word	0x000de434
   d49ec:	000de400 	.word	0x000de400
   d49f0:	000de3e3 	.word	0x000de3e3
   d49f4:	2003de34 	.word	0x2003de34
   d49f8:	2003e474 	.word	0x2003e474
   d49fc:	000de410 	.word	0x000de410

000d4a00 <_Z13record_sample17SampleDestination>:
void record_sample(SampleDestination dest){
   d4a00:	b500      	push	{lr}
   d4a02:	b0c5      	sub	sp, #276	; 0x114
  Serial.println("I am here\n");
   d4a04:	f006 fcc8 	bl	db398 <_Z16_fetch_usbserialv>
   d4a08:	4906      	ldr	r1, [pc, #24]	; (d4a24 <_Z13record_sample17SampleDestination+0x24>)
   d4a0a:	f006 f852 	bl	daab2 <_ZN5Print7printlnEPKc>
      Serial.println("I am here2\n");
   d4a0e:	f006 fcc3 	bl	db398 <_Z16_fetch_usbserialv>
   d4a12:	4905      	ldr	r1, [pc, #20]	; (d4a28 <_Z13record_sample17SampleDestination+0x28>)
   d4a14:	f006 f84d 	bl	daab2 <_ZN5Print7printlnEPKc>
        backUp2BLE(data);
   d4a18:	a801      	add	r0, sp, #4
   d4a1a:	f7ff ff37 	bl	d488c <_Z10backUp2BLEPc>
}
   d4a1e:	b045      	add	sp, #276	; 0x114
   d4a20:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a24:	000de43e 	.word	0x000de43e
   d4a28:	000de449 	.word	0x000de449

000d4a2c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4a2c:	b530      	push	{r4, r5, lr}
   d4a2e:	b085      	sub	sp, #20
   d4a30:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4a32:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4a34:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4a36:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4a38:	f004 fb4e 	bl	d90d8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4a3c:	b9b0      	cbnz	r0, d4a6c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4a3e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4a40:	b10c      	cbz	r4, d4a46 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4a42:	6923      	ldr	r3, [r4, #16]
   d4a44:	b923      	cbnz	r3, d4a50 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4a46:	4a0a      	ldr	r2, [pc, #40]	; (d4a70 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4a48:	2100      	movs	r1, #0
   d4a4a:	200a      	movs	r0, #10
   d4a4c:	f004 fb34 	bl	d90b8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4a50:	2300      	movs	r3, #0
   d4a52:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4a56:	230c      	movs	r3, #12
   d4a58:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4a5c:	2304      	movs	r3, #4
   d4a5e:	9303      	str	r3, [sp, #12]
   d4a60:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4a62:	6923      	ldr	r3, [r4, #16]
   d4a64:	aa01      	add	r2, sp, #4
   d4a66:	2101      	movs	r1, #1
   d4a68:	4620      	mov	r0, r4
   d4a6a:	4798      	blx	r3
}
   d4a6c:	b005      	add	sp, #20
   d4a6e:	bd30      	pop	{r4, r5, pc}
   d4a70:	000d8c3d 	.word	0x000d8c3d

000d4a74 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   d4a74:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4a76:	2003      	movs	r0, #3
   d4a78:	a901      	add	r1, sp, #4
   d4a7a:	f7ff ffd7 	bl	d4a2c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4a7e:	b940      	cbnz	r0, d4a92 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4a80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4a84:	ee00 3a10 	vmov	s0, r3
   d4a88:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   d4a8c:	b003      	add	sp, #12
   d4a8e:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   d4a92:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d4a96:	e7f9      	b.n	d4a8c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000d4a98 <_Z11take_sampleP6Sample>:
void take_sample(Sample* latest){
   d4a98:	b510      	push	{r4, lr}
   d4a9a:	4604      	mov	r4, r0
  pm.poll();
   d4a9c:	4837      	ldr	r0, [pc, #220]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4a9e:	f000 fccd 	bl	d543c <_ZN7PMSA0034pollEv>
  if (Time.isValid()){
   d4aa2:	f006 f98d 	bl	dadc0 <_ZN9TimeClass7isValidEv>
   d4aa6:	b1b0      	cbz	r0, d4ad6 <_Z11take_sampleP6Sample+0x3e>
    latest->seconds = Time.second();
   d4aa8:	f006 f9d0 	bl	dae4c <_ZN9TimeClass6secondEv>
   d4aac:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    latest->minute = Time.minute();
   d4ab0:	f006 f9c0 	bl	dae34 <_ZN9TimeClass6minuteEv>
   d4ab4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    latest->hour = Time.hour();
   d4ab8:	f006 f9b0 	bl	dae1c <_ZN9TimeClass4hourEv>
   d4abc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    latest->day = Time.day();
   d4ac0:	f006 f9d0 	bl	dae64 <_ZN9TimeClass3dayEv>
   d4ac4:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    latest->month = Time.month();
   d4ac8:	f006 f9d8 	bl	dae7c <_ZN9TimeClass5monthEv>
   d4acc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    latest->year = Time.year();
   d4ad0:	f006 f9dc 	bl	dae8c <_ZN9TimeClass4yearEv>
   d4ad4:	8660      	strh	r0, [r4, #50]	; 0x32
  latest->pt_03 = pm.pt_03();
   d4ad6:	4829      	ldr	r0, [pc, #164]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4ad8:	f000 fce6 	bl	d54a8 <_ZN7PMSA0035pt_03Ev>
   d4adc:	8060      	strh	r0, [r4, #2]
  latest->pt_05 = pm.pt_05();
   d4ade:	4827      	ldr	r0, [pc, #156]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4ae0:	f000 fce4 	bl	d54ac <_ZN7PMSA0035pt_05Ev>
   d4ae4:	80a0      	strh	r0, [r4, #4]
  latest->pt_10 = pm.pt_10();
   d4ae6:	4825      	ldr	r0, [pc, #148]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4ae8:	f000 fce2 	bl	d54b0 <_ZN7PMSA0035pt_10Ev>
   d4aec:	80e0      	strh	r0, [r4, #6]
  latest->pt_25 = pm.pt_25();
   d4aee:	4823      	ldr	r0, [pc, #140]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4af0:	f000 fce0 	bl	d54b4 <_ZN7PMSA0035pt_25Ev>
   d4af4:	8120      	strh	r0, [r4, #8]
  latest->pt_50 = pm.pt_50();
   d4af6:	4821      	ldr	r0, [pc, #132]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4af8:	f000 fcde 	bl	d54b8 <_ZN7PMSA0035pt_50Ev>
   d4afc:	8160      	strh	r0, [r4, #10]
  latest->pt_100 = pm.pt_100();
   d4afe:	481f      	ldr	r0, [pc, #124]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4b00:	f000 fcdc 	bl	d54bc <_ZN7PMSA0036pt_100Ev>
   d4b04:	81a0      	strh	r0, [r4, #12]
  latest->pm10_env = pm.pm10_env();
   d4b06:	481d      	ldr	r0, [pc, #116]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4b08:	f000 fcc8 	bl	d549c <_ZN7PMSA0038pm10_envEv>
   d4b0c:	81e0      	strh	r0, [r4, #14]
  latest->pm25_env = pm.pm25_env();
   d4b0e:	481b      	ldr	r0, [pc, #108]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4b10:	f000 fcc6 	bl	d54a0 <_ZN7PMSA0038pm25_envEv>
   d4b14:	8220      	strh	r0, [r4, #16]
  latest->pm100_env = pm.pm100_env();
   d4b16:	4819      	ldr	r0, [pc, #100]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4b18:	f000 fcc4 	bl	d54a4 <_ZN7PMSA0039pm100_envEv>
   d4b1c:	8260      	strh	r0, [r4, #18]
  latest->pm10_st = pm.pm10_st();
   d4b1e:	4817      	ldr	r0, [pc, #92]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4b20:	f000 fcb6 	bl	d5490 <_ZN7PMSA0037pm10_stEv>
   d4b24:	82a0      	strh	r0, [r4, #20]
  latest->pm25_st = pm.pm25_st();
   d4b26:	4815      	ldr	r0, [pc, #84]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4b28:	f000 fcb4 	bl	d5494 <_ZN7PMSA0037pm25_stEv>
   d4b2c:	82e0      	strh	r0, [r4, #22]
  latest->pm100_st = pm.pm100_st();
   d4b2e:	4813      	ldr	r0, [pc, #76]	; (d4b7c <_Z11take_sampleP6Sample+0xe4>)
   d4b30:	f000 fcb2 	bl	d5498 <_ZN7PMSA0038pm100_stEv>
   d4b34:	8320      	strh	r0, [r4, #24]
  latest->temp = bme.readTemperature();
   d4b36:	4812      	ldr	r0, [pc, #72]	; (d4b80 <_Z11take_sampleP6Sample+0xe8>)
   d4b38:	f001 f970 	bl	d5e1c <_ZN15Adafruit_BME28015readTemperatureEv>
  latest->humidity = bme.readHumidity();
   d4b3c:	4810      	ldr	r0, [pc, #64]	; (d4b80 <_Z11take_sampleP6Sample+0xe8>)
  latest->temp = bme.readTemperature();
   d4b3e:	ed84 0a07 	vstr	s0, [r4, #28]
  latest->humidity = bme.readHumidity();
   d4b42:	f001 fb1b 	bl	d617c <_ZN15Adafruit_BME28012readHumidityEv>
  latest->pressure = bme.readPressure();
   d4b46:	480e      	ldr	r0, [pc, #56]	; (d4b80 <_Z11take_sampleP6Sample+0xe8>)
  latest->humidity = bme.readHumidity();
   d4b48:	ed84 0a08 	vstr	s0, [r4, #32]
  latest->pressure = bme.readPressure();
   d4b4c:	f001 f994 	bl	d5e78 <_ZN15Adafruit_BME28012readPressureEv>
  latest->altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d4b50:	480b      	ldr	r0, [pc, #44]	; (d4b80 <_Z11take_sampleP6Sample+0xe8>)
  latest->pressure = bme.readPressure();
   d4b52:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  latest->altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d4b56:	ed9f 0a0b 	vldr	s0, [pc, #44]	; d4b84 <_Z11take_sampleP6Sample+0xec>
   d4b5a:	f001 fa69 	bl	d6030 <_ZN15Adafruit_BME28012readAltitudeEf>
   d4b5e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
  latest->battery = System.batteryCharge();
   d4b62:	f7ff ff87 	bl	d4a74 <_ZNK11SystemClass13batteryChargeEv.isra.0>
  update_average(latest, &run_average_BLE);
   d4b66:	4908      	ldr	r1, [pc, #32]	; (d4b88 <_Z11take_sampleP6Sample+0xf0>)
  latest->battery = System.batteryCharge();
   d4b68:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
  update_average(latest, &run_average_BLE);
   d4b6c:	4620      	mov	r0, r4
   d4b6e:	f7ff fc1b 	bl	d43a8 <_Z14update_averageP6SampleP12Data_average>
}
   d4b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  update_average(latest, &run_average_CLOUD);
   d4b76:	4905      	ldr	r1, [pc, #20]	; (d4b8c <_Z11take_sampleP6Sample+0xf4>)
   d4b78:	f7ff bc16 	b.w	d43a8 <_Z14update_averageP6SampleP12Data_average>
   d4b7c:	2003e498 	.word	0x2003e498
   d4b80:	2003e380 	.word	0x2003e380
   d4b84:	447d5000 	.word	0x447d5000
   d4b88:	2003e514 	.word	0x2003e514
   d4b8c:	2003e55c 	.word	0x2003e55c

000d4b90 <_Z11displayDATAP6Sample>:
{
   d4b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4b94:	ed2d 8b02 	vpush	{d8}
   d4b98:	b094      	sub	sp, #80	; 0x50
  CellularSignal sig = Cellular.RSSI();
   d4b9a:	49c0      	ldr	r1, [pc, #768]	; (d4e9c <_Z11displayDATAP6Sample+0x30c>)
{
   d4b9c:	4604      	mov	r4, r0
  CellularSignal sig = Cellular.RSSI();
   d4b9e:	a80c      	add	r0, sp, #48	; 0x30
   d4ba0:	f006 fc58 	bl	db454 <_ZN5spark13CellularClass4RSSIEv>
  float strength = sig.getStrength();
   d4ba4:	a80c      	add	r0, sp, #48	; 0x30
   d4ba6:	f006 f9d9 	bl	daf5c <_ZNK14CellularSignal11getStrengthEv>
   d4baa:	eeb0 8a40 	vmov.f32	s16, s0
  EEPROM.get(NAME_ADDR,ID);
   d4bae:	f006 fed3 	bl	db958 <_Z21__fetch_global_EEPROMv>
   d4bb2:	2214      	movs	r2, #20
   d4bb4:	a907      	add	r1, sp, #28
   d4bb6:	200a      	movs	r0, #10
   d4bb8:	f004 f860 	bl	d8c7c <HAL_EEPROM_Get>
  String IDs(ID);
   d4bbc:	a907      	add	r1, sp, #28
   d4bbe:	a803      	add	r0, sp, #12
   d4bc0:	f004 fd21 	bl	d9606 <_ZN6StringC1EPKc>
  DateTime now_time = rtc.now();
   d4bc4:	a801      	add	r0, sp, #4
   d4bc6:	f003 fffb 	bl	d8bc0 <_ZN10RTC_DS32313nowEv>
  epd.setTextWrap(true);
   d4bca:	48b5      	ldr	r0, [pc, #724]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
   d4bcc:	f89d 5004 	ldrb.w	r5, [sp, #4]
  int disHour = now_time.hour();  
   d4bd0:	f89d 8007 	ldrb.w	r8, [sp, #7]
  int disMinute  = now_time.minute(); 
   d4bd4:	f89d 7008 	ldrb.w	r7, [sp, #8]
  int disSecond = now_time.second();  
   d4bd8:	f89d 6009 	ldrb.w	r6, [sp, #9]
  int disDay = now_time.day();  
   d4bdc:	f89d 9006 	ldrb.w	r9, [sp, #6]
  int disMonth = now_time.month();  
   d4be0:	f89d a005 	ldrb.w	sl, [sp, #5]
  epd.setTextWrap(true);
   d4be4:	2101      	movs	r1, #1
   d4be6:	f001 f837 	bl	d5c58 <_ZN12Adafruit_GFX11setTextWrapEb>
  epd.setTextSize(1);
   d4bea:	2101      	movs	r1, #1
   d4bec:	48ac      	ldr	r0, [pc, #688]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4bee:	f001 f82b 	bl	d5c48 <_ZN12Adafruit_GFX11setTextSizeEh>
  epd.clearBuffer();
   d4bf2:	48ab      	ldr	r0, [pc, #684]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4bf4:	f003 fc70 	bl	d84d8 <_ZN12Adafruit_EPD11clearBufferEv>
  epd.setCursor(ORIGIN_X, 10);
   d4bf8:	220a      	movs	r2, #10
   d4bfa:	48a9      	ldr	r0, [pc, #676]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4bfc:	2105      	movs	r1, #5
   d4bfe:	f001 f820 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.setTextColor(EPD_BLACK);
   d4c02:	48a7      	ldr	r0, [pc, #668]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c04:	2100      	movs	r1, #0
   d4c06:	f001 f824 	bl	d5c52 <_ZN12Adafruit_GFX12setTextColorEt>
  epd.print(ID);
   d4c0a:	48a5      	ldr	r0, [pc, #660]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c0c:	a907      	add	r1, sp, #28
   d4c0e:	f005 ff3d 	bl	daa8c <_ZN5Print5printEPKc>
  if(SD_WRITE_SUCCESSFUL){
   d4c12:	4ba4      	ldr	r3, [pc, #656]	; (d4ea4 <_Z11displayDATAP6Sample+0x314>)
   d4c14:	781b      	ldrb	r3, [r3, #0]
  int disYear = now_time.year();
   d4c16:	f505 65fa 	add.w	r5, r5, #2000	; 0x7d0
  if(SD_WRITE_SUCCESSFUL){
   d4c1a:	2b00      	cmp	r3, #0
   d4c1c:	f000 81b0 	beq.w	d4f80 <_Z11displayDATAP6Sample+0x3f0>
    epd.print("   ++");
   d4c20:	49a1      	ldr	r1, [pc, #644]	; (d4ea8 <_Z11displayDATAP6Sample+0x318>)
    epd.print("   --");    
   d4c22:	489f      	ldr	r0, [pc, #636]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c24:	f005 ff32 	bl	daa8c <_ZN5Print5printEPKc>
  epd.setCursor(ORIGIN_X+mid_offset, 10);
   d4c28:	489d      	ldr	r0, [pc, #628]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c2a:	220a      	movs	r2, #10
   d4c2c:	216e      	movs	r1, #110	; 0x6e
   d4c2e:	f001 f808 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
size_t Print::print(T n, int base)
   d4c32:	220a      	movs	r2, #10
   d4c34:	4651      	mov	r1, sl
   d4c36:	489a      	ldr	r0, [pc, #616]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c38:	f7ff faab 	bl	d4192 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print("/");
   d4c3c:	499b      	ldr	r1, [pc, #620]	; (d4eac <_Z11displayDATAP6Sample+0x31c>)
   d4c3e:	4898      	ldr	r0, [pc, #608]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c40:	f005 ff24 	bl	daa8c <_ZN5Print5printEPKc>
   d4c44:	220a      	movs	r2, #10
   d4c46:	4649      	mov	r1, r9
   d4c48:	4895      	ldr	r0, [pc, #596]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c4a:	f7ff faa2 	bl	d4192 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print("/");
   d4c4e:	4997      	ldr	r1, [pc, #604]	; (d4eac <_Z11displayDATAP6Sample+0x31c>)
   d4c50:	4893      	ldr	r0, [pc, #588]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c52:	f005 ff1b 	bl	daa8c <_ZN5Print5printEPKc>
   d4c56:	220a      	movs	r2, #10
   d4c58:	4629      	mov	r1, r5
   d4c5a:	4891      	ldr	r0, [pc, #580]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c5c:	f7ff fa99 	bl	d4192 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print("  ");
   d4c60:	4993      	ldr	r1, [pc, #588]	; (d4eb0 <_Z11displayDATAP6Sample+0x320>)
   d4c62:	488f      	ldr	r0, [pc, #572]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c64:	f005 ff12 	bl	daa8c <_ZN5Print5printEPKc>
   d4c68:	220a      	movs	r2, #10
   d4c6a:	4641      	mov	r1, r8
   d4c6c:	488c      	ldr	r0, [pc, #560]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c6e:	f7ff fa90 	bl	d4192 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print(":");
   d4c72:	4990      	ldr	r1, [pc, #576]	; (d4eb4 <_Z11displayDATAP6Sample+0x324>)
   d4c74:	488a      	ldr	r0, [pc, #552]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c76:	f005 ff09 	bl	daa8c <_ZN5Print5printEPKc>
   d4c7a:	220a      	movs	r2, #10
   d4c7c:	4639      	mov	r1, r7
   d4c7e:	4888      	ldr	r0, [pc, #544]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c80:	f7ff fa87 	bl	d4192 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print(":");
   d4c84:	498b      	ldr	r1, [pc, #556]	; (d4eb4 <_Z11displayDATAP6Sample+0x324>)
   d4c86:	4886      	ldr	r0, [pc, #536]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c88:	f005 ff00 	bl	daa8c <_ZN5Print5printEPKc>
   d4c8c:	4631      	mov	r1, r6
   d4c8e:	220a      	movs	r2, #10
   d4c90:	4883      	ldr	r0, [pc, #524]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c92:	f7ff fa7e 	bl	d4192 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.setCursor(ORIGIN_X, 20);
   d4c96:	2214      	movs	r2, #20
   d4c98:	4881      	ldr	r0, [pc, #516]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4c9a:	2105      	movs	r1, #5
   d4c9c:	f000 ffd1 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Batery: ");
   d4ca0:	4985      	ldr	r1, [pc, #532]	; (d4eb8 <_Z11displayDATAP6Sample+0x328>)
   d4ca2:	487f      	ldr	r0, [pc, #508]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4ca4:	f005 fef2 	bl	daa8c <_ZN5Print5printEPKc>
  epd.print(System.batteryCharge());
   d4ca8:	f7ff fee4 	bl	d4a74 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d4cac:	2102      	movs	r1, #2
   d4cae:	487c      	ldr	r0, [pc, #496]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4cb0:	f005 fff0 	bl	dac94 <_ZN5Print5printEfi>
  epd.print("%  ");
   d4cb4:	4981      	ldr	r1, [pc, #516]	; (d4ebc <_Z11displayDATAP6Sample+0x32c>)
   d4cb6:	487a      	ldr	r0, [pc, #488]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4cb8:	f005 fee8 	bl	daa8c <_ZN5Print5printEPKc>
  epd.setCursor(ORIGIN_X+mid_offset, 20);
   d4cbc:	2214      	movs	r2, #20
   d4cbe:	4878      	ldr	r0, [pc, #480]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4cc0:	216e      	movs	r1, #110	; 0x6e
   d4cc2:	f000 ffbe 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Cell:");
   d4cc6:	497e      	ldr	r1, [pc, #504]	; (d4ec0 <_Z11displayDATAP6Sample+0x330>)
   d4cc8:	4875      	ldr	r0, [pc, #468]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4cca:	f005 fedf 	bl	daa8c <_ZN5Print5printEPKc>
  epd.print(strength);
   d4cce:	eeb0 0a48 	vmov.f32	s0, s16
   d4cd2:	2102      	movs	r1, #2
   d4cd4:	4872      	ldr	r0, [pc, #456]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4cd6:	f005 ffdd 	bl	dac94 <_ZN5Print5printEfi>
  epd.print("   Ch: ");
   d4cda:	497a      	ldr	r1, [pc, #488]	; (d4ec4 <_Z11displayDATAP6Sample+0x334>)
   d4cdc:	4870      	ldr	r0, [pc, #448]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4cde:	f005 fed5 	bl	daa8c <_ZN5Print5printEPKc>
   d4ce2:	4669      	mov	r1, sp
   d4ce4:	2007      	movs	r0, #7
   d4ce6:	f7ff fea1 	bl	d4a2c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   d4cea:	1e01      	subs	r1, r0, #0
        return val;
   d4cec:	bfa8      	it	ge
   d4cee:	9900      	ldrge	r1, [sp, #0]
   d4cf0:	486b      	ldr	r0, [pc, #428]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4cf2:	220a      	movs	r2, #10
   d4cf4:	f7ff fa4d 	bl	d4192 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.setCursor(ORIGIN_X, 30);
   d4cf8:	221e      	movs	r2, #30
   d4cfa:	4869      	ldr	r0, [pc, #420]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4cfc:	2105      	movs	r1, #5
   d4cfe:	f000 ffa0 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.setTextColor(EPD_BLACK);
   d4d02:	4867      	ldr	r0, [pc, #412]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d04:	2100      	movs	r1, #0
   d4d06:	f000 ffa4 	bl	d5c52 <_ZN12Adafruit_GFX12setTextColorEt>
  epd.print("Dp 0.3: ");
   d4d0a:	496f      	ldr	r1, [pc, #444]	; (d4ec8 <_Z11displayDATAP6Sample+0x338>)
   d4d0c:	4864      	ldr	r0, [pc, #400]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d0e:	f005 febd 	bl	daa8c <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d4d12:	8861      	ldrh	r1, [r4, #2]
   d4d14:	4862      	ldr	r0, [pc, #392]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d16:	220a      	movs	r2, #10
   d4d18:	f005 fed5 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 30);
   d4d1c:	221e      	movs	r2, #30
   d4d1e:	4860      	ldr	r0, [pc, #384]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d20:	216e      	movs	r1, #110	; 0x6e
   d4d22:	f000 ff8e 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("E PM 1.0: ");
   d4d26:	4969      	ldr	r1, [pc, #420]	; (d4ecc <_Z11displayDATAP6Sample+0x33c>)
   d4d28:	485d      	ldr	r0, [pc, #372]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d2a:	f005 feaf 	bl	daa8c <_ZN5Print5printEPKc>
   d4d2e:	89e1      	ldrh	r1, [r4, #14]
   d4d30:	485b      	ldr	r0, [pc, #364]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d32:	220a      	movs	r2, #10
   d4d34:	f005 fec7 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 40);
   d4d38:	2228      	movs	r2, #40	; 0x28
   d4d3a:	4859      	ldr	r0, [pc, #356]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d3c:	2105      	movs	r1, #5
   d4d3e:	f000 ff80 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 0.5: ");
   d4d42:	4963      	ldr	r1, [pc, #396]	; (d4ed0 <_Z11displayDATAP6Sample+0x340>)
   d4d44:	4856      	ldr	r0, [pc, #344]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d46:	f005 fea1 	bl	daa8c <_ZN5Print5printEPKc>
   d4d4a:	88a1      	ldrh	r1, [r4, #4]
   d4d4c:	4854      	ldr	r0, [pc, #336]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d4e:	220a      	movs	r2, #10
   d4d50:	f005 feb9 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 40);
   d4d54:	2228      	movs	r2, #40	; 0x28
   d4d56:	4852      	ldr	r0, [pc, #328]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d58:	216e      	movs	r1, #110	; 0x6e
   d4d5a:	f000 ff72 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("E PM 2.5: ");
   d4d5e:	495d      	ldr	r1, [pc, #372]	; (d4ed4 <_Z11displayDATAP6Sample+0x344>)
   d4d60:	484f      	ldr	r0, [pc, #316]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d62:	f005 fe93 	bl	daa8c <_ZN5Print5printEPKc>
   d4d66:	8a21      	ldrh	r1, [r4, #16]
   d4d68:	484d      	ldr	r0, [pc, #308]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d6a:	220a      	movs	r2, #10
   d4d6c:	f005 feab 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 50);
   d4d70:	2232      	movs	r2, #50	; 0x32
   d4d72:	484b      	ldr	r0, [pc, #300]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d74:	2105      	movs	r1, #5
   d4d76:	f000 ff64 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 1.0: ");
   d4d7a:	4957      	ldr	r1, [pc, #348]	; (d4ed8 <_Z11displayDATAP6Sample+0x348>)
   d4d7c:	4848      	ldr	r0, [pc, #288]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d7e:	f005 fe85 	bl	daa8c <_ZN5Print5printEPKc>
   d4d82:	88e1      	ldrh	r1, [r4, #6]
   d4d84:	4846      	ldr	r0, [pc, #280]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d86:	220a      	movs	r2, #10
   d4d88:	f005 fe9d 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 50);
   d4d8c:	2232      	movs	r2, #50	; 0x32
   d4d8e:	4844      	ldr	r0, [pc, #272]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d90:	216e      	movs	r1, #110	; 0x6e
   d4d92:	f000 ff56 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("E PM 10 : ");
   d4d96:	4951      	ldr	r1, [pc, #324]	; (d4edc <_Z11displayDATAP6Sample+0x34c>)
   d4d98:	4841      	ldr	r0, [pc, #260]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4d9a:	f005 fe77 	bl	daa8c <_ZN5Print5printEPKc>
   d4d9e:	8a61      	ldrh	r1, [r4, #18]
   d4da0:	483f      	ldr	r0, [pc, #252]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4da2:	220a      	movs	r2, #10
   d4da4:	f005 fe8f 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 60);
   d4da8:	223c      	movs	r2, #60	; 0x3c
   d4daa:	483d      	ldr	r0, [pc, #244]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4dac:	2105      	movs	r1, #5
   d4dae:	f000 ff48 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 2.5: ");
   d4db2:	494b      	ldr	r1, [pc, #300]	; (d4ee0 <_Z11displayDATAP6Sample+0x350>)
   d4db4:	483a      	ldr	r0, [pc, #232]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4db6:	f005 fe69 	bl	daa8c <_ZN5Print5printEPKc>
   d4dba:	8921      	ldrh	r1, [r4, #8]
   d4dbc:	4838      	ldr	r0, [pc, #224]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4dbe:	220a      	movs	r2, #10
   d4dc0:	f005 fe81 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 60);
   d4dc4:	223c      	movs	r2, #60	; 0x3c
   d4dc6:	4836      	ldr	r0, [pc, #216]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4dc8:	216e      	movs	r1, #110	; 0x6e
   d4dca:	f000 ff3a 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("S PM 1.0: ");
   d4dce:	4945      	ldr	r1, [pc, #276]	; (d4ee4 <_Z11displayDATAP6Sample+0x354>)
   d4dd0:	4833      	ldr	r0, [pc, #204]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4dd2:	f005 fe5b 	bl	daa8c <_ZN5Print5printEPKc>
   d4dd6:	8aa1      	ldrh	r1, [r4, #20]
   d4dd8:	4831      	ldr	r0, [pc, #196]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4dda:	220a      	movs	r2, #10
   d4ddc:	f005 fe73 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 70);
   d4de0:	2246      	movs	r2, #70	; 0x46
   d4de2:	482f      	ldr	r0, [pc, #188]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4de4:	2105      	movs	r1, #5
   d4de6:	f000 ff2c 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 5.0: ");
   d4dea:	493f      	ldr	r1, [pc, #252]	; (d4ee8 <_Z11displayDATAP6Sample+0x358>)
   d4dec:	482c      	ldr	r0, [pc, #176]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4dee:	f005 fe4d 	bl	daa8c <_ZN5Print5printEPKc>
   d4df2:	8961      	ldrh	r1, [r4, #10]
   d4df4:	482a      	ldr	r0, [pc, #168]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4df6:	220a      	movs	r2, #10
   d4df8:	f005 fe65 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 70);
   d4dfc:	2246      	movs	r2, #70	; 0x46
   d4dfe:	4828      	ldr	r0, [pc, #160]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e00:	216e      	movs	r1, #110	; 0x6e
   d4e02:	f000 ff1e 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("S PM 2.5: ");
   d4e06:	4939      	ldr	r1, [pc, #228]	; (d4eec <_Z11displayDATAP6Sample+0x35c>)
   d4e08:	4825      	ldr	r0, [pc, #148]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e0a:	f005 fe3f 	bl	daa8c <_ZN5Print5printEPKc>
   d4e0e:	8ae1      	ldrh	r1, [r4, #22]
   d4e10:	4823      	ldr	r0, [pc, #140]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e12:	220a      	movs	r2, #10
   d4e14:	f005 fe57 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 80);
   d4e18:	2250      	movs	r2, #80	; 0x50
   d4e1a:	4821      	ldr	r0, [pc, #132]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e1c:	2105      	movs	r1, #5
   d4e1e:	f000 ff10 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp10.0: ");
   d4e22:	4933      	ldr	r1, [pc, #204]	; (d4ef0 <_Z11displayDATAP6Sample+0x360>)
   d4e24:	481e      	ldr	r0, [pc, #120]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e26:	f005 fe31 	bl	daa8c <_ZN5Print5printEPKc>
   d4e2a:	89a1      	ldrh	r1, [r4, #12]
   d4e2c:	481c      	ldr	r0, [pc, #112]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e2e:	220a      	movs	r2, #10
   d4e30:	f005 fe49 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 80);
   d4e34:	2250      	movs	r2, #80	; 0x50
   d4e36:	481a      	ldr	r0, [pc, #104]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e38:	216e      	movs	r1, #110	; 0x6e
   d4e3a:	f000 ff02 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("S PM 10 : ");
   d4e3e:	492d      	ldr	r1, [pc, #180]	; (d4ef4 <_Z11displayDATAP6Sample+0x364>)
   d4e40:	4817      	ldr	r0, [pc, #92]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e42:	f005 fe23 	bl	daa8c <_ZN5Print5printEPKc>
   d4e46:	8b21      	ldrh	r1, [r4, #24]
   d4e48:	4815      	ldr	r0, [pc, #84]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e4a:	220a      	movs	r2, #10
   d4e4c:	f005 fe3b 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 90);
   d4e50:	225a      	movs	r2, #90	; 0x5a
   d4e52:	4813      	ldr	r0, [pc, #76]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e54:	2105      	movs	r1, #5
   d4e56:	f000 fef4 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Temp: ");
   d4e5a:	4927      	ldr	r1, [pc, #156]	; (d4ef8 <_Z11displayDATAP6Sample+0x368>)
   d4e5c:	4810      	ldr	r0, [pc, #64]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e5e:	f005 fe15 	bl	daa8c <_ZN5Print5printEPKc>
  epd.print(sample->temp);
   d4e62:	ed94 0a07 	vldr	s0, [r4, #28]
   d4e66:	480e      	ldr	r0, [pc, #56]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e68:	2102      	movs	r1, #2
   d4e6a:	f005 ff13 	bl	dac94 <_ZN5Print5printEfi>
  epd.print("C  RH: ");
   d4e6e:	4923      	ldr	r1, [pc, #140]	; (d4efc <_Z11displayDATAP6Sample+0x36c>)
   d4e70:	480b      	ldr	r0, [pc, #44]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e72:	f005 fe0b 	bl	daa8c <_ZN5Print5printEPKc>
  epd.print((int) sample->humidity);
   d4e76:	edd4 7a08 	vldr	s15, [r4, #32]
   d4e7a:	4809      	ldr	r0, [pc, #36]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4e80:	220a      	movs	r2, #10
   d4e82:	ee17 1a90 	vmov	r1, s15
   d4e86:	f7ff f984 	bl	d4192 <_ZN5Print5printIiLi0EEEjT_i.part.0>
  epd.print("%  P: ");
   d4e8a:	491d      	ldr	r1, [pc, #116]	; (d4f00 <_Z11displayDATAP6Sample+0x370>)
   d4e8c:	4804      	ldr	r0, [pc, #16]	; (d4ea0 <_Z11displayDATAP6Sample+0x310>)
   d4e8e:	f005 fdfd 	bl	daa8c <_ZN5Print5printEPKc>
  epd.print(sample->pressure/1000);
   d4e92:	eddf 7a1c 	vldr	s15, [pc, #112]	; d4f04 <_Z11displayDATAP6Sample+0x374>
   d4e96:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
   d4e9a:	e035      	b.n	d4f08 <_Z11displayDATAP6Sample+0x378>
   d4e9c:	2003e660 	.word	0x2003e660
   d4ea0:	2003e3d4 	.word	0x2003e3d4
   d4ea4:	2003e2c0 	.word	0x2003e2c0
   d4ea8:	000de455 	.word	0x000de455
   d4eac:	000de461 	.word	0x000de461
   d4eb0:	000de46d 	.word	0x000de46d
   d4eb4:	000de474 	.word	0x000de474
   d4eb8:	000de463 	.word	0x000de463
   d4ebc:	000de46c 	.word	0x000de46c
   d4ec0:	000de470 	.word	0x000de470
   d4ec4:	000de476 	.word	0x000de476
   d4ec8:	000de47e 	.word	0x000de47e
   d4ecc:	000de487 	.word	0x000de487
   d4ed0:	000de492 	.word	0x000de492
   d4ed4:	000de49b 	.word	0x000de49b
   d4ed8:	000de4a6 	.word	0x000de4a6
   d4edc:	000de4af 	.word	0x000de4af
   d4ee0:	000de4ba 	.word	0x000de4ba
   d4ee4:	000de4c3 	.word	0x000de4c3
   d4ee8:	000de4ce 	.word	0x000de4ce
   d4eec:	000de4d7 	.word	0x000de4d7
   d4ef0:	000de4e2 	.word	0x000de4e2
   d4ef4:	000de4eb 	.word	0x000de4eb
   d4ef8:	000de4f6 	.word	0x000de4f6
   d4efc:	000de4fd 	.word	0x000de4fd
   d4f00:	000de505 	.word	0x000de505
   d4f04:	447a0000 	.word	0x447a0000
   d4f08:	481e      	ldr	r0, [pc, #120]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f0a:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4f0e:	2102      	movs	r1, #2
   d4f10:	f005 fec0 	bl	dac94 <_ZN5Print5printEfi>
  epd.print("kPa");
   d4f14:	491c      	ldr	r1, [pc, #112]	; (d4f88 <_Z11displayDATAP6Sample+0x3f8>)
   d4f16:	481b      	ldr	r0, [pc, #108]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f18:	f005 fdb8 	bl	daa8c <_ZN5Print5printEPKc>
  epd.setCursor(ORIGIN_X, 100);
   d4f1c:	2264      	movs	r2, #100	; 0x64
   d4f1e:	4819      	ldr	r0, [pc, #100]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f20:	2105      	movs	r1, #5
   d4f22:	f000 fe8e 	bl	d5c42 <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Samp: ");
   d4f26:	4919      	ldr	r1, [pc, #100]	; (d4f8c <_Z11displayDATAP6Sample+0x3fc>)
   d4f28:	4816      	ldr	r0, [pc, #88]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f2a:	f005 fdaf 	bl	daa8c <_ZN5Print5printEPKc>
   d4f2e:	4b18      	ldr	r3, [pc, #96]	; (d4f90 <_Z11displayDATAP6Sample+0x400>)
   d4f30:	4814      	ldr	r0, [pc, #80]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f32:	6819      	ldr	r1, [r3, #0]
   d4f34:	220a      	movs	r2, #10
   d4f36:	f005 fdc6 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.print("s    Disp: ");
   d4f3a:	4916      	ldr	r1, [pc, #88]	; (d4f94 <_Z11displayDATAP6Sample+0x404>)
   d4f3c:	4811      	ldr	r0, [pc, #68]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f3e:	f005 fda5 	bl	daa8c <_ZN5Print5printEPKc>
   d4f42:	4b15      	ldr	r3, [pc, #84]	; (d4f98 <_Z11displayDATAP6Sample+0x408>)
   d4f44:	480f      	ldr	r0, [pc, #60]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f46:	6819      	ldr	r1, [r3, #0]
   d4f48:	220a      	movs	r2, #10
   d4f4a:	f005 fdbc 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.print("s    Pub: ");
   d4f4e:	4913      	ldr	r1, [pc, #76]	; (d4f9c <_Z11displayDATAP6Sample+0x40c>)
   d4f50:	480c      	ldr	r0, [pc, #48]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f52:	f005 fd9b 	bl	daa8c <_ZN5Print5printEPKc>
   d4f56:	4b12      	ldr	r3, [pc, #72]	; (d4fa0 <_Z11displayDATAP6Sample+0x410>)
   d4f58:	480a      	ldr	r0, [pc, #40]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f5a:	6819      	ldr	r1, [r3, #0]
   d4f5c:	220a      	movs	r2, #10
   d4f5e:	f005 fdb2 	bl	daac6 <_ZN5Print11printNumberEmh>
  epd.print("h");
   d4f62:	4910      	ldr	r1, [pc, #64]	; (d4fa4 <_Z11displayDATAP6Sample+0x414>)
   d4f64:	4807      	ldr	r0, [pc, #28]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f66:	f005 fd91 	bl	daa8c <_ZN5Print5printEPKc>
  epd.display();
   d4f6a:	4806      	ldr	r0, [pc, #24]	; (d4f84 <_Z11displayDATAP6Sample+0x3f4>)
   d4f6c:	f003 fbaf 	bl	d86ce <_ZN12Adafruit_EPD7displayEv>
  String IDs(ID);
   d4f70:	a803      	add	r0, sp, #12
   d4f72:	f004 fafd 	bl	d9570 <_ZN6StringD1Ev>
}
   d4f76:	b014      	add	sp, #80	; 0x50
   d4f78:	ecbd 8b02 	vpop	{d8}
   d4f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    epd.print("   --");    
   d4f80:	4909      	ldr	r1, [pc, #36]	; (d4fa8 <_Z11displayDATAP6Sample+0x418>)
   d4f82:	e64e      	b.n	d4c22 <_Z11displayDATAP6Sample+0x92>
   d4f84:	2003e3d4 	.word	0x2003e3d4
   d4f88:	000de50c 	.word	0x000de50c
   d4f8c:	000de510 	.word	0x000de510
   d4f90:	2003de30 	.word	0x2003de30
   d4f94:	000de517 	.word	0x000de517
   d4f98:	2003e2c4 	.word	0x2003e2c4
   d4f9c:	000de523 	.word	0x000de523
   d4fa0:	2003de38 	.word	0x2003de38
   d4fa4:	000de52e 	.word	0x000de52e
   d4fa8:	000de45b 	.word	0x000de45b

000d4fac <loop>:
{
   d4fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!preSensorDutyMillis || !predisplayDutyMillis || !prePublishDutyMillis || !preTimeCheckMillis )
   d4fb0:	4c63      	ldr	r4, [pc, #396]	; (d5140 <loop+0x194>)
   d4fb2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; d5178 <loop+0x1cc>
   d4fb6:	6823      	ldr	r3, [r4, #0]
   d4fb8:	4e62      	ldr	r6, [pc, #392]	; (d5144 <loop+0x198>)
   d4fba:	4d63      	ldr	r5, [pc, #396]	; (d5148 <loop+0x19c>)
{
   d4fbc:	b087      	sub	sp, #28
  if (!preSensorDutyMillis || !predisplayDutyMillis || !prePublishDutyMillis || !preTimeCheckMillis )
   d4fbe:	b133      	cbz	r3, d4fce <loop+0x22>
   d4fc0:	f8d8 3000 	ldr.w	r3, [r8]
   d4fc4:	b11b      	cbz	r3, d4fce <loop+0x22>
   d4fc6:	6833      	ldr	r3, [r6, #0]
   d4fc8:	b10b      	cbz	r3, d4fce <loop+0x22>
   d4fca:	682b      	ldr	r3, [r5, #0]
   d4fcc:	b983      	cbnz	r3, d4ff0 <loop+0x44>
   d4fce:	f003 fe45 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
    preSensorDutyMillis = millis();
   d4fd2:	6020      	str	r0, [r4, #0]
   d4fd4:	f003 fe42 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
    predisplayDutyMillis = millis();
   d4fd8:	f8c8 0000 	str.w	r0, [r8]
   d4fdc:	f003 fe3e 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
    prePublishDutyMillis = millis();
   d4fe0:	6030      	str	r0, [r6, #0]
   d4fe2:	f003 fe3b 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
    preTimeCheckMillis = millis();
   d4fe6:	6028      	str	r0, [r5, #0]
   d4fe8:	f003 fe38 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
    preBackupSampleMillis = millis();
   d4fec:	4b57      	ldr	r3, [pc, #348]	; (d514c <loop+0x1a0>)
   d4fee:	6018      	str	r0, [r3, #0]
   d4ff0:	f003 fe34 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
   d4ff4:	4682      	mov	sl, r0
   d4ff6:	f003 fe31 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
   d4ffa:	4681      	mov	r9, r0
   d4ffc:	f003 fe2e 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
   d5000:	4607      	mov	r7, r0
   d5002:	f003 fe2b 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
   d5006:	4683      	mov	fp, r0
   d5008:	f003 fe28 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
        tm = 0;
   d500c:	2300      	movs	r3, #0
   d500e:	2200      	movs	r2, #0
   d5010:	4605      	mov	r5, r0
        return spark_sync_time_last(nullptr, &tm);
   d5012:	a904      	add	r1, sp, #16
   d5014:	2000      	movs	r0, #0
        tm = 0;
   d5016:	e9cd 2304 	strd	r2, r3, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d501a:	f004 f93b 	bl	d9294 <spark_sync_time_last>
  if (curTimeCheckMillis - Particle.timeSyncedLast() >= ONE_DAY_MILLIS && Particle.connected){
   d501e:	4b4c      	ldr	r3, [pc, #304]	; (d5150 <loop+0x1a4>)
   d5020:	ebab 0000 	sub.w	r0, fp, r0
   d5024:	4298      	cmp	r0, r3
   d5026:	d925      	bls.n	d5074 <loop+0xc8>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5028:	f004 f914 	bl	d9254 <spark_cloud_flag_connected>
        if (!connected()) {
   d502c:	b110      	cbz	r0, d5034 <loop+0x88>
        return spark_sync_time(NULL);
   d502e:	2000      	movs	r0, #0
   d5030:	f004 f920 	bl	d9274 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d5034:	2000      	movs	r0, #0
   d5036:	f003 fe39 	bl	d8cac <hal_timer_millis>
   d503a:	f04f 0b00 	mov.w	fp, #0
   d503e:	9003      	str	r0, [sp, #12]
   d5040:	2000      	movs	r0, #0
   d5042:	f003 fe33 	bl	d8cac <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5046:	9b03      	ldr	r3, [sp, #12]
   d5048:	1ac3      	subs	r3, r0, r3
   d504a:	9300      	str	r3, [sp, #0]
   d504c:	eb61 030b 	sbc.w	r3, r1, fp
   d5050:	9301      	str	r3, [sp, #4]
        while (_while() && !_condition()) {
   d5052:	e9dd 0100 	ldrd	r0, r1, [sp]
   d5056:	2300      	movs	r3, #0
   d5058:	f242 720f 	movw	r2, #9999	; 0x270f
   d505c:	428b      	cmp	r3, r1
   d505e:	bf08      	it	eq
   d5060:	4282      	cmpeq	r2, r0
   d5062:	d305      	bcc.n	d5070 <loop+0xc4>
    waitFor(Particle.syncTimeDone,10000);
   d5064:	f7ff f888 	bl	d4178 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5068:	b910      	cbnz	r0, d5070 <loop+0xc4>
            spark_process();
   d506a:	f004 f8eb 	bl	d9244 <spark_process>
        while (_while() && !_condition()) {
   d506e:	e7e7      	b.n	d5040 <loop+0x94>
   d5070:	f7ff f882 	bl	d4178 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (curSensorDutyMillis - preSensorDutyMillis >= SENSOR_CYCLE*1000)
   d5074:	6823      	ldr	r3, [r4, #0]
   d5076:	ebaa 0203 	sub.w	r2, sl, r3
   d507a:	4b36      	ldr	r3, [pc, #216]	; (d5154 <loop+0x1a8>)
   d507c:	6819      	ldr	r1, [r3, #0]
   d507e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5082:	434b      	muls	r3, r1
   d5084:	429a      	cmp	r2, r3
   d5086:	d321      	bcc.n	d50cc <loop+0x120>
    take_sample(&latest_sample);
   d5088:	4833      	ldr	r0, [pc, #204]	; (d5158 <loop+0x1ac>)
   d508a:	f7ff fd05 	bl	d4a98 <_Z11take_sampleP6Sample>
    SD_WRITE_SUCCESSFUL = false;
   d508e:	4b33      	ldr	r3, [pc, #204]	; (d515c <loop+0x1b0>)
   d5090:	2000      	movs	r0, #0
   d5092:	7018      	strb	r0, [r3, #0]
    record_sample(samp_dest);
   d5094:	f7ff fcb4 	bl	d4a00 <_Z13record_sample17SampleDestination>
    record_sample(samp_dest);
   d5098:	2002      	movs	r0, #2
   d509a:	f7ff fcb1 	bl	d4a00 <_Z13record_sample17SampleDestination>
    Serial.println("This is paritcle3\n");
   d509e:	f006 f97b 	bl	db398 <_Z16_fetch_usbserialv>
   d50a2:	492f      	ldr	r1, [pc, #188]	; (d5160 <loop+0x1b4>)
   d50a4:	f005 fd05 	bl	daab2 <_ZN5Print7printlnEPKc>
    if(PHONE_BACKUP_REQUEST){
   d50a8:	4b2e      	ldr	r3, [pc, #184]	; (d5164 <loop+0x1b8>)
   d50aa:	781b      	ldrb	r3, [r3, #0]
   d50ac:	b163      	cbz	r3, d50c8 <loop+0x11c>
      if(BLE.connected()){
   d50ae:	f004 ff77 	bl	d9fa0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d50b2:	f004 fff6 	bl	da0a2 <_ZNK8particle14BleLocalDevice9connectedEv>
   d50b6:	b138      	cbz	r0, d50c8 <loop+0x11c>
        Serial.println("This is paritcle2\n");
   d50b8:	f006 f96e 	bl	db398 <_Z16_fetch_usbserialv>
   d50bc:	492a      	ldr	r1, [pc, #168]	; (d5168 <loop+0x1bc>)
   d50be:	f005 fcf8 	bl	daab2 <_ZN5Print7printlnEPKc>
      record_sample(samp_dest);
   d50c2:	2004      	movs	r0, #4
   d50c4:	f7ff fc9c 	bl	d4a00 <_Z13record_sample17SampleDestination>
    preSensorDutyMillis = curSensorDutyMillis;
   d50c8:	f8c4 a000 	str.w	sl, [r4]
  if( (curDisplayDutyMillis - predisplayDutyMillis)  >= DISPLAY_REFRESH*1000){
   d50cc:	f8d8 3000 	ldr.w	r3, [r8]
   d50d0:	eba9 0203 	sub.w	r2, r9, r3
   d50d4:	4b25      	ldr	r3, [pc, #148]	; (d516c <loop+0x1c0>)
   d50d6:	6819      	ldr	r1, [r3, #0]
   d50d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d50dc:	434b      	muls	r3, r1
   d50de:	429a      	cmp	r2, r3
   d50e0:	d304      	bcc.n	d50ec <loop+0x140>
    displayDATA(&latest_sample);
   d50e2:	481d      	ldr	r0, [pc, #116]	; (d5158 <loop+0x1ac>)
   d50e4:	f7ff fd54 	bl	d4b90 <_Z11displayDATAP6Sample>
    predisplayDutyMillis = curDisplayDutyMillis;
   d50e8:	f8c8 9000 	str.w	r9, [r8]
  if( (curPublishDutyMillis - prePublishDutyMillis)  >= PUBLISH_RATE*1000){
   d50ec:	6833      	ldr	r3, [r6, #0]
   d50ee:	1afa      	subs	r2, r7, r3
   d50f0:	4b1f      	ldr	r3, [pc, #124]	; (d5170 <loop+0x1c4>)
   d50f2:	6819      	ldr	r1, [r3, #0]
   d50f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d50f8:	434b      	muls	r3, r1
   d50fa:	429a      	cmp	r2, r3
   d50fc:	d303      	bcc.n	d5106 <loop+0x15a>
    record_sample(samp_dest);
   d50fe:	2001      	movs	r0, #1
   d5100:	f7ff fc7e 	bl	d4a00 <_Z13record_sample17SampleDestination>
    prePublishDutyMillis = curPublishDutyMillis;
   d5104:	6037      	str	r7, [r6, #0]
  if( (curBackupSampleMillis - preBackupSampleMillis) >=  BACKUP_RATE*1000){
   d5106:	4c11      	ldr	r4, [pc, #68]	; (d514c <loop+0x1a0>)
   d5108:	6822      	ldr	r2, [r4, #0]
   d510a:	1aa9      	subs	r1, r5, r2
   d510c:	4a19      	ldr	r2, [pc, #100]	; (d5174 <loop+0x1c8>)
   d510e:	6810      	ldr	r0, [r2, #0]
   d5110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5114:	4342      	muls	r2, r0
   d5116:	4291      	cmp	r1, r2
   d5118:	d30f      	bcc.n	d513a <loop+0x18e>
    if(!BLE.connected())PHONE_BACKUP_REQUEST = true;
   d511a:	f004 ff41 	bl	d9fa0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d511e:	f004 ffc0 	bl	da0a2 <_ZNK8particle14BleLocalDevice9connectedEv>
   d5122:	4b10      	ldr	r3, [pc, #64]	; (d5164 <loop+0x1b8>)
   d5124:	b928      	cbnz	r0, d5132 <loop+0x186>
   d5126:	2201      	movs	r2, #1
   d5128:	701a      	strb	r2, [r3, #0]
      record_sample(samp_dest);
   d512a:	2003      	movs	r0, #3
   d512c:	f7ff fc68 	bl	d4a00 <_Z13record_sample17SampleDestination>
   d5130:	e002      	b.n	d5138 <loop+0x18c>
    if (PHONE_BACKUP_REQUEST){
   d5132:	781b      	ldrb	r3, [r3, #0]
   d5134:	2b00      	cmp	r3, #0
   d5136:	d1f8      	bne.n	d512a <loop+0x17e>
    preBackupSampleMillis = curBackupSampleMillis;
   d5138:	6025      	str	r5, [r4, #0]
}
   d513a:	b007      	add	sp, #28
   d513c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5140:	2003e508 	.word	0x2003e508
   d5144:	2003e504 	.word	0x2003e504
   d5148:	2003e50c 	.word	0x2003e50c
   d514c:	2003e500 	.word	0x2003e500
   d5150:	05265bff 	.word	0x05265bff
   d5154:	2003e2c4 	.word	0x2003e2c4
   d5158:	2003e42c 	.word	0x2003e42c
   d515c:	2003e2c0 	.word	0x2003e2c0
   d5160:	000de530 	.word	0x000de530
   d5164:	2003de34 	.word	0x2003de34
   d5168:	000de543 	.word	0x000de543
   d516c:	2003de30 	.word	0x2003de30
   d5170:	2003de38 	.word	0x2003de38
   d5174:	2003ddac 	.word	0x2003ddac
   d5178:	2003e510 	.word	0x2003e510

000d517c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d517c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d517e:	4616      	mov	r6, r2
   d5180:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5182:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5184:	e9c0 2200 	strd	r2, r2, [r0]
   d5188:	4604      	mov	r4, r0
   d518a:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d518c:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d518e:	4619      	mov	r1, r3
   d5190:	a806      	add	r0, sp, #24
   d5192:	f004 fc79 	bl	d9a88 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d5196:	9916      	ldr	r1, [sp, #88]	; 0x58
   d5198:	4638      	mov	r0, r7
   d519a:	f004 fc75 	bl	d9a88 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d519e:	7833      	ldrb	r3, [r6, #0]
   d51a0:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d51a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d51a6:	9302      	str	r3, [sp, #8]
   d51a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d51aa:	4620      	mov	r0, r4
   d51ac:	e9cd 7300 	strd	r7, r3, [sp]
   d51b0:	aa05      	add	r2, sp, #20
   d51b2:	ab06      	add	r3, sp, #24
   d51b4:	4629      	mov	r1, r5
   d51b6:	f005 f9ff 	bl	da5b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d51ba:	4620      	mov	r0, r4
   d51bc:	b011      	add	sp, #68	; 0x44
   d51be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d51c0 <_ZN16Adafruit_SSD1675D0Ev>:
   d51c0:	b510      	push	{r4, lr}
   d51c2:	4604      	mov	r4, r0
   d51c4:	f7fe ffc6 	bl	d4154 <_ZN16Adafruit_SSD1675D1Ev>
   d51c8:	4620      	mov	r0, r4
   d51ca:	2150      	movs	r1, #80	; 0x50
   d51cc:	f006 fc5f 	bl	dba8e <_ZdlPvj>
   d51d0:	4620      	mov	r0, r4
   d51d2:	bd10      	pop	{r4, pc}

000d51d4 <_GLOBAL__sub_I_SystemMode>:
}
   d51d4:	b530      	push	{r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d51d6:	4d65      	ldr	r5, [pc, #404]	; (d536c <_GLOBAL__sub_I_SystemMode+0x198>)
    SleepResult() {}
   d51d8:	4b65      	ldr	r3, [pc, #404]	; (d5370 <_GLOBAL__sub_I_SystemMode+0x19c>)
   d51da:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d51dc:	2400      	movs	r4, #0
   d51de:	b093      	sub	sp, #76	; 0x4c
   d51e0:	602c      	str	r4, [r5, #0]
   d51e2:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d51e4:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d51e6:	2002      	movs	r0, #2
   d51e8:	f003 ff88 	bl	d90fc <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d51ec:	4a61      	ldr	r2, [pc, #388]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d51ee:	4962      	ldr	r1, [pc, #392]	; (d5378 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d51f0:	4628      	mov	r0, r5
   d51f2:	f006 fc47 	bl	dba84 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d51f6:	4621      	mov	r1, r4
   d51f8:	2001      	movs	r0, #1
   d51fa:	f003 ff8f 	bl	d911c <system_thread_set_state>
FuelGauge fuel;
   d51fe:	4621      	mov	r1, r4
   d5200:	485e      	ldr	r0, [pc, #376]	; (d537c <_GLOBAL__sub_I_SystemMode+0x1a8>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5202:	4d5f      	ldr	r5, [pc, #380]	; (d5380 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d5204:	f005 ff22 	bl	db04c <_ZN9FuelGaugeC1Eb>
   d5208:	4a5a      	ldr	r2, [pc, #360]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d520a:	495e      	ldr	r1, [pc, #376]	; (d5384 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d520c:	485b      	ldr	r0, [pc, #364]	; (d537c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d520e:	f006 fc39 	bl	dba84 <__aeabi_atexit>
Adafruit_BME280 bme;
   d5212:	485d      	ldr	r0, [pc, #372]	; (d5388 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5214:	f000 fd2a 	bl	d5c6c <_ZN15Adafruit_BME280C1Ev>
Adafruit_SSD1675 epd(250,122, EPD_DC, EPD_RESET, EPD_CS, SRAM_CS, EPD_BUSY);
   d5218:	f04f 33ff 	mov.w	r3, #4294967295
   d521c:	2203      	movs	r2, #3
   d521e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5222:	2204      	movs	r2, #4
   d5224:	e9cd 3200 	strd	r3, r2, [sp]
   d5228:	21fa      	movs	r1, #250	; 0xfa
   d522a:	2305      	movs	r3, #5
   d522c:	227a      	movs	r2, #122	; 0x7a
   d522e:	4857      	ldr	r0, [pc, #348]	; (d538c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d5230:	f002 fcf2 	bl	d7c18 <_ZN16Adafruit_SSD1675C1Eiiaaaaa>
   d5234:	4a4f      	ldr	r2, [pc, #316]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d5236:	4956      	ldr	r1, [pc, #344]	; (d5390 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d5238:	4854      	ldr	r0, [pc, #336]	; (d538c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d523a:	f006 fc23 	bl	dba84 <__aeabi_atexit>
PMSA003 pm = PMSA003(); // create instance of class
   d523e:	4855      	ldr	r0, [pc, #340]	; (d5394 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d5240:	f000 f8e0 	bl	d5404 <_ZN7PMSA003C1Ev>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d5244:	4b54      	ldr	r3, [pc, #336]	; (d5398 <_GLOBAL__sub_I_SystemMode+0x1c4>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d5246:	2264      	movs	r2, #100	; 0x64
   d5248:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
   d524c:	4a53      	ldr	r2, [pc, #332]	; (d539c <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d524e:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d5252:	2201      	movs	r2, #1
   d5254:	71dc      	strb	r4, [r3, #7]
   d5256:	f8a3 443c 	strh.w	r4, [r3, #1084]	; 0x43c
   d525a:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d525e:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d5262:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   d5266:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d526a:	7829      	ldrb	r1, [r5, #0]
   d526c:	f3bf 8f5b 	dmb	ish
   d5270:	4011      	ands	r1, r2
   d5272:	461c      	mov	r4, r3
   d5274:	d10b      	bne.n	d528e <_GLOBAL__sub_I_SystemMode+0xba>
   d5276:	4628      	mov	r0, r5
   d5278:	9105      	str	r1, [sp, #20]
   d527a:	f7fe ff1d 	bl	d40b8 <__cxa_guard_acquire>
   d527e:	9905      	ldr	r1, [sp, #20]
   d5280:	b128      	cbz	r0, d528e <_GLOBAL__sub_I_SystemMode+0xba>
   d5282:	4847      	ldr	r0, [pc, #284]	; (d53a0 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d5284:	f004 f89a 	bl	d93bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5288:	4628      	mov	r0, r5
   d528a:	f7fe ff1a 	bl	d40c2 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d528e:	4b44      	ldr	r3, [pc, #272]	; (d53a0 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d5290:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
SdFat SD;
   d5294:	4a37      	ldr	r2, [pc, #220]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d5296:	4943      	ldr	r1, [pc, #268]	; (d53a4 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d5298:	483f      	ldr	r0, [pc, #252]	; (d5398 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d529a:	f006 fbf3 	bl	dba84 <__aeabi_atexit>
   d529e:	4842      	ldr	r0, [pc, #264]	; (d53a8 <_GLOBAL__sub_I_SystemMode+0x1d4>)
File myFile;
   d52a0:	4a34      	ldr	r2, [pc, #208]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d52a2:	4942      	ldr	r1, [pc, #264]	; (d53ac <_GLOBAL__sub_I_SystemMode+0x1d8>)
    Stream() {_timeout=1000;}
   d52a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d52a8:	2400      	movs	r4, #0
   d52aa:	6083      	str	r3, [r0, #8]
  File() {}
   d52ac:	4b40      	ldr	r3, [pc, #256]	; (d53b0 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d52ae:	8204      	strh	r4, [r0, #16]
    Print() : write_error(0) {}
   d52b0:	6044      	str	r4, [r0, #4]
   d52b2:	6003      	str	r3, [r0, #0]
   d52b4:	f006 fbe6 	bl	dba84 <__aeabi_atexit>
typedef struct Data_average{
   d52b8:	4b3e      	ldr	r3, [pc, #248]	; (d53b4 <_GLOBAL__sub_I_SystemMode+0x1e0>)
String deviceID;
   d52ba:	493f      	ldr	r1, [pc, #252]	; (d53b8 <_GLOBAL__sub_I_SystemMode+0x1e4>)
typedef struct Data_average{
   d52bc:	701c      	strb	r4, [r3, #0]
   d52be:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   d52c2:	4b3e      	ldr	r3, [pc, #248]	; (d53bc <_GLOBAL__sub_I_SystemMode+0x1e8>)
String deviceID;
   d52c4:	483e      	ldr	r0, [pc, #248]	; (d53c0 <_GLOBAL__sub_I_SystemMode+0x1ec>)
typedef struct Data_average{
   d52c6:	701c      	strb	r4, [r3, #0]
   d52c8:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
typedef struct Sample{
   d52cc:	4b3d      	ldr	r3, [pc, #244]	; (d53c4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d52ce:	801c      	strh	r4, [r3, #0]
   d52d0:	4b3d      	ldr	r3, [pc, #244]	; (d53c8 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d52d2:	801c      	strh	r4, [r3, #0]
   d52d4:	4b3d      	ldr	r3, [pc, #244]	; (d53cc <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d52d6:	801c      	strh	r4, [r3, #0]
String deviceID;
   d52d8:	f004 f995 	bl	d9606 <_ZN6StringC1EPKc>
   d52dc:	4a25      	ldr	r2, [pc, #148]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d52de:	493c      	ldr	r1, [pc, #240]	; (d53d0 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d52e0:	4837      	ldr	r0, [pc, #220]	; (d53c0 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d52e2:	f006 fbcf 	bl	dba84 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d52e6:	493b      	ldr	r1, [pc, #236]	; (d53d4 <_GLOBAL__sub_I_SystemMode+0x200>)
   d52e8:	483b      	ldr	r0, [pc, #236]	; (d53d8 <_GLOBAL__sub_I_SystemMode+0x204>)
   d52ea:	f004 fcb3 	bl	d9c54 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d52ee:	493b      	ldr	r1, [pc, #236]	; (d53dc <_GLOBAL__sub_I_SystemMode+0x208>)
   d52f0:	483b      	ldr	r0, [pc, #236]	; (d53e0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d52f2:	f004 fcaf 	bl	d9c54 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d52f6:	493b      	ldr	r1, [pc, #236]	; (d53e4 <_GLOBAL__sub_I_SystemMode+0x210>)
   d52f8:	483b      	ldr	r0, [pc, #236]	; (d53e8 <_GLOBAL__sub_I_SystemMode+0x214>)
   d52fa:	f004 fcab 	bl	d9c54 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d52fe:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid); // originally NOTIFY rather than READ -- Charlie
   d5300:	4939      	ldr	r1, [pc, #228]	; (d53e8 <_GLOBAL__sub_I_SystemMode+0x214>)
   d5302:	f88d 301c 	strb.w	r3, [sp, #28]
   d5306:	a808      	add	r0, sp, #32
   d5308:	f004 fbbe 	bl	d9a88 <_ZN8particle7BleUuidC1ERKS0_>
   d530c:	4932      	ldr	r1, [pc, #200]	; (d53d8 <_GLOBAL__sub_I_SystemMode+0x204>)
   d530e:	a80d      	add	r0, sp, #52	; 0x34
   d5310:	f004 fbba 	bl	d9a88 <_ZN8particle7BleUuidC1ERKS0_>
   d5314:	ab0d      	add	r3, sp, #52	; 0x34
   d5316:	9300      	str	r3, [sp, #0]
   d5318:	aa07      	add	r2, sp, #28
   d531a:	ab08      	add	r3, sp, #32
   d531c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5320:	4932      	ldr	r1, [pc, #200]	; (d53ec <_GLOBAL__sub_I_SystemMode+0x218>)
   d5322:	4833      	ldr	r0, [pc, #204]	; (d53f0 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d5324:	f7ff ff2a 	bl	d517c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d5328:	4a12      	ldr	r2, [pc, #72]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d532a:	4932      	ldr	r1, [pc, #200]	; (d53f4 <_GLOBAL__sub_I_SystemMode+0x220>)
   d532c:	4830      	ldr	r0, [pc, #192]	; (d53f0 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d532e:	f006 fba9 	bl	dba84 <__aeabi_atexit>
   d5332:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d5334:	492a      	ldr	r1, [pc, #168]	; (d53e0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d5336:	f88d 301c 	strb.w	r3, [sp, #28]
   d533a:	a808      	add	r0, sp, #32
   d533c:	f004 fba4 	bl	d9a88 <_ZN8particle7BleUuidC1ERKS0_>
   d5340:	4925      	ldr	r1, [pc, #148]	; (d53d8 <_GLOBAL__sub_I_SystemMode+0x204>)
   d5342:	a80d      	add	r0, sp, #52	; 0x34
   d5344:	f004 fba0 	bl	d9a88 <_ZN8particle7BleUuidC1ERKS0_>
   d5348:	4b2b      	ldr	r3, [pc, #172]	; (d53f8 <_GLOBAL__sub_I_SystemMode+0x224>)
   d534a:	9301      	str	r3, [sp, #4]
   d534c:	ab0d      	add	r3, sp, #52	; 0x34
   d534e:	9300      	str	r3, [sp, #0]
   d5350:	aa07      	add	r2, sp, #28
   d5352:	ab08      	add	r3, sp, #32
   d5354:	4929      	ldr	r1, [pc, #164]	; (d53fc <_GLOBAL__sub_I_SystemMode+0x228>)
   d5356:	9402      	str	r4, [sp, #8]
   d5358:	4829      	ldr	r0, [pc, #164]	; (d5400 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d535a:	f7ff ff0f 	bl	d517c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d535e:	4a05      	ldr	r2, [pc, #20]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d5360:	4924      	ldr	r1, [pc, #144]	; (d53f4 <_GLOBAL__sub_I_SystemMode+0x220>)
   d5362:	4827      	ldr	r0, [pc, #156]	; (d5400 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d5364:	f006 fb8e 	bl	dba84 <__aeabi_atexit>
}
   d5368:	b013      	add	sp, #76	; 0x4c
   d536a:	bd30      	pop	{r4, r5, pc}
   d536c:	2003e2c8 	.word	0x2003e2c8
   d5370:	ffff0000 	.word	0xffff0000
   d5374:	2003de20 	.word	0x2003de20
   d5378:	000d4169 	.word	0x000d4169
   d537c:	2003e424 	.word	0x2003e424
   d5380:	2003de24 	.word	0x2003de24
   d5384:	000db06d 	.word	0x000db06d
   d5388:	2003e380 	.word	0x2003e380
   d538c:	2003e3d4 	.word	0x2003e3d4
   d5390:	000d4155 	.word	0x000d4155
   d5394:	2003e498 	.word	0x2003e498
   d5398:	2003de3c 	.word	0x2003de3c
   d539c:	000de5d4 	.word	0x000de5d4
   d53a0:	2003de28 	.word	0x2003de28
   d53a4:	000d40eb 	.word	0x000d40eb
   d53a8:	2003e464 	.word	0x2003e464
   d53ac:	000d40e9 	.word	0x000d40e9
   d53b0:	000de5e8 	.word	0x000de5e8
   d53b4:	2003e55c 	.word	0x2003e55c
   d53b8:	000de27f 	.word	0x000de27f
   d53bc:	2003e514 	.word	0x2003e514
   d53c0:	2003e3c4 	.word	0x2003e3c4
   d53c4:	2003e42c 	.word	0x2003e42c
   d53c8:	2003e348 	.word	0x2003e348
   d53cc:	2003e310 	.word	0x2003e310
   d53d0:	000d9571 	.word	0x000d9571
   d53d4:	000de556 	.word	0x000de556
   d53d8:	2003e2d4 	.word	0x2003e2d4
   d53dc:	000de57b 	.word	0x000de57b
   d53e0:	2003e2e8 	.word	0x2003e2e8
   d53e4:	000de5a0 	.word	0x000de5a0
   d53e8:	2003e2fc 	.word	0x2003e2fc
   d53ec:	000de5c5 	.word	0x000de5c5
   d53f0:	2003e5ac 	.word	0x2003e5ac
   d53f4:	000da14b 	.word	0x000da14b
   d53f8:	000d4355 	.word	0x000d4355
   d53fc:	000de5c8 	.word	0x000de5c8
   d5400:	2003e5a4 	.word	0x2003e5a4

000d5404 <_ZN7PMSA003C1Ev>:

 */



PMSA003::PMSA003(){}
   d5404:	4770      	bx	lr

000d5406 <_ZN7PMSA0034initEv>:
    _wire = &Wire;
    return init();
}

bool PMSA003::init() // private, called by begin only
{
   d5406:	b510      	push	{r4, lr}
   d5408:	4604      	mov	r4, r0
    _wire->begin();
   d540a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   d540c:	f006 f920 	bl	db650 <_ZN7TwoWire5beginEv>

    // To prevent null readings, sets to 0
    for (int i = 0; i < 15; i++)
   d5410:	1ea3      	subs	r3, r4, #2
    {
        _datBuffer[i] = 0;
   d5412:	2200      	movs	r2, #0
   d5414:	341c      	adds	r4, #28
   d5416:	f823 2f02 	strh.w	r2, [r3, #2]!
    for (int i = 0; i < 15; i++)
   d541a:	42a3      	cmp	r3, r4
   d541c:	d1fb      	bne.n	d5416 <_ZN7PMSA0034initEv+0x10>
    }
    return true;
}
   d541e:	2001      	movs	r0, #1
   d5420:	bd10      	pop	{r4, pc}

000d5422 <_ZN7PMSA0035beginEv>:
{
   d5422:	b510      	push	{r4, lr}
    _i2caddr = PMSA_ADDRESS;
   d5424:	2312      	movs	r3, #18
   d5426:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
{
   d542a:	4604      	mov	r4, r0
    _wire = &Wire;
   d542c:	f006 fada 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d5430:	6620      	str	r0, [r4, #96]	; 0x60
    return init();
   d5432:	4620      	mov	r0, r4
}
   d5434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return init();
   d5438:	f7ff bfe5 	b.w	d5406 <_ZN7PMSA0034initEv>

000d543c <_ZN7PMSA0034pollEv>:
    Call this everytime you want new data. 

    v1.1 - changed to a bool, returns true if data is non-zero and new. 
 */
bool PMSA003::poll() 
{   
   d543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _wire->requestFrom(PMSA_ADDRESS,PMSA_DEFAULT_SIZE);
   d543e:	2220      	movs	r2, #32
{   
   d5440:	4604      	mov	r4, r0
    _wire->requestFrom(PMSA_ADDRESS,PMSA_DEFAULT_SIZE);
   d5442:	2112      	movs	r1, #18
   d5444:	6e00      	ldr	r0, [r0, #96]	; 0x60
   d5446:	f006 f932 	bl	db6ae <_ZN7TwoWire11requestFromEhj>
   d544a:	2500      	movs	r5, #0

    uint8_t i = 0;

    bool CONN_FLAG = false;
   d544c:	462e      	mov	r6, r5

    //pull 32 bytes of data from i2c address and place it in the buffer
    while (_wire->available())
   d544e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d5450:	6803      	ldr	r3, [r0, #0]
   d5452:	691b      	ldr	r3, [r3, #16]
   d5454:	4798      	blx	r3
   d5456:	1c6f      	adds	r7, r5, #1
   d5458:	b150      	cbz	r0, d5470 <_ZN7PMSA0034pollEv+0x34>
    {
        _streamBuffer[i++] = _wire->read();
   d545a:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d545c:	6803      	ldr	r3, [r0, #0]
   d545e:	695b      	ldr	r3, [r3, #20]
   d5460:	4798      	blx	r3
   d5462:	b2ed      	uxtb	r5, r5
   d5464:	eb04 0545 	add.w	r5, r4, r5, lsl #1
        CONN_FLAG = true;
   d5468:	2601      	movs	r6, #1
        _streamBuffer[i++] = _wire->read();
   d546a:	83e8      	strh	r0, [r5, #30]
    while (_wire->available())
   d546c:	463d      	mov	r5, r7
   d546e:	e7ee      	b.n	d544e <_ZN7PMSA0034pollEv+0x12>
   d5470:	4620      	mov	r0, r4
   d5472:	1ea3      	subs	r3, r4, #2
   d5474:	f104 011c 	add.w	r1, r4, #28

    // Data is little endian'd, sets it to a data buffer from stream
    for (uint8_t i = 0; i < 15; i++)
    {
        _datBuffer[i] = _streamBuffer[2 + i * 2 + 1];
        _datBuffer[i] += (_streamBuffer[2 + i * 2] << 8);
   d5478:	8c44      	ldrh	r4, [r0, #34]	; 0x22
   d547a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   d547c:	eb02 2204 	add.w	r2, r2, r4, lsl #8
   d5480:	f823 2f02 	strh.w	r2, [r3, #2]!
    for (uint8_t i = 0; i < 15; i++)
   d5484:	4299      	cmp	r1, r3
   d5486:	f100 0004 	add.w	r0, r0, #4
   d548a:	d1f5      	bne.n	d5478 <_ZN7PMSA0034pollEv+0x3c>
    }

    return CONN_FLAG;
}
   d548c:	4630      	mov	r0, r6
   d548e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5490 <_ZN7PMSA0037pm10_stEv>:
 */

const uint16_t PMSA003::pm10_st()
{
    return _datBuffer[1];
}
   d5490:	8840      	ldrh	r0, [r0, #2]
   d5492:	4770      	bx	lr

000d5494 <_ZN7PMSA0037pm25_stEv>:

const uint16_t PMSA003::pm25_st()
{
    return _datBuffer[2];
}
   d5494:	8880      	ldrh	r0, [r0, #4]
   d5496:	4770      	bx	lr

000d5498 <_ZN7PMSA0038pm100_stEv>:

const uint16_t PMSA003::pm100_st()
{
    return _datBuffer[3];
}
   d5498:	88c0      	ldrh	r0, [r0, #6]
   d549a:	4770      	bx	lr

000d549c <_ZN7PMSA0038pm10_envEv>:

const uint16_t PMSA003::pm10_env()
{
    return _datBuffer[4];
}
   d549c:	8900      	ldrh	r0, [r0, #8]
   d549e:	4770      	bx	lr

000d54a0 <_ZN7PMSA0038pm25_envEv>:

const uint16_t PMSA003::pm25_env()
{
    return _datBuffer[5];
}
   d54a0:	8940      	ldrh	r0, [r0, #10]
   d54a2:	4770      	bx	lr

000d54a4 <_ZN7PMSA0039pm100_envEv>:

const uint16_t PMSA003::pm100_env()
{
    return _datBuffer[6];
}
   d54a4:	8980      	ldrh	r0, [r0, #12]
   d54a6:	4770      	bx	lr

000d54a8 <_ZN7PMSA0035pt_03Ev>:

const uint16_t PMSA003::pt_03()
{
    return _datBuffer[7];
}
   d54a8:	89c0      	ldrh	r0, [r0, #14]
   d54aa:	4770      	bx	lr

000d54ac <_ZN7PMSA0035pt_05Ev>:

const uint16_t PMSA003::pt_05()
{
    return _datBuffer[8];
}
   d54ac:	8a00      	ldrh	r0, [r0, #16]
   d54ae:	4770      	bx	lr

000d54b0 <_ZN7PMSA0035pt_10Ev>:

const uint16_t PMSA003::pt_10()
{
    return _datBuffer[9];
}
   d54b0:	8a40      	ldrh	r0, [r0, #18]
   d54b2:	4770      	bx	lr

000d54b4 <_ZN7PMSA0035pt_25Ev>:

const uint16_t PMSA003::pt_25()
{
    return _datBuffer[10];
}
   d54b4:	8a80      	ldrh	r0, [r0, #20]
   d54b6:	4770      	bx	lr

000d54b8 <_ZN7PMSA0035pt_50Ev>:

const uint16_t PMSA003::pt_50()
{
    return _datBuffer[11];
}
   d54b8:	8ac0      	ldrh	r0, [r0, #22]
   d54ba:	4770      	bx	lr

000d54bc <_ZN7PMSA0036pt_100Ev>:

const uint16_t PMSA003::pt_100()
{
    return _datBuffer[12];
}
   d54bc:	8b00      	ldrh	r0, [r0, #24]
   d54be:	4770      	bx	lr

000d54c0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d54c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54c4:	b085      	sub	sp, #20
   d54c6:	461f      	mov	r7, r3
   d54c8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d54cc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d54d0:	eba8 0902 	sub.w	r9, r8, r2
   d54d4:	eba7 0a01 	sub.w	sl, r7, r1
   d54d8:	f1b9 0f00 	cmp.w	r9, #0
   d54dc:	bfb8      	it	lt
   d54de:	f1c9 0900 	rsblt	r9, r9, #0
   d54e2:	f1ba 0f00 	cmp.w	sl, #0
   d54e6:	bfb8      	it	lt
   d54e8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d54ec:	45d1      	cmp	r9, sl
        uint16_t color) {
   d54ee:	4683      	mov	fp, r0
   d54f0:	460c      	mov	r4, r1
   d54f2:	4615      	mov	r5, r2
    if (steep) {
   d54f4:	dd04      	ble.n	d5500 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d54f6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d54f8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d54fa:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d54fc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d54fe:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d5500:	42bc      	cmp	r4, r7
   d5502:	dd05      	ble.n	d5510 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d5504:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d5506:	4645      	mov	r5, r8
   d5508:	4690      	mov	r8, r2
    if (x0 > x1) {
   d550a:	4622      	mov	r2, r4
   d550c:	463c      	mov	r4, r7
   d550e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d5510:	1b3e      	subs	r6, r7, r4
   d5512:	b2b2      	uxth	r2, r6
   d5514:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d5516:	eba8 0205 	sub.w	r2, r8, r5
   d551a:	2a00      	cmp	r2, #0
   d551c:	bfb8      	it	lt
   d551e:	4252      	neglt	r2, r2
   d5520:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d5522:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d5526:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d552a:	4545      	cmp	r5, r8
   d552c:	bfb4      	ite	lt
   d552e:	2201      	movlt	r2, #1
   d5530:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d5534:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d5536:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d5538:	42bc      	cmp	r4, r7
   d553a:	dc1c      	bgt.n	d5576 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d553c:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d5540:	9303      	str	r3, [sp, #12]
        if (steep) {
   d5542:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d5544:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d5548:	bfc7      	ittee	gt
   d554a:	4629      	movgt	r1, r5
   d554c:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d554e:	462a      	movle	r2, r5
   d5550:	4621      	movle	r1, r4
   d5552:	4658      	mov	r0, fp
   d5554:	47c0      	blx	r8
        }
        err -= dy;
   d5556:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d5558:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d555a:	1ab6      	subs	r6, r6, r2
   d555c:	b2b1      	uxth	r1, r6
   d555e:	b236      	sxth	r6, r6
        if (err < 0) {
   d5560:	2e00      	cmp	r6, #0
   d5562:	da05      	bge.n	d5570 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d5564:	9a02      	ldr	r2, [sp, #8]
   d5566:	4415      	add	r5, r2
            err += dx;
   d5568:	9a00      	ldr	r2, [sp, #0]
   d556a:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d556c:	b22d      	sxth	r5, r5
            err += dx;
   d556e:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d5570:	3401      	adds	r4, #1
   d5572:	b224      	sxth	r4, r4
   d5574:	e7e0      	b.n	d5538 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d5576:	b005      	add	sp, #20
   d5578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d557c <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d557c:	4770      	bx	lr

000d557e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d557e:	b410      	push	{r4}
    drawPixel(x, y, color);
   d5580:	6804      	ldr	r4, [r0, #0]
   d5582:	6924      	ldr	r4, [r4, #16]
   d5584:	46a4      	mov	ip, r4
}
   d5586:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d558a:	4760      	bx	ip

000d558c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d558c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d558e:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d5590:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d5594:	9502      	str	r5, [sp, #8]
   d5596:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d5598:	46a4      	mov	ip, r4
}
   d559a:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d559c:	4760      	bx	ip

000d559e <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d559e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d55a0:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d55a2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d55a6:	9502      	str	r5, [sp, #8]
   d55a8:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d55aa:	46a4      	mov	ip, r4
}
   d55ac:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d55ae:	4760      	bx	ip

000d55b0 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d55b0:	b470      	push	{r4, r5, r6}
   d55b2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d55b6:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d55ba:	6804      	ldr	r4, [r0, #0]
   d55bc:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d55c0:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d55c2:	46a4      	mov	ip, r4
}
   d55c4:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d55c6:	4760      	bx	ip

000d55c8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d55c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d55cc:	461c      	mov	r4, r3
    startWrite();
   d55ce:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d55d0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d55d4:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d55d6:	4605      	mov	r5, r0
   d55d8:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d55da:	3c01      	subs	r4, #1
   d55dc:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d55de:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d55e0:	b224      	sxth	r4, r4
    startWrite();
   d55e2:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d55e4:	682b      	ldr	r3, [r5, #0]
   d55e6:	f8cd 8004 	str.w	r8, [sp, #4]
   d55ea:	9400      	str	r4, [sp, #0]
   d55ec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d55ee:	4628      	mov	r0, r5
   d55f0:	463b      	mov	r3, r7
   d55f2:	4632      	mov	r2, r6
   d55f4:	4639      	mov	r1, r7
   d55f6:	47a0      	blx	r4
    endWrite();
   d55f8:	682b      	ldr	r3, [r5, #0]
   d55fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55fc:	4628      	mov	r0, r5
}
   d55fe:	b002      	add	sp, #8
   d5600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d5604:	4718      	bx	r3

000d5606 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d5606:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d560a:	461d      	mov	r5, r3
    startWrite();
   d560c:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d560e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d5612:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d5614:	4604      	mov	r4, r0
   d5616:	4617      	mov	r7, r2
   d5618:	460e      	mov	r6, r1
    startWrite();
   d561a:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d561c:	e9cd 7800 	strd	r7, r8, [sp]
   d5620:	6822      	ldr	r2, [r4, #0]
   d5622:	1e6b      	subs	r3, r5, #1
   d5624:	4433      	add	r3, r6
   d5626:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d5628:	4620      	mov	r0, r4
   d562a:	b21b      	sxth	r3, r3
   d562c:	463a      	mov	r2, r7
   d562e:	4631      	mov	r1, r6
   d5630:	47a8      	blx	r5
    endWrite();
   d5632:	6823      	ldr	r3, [r4, #0]
   d5634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5636:	4620      	mov	r0, r4
}
   d5638:	b002      	add	sp, #8
   d563a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d563e:	4718      	bx	r3

000d5640 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5640:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5644:	461e      	mov	r6, r3
    startWrite();
   d5646:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d5648:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d564c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d564e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d5652:	460c      	mov	r4, r1
   d5654:	4605      	mov	r5, r0
   d5656:	4617      	mov	r7, r2
    startWrite();
   d5658:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d565a:	4426      	add	r6, r4
   d565c:	42b4      	cmp	r4, r6
   d565e:	682b      	ldr	r3, [r5, #0]
   d5660:	da0b      	bge.n	d567a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d5662:	f8cd 8000 	str.w	r8, [sp]
   d5666:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d566a:	4621      	mov	r1, r4
   d566c:	464b      	mov	r3, r9
   d566e:	463a      	mov	r2, r7
   d5670:	4628      	mov	r0, r5
   d5672:	3401      	adds	r4, #1
   d5674:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d5676:	b224      	sxth	r4, r4
   d5678:	e7f0      	b.n	d565c <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d567c:	4628      	mov	r0, r5
}
   d567e:	b002      	add	sp, #8
   d5680:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5684:	4718      	bx	r3

000d5686 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d5686:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d5688:	6802      	ldr	r2, [r0, #0]
   d568a:	9101      	str	r1, [sp, #4]
   d568c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5690:	9100      	str	r1, [sp, #0]
   d5692:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d5694:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5698:	2200      	movs	r2, #0
   d569a:	4611      	mov	r1, r2
   d569c:	47a0      	blx	r4
}
   d569e:	b002      	add	sp, #8
   d56a0:	bd10      	pop	{r4, pc}

000d56a2 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d56a2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d56a6:	461d      	mov	r5, r3
    startWrite();
   d56a8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d56aa:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d56ae:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d56b0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d56b4:	4604      	mov	r4, r0
   d56b6:	460f      	mov	r7, r1
   d56b8:	4616      	mov	r6, r2
    startWrite();
   d56ba:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d56bc:	6823      	ldr	r3, [r4, #0]
   d56be:	f8cd 8000 	str.w	r8, [sp]
   d56c2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d56c6:	4632      	mov	r2, r6
   d56c8:	462b      	mov	r3, r5
   d56ca:	4639      	mov	r1, r7
   d56cc:	4620      	mov	r0, r4
   d56ce:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d56d0:	6823      	ldr	r3, [r4, #0]
   d56d2:	f8cd 8000 	str.w	r8, [sp]
   d56d6:	f109 32ff 	add.w	r2, r9, #4294967295
   d56da:	4432      	add	r2, r6
   d56dc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d56e0:	4639      	mov	r1, r7
   d56e2:	462b      	mov	r3, r5
   d56e4:	4620      	mov	r0, r4
   d56e6:	b212      	sxth	r2, r2
   d56e8:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d56ea:	6823      	ldr	r3, [r4, #0]
   d56ec:	f8cd 8000 	str.w	r8, [sp]
   d56f0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d56f4:	4632      	mov	r2, r6
   d56f6:	464b      	mov	r3, r9
   d56f8:	4639      	mov	r1, r7
   d56fa:	4620      	mov	r0, r4
   d56fc:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d56fe:	1e6b      	subs	r3, r5, #1
   d5700:	19d9      	adds	r1, r3, r7
   d5702:	6823      	ldr	r3, [r4, #0]
   d5704:	f8cd 8000 	str.w	r8, [sp]
   d5708:	6a1d      	ldr	r5, [r3, #32]
   d570a:	4620      	mov	r0, r4
   d570c:	464b      	mov	r3, r9
   d570e:	4632      	mov	r2, r6
   d5710:	b209      	sxth	r1, r1
   d5712:	47a8      	blx	r5
    endWrite();
   d5714:	6823      	ldr	r3, [r4, #0]
   d5716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5718:	4620      	mov	r0, r4
}
   d571a:	b002      	add	sp, #8
   d571c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5720:	4718      	bx	r3

000d5722 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d5722:	4770      	bx	lr

000d5724 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d5724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d5728:	4299      	cmp	r1, r3
        uint16_t color) {
   d572a:	4616      	mov	r6, r2
   d572c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d5730:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5734:	6802      	ldr	r2, [r0, #0]
   d5736:	4680      	mov	r8, r0
   d5738:	460d      	mov	r5, r1
   d573a:	461c      	mov	r4, r3
    if(x0 == x1){
   d573c:	d113      	bne.n	d5766 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d573e:	42be      	cmp	r6, r7
   d5740:	bfc8      	it	gt
   d5742:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5744:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5748:	bfc4      	itt	gt
   d574a:	463e      	movgt	r6, r7
   d574c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d574e:	1c7b      	adds	r3, r7, #1
   d5750:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d5752:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5754:	b21b      	sxth	r3, r3
   d5756:	4632      	mov	r2, r6
   d5758:	4629      	mov	r1, r5
   d575a:	4640      	mov	r0, r8
   d575c:	46a4      	mov	ip, r4
}
   d575e:	b003      	add	sp, #12
   d5760:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5764:	4760      	bx	ip
    } else if(y0 == y1){
   d5766:	42be      	cmp	r6, r7
   d5768:	d10a      	bne.n	d5780 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d576a:	4299      	cmp	r1, r3
   d576c:	bfc2      	ittt	gt
   d576e:	460b      	movgt	r3, r1
   d5770:	4625      	movgt	r5, r4
   d5772:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5774:	1c63      	adds	r3, r4, #1
   d5776:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d577a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d577c:	1b5b      	subs	r3, r3, r5
   d577e:	e7e9      	b.n	d5754 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d5780:	6953      	ldr	r3, [r2, #20]
   d5782:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d5784:	e9cd 7900 	strd	r7, r9, [sp]
   d5788:	f8d8 3000 	ldr.w	r3, [r8]
   d578c:	4640      	mov	r0, r8
   d578e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5790:	4632      	mov	r2, r6
   d5792:	4623      	mov	r3, r4
   d5794:	4629      	mov	r1, r5
   d5796:	47b8      	blx	r7
        endWrite();
   d5798:	f8d8 3000 	ldr.w	r3, [r8]
   d579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d579e:	4640      	mov	r0, r8
}
   d57a0:	b003      	add	sp, #12
   d57a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d57a6:	4718      	bx	r3

000d57a8 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d57a8:	f001 0303 	and.w	r3, r1, #3
   d57ac:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d57b0:	7643      	strb	r3, [r0, #25]
    switch(rotation) {
   d57b2:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d57b4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d57b8:	bf59      	ittee	pl
   d57ba:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d57bc:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d57be:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d57c0:	81c3      	strhmi	r3, [r0, #14]
}
   d57c2:	4770      	bx	lr

000d57c4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d57c4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d57c6:	8101      	strh	r1, [r0, #8]
   d57c8:	2400      	movs	r4, #0
   d57ca:	4d07      	ldr	r5, [pc, #28]	; (d57e8 <_ZN12Adafruit_GFXC1Ess+0x24>)
   d57cc:	8142      	strh	r2, [r0, #10]
    _width    = WIDTH;
   d57ce:	8181      	strh	r1, [r0, #12]
    _height   = HEIGHT;
   d57d0:	81c2      	strh	r2, [r0, #14]
    textsize  = 1;
   d57d2:	f04f 31ff 	mov.w	r1, #4294967295
   d57d6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   d57da:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d57de:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d57e0:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d57e2:	6104      	str	r4, [r0, #16]
    gfxFont   = NULL;
   d57e4:	61c4      	str	r4, [r0, #28]
}
   d57e6:	bd30      	pop	{r4, r5, pc}
   d57e8:	000debc0 	.word	0x000debc0

000d57ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d57ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57f0:	b089      	sub	sp, #36	; 0x24
   d57f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d57f6:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d57f8:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d57fc:	9304      	str	r3, [sp, #16]
   d57fe:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d5802:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5804:	9305      	str	r3, [sp, #20]
   d5806:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d580a:	4604      	mov	r4, r0
    startWrite();
   d580c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d580e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d5812:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d5816:	bf48      	it	mi
   d5818:	f108 020e 	addmi.w	r2, r8, #14
   d581c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d5820:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d5822:	4635      	mov	r5, r6
   d5824:	9b03      	ldr	r3, [sp, #12]
   d5826:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d5828:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d582c:	189a      	adds	r2, r3, r2
   d582e:	9b05      	ldr	r3, [sp, #20]
   d5830:	428b      	cmp	r3, r1
   d5832:	b212      	sxth	r2, r2
   d5834:	dd27      	ble.n	d5886 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5836:	9b04      	ldr	r3, [sp, #16]
   d5838:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d583a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d583e:	9306      	str	r3, [sp, #24]
   d5840:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d5844:	4580      	cmp	r8, r0
   d5846:	fa1f f189 	uxth.w	r1, r9
   d584a:	dd17      	ble.n	d587c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d584c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d584e:	bf05      	ittet	eq
   d5850:	9b06      	ldreq	r3, [sp, #24]
   d5852:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d5854:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5856:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d5858:	bf18      	it	ne
   d585a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d585c:	062b      	lsls	r3, r5, #24
   d585e:	d50a      	bpl.n	d5876 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d5860:	9b02      	ldr	r3, [sp, #8]
   d5862:	6820      	ldr	r0, [r4, #0]
   d5864:	9207      	str	r2, [sp, #28]
   d5866:	4419      	add	r1, r3
   d5868:	6983      	ldr	r3, [r0, #24]
   d586a:	b209      	sxth	r1, r1
   d586c:	461f      	mov	r7, r3
   d586e:	4620      	mov	r0, r4
   d5870:	4653      	mov	r3, sl
   d5872:	47b8      	blx	r7
   d5874:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d5876:	f109 0901 	add.w	r9, r9, #1
   d587a:	e7e1      	b.n	d5840 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d587c:	9b01      	ldr	r3, [sp, #4]
   d587e:	3301      	adds	r3, #1
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	445e      	add	r6, fp
   d5884:	e7ce      	b.n	d5824 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d5886:	6823      	ldr	r3, [r4, #0]
   d5888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d588a:	4620      	mov	r0, r4
}
   d588c:	b009      	add	sp, #36	; 0x24
   d588e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d5892:	4718      	bx	r3

000d5894 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  uint16_t color, uint16_t bg, uint8_t size) {
   d5894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5898:	ed2d 8b02 	vpush	{d8}
   d589c:	b091      	sub	sp, #68	; 0x44
   d589e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d58a0:	69c2      	ldr	r2, [r0, #28]
  uint16_t color, uint16_t bg, uint8_t size) {
   d58a2:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
   d58a6:	f89d 4078 	ldrb.w	r4, [sp, #120]	; 0x78
   d58aa:	4698      	mov	r8, r3
   d58ac:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d58b0:	9302      	str	r3, [sp, #8]
   d58b2:	4682      	mov	sl, r0
   d58b4:	460d      	mov	r5, r1
    if(!gfxFont) { // 'Classic' built-in font
   d58b6:	2a00      	cmp	r2, #0
   d58b8:	f040 80b7 	bne.w	d5a2a <_ZN12Adafruit_GFX8drawCharEsshtth+0x196>
        if((x >= _width)            || // Clip right
   d58bc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d58c0:	428b      	cmp	r3, r1
   d58c2:	f340 813c 	ble.w	d5b3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
   d58c6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d58ca:	42b3      	cmp	r3, r6
   d58cc:	f340 8137 	ble.w	d5b3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
           ((x + 6 * size - 1) < 0) || // Clip left
   d58d0:	2306      	movs	r3, #6
   d58d2:	fb13 1304 	smlabb	r3, r3, r4, r1
           (y >= _height)           || // Clip bottom
   d58d6:	2b00      	cmp	r3, #0
   d58d8:	f340 8131 	ble.w	d5b3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
           ((y + 8 * size - 1) < 0))   // Clip top
   d58dc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size - 1) < 0) || // Clip left
   d58e0:	2b00      	cmp	r3, #0
   d58e2:	f340 812c 	ble.w	d5b3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d58e6:	7ec3      	ldrb	r3, [r0, #27]
   d58e8:	b933      	cbnz	r3, d58f8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x64>
   d58ea:	f1b8 0faf 	cmp.w	r8, #175	; 0xaf
   d58ee:	bf84      	itt	hi
   d58f0:	f108 0801 	addhi.w	r8, r8, #1
   d58f4:	fa5f f888 	uxtbhi.w	r8, r8
        startWrite();
   d58f8:	f8da 3000 	ldr.w	r3, [sl]
   d58fc:	4650      	mov	r0, sl
   d58fe:	695b      	ldr	r3, [r3, #20]
   d5900:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5902:	2305      	movs	r3, #5
   d5904:	9309      	str	r3, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5906:	2300      	movs	r3, #0
   d5908:	9303      	str	r3, [sp, #12]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d590a:	4b8f      	ldr	r3, [pc, #572]	; (d5b48 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b4>)
   d590c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   d5910:	4443      	add	r3, r8
   d5912:	930a      	str	r3, [sp, #40]	; 0x28
   d5914:	b2b3      	uxth	r3, r6
   d5916:	9307      	str	r3, [sp, #28]
   d5918:	9a03      	ldr	r2, [sp, #12]
   d591a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d591c:	5c9b      	ldrb	r3, [r3, r2]
   d591e:	9306      	str	r3, [sp, #24]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d5920:	fb02 f904 	mul.w	r9, r2, r4
   d5924:	b2a3      	uxth	r3, r4
   d5926:	fa19 f985 	uxtah	r9, r9, r5
   d592a:	9305      	str	r3, [sp, #20]
   d592c:	b2ab      	uxth	r3, r5
   d592e:	9308      	str	r3, [sp, #32]
   d5930:	fa0f f389 	sxth.w	r3, r9
   d5934:	ee08 3a10 	vmov	s16, r3
   d5938:	9b07      	ldr	r3, [sp, #28]
   d593a:	9304      	str	r3, [sp, #16]
                        writePixel(x+i, y+j, bg);
   d593c:	4613      	mov	r3, r2
   d593e:	442b      	add	r3, r5
   d5940:	b21b      	sxth	r3, r3
   d5942:	ee08 3a90 	vmov	s17, r3
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d5946:	f04f 0800 	mov.w	r8, #0
   d594a:	fa0f f984 	sxth.w	r9, r4
                if(line & 1) {
   d594e:	9a06      	ldr	r2, [sp, #24]
   d5950:	f8da 3000 	ldr.w	r3, [sl]
   d5954:	07d1      	lsls	r1, r2, #31
   d5956:	d54a      	bpl.n	d59ee <_ZN12Adafruit_GFX8drawCharEsshtth+0x15a>
                    if(size == 1)
   d5958:	2c01      	cmp	r4, #1
   d595a:	d13a      	bne.n	d59d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x13e>
                        writePixel(x+i, y+j, color);
   d595c:	9a07      	ldr	r2, [sp, #28]
   d595e:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d5962:	9b02      	ldr	r3, [sp, #8]
   d5964:	4442      	add	r2, r8
                        writePixel(x+i, y+j, bg);
   d5966:	ee18 1a90 	vmov	r1, s17
   d596a:	b212      	sxth	r2, r2
   d596c:	4650      	mov	r0, sl
   d596e:	47d8      	blx	fp
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5970:	9b06      	ldr	r3, [sp, #24]
   d5972:	085b      	lsrs	r3, r3, #1
   d5974:	9306      	str	r3, [sp, #24]
   d5976:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   d597a:	f108 0801 	add.w	r8, r8, #1
   d597e:	4413      	add	r3, r2
   d5980:	b29b      	uxth	r3, r3
   d5982:	f1b8 0f08 	cmp.w	r8, #8
   d5986:	9304      	str	r3, [sp, #16]
   d5988:	d1e1      	bne.n	d594e <_ZN12Adafruit_GFX8drawCharEsshtth+0xba>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d598a:	9b03      	ldr	r3, [sp, #12]
   d598c:	3301      	adds	r3, #1
   d598e:	b25b      	sxtb	r3, r3
   d5990:	9303      	str	r3, [sp, #12]
   d5992:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5994:	3b01      	subs	r3, #1
   d5996:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d599a:	9309      	str	r3, [sp, #36]	; 0x24
   d599c:	d1bc      	bne.n	d5918 <_ZN12Adafruit_GFX8drawCharEsshtth+0x84>
        if(bg != color) { // If opaque, draw vertical line for last column
   d599e:	9b02      	ldr	r3, [sp, #8]
   d59a0:	42bb      	cmp	r3, r7
   d59a2:	d00c      	beq.n	d59be <_ZN12Adafruit_GFX8drawCharEsshtth+0x12a>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
   d59a4:	2c01      	cmp	r4, #1
   d59a6:	f8da 2000 	ldr.w	r2, [sl]
   d59aa:	d12d      	bne.n	d5a08 <_ZN12Adafruit_GFX8drawCharEsshtth+0x174>
   d59ac:	9908      	ldr	r1, [sp, #32]
   d59ae:	9700      	str	r7, [sp, #0]
   d59b0:	3105      	adds	r1, #5
   d59b2:	6a14      	ldr	r4, [r2, #32]
   d59b4:	4643      	mov	r3, r8
   d59b6:	4632      	mov	r2, r6
   d59b8:	b209      	sxth	r1, r1
   d59ba:	4650      	mov	r0, sl
   d59bc:	47a0      	blx	r4
        endWrite();
   d59be:	f8da 3000 	ldr.w	r3, [sl]
   d59c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59c4:	4650      	mov	r0, sl
}
   d59c6:	b011      	add	sp, #68	; 0x44
   d59c8:	ecbd 8b02 	vpop	{d8}
   d59cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d59d0:	4718      	bx	r3
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d59d2:	9a02      	ldr	r2, [sp, #8]
   d59d4:	9201      	str	r2, [sp, #4]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d59d6:	f8cd 9000 	str.w	r9, [sp]
   d59da:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d59de:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d59e2:	ee18 1a10 	vmov	r1, s16
   d59e6:	464b      	mov	r3, r9
   d59e8:	4650      	mov	r0, sl
   d59ea:	47d8      	blx	fp
   d59ec:	e7c0      	b.n	d5970 <_ZN12Adafruit_GFX8drawCharEsshtth+0xdc>
                } else if(bg != color) {
   d59ee:	9a02      	ldr	r2, [sp, #8]
   d59f0:	42ba      	cmp	r2, r7
   d59f2:	d0bd      	beq.n	d5970 <_ZN12Adafruit_GFX8drawCharEsshtth+0xdc>
                    if(size == 1)
   d59f4:	2c01      	cmp	r4, #1
   d59f6:	d105      	bne.n	d5a04 <_ZN12Adafruit_GFX8drawCharEsshtth+0x170>
                        writePixel(x+i, y+j, bg);
   d59f8:	9a07      	ldr	r2, [sp, #28]
   d59fa:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d59fe:	4442      	add	r2, r8
   d5a00:	463b      	mov	r3, r7
   d5a02:	e7b0      	b.n	d5966 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd2>
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d5a04:	9701      	str	r7, [sp, #4]
   d5a06:	e7e6      	b.n	d59d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
   d5a08:	9b05      	ldr	r3, [sp, #20]
   d5a0a:	9701      	str	r7, [sp, #4]
   d5a0c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   d5a10:	9b08      	ldr	r3, [sp, #32]
   d5a12:	440b      	add	r3, r1
   d5a14:	4619      	mov	r1, r3
   d5a16:	9b05      	ldr	r3, [sp, #20]
   d5a18:	00db      	lsls	r3, r3, #3
   d5a1a:	9300      	str	r3, [sp, #0]
   d5a1c:	69d5      	ldr	r5, [r2, #28]
   d5a1e:	4623      	mov	r3, r4
   d5a20:	4632      	mov	r2, r6
   d5a22:	b209      	sxth	r1, r1
   d5a24:	4650      	mov	r0, sl
   d5a26:	47a8      	blx	r5
        endWrite();
   d5a28:	e7c9      	b.n	d59be <_ZN12Adafruit_GFX8drawCharEsshtth+0x12a>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5a2a:	7a13      	ldrb	r3, [r2, #8]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d5a2c:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
   d5a2e:	6812      	ldr	r2, [r2, #0]
   d5a30:	9209      	str	r2, [sp, #36]	; 0x24
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5a32:	eba8 0803 	sub.w	r8, r8, r3
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d5a36:	fa5f f888 	uxtb.w	r8, r8
   d5a3a:	eb01 03c8 	add.w	r3, r1, r8, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d5a3e:	f831 b038 	ldrh.w	fp, [r1, r8, lsl #3]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d5a42:	789a      	ldrb	r2, [r3, #2]
                 yo = pgm_read_byte(&glyph->yOffset);
   d5a44:	f993 8006 	ldrsb.w	r8, [r3, #6]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d5a48:	920a      	str	r2, [sp, #40]	; 0x28
        if(size > 1) {
   d5a4a:	2c01      	cmp	r4, #1
                 h  = pgm_read_byte(&glyph->height);
   d5a4c:	78da      	ldrb	r2, [r3, #3]
   d5a4e:	920b      	str	r2, [sp, #44]	; 0x2c
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5a50:	f993 2005 	ldrsb.w	r2, [r3, #5]
   d5a54:	9206      	str	r2, [sp, #24]
        int16_t  xo16 = 0, yo16 = 0;
   d5a56:	bf95      	itete	ls
   d5a58:	2300      	movls	r3, #0
            yo16 = yo;
   d5a5a:	fa0f f388 	sxthhi.w	r3, r8
        int16_t  xo16 = 0, yo16 = 0;
   d5a5e:	461f      	movls	r7, r3
            yo16 = yo;
   d5a60:	9303      	strhi	r3, [sp, #12]
        int16_t  xo16 = 0, yo16 = 0;
   d5a62:	bf98      	it	ls
   d5a64:	9303      	strls	r3, [sp, #12]
        startWrite();
   d5a66:	6803      	ldr	r3, [r0, #0]
            xo16 = xo;
   d5a68:	bf88      	it	hi
   d5a6a:	f9bd 7018 	ldrshhi.w	r7, [sp, #24]
        startWrite();
   d5a6e:	695b      	ldr	r3, [r3, #20]
   d5a70:	4798      	blx	r3
        for(yy=0; yy<h; yy++) {
   d5a72:	4367      	muls	r7, r4
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d5a74:	b2a3      	uxth	r3, r4
   d5a76:	9305      	str	r3, [sp, #20]
   d5a78:	b2ab      	uxth	r3, r5
   d5a7a:	fa17 f585 	uxtah	r5, r7, r5
   d5a7e:	b2b2      	uxth	r2, r6
   d5a80:	9308      	str	r3, [sp, #32]
   d5a82:	b2ab      	uxth	r3, r5
   d5a84:	930d      	str	r3, [sp, #52]	; 0x34
   d5a86:	920e      	str	r2, [sp, #56]	; 0x38
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5a88:	2300      	movs	r3, #0
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5a8a:	fa18 f286 	uxtah	r2, r8, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5a8e:	461f      	mov	r7, r3
        for(yy=0; yy<h; yy++) {
   d5a90:	461d      	mov	r5, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5a92:	920f      	str	r2, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d5a94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5a96:	4295      	cmp	r5, r2
   d5a98:	d291      	bcs.n	d59be <_ZN12Adafruit_GFX8drawCharEsshtth+0x12a>
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d5a9a:	9a03      	ldr	r2, [sp, #12]
   d5a9c:	9905      	ldr	r1, [sp, #20]
   d5a9e:	980e      	ldr	r0, [sp, #56]	; 0x38
   d5aa0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   d5aa4:	442a      	add	r2, r5
   d5aa6:	fb02 0201 	mla	r2, r2, r1, r0
   d5aaa:	b212      	sxth	r2, r2
   d5aac:	ee08 2a10 	vmov	s16, r2
   d5ab0:	9906      	ldr	r1, [sp, #24]
   d5ab2:	9a08      	ldr	r2, [sp, #32]
   d5ab4:	1856      	adds	r6, r2, r1
   d5ab6:	b2b2      	uxth	r2, r6
   d5ab8:	9204      	str	r2, [sp, #16]
   d5aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d5abc:	189a      	adds	r2, r3, r2
   d5abe:	b2d2      	uxtb	r2, r2
   d5ac0:	9207      	str	r2, [sp, #28]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5ac2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d5ac4:	eb02 0905 	add.w	r9, r2, r5
   d5ac8:	fa0f f989 	sxth.w	r9, r9
            for(xx=0; xx<w; xx++) {
   d5acc:	9a07      	ldr	r2, [sp, #28]
   d5ace:	429a      	cmp	r2, r3
   d5ad0:	d032      	beq.n	d5b38 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2a4>
                if(!(bit++ & 7)) {
   d5ad2:	1c5a      	adds	r2, r3, #1
   d5ad4:	b2d2      	uxtb	r2, r2
   d5ad6:	920c      	str	r2, [sp, #48]	; 0x30
   d5ad8:	075a      	lsls	r2, r3, #29
                    bits = pgm_read_byte(&bitmap[bo++]);
   d5ada:	bf01      	itttt	eq
   d5adc:	9a09      	ldreq	r2, [sp, #36]	; 0x24
   d5ade:	f812 700b 	ldrbeq.w	r7, [r2, fp]
   d5ae2:	f10b 0301 	addeq.w	r3, fp, #1
   d5ae6:	fa1f fb83 	uxtheq.w	fp, r3
                if(bits & 0x80) {
   d5aea:	063b      	lsls	r3, r7, #24
   d5aec:	d50b      	bpl.n	d5b06 <_ZN12Adafruit_GFX8drawCharEsshtth+0x272>
                    if(size == 1) {
   d5aee:	2c01      	cmp	r4, #1
   d5af0:	f8da 2000 	ldr.w	r2, [sl]
   d5af4:	d113      	bne.n	d5b1e <_ZN12Adafruit_GFX8drawCharEsshtth+0x28a>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5af6:	6993      	ldr	r3, [r2, #24]
   d5af8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
   d5afc:	461e      	mov	r6, r3
   d5afe:	464a      	mov	r2, r9
   d5b00:	9b02      	ldr	r3, [sp, #8]
   d5b02:	4650      	mov	r0, sl
   d5b04:	47b0      	blx	r6
                bits <<= 1;
   d5b06:	9e04      	ldr	r6, [sp, #16]
   d5b08:	3601      	adds	r6, #1
   d5b0a:	b2b3      	uxth	r3, r6
   d5b0c:	9304      	str	r3, [sp, #16]
   d5b0e:	9b05      	ldr	r3, [sp, #20]
   d5b10:	007f      	lsls	r7, r7, #1
   d5b12:	4498      	add	r8, r3
   d5b14:	b2ff      	uxtb	r7, r7
                if(!(bit++ & 7)) {
   d5b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d5b18:	fa1f f888 	uxth.w	r8, r8
            for(xx=0; xx<w; xx++) {
   d5b1c:	e7d6      	b.n	d5acc <_ZN12Adafruit_GFX8drawCharEsshtth+0x238>
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d5b1e:	9902      	ldr	r1, [sp, #8]
   d5b20:	b223      	sxth	r3, r4
   d5b22:	e9cd 3100 	strd	r3, r1, [sp]
   d5b26:	69d2      	ldr	r2, [r2, #28]
   d5b28:	fa0f f188 	sxth.w	r1, r8
   d5b2c:	4616      	mov	r6, r2
   d5b2e:	4650      	mov	r0, sl
   d5b30:	ee18 2a10 	vmov	r2, s16
   d5b34:	47b0      	blx	r6
   d5b36:	e7e6      	b.n	d5b06 <_ZN12Adafruit_GFX8drawCharEsshtth+0x272>
        for(yy=0; yy<h; yy++) {
   d5b38:	3501      	adds	r5, #1
   d5b3a:	b2ed      	uxtb	r5, r5
   d5b3c:	e7aa      	b.n	d5a94 <_ZN12Adafruit_GFX8drawCharEsshtth+0x200>
}
   d5b3e:	b011      	add	sp, #68	; 0x44
   d5b40:	ecbd 8b02 	vpop	{d8}
   d5b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b48:	000de6b7 	.word	0x000de6b7

000d5b4c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5b4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d5b4e:	69c2      	ldr	r2, [r0, #28]
size_t Adafruit_GFX::write(uint8_t c) {
   d5b50:	4604      	mov	r4, r0
   d5b52:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d5b54:	2a00      	cmp	r2, #0
   d5b56:	d132      	bne.n	d5bbe <_ZN12Adafruit_GFX5writeEh+0x72>
        if(c == '\n') {                        // Newline?
   d5b58:	290a      	cmp	r1, #10
   d5b5a:	d108      	bne.n	d5b6e <_ZN12Adafruit_GFX5writeEh+0x22>
            cursor_y += textsize * 8;          // advance y one line
   d5b5c:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d5b5e:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize * 8;          // advance y one line
   d5b60:	7e02      	ldrb	r2, [r0, #24]
   d5b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize *
   d5b66:	8263      	strh	r3, [r4, #18]
}
   d5b68:	2001      	movs	r0, #1
   d5b6a:	b004      	add	sp, #16
   d5b6c:	bd70      	pop	{r4, r5, r6, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d5b6e:	290d      	cmp	r1, #13
   d5b70:	d0fa      	beq.n	d5b68 <_ZN12Adafruit_GFX5writeEh+0x1c>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
   d5b72:	7e01      	ldrb	r1, [r0, #24]
   d5b74:	7e80      	ldrb	r0, [r0, #26]
   d5b76:	b170      	cbz	r0, d5b96 <_ZN12Adafruit_GFX5writeEh+0x4a>
   d5b78:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
   d5b7c:	2006      	movs	r0, #6
   d5b7e:	fb10 5001 	smlabb	r0, r0, r1, r5
   d5b82:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   d5b86:	42a8      	cmp	r0, r5
   d5b88:	bfc1      	itttt	gt
   d5b8a:	f9b4 0012 	ldrshgt.w	r0, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d5b8e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize * 8;      // advance y one line
   d5b90:	eb00 02c1 	addgt.w	r2, r0, r1, lsl #3
   d5b94:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5b96:	8ae2      	ldrh	r2, [r4, #22]
   d5b98:	9201      	str	r2, [sp, #4]
   d5b9a:	8aa2      	ldrh	r2, [r4, #20]
   d5b9c:	9102      	str	r1, [sp, #8]
   d5b9e:	9200      	str	r2, [sp, #0]
   d5ba0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5ba4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5ba8:	4620      	mov	r0, r4
   d5baa:	f7ff fe73 	bl	d5894 <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
   d5bae:	7e23      	ldrb	r3, [r4, #24]
   d5bb0:	8a22      	ldrh	r2, [r4, #16]
   d5bb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5bb6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
   d5bba:	8223      	strh	r3, [r4, #16]
   d5bbc:	e7d4      	b.n	d5b68 <_ZN12Adafruit_GFX5writeEh+0x1c>
        if(c == '\n') {
   d5bbe:	290a      	cmp	r1, #10
   d5bc0:	d107      	bne.n	d5bd2 <_ZN12Adafruit_GFX5writeEh+0x86>
            cursor_x  = 0;
   d5bc2:	2300      	movs	r3, #0
   d5bc4:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5bc6:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize *
   d5bc8:	7e01      	ldrb	r1, [r0, #24]
   d5bca:	8a42      	ldrh	r2, [r0, #18]
   d5bcc:	fb01 2303 	mla	r3, r1, r3, r2
   d5bd0:	e7c9      	b.n	d5b66 <_ZN12Adafruit_GFX5writeEh+0x1a>
        } else if(c != '\r') {
   d5bd2:	290d      	cmp	r1, #13
   d5bd4:	d0c8      	beq.n	d5b68 <_ZN12Adafruit_GFX5writeEh+0x1c>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d5bd6:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d5bd8:	42a9      	cmp	r1, r5
   d5bda:	d3c5      	bcc.n	d5b68 <_ZN12Adafruit_GFX5writeEh+0x1c>
   d5bdc:	7a51      	ldrb	r1, [r2, #9]
   d5bde:	4299      	cmp	r1, r3
   d5be0:	d3c2      	bcc.n	d5b68 <_ZN12Adafruit_GFX5writeEh+0x1c>
                  &gfxFont->glyph))[c - first]);
   d5be2:	6851      	ldr	r1, [r2, #4]
   d5be4:	1b5d      	subs	r5, r3, r5
   d5be6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d5bea:	78ae      	ldrb	r6, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d5bec:	b31e      	cbz	r6, d5c36 <_ZN12Adafruit_GFX5writeEh+0xea>
   d5bee:	78e9      	ldrb	r1, [r5, #3]
   d5bf0:	b309      	cbz	r1, d5c36 <_ZN12Adafruit_GFX5writeEh+0xea>
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
   d5bf2:	7ea1      	ldrb	r1, [r4, #26]
   d5bf4:	7e00      	ldrb	r0, [r0, #24]
   d5bf6:	b191      	cbz	r1, d5c1e <_ZN12Adafruit_GFX5writeEh+0xd2>
   d5bf8:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d5bfc:	4431      	add	r1, r6
   d5bfe:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d5c02:	fb00 6101 	mla	r1, r0, r1, r6
   d5c06:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d5c0a:	42b1      	cmp	r1, r6
   d5c0c:	dd07      	ble.n	d5c1e <_ZN12Adafruit_GFX5writeEh+0xd2>
                        cursor_x  = 0;
   d5c0e:	2600      	movs	r6, #0
   d5c10:	8226      	strh	r6, [r4, #16]
   d5c12:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5c16:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize *
   d5c18:	fb02 1200 	mla	r2, r2, r0, r1
   d5c1c:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5c1e:	8ae2      	ldrh	r2, [r4, #22]
   d5c20:	9201      	str	r2, [sp, #4]
   d5c22:	8aa2      	ldrh	r2, [r4, #20]
   d5c24:	9002      	str	r0, [sp, #8]
   d5c26:	9200      	str	r2, [sp, #0]
   d5c28:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5c2c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5c30:	4620      	mov	r0, r4
   d5c32:	f7ff fe2f 	bl	d5894 <_ZN12Adafruit_GFX8drawCharEsshtth>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
   d5c36:	7929      	ldrb	r1, [r5, #4]
   d5c38:	7e23      	ldrb	r3, [r4, #24]
   d5c3a:	8a22      	ldrh	r2, [r4, #16]
   d5c3c:	fb01 2303 	mla	r3, r1, r3, r2
   d5c40:	e7bb      	b.n	d5bba <_ZN12Adafruit_GFX5writeEh+0x6e>

000d5c42 <_ZN12Adafruit_GFX9setCursorEss>:
    cursor_x = x;
   d5c42:	8201      	strh	r1, [r0, #16]
    cursor_y = y;
   d5c44:	8242      	strh	r2, [r0, #18]
}
   d5c46:	4770      	bx	lr

000d5c48 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize = (s > 0) ? s : 1;
   d5c48:	2901      	cmp	r1, #1
   d5c4a:	bf38      	it	cc
   d5c4c:	2101      	movcc	r1, #1
   d5c4e:	7601      	strb	r1, [r0, #24]
}
   d5c50:	4770      	bx	lr

000d5c52 <_ZN12Adafruit_GFX12setTextColorEt>:
    textcolor = textbgcolor = c;
   d5c52:	82c1      	strh	r1, [r0, #22]
   d5c54:	8281      	strh	r1, [r0, #20]
}
   d5c56:	4770      	bx	lr

000d5c58 <_ZN12Adafruit_GFX11setTextWrapEb>:
    wrap = w;
   d5c58:	7681      	strb	r1, [r0, #26]
}
   d5c5a:	4770      	bx	lr

000d5c5c <_ZNK12Adafruit_GFX11getRotationEv>:
}
   d5c5c:	7e40      	ldrb	r0, [r0, #25]
   d5c5e:	4770      	bx	lr

000d5c60 <_ZNK12Adafruit_GFX5widthEv>:
}
   d5c60:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d5c64:	4770      	bx	lr

000d5c66 <_ZNK12Adafruit_GFX6heightEv>:
}
   d5c66:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5c6a:	4770      	bx	lr

000d5c6c <_ZN15Adafruit_BME280C1Ev>:

/***************************************************************************
 PRIVATE FUNCTIONS
 ***************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d5c6c:	f04f 33ff 	mov.w	r3, #4294967295
   d5c70:	60c3      	str	r3, [r0, #12]
{ }
   d5c72:	4770      	bx	lr

000d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   d5c74:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5c76:	4c0b      	ldr	r4, [pc, #44]	; (d5ca4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5c78:	7821      	ldrb	r1, [r4, #0]
   d5c7a:	f3bf 8f5b 	dmb	ish
   d5c7e:	f011 0101 	ands.w	r1, r1, #1
   d5c82:	d10b      	bne.n	d5c9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5c84:	4620      	mov	r0, r4
   d5c86:	9101      	str	r1, [sp, #4]
   d5c88:	f7fe fa16 	bl	d40b8 <__cxa_guard_acquire>
   d5c8c:	9901      	ldr	r1, [sp, #4]
   d5c8e:	b128      	cbz	r0, d5c9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5c90:	4805      	ldr	r0, [pc, #20]	; (d5ca8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5c92:	f003 fb93 	bl	d93bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5c96:	4620      	mov	r0, r4
   d5c98:	f7fe fa13 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d5c9c:	4802      	ldr	r0, [pc, #8]	; (d5ca8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5c9e:	b002      	add	sp, #8
   d5ca0:	bd10      	pop	{r4, pc}
   d5ca2:	bf00      	nop
   d5ca4:	2003de24 	.word	0x2003de24
   d5ca8:	2003de28 	.word	0x2003de28

000d5cac <_ZN15Adafruit_BME2807spixferEh>:
/**************************************************************************/
/*!
    @brief  Encapsulate hardware and software SPI transfer into one function
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d5cb0:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d5cb4:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5cb6:	4605      	mov	r5, r0
   d5cb8:	460f      	mov	r7, r1
    if (_sck == -1)
   d5cba:	d106      	bne.n	d5cca <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5cbc:	f7ff ffda 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5cc0:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d5cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5cc6:	f003 bc1b 	b.w	d9500 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d5cca:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5ccc:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d5cce:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d5cd2:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d5cd6:	2100      	movs	r1, #0
   d5cd8:	b280      	uxth	r0, r0
   d5cda:	f005 fe10 	bl	db8fe <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d5cde:	f995 000d 	ldrsb.w	r0, [r5, #13]
   d5ce2:	fa08 f106 	lsl.w	r1, r8, r6
   d5ce6:	4039      	ands	r1, r7
   d5ce8:	b280      	uxth	r0, r0
   d5cea:	f005 fe08 	bl	db8fe <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5cee:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d5cf2:	2101      	movs	r1, #1
   d5cf4:	b280      	uxth	r0, r0
   d5cf6:	f005 fe02 	bl	db8fe <digitalWrite>
        if (digitalRead(_miso))
   d5cfa:	f995 000e 	ldrsb.w	r0, [r5, #14]
        reply <<= 1;
   d5cfe:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5d00:	b280      	uxth	r0, r0
        reply <<= 1;
   d5d02:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5d04:	f005 fe14 	bl	db930 <digitalRead>
   d5d08:	b108      	cbz	r0, d5d0e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d5d0a:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d5d0e:	3e01      	subs	r6, #1
   d5d10:	d2df      	bcs.n	d5cd2 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d5d12:	4620      	mov	r0, r4
   d5d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d5d18:	b508      	push	{r3, lr}
        instance().endTransaction();
   d5d1a:	f7ff ffab 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d5d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d5d22:	f003 bb66 	b.w	d93f2 <_ZN8SPIClass14endTransactionEv>

000d5d26 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d5d26:	b507      	push	{r0, r1, r2, lr}
   d5d28:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d5d2a:	f7ff ffa3 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5d2e:	9901      	ldr	r1, [sp, #4]
    }
   d5d30:	b003      	add	sp, #12
   d5d32:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d5d36:	f003 bb75 	b.w	d9424 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5d3c <_ZN15Adafruit_BME2806read24Eh>:
/*!
    @brief  Reads a 24 bit value over I2C
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d5d3c:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d5d3e:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d5d42:	3301      	adds	r3, #1
{
   d5d44:	b085      	sub	sp, #20
   d5d46:	4604      	mov	r4, r0
   d5d48:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5d4a:	d12a      	bne.n	d5da2 <_ZN15Adafruit_BME2806read24Eh+0x66>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d5d4c:	f005 fe4a 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d5d50:	7821      	ldrb	r1, [r4, #0]
   d5d52:	f005 fcaf 	bl	db6b4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d5d56:	f005 fe45 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d5d5a:	6803      	ldr	r3, [r0, #0]
   d5d5c:	4629      	mov	r1, r5
   d5d5e:	689b      	ldr	r3, [r3, #8]
   d5d60:	4798      	blx	r3
        Wire.endTransmission();
   d5d62:	f005 fe3f 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d5d66:	f005 fcb0 	bl	db6ca <_ZN7TwoWire15endTransmissionEv>
        Wire.requestFrom((uint8_t)_i2caddr, (byte)3);
   d5d6a:	f005 fe3b 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d5d6e:	7821      	ldrb	r1, [r4, #0]
   d5d70:	2203      	movs	r2, #3
   d5d72:	f005 fc9c 	bl	db6ae <_ZN7TwoWire11requestFromEhj>

        value = Wire.read();
   d5d76:	f005 fe35 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d5d7a:	6803      	ldr	r3, [r0, #0]
   d5d7c:	695b      	ldr	r3, [r3, #20]
   d5d7e:	4798      	blx	r3
        value <<= 8;
   d5d80:	0205      	lsls	r5, r0, #8
        value |= Wire.read();
   d5d82:	f005 fe2f 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d5d86:	6803      	ldr	r3, [r0, #0]
   d5d88:	695b      	ldr	r3, [r3, #20]
   d5d8a:	4798      	blx	r3
   d5d8c:	4328      	orrs	r0, r5
        value <<= 8;
   d5d8e:	0205      	lsls	r5, r0, #8
        value |= Wire.read();
   d5d90:	f005 fe28 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d5d94:	6803      	ldr	r3, [r0, #0]
   d5d96:	695b      	ldr	r3, [r3, #20]
   d5d98:	4798      	blx	r3
   d5d9a:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d5d9c:	4628      	mov	r0, r5
   d5d9e:	b005      	add	sp, #20
   d5da0:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5da2:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d5da6:	3301      	adds	r3, #1
   d5da8:	d10c      	bne.n	d5dc4 <_ZN15Adafruit_BME2806read24Eh+0x88>
      dataMode_{dataMode}
   d5daa:	4b1a      	ldr	r3, [pc, #104]	; (d5e14 <_ZN15Adafruit_BME2806read24Eh+0xd8>)
   d5dac:	9300      	str	r3, [sp, #0]
   d5dae:	2300      	movs	r3, #0
   d5db0:	f88d 3004 	strb.w	r3, [sp, #4]
   d5db4:	4b18      	ldr	r3, [pc, #96]	; (d5e18 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
   d5db6:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5db8:	4668      	mov	r0, sp
   d5dba:	2301      	movs	r3, #1
   d5dbc:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5dc0:	f7ff ffb1 	bl	d5d26 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5dc4:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5dc8:	2100      	movs	r1, #0
   d5dca:	b280      	uxth	r0, r0
   d5dcc:	f005 fd97 	bl	db8fe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5dd0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5dd4:	4620      	mov	r0, r4
   d5dd6:	f7ff ff69 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5dda:	2100      	movs	r1, #0
   d5ddc:	4620      	mov	r0, r4
   d5dde:	f7ff ff65 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5de2:	2100      	movs	r1, #0
        value <<= 8;
   d5de4:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5de6:	4620      	mov	r0, r4
   d5de8:	f7ff ff60 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
   d5dec:	4328      	orrs	r0, r5
        value <<= 8;
   d5dee:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5df0:	2100      	movs	r1, #0
   d5df2:	4620      	mov	r0, r4
   d5df4:	f7ff ff5a 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
   d5df8:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5dfa:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5dfe:	2101      	movs	r1, #1
   d5e00:	b280      	uxth	r0, r0
   d5e02:	f005 fd7c 	bl	db8fe <digitalWrite>
        if (_sck == -1)
   d5e06:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d5e0a:	3301      	adds	r3, #1
   d5e0c:	d1c6      	bne.n	d5d9c <_ZN15Adafruit_BME2806read24Eh+0x60>
            SPI.endTransaction(); // release the SPI bus
   d5e0e:	f7ff ff83 	bl	d5d18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5e12:	e7c3      	b.n	d5d9c <_ZN15Adafruit_BME2806read24Eh+0x60>
   d5e14:	000de5d4 	.word	0x000de5d4
   d5e18:	0007a120 	.word	0x0007a120

000d5e1c <_ZN15Adafruit_BME28015readTemperatureEv>:
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d5e1c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5e1e:	21fa      	movs	r1, #250	; 0xfa
{
   d5e20:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5e22:	f7ff ff8b 	bl	d5d3c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5e26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d5e2a:	d01e      	beq.n	d5e6a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5e2c:	8a21      	ldrh	r1, [r4, #16]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d5e2e:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5e70 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5e32:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5e34:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5e38:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5e3c:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5e40:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5e42:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5e44:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5e48:	1312      	asrs	r2, r2, #12
   d5e4a:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5e4c:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5e4e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5e52:	60a3      	str	r3, [r4, #8]
    float T = (t_fine * 5 + 128) >> 8;
   d5e54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5e58:	3380      	adds	r3, #128	; 0x80
   d5e5a:	121b      	asrs	r3, r3, #8
   d5e5c:	ee07 3a90 	vmov	s15, r3
   d5e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5e64:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5e68:	bd10      	pop	{r4, pc}
        return NAN;
   d5e6a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5e74 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d5e6e:	e7fb      	b.n	d5e68 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d5e70:	42c80000 	.word	0x42c80000
   d5e74:	7fc00000 	.word	0x7fc00000

000d5e78 <_ZN15Adafruit_BME28012readPressureEv>:
/**************************************************************************/
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d5e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5e7c:	4604      	mov	r4, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d5e7e:	f7ff ffcd 	bl	d5e1c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5e82:	21f7      	movs	r1, #247	; 0xf7
   d5e84:	4620      	mov	r0, r4
   d5e86:	f7ff ff59 	bl	d5d3c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5e8a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5e8e:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5e90:	f000 80bf 	beq.w	d6012 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d5e94:	68a0      	ldr	r0, [r4, #8]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5e96:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
    var1 = ((int64_t)t_fine) - 128000;
   d5e9a:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d5e9e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d5ea2:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5ea6:	fba3 8903 	umull	r8, r9, r3, r3
   d5eaa:	fb03 f102 	mul.w	r1, r3, r2
   d5eae:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5eb2:	17f7      	asrs	r7, r6, #31
   d5eb4:	fb06 f102 	mul.w	r1, r6, r2
   d5eb8:	fb03 1107 	mla	r1, r3, r7, r1
   d5ebc:	fba6 6703 	umull	r6, r7, r6, r3
   d5ec0:	440f      	add	r7, r1
   d5ec2:	0339      	lsls	r1, r7, #12
   d5ec4:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5ec8:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5eca:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
   d5ece:	17f7      	asrs	r7, r6, #31
   d5ed0:	fb06 fc09 	mul.w	ip, r6, r9
   d5ed4:	fb08 cc07 	mla	ip, r8, r7, ip
   d5ed8:	fba6 6708 	umull	r6, r7, r6, r8
   d5edc:	4467      	add	r7, ip
   d5ede:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d5ee2:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5ee6:	8ae6      	ldrh	r6, [r4, #22]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5ee8:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5eec:	eb1c 0000 	adds.w	r0, ip, r0
   d5ef0:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5ef4:	3000      	adds	r0, #0
   d5ef6:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5efa:	fba0 0106 	umull	r0, r1, r0, r6
   d5efe:	fb06 110e 	mla	r1, r6, lr, r1
   d5f02:	104e      	asrs	r6, r1, #1
   d5f04:	17cf      	asrs	r7, r1, #31

    if (var1 == 0) {
   d5f06:	ea56 0107 	orrs.w	r1, r6, r7
   d5f0a:	f000 8085 	beq.w	d6018 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5f0e:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
   d5f12:	fb00 fc09 	mul.w	ip, r0, r9
   d5f16:	17c1      	asrs	r1, r0, #31
   d5f18:	fb08 cc01 	mla	ip, r8, r1, ip
   d5f1c:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f20:	f9b4 801e 	ldrsh.w	r8, [r4, #30]
   d5f24:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5f28:	fb08 f202 	mul.w	r2, r8, r2
   d5f2c:	fb03 2209 	mla	r2, r3, r9, r2
   d5f30:	fba8 8903 	umull	r8, r9, r8, r3
   d5f34:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5f36:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f38:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5f3c:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5f40:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f42:	1812      	adds	r2, r2, r0
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
   d5f44:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f48:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5f4c:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f50:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5f54:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d5f56:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5f58:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d5f5a:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d5f5e:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5f62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d5f66:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d5f6a:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d5f6e:	1ac0      	subs	r0, r0, r3
   d5f70:	f640 4335 	movw	r3, #3125	; 0xc35
   d5f74:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d5f78:	fba0 0103 	umull	r0, r1, r0, r3
   d5f7c:	fb03 110e 	mla	r1, r3, lr, r1
   d5f80:	4632      	mov	r2, r6
   d5f82:	463b      	mov	r3, r7
   d5f84:	f007 fe4c 	bl	ddc20 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5f88:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
   d5f8c:	134d      	asrs	r5, r1, #13
   d5f8e:	0b46      	lsrs	r6, r0, #13
   d5f90:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d5f94:	fb02 f705 	mul.w	r7, r2, r5
   d5f98:	17d3      	asrs	r3, r2, #31
   d5f9a:	fb06 7703 	mla	r7, r6, r3, r7
   d5f9e:	fba2 2306 	umull	r2, r3, r2, r6
   d5fa2:	443b      	add	r3, r7
   d5fa4:	4355      	muls	r5, r2
   d5fa6:	fb06 5503 	mla	r5, r6, r3, r5
   d5faa:	fba2 2306 	umull	r2, r3, r2, r6
   d5fae:	442b      	add	r3, r5
   d5fb0:	0e55      	lsrs	r5, r2, #25
   d5fb2:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5fb6:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5fba:	f9b4 4022 	ldrsh.w	r4, [r4, #34]	; 0x22
   d5fbe:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5fc0:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5fc4:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5fc8:	17d3      	asrs	r3, r2, #31
   d5fca:	4351      	muls	r1, r2
   d5fcc:	fb00 1103 	mla	r1, r0, r3, r1
   d5fd0:	fba2 2300 	umull	r2, r3, r2, r0
   d5fd4:	440b      	add	r3, r1
   d5fd6:	0cd1      	lsrs	r1, r2, #19
   d5fd8:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5fdc:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5fde:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5fe2:	eb46 0300 	adc.w	r3, r6, r0
   d5fe6:	0a2a      	lsrs	r2, r5, #8
   d5fe8:	17e5      	asrs	r5, r4, #31
   d5fea:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5fee:	1219      	asrs	r1, r3, #8
   d5ff0:	0120      	lsls	r0, r4, #4
   d5ff2:	012b      	lsls	r3, r5, #4
   d5ff4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5ff8:	1880      	adds	r0, r0, r2
   d5ffa:	eb43 0101 	adc.w	r1, r3, r1
   d5ffe:	f007 fdd1 	bl	ddba4 <__aeabi_l2f>
   d6002:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6020 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d6006:	ee07 0a90 	vmov	s15, r0
   d600a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d600e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d6012:	ed9f 0a04 	vldr	s0, [pc, #16]	; d6024 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d6016:	e7fa      	b.n	d600e <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d6018:	ed9f 0a03 	vldr	s0, [pc, #12]	; d6028 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d601c:	e7f7      	b.n	d600e <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d601e:	bf00      	nop
   d6020:	3b800000 	.word	0x3b800000
   d6024:	7fc00000 	.word	0x7fc00000
	...

000d6030 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @param  atmospheric   Atmospheric pressure in hPa
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d6030:	b508      	push	{r3, lr}
   d6032:	ed2d 8b02 	vpush	{d8}
   d6036:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d603a:	f7ff ff1d 	bl	d5e78 <_ZN15Adafruit_BME28012readPressureEv>
   d603e:	ed9f 7a16 	vldr	s14, [pc, #88]	; d6098 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d6042:	eec0 7a07 	vdiv.f32	s15, s0, s14
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d6046:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d604a:	ee17 0a90 	vmov	r0, s15
   d604e:	f007 f939 	bl	dd2c4 <__aeabi_f2d>
   d6052:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d6088 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d6056:	ec41 0b10 	vmov	d0, r0, r1
   d605a:	f005 fe31 	bl	dbcc0 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d605e:	490f      	ldr	r1, [pc, #60]	; (d609c <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d6060:	ec53 2b10 	vmov	r2, r3, d0
   d6064:	2000      	movs	r0, #0
   d6066:	f006 ffcd 	bl	dd004 <__aeabi_dsub>
   d606a:	a309      	add	r3, pc, #36	; (adr r3, d6090 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d606c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6070:	f007 f980 	bl	dd374 <__aeabi_dmul>
   d6074:	f007 fc76 	bl	dd964 <__aeabi_d2f>
}
   d6078:	ecbd 8b02 	vpop	{d8}
   d607c:	ee00 0a10 	vmov	s0, r0
   d6080:	bd08      	pop	{r3, pc}
   d6082:	bf00      	nop
   d6084:	f3af 8000 	nop.w
   d6088:	1a36e2eb 	.word	0x1a36e2eb
   d608c:	3fc85bc0 	.word	0x3fc85bc0
   d6090:	00000000 	.word	0x00000000
   d6094:	40e5a540 	.word	0x40e5a540
   d6098:	42c80000 	.word	0x42c80000
   d609c:	3ff00000 	.word	0x3ff00000

000d60a0 <_ZN15Adafruit_BME2806read16Eh>:
{
   d60a0:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d60a2:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d60a6:	3301      	adds	r3, #1
{
   d60a8:	b085      	sub	sp, #20
   d60aa:	4604      	mov	r4, r0
   d60ac:	460d      	mov	r5, r1
    if (_cs == -1) {
   d60ae:	d125      	bne.n	d60fc <_ZN15Adafruit_BME2806read16Eh+0x5c>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d60b0:	f005 fc98 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d60b4:	7821      	ldrb	r1, [r4, #0]
   d60b6:	f005 fafd 	bl	db6b4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d60ba:	f005 fc93 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d60be:	6803      	ldr	r3, [r0, #0]
   d60c0:	4629      	mov	r1, r5
   d60c2:	689b      	ldr	r3, [r3, #8]
   d60c4:	4798      	blx	r3
        Wire.endTransmission();
   d60c6:	f005 fc8d 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d60ca:	f005 fafe 	bl	db6ca <_ZN7TwoWire15endTransmissionEv>
        Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
   d60ce:	f005 fc89 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d60d2:	7821      	ldrb	r1, [r4, #0]
   d60d4:	2202      	movs	r2, #2
   d60d6:	f005 faea 	bl	db6ae <_ZN7TwoWire11requestFromEhj>
        value = (Wire.read() << 8) | Wire.read();
   d60da:	f005 fc83 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d60de:	6803      	ldr	r3, [r0, #0]
   d60e0:	695b      	ldr	r3, [r3, #20]
   d60e2:	4798      	blx	r3
   d60e4:	4605      	mov	r5, r0
   d60e6:	f005 fc7d 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d60ea:	6803      	ldr	r3, [r0, #0]
   d60ec:	695b      	ldr	r3, [r3, #20]
   d60ee:	4798      	blx	r3
   d60f0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d60f4:	b285      	uxth	r5, r0
}
   d60f6:	4628      	mov	r0, r5
   d60f8:	b005      	add	sp, #20
   d60fa:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d60fc:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d6100:	3301      	adds	r3, #1
   d6102:	d10c      	bne.n	d611e <_ZN15Adafruit_BME2806read16Eh+0x7e>
   d6104:	4b18      	ldr	r3, [pc, #96]	; (d6168 <_ZN15Adafruit_BME2806read16Eh+0xc8>)
   d6106:	9300      	str	r3, [sp, #0]
   d6108:	2300      	movs	r3, #0
   d610a:	f88d 3004 	strb.w	r3, [sp, #4]
   d610e:	4b17      	ldr	r3, [pc, #92]	; (d616c <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d6110:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d6112:	4668      	mov	r0, sp
   d6114:	2301      	movs	r3, #1
   d6116:	f8ad 300c 	strh.w	r3, [sp, #12]
   d611a:	f7ff fe04 	bl	d5d26 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d611e:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6122:	2100      	movs	r1, #0
   d6124:	b280      	uxth	r0, r0
   d6126:	f005 fbea 	bl	db8fe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d612a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d612e:	4620      	mov	r0, r4
   d6130:	f7ff fdbc 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d6134:	2100      	movs	r1, #0
   d6136:	4620      	mov	r0, r4
   d6138:	f7ff fdb8 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
   d613c:	2100      	movs	r1, #0
   d613e:	4605      	mov	r5, r0
   d6140:	4620      	mov	r0, r4
   d6142:	f7ff fdb3 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
   d6146:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d614a:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d614c:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6150:	2101      	movs	r1, #1
   d6152:	b280      	uxth	r0, r0
   d6154:	f005 fbd3 	bl	db8fe <digitalWrite>
        if (_sck == -1)
   d6158:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d615c:	3301      	adds	r3, #1
   d615e:	d1ca      	bne.n	d60f6 <_ZN15Adafruit_BME2806read16Eh+0x56>
            SPI.endTransaction(); // release the SPI bus
   d6160:	f7ff fdda 	bl	d5d18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d6164:	e7c7      	b.n	d60f6 <_ZN15Adafruit_BME2806read16Eh+0x56>
   d6166:	bf00      	nop
   d6168:	000de5d4 	.word	0x000de5d4
   d616c:	0007a120 	.word	0x0007a120

000d6170 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d6170:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d6172:	f7ff ff95 	bl	d60a0 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d6176:	ba40      	rev16	r0, r0
}
   d6178:	b280      	uxth	r0, r0
   d617a:	bd08      	pop	{r3, pc}

000d617c <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d617c:	b538      	push	{r3, r4, r5, lr}
   d617e:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d6180:	f7ff fe4c 	bl	d5e1c <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d6184:	21fd      	movs	r1, #253	; 0xfd
   d6186:	4620      	mov	r0, r4
   d6188:	f7ff ff8a 	bl	d60a0 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d618c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d6190:	d038      	beq.n	d6204 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6192:	f9b4 502e 	ldrsh.w	r5, [r4, #46]	; 0x2e
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d6196:	68a2      	ldr	r2, [r4, #8]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d6198:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d619c:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d619e:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d61a2:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d61a6:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d61aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d61ae:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d61b0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d61b4:	4353      	muls	r3, r2
   d61b6:	12db      	asrs	r3, r3, #11
   d61b8:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d61bc:	f994 3032 	ldrsb.w	r3, [r4, #50]	; 0x32
   d61c0:	4353      	muls	r3, r2
   d61c2:	129b      	asrs	r3, r3, #10
   d61c4:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d61c6:	129b      	asrs	r3, r3, #10
   d61c8:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d61cc:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   d61d0:	4353      	muls	r3, r2
   d61d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d61d6:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d61d8:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d61da:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d61dc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d61e0:	4352      	muls	r2, r2
   d61e2:	11d2      	asrs	r2, r2, #7
   d61e4:	434a      	muls	r2, r1
   d61e6:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d61ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d61ee:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d61f2:	bfa8      	it	ge
   d61f4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d61f8:	131b      	asrs	r3, r3, #12
   d61fa:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d61fe:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d6202:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d6204:	ed9f 0a01 	vldr	s0, [pc, #4]	; d620c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d6208:	e7fb      	b.n	d6202 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d620a:	bf00      	nop
   d620c:	7fc00000 	.word	0x7fc00000

000d6210 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d6210:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d6212:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d6216:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d6218:	b085      	sub	sp, #20
   d621a:	4604      	mov	r4, r0
   d621c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d621e:	d11d      	bne.n	d625c <_ZN15Adafruit_BME2805read8Eh+0x4c>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d6220:	f005 fbe0 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d6224:	7821      	ldrb	r1, [r4, #0]
   d6226:	f005 fa45 	bl	db6b4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d622a:	f005 fbdb 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d622e:	6803      	ldr	r3, [r0, #0]
   d6230:	4629      	mov	r1, r5
   d6232:	689b      	ldr	r3, [r3, #8]
   d6234:	4798      	blx	r3
        Wire.endTransmission();
   d6236:	f005 fbd5 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d623a:	f005 fa46 	bl	db6ca <_ZN7TwoWire15endTransmissionEv>
        Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
   d623e:	f005 fbd1 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d6242:	7821      	ldrb	r1, [r4, #0]
   d6244:	2201      	movs	r2, #1
   d6246:	f005 fa32 	bl	db6ae <_ZN7TwoWire11requestFromEhj>
        value = Wire.read();
   d624a:	f005 fbcb 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d624e:	6803      	ldr	r3, [r0, #0]
   d6250:	695b      	ldr	r3, [r3, #20]
   d6252:	4798      	blx	r3
   d6254:	b2c5      	uxtb	r5, r0
}
   d6256:	4628      	mov	r0, r5
   d6258:	b005      	add	sp, #20
   d625a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d625c:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d6260:	3301      	adds	r3, #1
   d6262:	d10c      	bne.n	d627e <_ZN15Adafruit_BME2805read8Eh+0x6e>
   d6264:	4b14      	ldr	r3, [pc, #80]	; (d62b8 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d6266:	9300      	str	r3, [sp, #0]
   d6268:	2300      	movs	r3, #0
   d626a:	f88d 3004 	strb.w	r3, [sp, #4]
   d626e:	4b13      	ldr	r3, [pc, #76]	; (d62bc <_ZN15Adafruit_BME2805read8Eh+0xac>)
   d6270:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d6272:	4668      	mov	r0, sp
   d6274:	2301      	movs	r3, #1
   d6276:	f8ad 300c 	strh.w	r3, [sp, #12]
   d627a:	f7ff fd54 	bl	d5d26 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d627e:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6282:	2100      	movs	r1, #0
   d6284:	b280      	uxth	r0, r0
   d6286:	f005 fb3a 	bl	db8fe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d628a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d628e:	4620      	mov	r0, r4
   d6290:	f7ff fd0c 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d6294:	2100      	movs	r1, #0
   d6296:	4620      	mov	r0, r4
   d6298:	f7ff fd08 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
   d629c:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d629e:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d62a2:	2101      	movs	r1, #1
   d62a4:	b280      	uxth	r0, r0
   d62a6:	f005 fb2a 	bl	db8fe <digitalWrite>
        if (_sck == -1)
   d62aa:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d62ae:	3301      	adds	r3, #1
   d62b0:	d1d1      	bne.n	d6256 <_ZN15Adafruit_BME2805read8Eh+0x46>
            SPI.endTransaction(); // release the SPI bus
   d62b2:	f7ff fd31 	bl	d5d18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d62b6:	e7ce      	b.n	d6256 <_ZN15Adafruit_BME2805read8Eh+0x46>
   d62b8:	000de5d4 	.word	0x000de5d4
   d62bc:	0007a120 	.word	0x0007a120

000d62c0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d62c0:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d62c2:	21f3      	movs	r1, #243	; 0xf3
   d62c4:	f7ff ffa4 	bl	d6210 <_ZN15Adafruit_BME2805read8Eh>
}
   d62c8:	f000 0001 	and.w	r0, r0, #1
   d62cc:	bd08      	pop	{r3, pc}

000d62ce <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d62ce:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d62d0:	2188      	movs	r1, #136	; 0x88
{
   d62d2:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d62d4:	f7ff ff4c 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d62d8:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d62da:	8220      	strh	r0, [r4, #16]
    return (int16_t)read16_LE(reg);
   d62dc:	4620      	mov	r0, r4
   d62de:	f7ff ff47 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
   d62e2:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d62e4:	8260      	strh	r0, [r4, #18]
    return (int16_t)read16_LE(reg);
   d62e6:	4620      	mov	r0, r4
   d62e8:	f7ff ff42 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d62ec:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d62ee:	82a0      	strh	r0, [r4, #20]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d62f0:	4620      	mov	r0, r4
   d62f2:	f7ff ff3d 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d62f6:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d62f8:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d62fa:	4620      	mov	r0, r4
   d62fc:	f7ff ff38 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
   d6300:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d6302:	8320      	strh	r0, [r4, #24]
    return (int16_t)read16_LE(reg);
   d6304:	4620      	mov	r0, r4
   d6306:	f7ff ff33 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
   d630a:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d630c:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d630e:	4620      	mov	r0, r4
   d6310:	f7ff ff2e 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
   d6314:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d6316:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d6318:	4620      	mov	r0, r4
   d631a:	f7ff ff29 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
   d631e:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d6320:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d6322:	4620      	mov	r0, r4
   d6324:	f7ff ff24 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
   d6328:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d632a:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d632c:	4620      	mov	r0, r4
   d632e:	f7ff ff1f 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
   d6332:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d6334:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d6336:	4620      	mov	r0, r4
   d6338:	f7ff ff1a 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
   d633c:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d633e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d6340:	4620      	mov	r0, r4
   d6342:	f7ff ff15 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d6346:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d6348:	84e0      	strh	r0, [r4, #38]	; 0x26
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d634a:	4620      	mov	r0, r4
   d634c:	f7ff ff60 	bl	d6210 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d6350:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d6352:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d6356:	4620      	mov	r0, r4
   d6358:	f7ff ff0a 	bl	d6170 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d635c:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d635e:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6360:	4620      	mov	r0, r4
   d6362:	f7ff ff55 	bl	d6210 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d6366:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6368:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d636c:	4620      	mov	r0, r4
   d636e:	f7ff ff4f 	bl	d6210 <_ZN15Adafruit_BME2805read8Eh>
   d6372:	21e5      	movs	r1, #229	; 0xe5
   d6374:	4605      	mov	r5, r0
   d6376:	4620      	mov	r0, r4
   d6378:	f7ff ff4a 	bl	d6210 <_ZN15Adafruit_BME2805read8Eh>
   d637c:	f000 030f 	and.w	r3, r0, #15
   d6380:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d6384:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d6386:	21e6      	movs	r1, #230	; 0xe6
   d6388:	4620      	mov	r0, r4
   d638a:	f7ff ff41 	bl	d6210 <_ZN15Adafruit_BME2805read8Eh>
   d638e:	21e5      	movs	r1, #229	; 0xe5
   d6390:	4605      	mov	r5, r0
   d6392:	4620      	mov	r0, r4
   d6394:	f7ff ff3c 	bl	d6210 <_ZN15Adafruit_BME2805read8Eh>
   d6398:	1103      	asrs	r3, r0, #4
   d639a:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d639e:	8620      	strh	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d63a0:	21e7      	movs	r1, #231	; 0xe7
   d63a2:	4620      	mov	r0, r4
   d63a4:	f7ff ff34 	bl	d6210 <_ZN15Adafruit_BME2805read8Eh>
   d63a8:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
   d63ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d63b0 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d63b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d63b2:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d63b6:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d63b8:	4604      	mov	r4, r0
   d63ba:	460e      	mov	r6, r1
   d63bc:	4615      	mov	r5, r2
    if (_cs == -1) {
   d63be:	d116      	bne.n	d63ee <_ZN15Adafruit_BME2806write8Ehh+0x3e>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d63c0:	f005 fb10 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d63c4:	7821      	ldrb	r1, [r4, #0]
   d63c6:	f005 f975 	bl	db6b4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d63ca:	f005 fb0b 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d63ce:	6803      	ldr	r3, [r0, #0]
   d63d0:	4631      	mov	r1, r6
   d63d2:	689b      	ldr	r3, [r3, #8]
   d63d4:	4798      	blx	r3
        Wire.write((uint8_t)value);
   d63d6:	f005 fb05 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d63da:	6803      	ldr	r3, [r0, #0]
   d63dc:	4629      	mov	r1, r5
   d63de:	689b      	ldr	r3, [r3, #8]
   d63e0:	4798      	blx	r3
        Wire.endTransmission();
   d63e2:	f005 faff 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d63e6:	f005 f970 	bl	db6ca <_ZN7TwoWire15endTransmissionEv>
}
   d63ea:	b004      	add	sp, #16
   d63ec:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d63ee:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d63f2:	3301      	adds	r3, #1
   d63f4:	d10c      	bne.n	d6410 <_ZN15Adafruit_BME2806write8Ehh+0x60>
   d63f6:	4b14      	ldr	r3, [pc, #80]	; (d6448 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d63f8:	9300      	str	r3, [sp, #0]
   d63fa:	2300      	movs	r3, #0
   d63fc:	f88d 3004 	strb.w	r3, [sp, #4]
   d6400:	4b12      	ldr	r3, [pc, #72]	; (d644c <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   d6402:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d6404:	4668      	mov	r0, sp
   d6406:	2301      	movs	r3, #1
   d6408:	f8ad 300c 	strh.w	r3, [sp, #12]
   d640c:	f7ff fc8b 	bl	d5d26 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d6410:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6414:	2100      	movs	r1, #0
   d6416:	b280      	uxth	r0, r0
   d6418:	f005 fa71 	bl	db8fe <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d641c:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d6420:	4620      	mov	r0, r4
   d6422:	f7ff fc43 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d6426:	4629      	mov	r1, r5
   d6428:	4620      	mov	r0, r4
   d642a:	f7ff fc3f 	bl	d5cac <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d642e:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6432:	2101      	movs	r1, #1
   d6434:	b280      	uxth	r0, r0
   d6436:	f005 fa62 	bl	db8fe <digitalWrite>
    if (_sck == -1)
   d643a:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d643e:	3301      	adds	r3, #1
   d6440:	d1d3      	bne.n	d63ea <_ZN15Adafruit_BME2806write8Ehh+0x3a>
        SPI.endTransaction(); // release the SPI bus
   d6442:	f7ff fc69 	bl	d5d18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d6446:	e7d0      	b.n	d63ea <_ZN15Adafruit_BME2806write8Ehh+0x3a>
   d6448:	000de5d4 	.word	0x000de5d4
   d644c:	0007a120 	.word	0x0007a120

000d6450 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d6450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d6452:	00db      	lsls	r3, r3, #3
   d6454:	f002 0207 	and.w	r2, r2, #7
   d6458:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d645c:	4313      	orrs	r3, r2
   d645e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d6462:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d6466:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    _humReg.osrs_h    = humSampling;
   d646a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		 standby_duration  duration) {
   d646e:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d6472:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d6476:	f366 1347 	bfi	r3, r6, #5, #3
   d647a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _configReg.t_sb   = duration;
   d647e:	00ed      	lsls	r5, r5, #3
   d6480:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
   d6484:	f007 0707 	and.w	r7, r7, #7
   d6488:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d648c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d6490:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d6492:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d6494:	431d      	orrs	r5, r3
   d6496:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d649a:	f006 0207 	and.w	r2, r6, #7
   d649e:	21f2      	movs	r1, #242	; 0xf2
   d64a0:	f7ff ff86 	bl	d63b0 <_ZN15Adafruit_BME2806write8Ehh>
            // unused - don't set
            unsigned int none : 1;
            unsigned int spi3w_en : 1;

            unsigned int get() {
                return (t_sb << 5) | (filter << 3) | spi3w_en;
   d64a4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
   d64a8:	f002 0107 	and.w	r1, r2, #7
   d64ac:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d64b0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d64b4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d64b8:	4620      	mov	r0, r4
   d64ba:	21f5      	movs	r1, #245	; 0xf5
   d64bc:	f7ff ff78 	bl	d63b0 <_ZN15Adafruit_BME2806write8Ehh>
            // 01 or 10 = forced
            // 11       = normal
            unsigned int mode : 2;

            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 3) | mode;
   d64c0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d64c4:	f002 0107 	and.w	r1, r2, #7
   d64c8:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d64cc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d64d0:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d64d4:	4620      	mov	r0, r4
   d64d6:	21f4      	movs	r1, #244	; 0xf4
}
   d64d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d64dc:	f7ff bf68 	b.w	d63b0 <_ZN15Adafruit_BME2806write8Ehh>

000d64e0 <_ZN15Adafruit_BME2805beginEh>:
{
   d64e0:	b530      	push	{r4, r5, lr}
   d64e2:	4604      	mov	r4, r0
    _i2caddr = addr;
   d64e4:	7001      	strb	r1, [r0, #0]
    if (_cs == -1) {
   d64e6:	f990 000c 	ldrsb.w	r0, [r0, #12]
   d64ea:	1c42      	adds	r2, r0, #1
{
   d64ec:	b085      	sub	sp, #20
    if (_cs == -1) {
   d64ee:	d119      	bne.n	d6524 <_ZN15Adafruit_BME2805beginEh+0x44>
        Wire.begin();
   d64f0:	f005 fa78 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d64f4:	f005 f8ac 	bl	db650 <_ZN7TwoWire5beginEv>
    if (read8(BME280_REGISTER_CHIPID) != 0x60)
   d64f8:	21d0      	movs	r1, #208	; 0xd0
   d64fa:	4620      	mov	r0, r4
   d64fc:	f7ff fe88 	bl	d6210 <_ZN15Adafruit_BME2805read8Eh>
   d6500:	2860      	cmp	r0, #96	; 0x60
   d6502:	d142      	bne.n	d658a <_ZN15Adafruit_BME2805beginEh+0xaa>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d6504:	4620      	mov	r0, r4
   d6506:	22b6      	movs	r2, #182	; 0xb6
   d6508:	21e0      	movs	r1, #224	; 0xe0
   d650a:	f7ff ff51 	bl	d63b0 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d650e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6512:	f004 fcd1 	bl	daeb8 <delay>
    while (isReadingCalibration())
   d6516:	4620      	mov	r0, r4
   d6518:	f7ff fed2 	bl	d62c0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d651c:	4605      	mov	r5, r0
   d651e:	b328      	cbz	r0, d656c <_ZN15Adafruit_BME2805beginEh+0x8c>
          delay(100);
   d6520:	2064      	movs	r0, #100	; 0x64
   d6522:	e7f6      	b.n	d6512 <_ZN15Adafruit_BME2805beginEh+0x32>
        digitalWrite(_cs, HIGH);
   d6524:	2101      	movs	r1, #1
   d6526:	b280      	uxth	r0, r0
   d6528:	f005 f9e9 	bl	db8fe <digitalWrite>
        pinMode(_cs, OUTPUT);
   d652c:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6530:	2101      	movs	r1, #1
   d6532:	b280      	uxth	r0, r0
   d6534:	f005 f9d2 	bl	db8dc <pinMode>
        if (_sck == -1) {
   d6538:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d653c:	1c43      	adds	r3, r0, #1
   d653e:	d104      	bne.n	d654a <_ZN15Adafruit_BME2805beginEh+0x6a>
        instance().begin();
   d6540:	f7ff fb98 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d6544:	f002 ff44 	bl	d93d0 <_ZN8SPIClass5beginEv>
    }
   d6548:	e7d6      	b.n	d64f8 <_ZN15Adafruit_BME2805beginEh+0x18>
            pinMode(_sck, OUTPUT);
   d654a:	2101      	movs	r1, #1
   d654c:	b280      	uxth	r0, r0
   d654e:	f005 f9c5 	bl	db8dc <pinMode>
            pinMode(_mosi, OUTPUT);
   d6552:	f994 000d 	ldrsb.w	r0, [r4, #13]
   d6556:	2101      	movs	r1, #1
   d6558:	b280      	uxth	r0, r0
   d655a:	f005 f9bf 	bl	db8dc <pinMode>
            pinMode(_miso, INPUT);
   d655e:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6562:	2100      	movs	r1, #0
   d6564:	b280      	uxth	r0, r0
   d6566:	f005 f9b9 	bl	db8dc <pinMode>
   d656a:	e7c5      	b.n	d64f8 <_ZN15Adafruit_BME2805beginEh+0x18>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d656c:	4620      	mov	r0, r4
   d656e:	f7ff feae 	bl	d62ce <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d6572:	2305      	movs	r3, #5
   d6574:	4620      	mov	r0, r4
   d6576:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d657a:	9300      	str	r3, [sp, #0]
   d657c:	461a      	mov	r2, r3
   d657e:	2103      	movs	r1, #3
   d6580:	f7ff ff66 	bl	d6450 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    return true;
   d6584:	2001      	movs	r0, #1
}
   d6586:	b005      	add	sp, #20
   d6588:	bd30      	pop	{r4, r5, pc}
        return false;
   d658a:	2000      	movs	r0, #0
   d658c:	e7fb      	b.n	d6586 <_ZN15Adafruit_BME2805beginEh+0xa6>

000d658e <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d658e:	b510      	push	{r4, lr}
   d6590:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6592:	3024      	adds	r0, #36	; 0x24
   d6594:	f000 feac 	bl	d72f0 <_ZN8FatCache4syncEv>
   d6598:	b128      	cbz	r0, d65a6 <_ZN9FatVolume9cacheSyncEv+0x18>
   d659a:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d659e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d65a2:	f000 bea5 	b.w	d72f0 <_ZN8FatCache4syncEv>
  }
   d65a6:	bd10      	pop	{r4, pc}

000d65a8 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d65a8:	1e41      	subs	r1, r0, #1
   d65aa:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d65ae:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d65b0:	0842      	lsrs	r2, r0, #1
   d65b2:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d65b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d65ba:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d65be:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d65c0:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d65c2:	d1f5      	bne.n	d65b0 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d65c4:	4770      	bx	lr
	...

000d65c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d65c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d65cc:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d65ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   d65d2:	2b20      	cmp	r3, #32
   d65d4:	d0fa      	beq.n	d65cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d65d6:	4d6b      	ldr	r5, [pc, #428]	; (d6784 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d65d8:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d65da:	2400      	movs	r4, #0
    c = path[len];
   d65dc:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d65de:	b1c3      	cbz	r3, d6612 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d65e0:	2b2f      	cmp	r3, #47	; 0x2f
   d65e2:	d016      	beq.n	d6612 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d65e4:	2b5c      	cmp	r3, #92	; 0x5c
   d65e6:	d102      	bne.n	d65ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d65e8:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d65ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d65ee:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d65f2:	b2c0      	uxtb	r0, r0
   d65f4:	281d      	cmp	r0, #29
   d65f6:	d803      	bhi.n	d6600 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d65f8:	fa25 f000 	lsr.w	r0, r5, r0
   d65fc:	07c0      	lsls	r0, r0, #31
   d65fe:	d4f3      	bmi.n	d65e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6600:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d6604:	283c      	cmp	r0, #60	; 0x3c
   d6606:	d0ef      	beq.n	d65e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d6608:	3b20      	subs	r3, #32
   d660a:	2b5e      	cmp	r3, #94	; 0x5e
   d660c:	d8ec      	bhi.n	d65e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d660e:	3401      	adds	r4, #1
    c = path[len];
   d6610:	e7e4      	b.n	d65dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d6612:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d6614:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6616:	4607      	mov	r7, r0
   d6618:	f810 5b01 	ldrb.w	r5, [r0], #1
   d661c:	2d20      	cmp	r5, #32
   d661e:	d0fa      	beq.n	d6616 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d6620:	2d2f      	cmp	r5, #47	; 0x2f
   d6622:	d0f8      	beq.n	d6616 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d6624:	6017      	str	r7, [r2, #0]
  while (len) {
   d6626:	b14c      	cbz	r4, d663c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d6628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d662c:	2a2e      	cmp	r2, #46	; 0x2e
   d662e:	d001      	beq.n	d6634 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d6630:	2a20      	cmp	r2, #32
   d6632:	d101      	bne.n	d6638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d6634:	3c01      	subs	r4, #1
  while (len) {
   d6636:	e7f6      	b.n	d6626 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d6638:	2cff      	cmp	r4, #255	; 0xff
   d663a:	dcd5      	bgt.n	d65e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d663c:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d663e:	f101 030d 	add.w	r3, r1, #13
   d6642:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d6646:	2020      	movs	r0, #32
   d6648:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d664c:	4293      	cmp	r3, r2
   d664e:	d1fb      	bne.n	d6648 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6650:	f04f 0800 	mov.w	r8, #0
   d6654:	f816 3008 	ldrb.w	r3, [r6, r8]
   d6658:	2b2e      	cmp	r3, #46	; 0x2e
   d665a:	d001      	beq.n	d6660 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d665c:	2b20      	cmp	r3, #32
   d665e:	d102      	bne.n	d6666 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d6660:	f108 0801 	add.w	r8, r8, #1
   d6664:	e7f6      	b.n	d6654 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d6666:	fab8 f088 	clz	r0, r8
   d666a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d666c:	1e65      	subs	r5, r4, #1
   d666e:	1c6b      	adds	r3, r5, #1
   d6670:	d002      	beq.n	d6678 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d6672:	5d73      	ldrb	r3, [r6, r5]
   d6674:	2b2e      	cmp	r3, #46	; 0x2e
   d6676:	d114      	bne.n	d66a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6678:	f04f 0900 	mov.w	r9, #0
   d667c:	2707      	movs	r7, #7
   d667e:	464a      	mov	r2, r9
   d6680:	46ca      	mov	sl, r9
   d6682:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d6686:	45a0      	cmp	r8, r4
   d6688:	da69      	bge.n	d675e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d668a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d668e:	2b20      	cmp	r3, #32
   d6690:	d003      	beq.n	d669a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d6692:	2b2e      	cmp	r3, #46	; 0x2e
   d6694:	d107      	bne.n	d66a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6696:	45a8      	cmp	r8, r5
   d6698:	d012      	beq.n	d66c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d669a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d669c:	f108 0801 	add.w	r8, r8, #1
   d66a0:	e7f1      	b.n	d6686 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d66a2:	3d01      	subs	r5, #1
   d66a4:	e7e3      	b.n	d666e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d66a6:	2b22      	cmp	r3, #34	; 0x22
   d66a8:	d008      	beq.n	d66bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d66aa:	2b7c      	cmp	r3, #124	; 0x7c
   d66ac:	d006      	beq.n	d66bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d66ae:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d66b2:	f1bc 0f05 	cmp.w	ip, #5
   d66b6:	d80b      	bhi.n	d66d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d66b8:	2b2d      	cmp	r3, #45	; 0x2d
   d66ba:	d013      	beq.n	d66e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d66bc:	45a8      	cmp	r8, r5
   d66be:	d15c      	bne.n	d677a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d66c0:	2f0a      	cmp	r7, #10
   d66c2:	d04b      	beq.n	d675c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d66c4:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d66c6:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d66c8:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d66ca:	f04f 0e10 	mov.w	lr, #16
   d66ce:	e7e5      	b.n	d669c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d66d0:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d66d4:	f1bc 0f05 	cmp.w	ip, #5
   d66d8:	d9f0      	bls.n	d66bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d66da:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d66de:	f1bc 0f02 	cmp.w	ip, #2
   d66e2:	d9eb      	bls.n	d66bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d66e4:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d66e8:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d66ec:	d8e6      	bhi.n	d66bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d66ee:	45a8      	cmp	r8, r5
   d66f0:	d0e6      	beq.n	d66c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d66f2:	42ba      	cmp	r2, r7
   d66f4:	d830      	bhi.n	d6758 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d66f6:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d66fa:	f1bc 0f19 	cmp.w	ip, #25
   d66fe:	d81a      	bhi.n	d6736 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d6700:	3b20      	subs	r3, #32
        lc |= bit;
   d6702:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d6706:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6708:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d670c:	f102 0c01 	add.w	ip, r2, #1
   d6710:	fa5f fc8c 	uxtb.w	ip, ip
   d6714:	440a      	add	r2, r1
      if (i < 7) {
   d6716:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d671a:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d671c:	d801      	bhi.n	d6722 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d671e:	f881 c00c 	strb.w	ip, [r1, #12]
   d6722:	4662      	mov	r2, ip
   d6724:	e7ba      	b.n	d669c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d6726:	45a8      	cmp	r8, r5
   d6728:	dc18      	bgt.n	d675c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d672a:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d672c:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d672e:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6730:	f04f 0e10 	mov.w	lr, #16
   d6734:	e7b1      	b.n	d669a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d6736:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d673a:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d673e:	bf98      	it	ls
   d6740:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d6744:	e7e2      	b.n	d670c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d6746:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6748:	2001      	movs	r0, #1
   d674a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d674c:	4419      	add	r1, r3
   d674e:	237e      	movs	r3, #126	; 0x7e
   d6750:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6752:	2331      	movs	r3, #49	; 0x31
   d6754:	738b      	strb	r3, [r1, #14]
   d6756:	e748      	b.n	d65ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d6758:	2f0a      	cmp	r7, #10
   d675a:	d1e4      	bne.n	d6726 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d675c:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d675e:	7b4b      	ldrb	r3, [r1, #13]
   d6760:	2b20      	cmp	r3, #32
   d6762:	f43f af41 	beq.w	d65e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d6766:	2800      	cmp	r0, #0
   d6768:	d0ed      	beq.n	d6746 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d676a:	ea1a 0f09 	tst.w	sl, r9
   d676e:	bf18      	it	ne
   d6770:	f04f 0902 	movne.w	r9, #2
   d6774:	f881 9000 	strb.w	r9, [r1]
   d6778:	e737      	b.n	d65ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d677a:	42ba      	cmp	r2, r7
   d677c:	d8ec      	bhi.n	d6758 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d677e:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d6780:	2000      	movs	r0, #0
   d6782:	e7c3      	b.n	d670c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d6784:	31000101 	.word	0x31000101

000d6788 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d678c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6790:	4606      	mov	r6, r0
   d6792:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6794:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6796:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6798:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d679c:	6861      	ldr	r1, [r4, #4]
   d679e:	68a2      	ldr	r2, [r4, #8]
   d67a0:	186b      	adds	r3, r5, r1
   d67a2:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d67a4:	4411      	add	r1, r2
   d67a6:	4291      	cmp	r1, r2
   d67a8:	d006      	beq.n	d67b8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d67aa:	f812 0b01 	ldrb.w	r0, [r2], #1
   d67ae:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d67b2:	4043      	eors	r3, r0
   d67b4:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d67b6:	e7f6      	b.n	d67a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d67b8:	f1b9 0f03 	cmp.w	r9, #3
   d67bc:	bf28      	it	cs
   d67be:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d67c2:	f109 0204 	add.w	r2, r9, #4
   d67c6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d67c8:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d67cc:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d67ce:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d67d0:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d67d2:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d67d4:	bf94      	ite	ls
   d67d6:	3130      	addls	r1, #48	; 0x30
   d67d8:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d67da:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d67dc:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d67de:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d67e2:	d1f1      	bne.n	d67c8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d67e4:	eb04 0309 	add.w	r3, r4, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d67e8:	2100      	movs	r1, #0
   d67ea:	735f      	strb	r7, [r3, #13]
   d67ec:	4630      	mov	r0, r6
   d67ee:	f000 fb6c 	bl	d6eca <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d67f2:	2101      	movs	r1, #1
   d67f4:	4630      	mov	r0, r6
   d67f6:	f000 fb49 	bl	d6e8c <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d67fa:	4601      	mov	r1, r0
   d67fc:	b928      	cbnz	r0, d680a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d67fe:	7870      	ldrb	r0, [r6, #1]
   d6800:	fab0 f080 	clz	r0, r0
   d6804:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d6806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d680a:	7803      	ldrb	r3, [r0, #0]
   d680c:	b16b      	cbz	r3, d682a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d680e:	7ac3      	ldrb	r3, [r0, #11]
   d6810:	071b      	lsls	r3, r3, #28
   d6812:	d4ee      	bmi.n	d67f2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6814:	220b      	movs	r2, #11
   d6816:	4640      	mov	r0, r8
   d6818:	f007 fbc8 	bl	ddfac <memcmp>
   d681c:	2800      	cmp	r0, #0
   d681e:	d1e8      	bne.n	d67f2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d6820:	3501      	adds	r5, #1
   d6822:	b2ad      	uxth	r5, r5
   d6824:	2d64      	cmp	r5, #100	; 0x64
   d6826:	d1b9      	bne.n	d679c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d6828:	e7ed      	b.n	d6806 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d682a:	2001      	movs	r0, #1
   d682c:	e7eb      	b.n	d6806 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000d6830 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6834:	ed2d 8b02 	vpush	{d8}
   d6838:	b089      	sub	sp, #36	; 0x24
   d683a:	460d      	mov	r5, r1
   d683c:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d683e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6840:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d6842:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6846:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d6848:	d105      	bne.n	d6856 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d684a:	2000      	movs	r0, #0
}
   d684c:	b009      	add	sp, #36	; 0x24
   d684e:	ecbd 8b02 	vpop	{d8}
   d6852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d6856:	9b06      	ldr	r3, [sp, #24]
   d6858:	781b      	ldrb	r3, [r3, #0]
   d685a:	2b00      	cmp	r3, #0
   d685c:	d1f5      	bne.n	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d685e:	6853      	ldr	r3, [r2, #4]
   d6860:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6862:	7813      	ldrb	r3, [r2, #0]
   d6864:	0799      	lsls	r1, r3, #30
   d6866:	bf1c      	itt	ne
   d6868:	9b04      	ldrne	r3, [sp, #16]
   d686a:	f103 070c 	addne.w	r7, r3, #12
   d686e:	f04f 0100 	mov.w	r1, #0
   d6872:	bf18      	it	ne
   d6874:	230d      	movne	r3, #13
   d6876:	4628      	mov	r0, r5
   d6878:	bf1d      	ittte	ne
   d687a:	fbb7 f7f3 	udivne	r7, r7, r3
   d687e:	3701      	addne	r7, #1
   d6880:	b2ff      	uxtbne	r7, r7
   d6882:	2701      	moveq	r7, #1
   d6884:	f000 fb21 	bl	d6eca <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6888:	f108 020d 	add.w	r2, r8, #13
  }
   d688c:	2300      	movs	r3, #0
   d688e:	ee08 2a10 	vmov	s16, r2
   d6892:	469b      	mov	fp, r3
   d6894:	461c      	mov	r4, r3
   d6896:	461e      	mov	r6, r3
   d6898:	9303      	str	r3, [sp, #12]
   d689a:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d689c:	696a      	ldr	r2, [r5, #20]
   d689e:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d68a0:	2101      	movs	r1, #1
   d68a2:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d68a4:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d68a8:	f000 faf0 	bl	d6e8c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d68ac:	9b07      	ldr	r3, [sp, #28]
   d68ae:	2800      	cmp	r0, #0
   d68b0:	d16e      	bne.n	d6990 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d68b2:	786b      	ldrb	r3, [r5, #1]
   d68b4:	2b00      	cmp	r3, #0
   d68b6:	d1c8      	bne.n	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d68b8:	9b05      	ldr	r3, [sp, #20]
   d68ba:	059a      	lsls	r2, r3, #22
   d68bc:	d5c5      	bpl.n	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d68be:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d68c2:	3b01      	subs	r3, #1
   d68c4:	2b01      	cmp	r3, #1
   d68c6:	d8c0      	bhi.n	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d68c8:	9b03      	ldr	r3, [sp, #12]
   d68ca:	2c00      	cmp	r4, #0
   d68cc:	bf08      	it	eq
   d68ce:	464b      	moveq	r3, r9
   d68d0:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d68d2:	42bc      	cmp	r4, r7
   d68d4:	f0c0 8103 	bcc.w	d6ade <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d68d8:	f1ba 0f00 	cmp.w	sl, #0
   d68dc:	f040 811b 	bne.w	d6b16 <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d68e0:	9b03      	ldr	r3, [sp, #12]
   d68e2:	4628      	mov	r0, r5
   d68e4:	0159      	lsls	r1, r3, #5
   d68e6:	f000 faf0 	bl	d6eca <_ZN7FatFile7seekSetEm>
   d68ea:	2800      	cmp	r0, #0
   d68ec:	d0ad      	beq.n	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d68ee:	3f01      	subs	r7, #1
   d68f0:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d68f4:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d68f6:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d68fa:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d68fc:	2e00      	cmp	r6, #0
   d68fe:	f000 8121 	beq.w	d6b44 <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6902:	2100      	movs	r1, #0
   d6904:	4628      	mov	r0, r5
   d6906:	f000 fac1 	bl	d6e8c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d690a:	4604      	mov	r4, r0
   d690c:	2800      	cmp	r0, #0
   d690e:	d09c      	beq.n	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d6910:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d6912:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6916:	4556      	cmp	r6, sl
   d6918:	f043 0301 	orr.w	r3, r3, #1
   d691c:	bf0c      	ite	eq
   d691e:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d6922:	46b3      	movne	fp, r6
   d6924:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6928:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d692c:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d692e:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d6932:	f108 000d 	add.w	r0, r8, #13
   d6936:	f7ff fe37 	bl	d65a8 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d693a:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d693e:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d6940:	f884 901a 	strb.w	r9, [r4, #26]
   d6944:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6948:	f10b 3bff 	add.w	fp, fp, #4294967295
   d694c:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d694e:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6952:	fb02 f20b 	mul.w	r2, r2, fp
   d6956:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6958:	9904      	ldr	r1, [sp, #16]
   d695a:	4291      	cmp	r1, r2
   d695c:	f240 80e3 	bls.w	d6b26 <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d6960:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d6964:	2b04      	cmp	r3, #4
   d6966:	fa5f fe83 	uxtb.w	lr, r3
   d696a:	f103 0001 	add.w	r0, r3, #1
   d696e:	f200 80e0 	bhi.w	d6b32 <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d6972:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d6976:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d697a:	280d      	cmp	r0, #13
   d697c:	f102 0201 	add.w	r2, r2, #1
   d6980:	4603      	mov	r3, r0
   d6982:	d1e9      	bne.n	d6958 <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6984:	3e01      	subs	r6, #1
   d6986:	b2f6      	uxtb	r6, r6
   d6988:	e7b8      	b.n	d68fc <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d698a:	f04f 0a01 	mov.w	sl, #1
   d698e:	e785      	b.n	d689c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d6990:	7802      	ldrb	r2, [r0, #0]
   d6992:	2ae5      	cmp	r2, #229	; 0xe5
   d6994:	d000      	beq.n	d6998 <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d6996:	b97a      	cbnz	r2, d69b8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d6998:	9903      	ldr	r1, [sp, #12]
   d699a:	2c00      	cmp	r4, #0
   d699c:	bf08      	it	eq
   d699e:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d69a0:	42bc      	cmp	r4, r7
        freeFound++;
   d69a2:	bf38      	it	cc
   d69a4:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d69a6:	9103      	str	r1, [sp, #12]
        freeFound++;
   d69a8:	bf38      	it	cc
   d69aa:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d69ac:	2a00      	cmp	r2, #0
   d69ae:	d083      	beq.n	d68b8 <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d69b0:	2ae5      	cmp	r2, #229	; 0xe5
   d69b2:	d104      	bne.n	d69be <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d69b4:	2600      	movs	r6, #0
   d69b6:	e771      	b.n	d689c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d69b8:	42bc      	cmp	r4, r7
   d69ba:	bf38      	it	cc
   d69bc:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d69be:	2a2e      	cmp	r2, #46	; 0x2e
   d69c0:	d0f8      	beq.n	d69b4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d69c2:	7ac1      	ldrb	r1, [r0, #11]
   d69c4:	290f      	cmp	r1, #15
   d69c6:	d15d      	bne.n	d6a84 <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d69c8:	bb3e      	cbnz	r6, d6a1a <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d69ca:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d69ce:	f43f af65 	beq.w	d689c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d69d2:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d69d6:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d69d8:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d69da:	f10b 32ff 	add.w	r2, fp, #4294967295
   d69de:	f04f 0e0d 	mov.w	lr, #13
   d69e2:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d69e6:	9a04      	ldr	r2, [sp, #16]
   d69e8:	4572      	cmp	r2, lr
   d69ea:	d9e3      	bls.n	d69b4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d69ec:	eba2 020e 	sub.w	r2, r2, lr
   d69f0:	9207      	str	r2, [sp, #28]
   d69f2:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d69f6:	f1bc 0f04 	cmp.w	ip, #4
   d69fa:	eb0c 090e 	add.w	r9, ip, lr
   d69fe:	fa5f f28c 	uxtb.w	r2, ip
   d6a02:	d814      	bhi.n	d6a2e <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d6a04:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d6a08:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d6a0c:	9907      	ldr	r1, [sp, #28]
   d6a0e:	458c      	cmp	ip, r1
   d6a10:	d11b      	bne.n	d6a4a <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d6a12:	2a00      	cmp	r2, #0
   d6a14:	bf18      	it	ne
   d6a16:	2600      	movne	r6, #0
   d6a18:	e740      	b.n	d689c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6a1a:	f10b 3bff 	add.w	fp, fp, #4294967295
   d6a1e:	fa5f fb8b 	uxtb.w	fp, fp
   d6a22:	455a      	cmp	r2, fp
   d6a24:	d1c6      	bne.n	d69b4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d6a26:	7b42      	ldrb	r2, [r0, #13]
   d6a28:	429a      	cmp	r2, r3
   d6a2a:	d0d6      	beq.n	d69da <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d6a2c:	e7c2      	b.n	d69b4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6a2e:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6a30:	bf95      	itete	ls
   d6a32:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6a36:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6a3a:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6a3e:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6a42:	bf94      	ite	ls
   d6a44:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6a46:	8892      	ldrhhi	r2, [r2, #4]
   d6a48:	e7e0      	b.n	d6a0c <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a4a:	2aff      	cmp	r2, #255	; 0xff
   d6a4c:	d8b2      	bhi.n	d69b4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d6a4e:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6a50:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6a54:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a56:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d6a5a:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6a5e:	bf98      	it	ls
   d6a60:	3220      	addls	r2, #32
   d6a62:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d6a66:	bf98      	it	ls
   d6a68:	b2d2      	uxtbls	r2, r2
   d6a6a:	f1b9 0f19 	cmp.w	r9, #25
   d6a6e:	bf9c      	itt	ls
   d6a70:	3120      	addls	r1, #32
   d6a72:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a74:	4291      	cmp	r1, r2
   d6a76:	d19d      	bne.n	d69b4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d6a78:	f10c 0c01 	add.w	ip, ip, #1
   d6a7c:	f1bc 0f0d 	cmp.w	ip, #13
   d6a80:	d1b9      	bne.n	d69f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d6a82:	e70b      	b.n	d689c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6a84:	070a      	lsls	r2, r1, #28
   d6a86:	d495      	bmi.n	d69b4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d6a88:	b166      	cbz	r6, d6aa4 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6a8a:	f1bb 0f01 	cmp.w	fp, #1
   d6a8e:	9303      	str	r3, [sp, #12]
   d6a90:	f47f aedb 	bne.w	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d6a94:	f7ff fd88 	bl	d65a8 <_ZN7FatFile11lfnChecksumEPh>
   d6a98:	9b03      	ldr	r3, [sp, #12]
   d6a9a:	4298      	cmp	r0, r3
   d6a9c:	f47f aed5 	bne.w	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d6aa0:	46b2      	mov	sl, r6
   d6aa2:	e00f      	b.n	d6ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6aa4:	ee18 1a10 	vmov	r1, s16
   d6aa8:	220b      	movs	r2, #11
   d6aaa:	9307      	str	r3, [sp, #28]
   d6aac:	f007 fa7e 	bl	ddfac <memcmp>
   d6ab0:	9b07      	ldr	r3, [sp, #28]
   d6ab2:	2800      	cmp	r0, #0
   d6ab4:	f47f aef2 	bne.w	d689c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6ab8:	f898 a000 	ldrb.w	sl, [r8]
   d6abc:	f01a 0a01 	ands.w	sl, sl, #1
   d6ac0:	f47f af63 	bne.w	d698a <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d6ac4:	9b05      	ldr	r3, [sp, #20]
   d6ac6:	0519      	lsls	r1, r3, #20
   d6ac8:	f53f aebf 	bmi.w	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6acc:	9b05      	ldr	r3, [sp, #20]
   d6ace:	9806      	ldr	r0, [sp, #24]
   d6ad0:	f8cd a000 	str.w	sl, [sp]
   d6ad4:	464a      	mov	r2, r9
   d6ad6:	4629      	mov	r1, r5
   d6ad8:	f000 fa3a 	bl	d6f50 <_ZN7FatFile15openCachedEntryEPS_tih>
   d6adc:	e6b6      	b.n	d684c <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d6ade:	2100      	movs	r1, #0
   d6ae0:	4628      	mov	r0, r5
   d6ae2:	f000 f9d3 	bl	d6e8c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6ae6:	b998      	cbnz	r0, d6b10 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d6ae8:	786b      	ldrb	r3, [r5, #1]
   d6aea:	2b00      	cmp	r3, #0
   d6aec:	f47f aead 	bne.w	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d6af0:	4628      	mov	r0, r5
   d6af2:	f000 f86f 	bl	d6bd4 <_ZN7FatFile13addDirClusterEv>
   d6af6:	2800      	cmp	r0, #0
   d6af8:	f43f aea7 	beq.w	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6afc:	68ab      	ldr	r3, [r5, #8]
   d6afe:	791b      	ldrb	r3, [r3, #4]
   d6b00:	2b01      	cmp	r3, #1
   d6b02:	f63f aee9 	bhi.w	d68d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d6b06:	3410      	adds	r4, #16
   d6b08:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d6b0a:	42a7      	cmp	r7, r4
   d6b0c:	d8f0      	bhi.n	d6af0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d6b0e:	e6e3      	b.n	d68d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d6b10:	3401      	adds	r4, #1
   d6b12:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d6b14:	e6dd      	b.n	d68d2 <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6b16:	4641      	mov	r1, r8
   d6b18:	4628      	mov	r0, r5
   d6b1a:	f7ff fe35 	bl	d6788 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6b1e:	2800      	cmp	r0, #0
   d6b20:	f47f aede 	bne.w	d68e0 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d6b24:	e691      	b.n	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6b26:	bf14      	ite	ne
   d6b28:	f04f 31ff 	movne.w	r1, #4294967295
   d6b2c:	2100      	moveq	r1, #0
   d6b2e:	b289      	uxth	r1, r1
   d6b30:	e718      	b.n	d6964 <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6b32:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6b36:	bf94      	ite	ls
   d6b38:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6b3c:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d6b40:	8099      	strh	r1, [r3, #4]
   d6b42:	e71a      	b.n	d697a <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d6b44:	4631      	mov	r1, r6
   d6b46:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d6b48:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d6b4a:	f000 f99f 	bl	d6e8c <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6b4e:	4604      	mov	r4, r0
   d6b50:	2800      	cmp	r0, #0
   d6b52:	f43f ae7a 	beq.w	d684a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d6b56:	2220      	movs	r2, #32
   d6b58:	4631      	mov	r1, r6
   d6b5a:	f007 fa5d 	bl	de018 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6b5e:	4643      	mov	r3, r8
   d6b60:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6b64:	6022      	str	r2, [r4, #0]
   d6b66:	685a      	ldr	r2, [r3, #4]
   d6b68:	6062      	str	r2, [r4, #4]
   d6b6a:	891a      	ldrh	r2, [r3, #8]
   d6b6c:	8122      	strh	r2, [r4, #8]
   d6b6e:	7a9b      	ldrb	r3, [r3, #10]
   d6b70:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6b72:	f898 3000 	ldrb.w	r3, [r8]
   d6b76:	f003 0318 	and.w	r3, r3, #24
   d6b7a:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d6b7c:	4b0f      	ldr	r3, [pc, #60]	; (d6bbc <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d6b7e:	681b      	ldr	r3, [r3, #0]
   d6b80:	b19b      	cbz	r3, d6baa <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6b82:	f104 010e 	add.w	r1, r4, #14
   d6b86:	f104 0010 	add.w	r0, r4, #16
   d6b8a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d6b8c:	8a23      	ldrh	r3, [r4, #16]
   d6b8e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d6b90:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d6b92:	89e3      	ldrh	r3, [r4, #14]
   d6b94:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d6b96:	68aa      	ldr	r2, [r5, #8]
   d6b98:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6b9c:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d6ba0:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d6ba4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   d6ba8:	e790      	b.n	d6acc <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d6baa:	2321      	movs	r3, #33	; 0x21
   d6bac:	7423      	strb	r3, [r4, #16]
   d6bae:	2328      	movs	r3, #40	; 0x28
   d6bb0:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6bb2:	2308      	movs	r3, #8
   d6bb4:	73a6      	strb	r6, [r4, #14]
   d6bb6:	73e3      	strb	r3, [r4, #15]
   d6bb8:	e7e8      	b.n	d6b8c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d6bba:	bf00      	nop
   d6bbc:	2003e5b4 	.word	0x2003e5b4

000d6bc0 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6bc0:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6bc2:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d6bc4:	f043 0304 	orr.w	r3, r3, #4
   d6bc8:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6bca:	f100 0210 	add.w	r2, r0, #16
   d6bce:	6880      	ldr	r0, [r0, #8]
   d6bd0:	f000 bc44 	b.w	d745c <_ZN9FatVolume15allocateClusterEmPm>

000d6bd4 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6bd8:	7801      	ldrb	r1, [r0, #0]
   d6bda:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d6bde:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d6be0:	d003      	beq.n	d6bea <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6be2:	2600      	movs	r6, #0
}
   d6be4:	4630      	mov	r0, r6
   d6be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d6bea:	6942      	ldr	r2, [r0, #20]
   d6bec:	4b17      	ldr	r3, [pc, #92]	; (d6c4c <_ZN7FatFile13addDirClusterEv+0x78>)
   d6bee:	429a      	cmp	r2, r3
   d6bf0:	d2f7      	bcs.n	d6be2 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d6bf2:	f7ff ffe5 	bl	d6bc0 <_ZN7FatFile10addClusterEv>
   d6bf6:	4606      	mov	r6, r0
   d6bf8:	2800      	cmp	r0, #0
   d6bfa:	d0f2      	beq.n	d6be2 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6bfc:	6921      	ldr	r1, [r4, #16]
   d6bfe:	68a0      	ldr	r0, [r4, #8]
   d6c00:	f000 fbc1 	bl	d7386 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6c04:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   d6c06:	68a0      	ldr	r0, [r4, #8]
   d6c08:	2205      	movs	r2, #5
   d6c0a:	4639      	mov	r1, r7
   d6c0c:	3024      	adds	r0, #36	; 0x24
   d6c0e:	f000 fb97 	bl	d7340 <_ZN8FatCache4readEmh>
  if (!pc) {
   d6c12:	4680      	mov	r8, r0
   d6c14:	2800      	cmp	r0, #0
   d6c16:	d0e4      	beq.n	d6be2 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d6c18:	4629      	mov	r1, r5
   d6c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6c1e:	f007 f9fb 	bl	de018 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6c22:	2501      	movs	r5, #1
   d6c24:	68a3      	ldr	r3, [r4, #8]
   d6c26:	791a      	ldrb	r2, [r3, #4]
   d6c28:	42aa      	cmp	r2, r5
   d6c2a:	d909      	bls.n	d6c40 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d6c2c:	6818      	ldr	r0, [r3, #0]
   d6c2e:	4642      	mov	r2, r8
   d6c30:	19e9      	adds	r1, r5, r7
   d6c32:	f000 feee 	bl	d7a12 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6c36:	2800      	cmp	r0, #0
   d6c38:	d0d3      	beq.n	d6be2 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6c3a:	3501      	adds	r5, #1
   d6c3c:	b2ed      	uxtb	r5, r5
   d6c3e:	e7f1      	b.n	d6c24 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d6c40:	6963      	ldr	r3, [r4, #20]
   d6c42:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6c46:	6163      	str	r3, [r4, #20]
  return true;
   d6c48:	e7cc      	b.n	d6be4 <_ZN7FatFile13addDirClusterEv+0x10>
   d6c4a:	bf00      	nop
   d6c4c:	001ffe00 	.word	0x001ffe00

000d6c50 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d6c50:	b510      	push	{r4, lr}
   d6c52:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d6c54:	6880      	ldr	r0, [r0, #8]
   d6c56:	460a      	mov	r2, r1
   d6c58:	3024      	adds	r0, #36	; 0x24
   d6c5a:	69a1      	ldr	r1, [r4, #24]
   d6c5c:	f000 fb70 	bl	d7340 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d6c60:	b120      	cbz	r0, d6c6c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d6c62:	88a3      	ldrh	r3, [r4, #4]
   d6c64:	f003 030f 	and.w	r3, r3, #15
   d6c68:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d6c6c:	bd10      	pop	{r4, pc}

000d6c6e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6c6e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6c70:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d6c72:	4605      	mov	r5, r0
   d6c74:	460e      	mov	r6, r1
  if (isOpen()) {
   d6c76:	b94c      	cbnz	r4, d6c8c <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6c78:	2224      	movs	r2, #36	; 0x24
   d6c7a:	4621      	mov	r1, r4
   d6c7c:	f007 f9cc 	bl	de018 <memset>

  m_vol = vol;
   d6c80:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d6c82:	79f3      	ldrb	r3, [r6, #7]
   d6c84:	2b10      	cmp	r3, #16
   d6c86:	d003      	beq.n	d6c90 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d6c88:	2b20      	cmp	r3, #32
   d6c8a:	d007      	beq.n	d6c9c <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d6c8c:	2000      	movs	r0, #0
   d6c8e:	e004      	b.n	d6c9a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d6c90:	2320      	movs	r3, #32
  m_flags = F_READ;
   d6c92:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d6c94:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d6c96:	70ac      	strb	r4, [r5, #2]
  return true;
   d6c98:	4620      	mov	r0, r4
}
   d6c9a:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d6c9c:	2340      	movs	r3, #64	; 0x40
   d6c9e:	e7f8      	b.n	d6c92 <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d6ca0 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d6ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d6ca4:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d6ca6:	4604      	mov	r4, r0
   d6ca8:	4688      	mov	r8, r1
   d6caa:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d6cac:	2b00      	cmp	r3, #0
   d6cae:	d05d      	beq.n	d6d6c <_ZN7FatFile4readEPvj+0xcc>
   d6cb0:	7882      	ldrb	r2, [r0, #2]
   d6cb2:	07d1      	lsls	r1, r2, #31
   d6cb4:	d55a      	bpl.n	d6d6c <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6cb6:	071a      	lsls	r2, r3, #28
   d6cb8:	d52d      	bpl.n	d6d16 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6cba:	69c3      	ldr	r3, [r0, #28]
   d6cbc:	6942      	ldr	r2, [r0, #20]
   d6cbe:	1a9b      	subs	r3, r3, r2
   d6cc0:	429d      	cmp	r5, r3
   d6cc2:	bf28      	it	cs
   d6cc4:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6cc6:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d6cc8:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6ccc:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d6cd0:	2e00      	cmp	r6, #0
   d6cd2:	f000 808f 	beq.w	d6df4 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d6cd6:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d6cd8:	6963      	ldr	r3, [r4, #20]
   d6cda:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6cdc:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d6cde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d6ce2:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6ce6:	d51f      	bpl.n	d6d28 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6ce8:	6a00      	ldr	r0, [r0, #32]
   d6cea:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6cec:	68a0      	ldr	r0, [r4, #8]
   d6cee:	f1ba 0f00 	cmp.w	sl, #0
   d6cf2:	d142      	bne.n	d6d7a <_ZN7FatFile4readEPvj+0xda>
   d6cf4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6cf8:	d33f      	bcc.n	d6d7a <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
   d6cfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6cfc:	4299      	cmp	r1, r3
   d6cfe:	d03c      	beq.n	d6d7a <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6d00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6d04:	d252      	bcs.n	d6dac <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d6d06:	6800      	ldr	r0, [r0, #0]
   d6d08:	4642      	mov	r2, r8
   d6d0a:	f000 fdf9 	bl	d7900 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6d0e:	b368      	cbz	r0, d6d6c <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d6d10:	f44f 7700 	mov.w	r7, #512	; 0x200
   d6d14:	e044      	b.n	d6da0 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d6d16:	069b      	lsls	r3, r3, #26
   d6d18:	d5d5      	bpl.n	d6cc6 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6d1a:	6883      	ldr	r3, [r0, #8]
   d6d1c:	891a      	ldrh	r2, [r3, #8]
   d6d1e:	6943      	ldr	r3, [r0, #20]
   d6d20:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d6d24:	b29b      	uxth	r3, r3
   d6d26:	e7cb      	b.n	d6cc0 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6d28:	f890 9005 	ldrb.w	r9, [r0, #5]
   d6d2c:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d6d30:	f1ba 0f00 	cmp.w	sl, #0
   d6d34:	d108      	bne.n	d6d48 <_ZN7FatFile4readEPvj+0xa8>
   d6d36:	f1b9 0f00 	cmp.w	r9, #0
   d6d3a:	d105      	bne.n	d6d48 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d6d3c:	b95b      	cbnz	r3, d6d56 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6d3e:	0651      	lsls	r1, r2, #25
   d6d40:	bf4c      	ite	mi
   d6d42:	6a03      	ldrmi	r3, [r0, #32]
   d6d44:	6a23      	ldrpl	r3, [r4, #32]
   d6d46:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6d48:	6921      	ldr	r1, [r4, #16]
   d6d4a:	68a0      	ldr	r0, [r4, #8]
   d6d4c:	f000 fb1b 	bl	d7386 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6d50:	eb09 0100 	add.w	r1, r9, r0
   d6d54:	e7ca      	b.n	d6cec <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6d56:	6921      	ldr	r1, [r4, #16]
   d6d58:	465a      	mov	r2, fp
   d6d5a:	f000 fb1a 	bl	d7392 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d6d5e:	2800      	cmp	r0, #0
   d6d60:	db04      	blt.n	d6d6c <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d6d62:	d1f1      	bne.n	d6d48 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d6d64:	7823      	ldrb	r3, [r4, #0]
   d6d66:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6d6a:	d143      	bne.n	d6df4 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6d6c:	7863      	ldrb	r3, [r4, #1]
   d6d6e:	f043 0302 	orr.w	r3, r3, #2
   d6d72:	7063      	strb	r3, [r4, #1]
  return -1;
   d6d74:	f04f 30ff 	mov.w	r0, #4294967295
   d6d78:	e03d      	b.n	d6df6 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d6d7a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d6d7e:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d6d80:	f04f 0200 	mov.w	r2, #0
   d6d84:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d6d88:	bf28      	it	cs
   d6d8a:	4637      	movcs	r7, r6
   d6d8c:	f000 fad8 	bl	d7340 <_ZN8FatCache4readEmh>
      if (!pc) {
   d6d90:	2800      	cmp	r0, #0
   d6d92:	d0eb      	beq.n	d6d6c <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d6d94:	eb00 010a 	add.w	r1, r0, sl
   d6d98:	463a      	mov	r2, r7
   d6d9a:	4640      	mov	r0, r8
   d6d9c:	f007 f914 	bl	ddfc8 <memcpy>
    m_curPosition += n;
   d6da0:	6963      	ldr	r3, [r4, #20]
   d6da2:	443b      	add	r3, r7
    dst += n;
   d6da4:	44b8      	add	r8, r7
    m_curPosition += n;
   d6da6:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6da8:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d6daa:	e791      	b.n	d6cd0 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d6dac:	7822      	ldrb	r2, [r4, #0]
   d6dae:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d6db0:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6db4:	d406      	bmi.n	d6dc4 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d6db6:	7902      	ldrb	r2, [r0, #4]
   d6db8:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d6dbc:	b2d2      	uxtb	r2, r2
   d6dbe:	4592      	cmp	sl, r2
   d6dc0:	bf28      	it	cs
   d6dc2:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6dc4:	4299      	cmp	r1, r3
      n = 512*nb;
   d6dc6:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6dca:	d208      	bcs.n	d6dde <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d6dcc:	68a0      	ldr	r0, [r4, #8]
   d6dce:	4653      	mov	r3, sl
   d6dd0:	6800      	ldr	r0, [r0, #0]
   d6dd2:	4642      	mov	r2, r8
   d6dd4:	f000 fddc 	bl	d7990 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6dd8:	2800      	cmp	r0, #0
   d6dda:	d1e1      	bne.n	d6da0 <_ZN7FatFile4readEPvj+0x100>
   d6ddc:	e7c6      	b.n	d6d6c <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6dde:	4453      	add	r3, sl
   d6de0:	428b      	cmp	r3, r1
   d6de2:	d9f3      	bls.n	d6dcc <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d6de4:	3024      	adds	r0, #36	; 0x24
   d6de6:	9101      	str	r1, [sp, #4]
   d6de8:	f000 fa82 	bl	d72f0 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d6dec:	9901      	ldr	r1, [sp, #4]
   d6dee:	2800      	cmp	r0, #0
   d6df0:	d1ec      	bne.n	d6dcc <_ZN7FatFile4readEPvj+0x12c>
   d6df2:	e7bb      	b.n	d6d6c <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d6df4:	1ba8      	subs	r0, r5, r6
}
   d6df6:	b003      	add	sp, #12
   d6df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6dfc <_ZN7FatFile5fgetsEPcsS0_>:
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
   d6dfc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6e00:	4680      	mov	r8, r0
   d6e02:	460e      	mov	r6, r1
   d6e04:	4691      	mov	r9, r2
   d6e06:	461f      	mov	r7, r3
  int16_t r = -1;
   d6e08:	f04f 35ff 	mov.w	r5, #4294967295
  int16_t n = 0;
   d6e0c:	f04f 0a00 	mov.w	sl, #0
  while ((n + 1) < num && (r = read(&ch, 1)) == 1) {
   d6e10:	f10a 0401 	add.w	r4, sl, #1
   d6e14:	454c      	cmp	r4, r9
   d6e16:	da1f      	bge.n	d6e58 <_ZN7FatFile5fgetsEPcsS0_+0x5c>
   d6e18:	2201      	movs	r2, #1
   d6e1a:	f10d 0107 	add.w	r1, sp, #7
   d6e1e:	4640      	mov	r0, r8
   d6e20:	f7ff ff3e 	bl	d6ca0 <_ZN7FatFile4readEPvj>
   d6e24:	b205      	sxth	r5, r0
   d6e26:	2d01      	cmp	r5, #1
   d6e28:	d116      	bne.n	d6e58 <_ZN7FatFile5fgetsEPcsS0_+0x5c>
    if (ch == '\r') {
   d6e2a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6e2e:	290d      	cmp	r1, #13
   d6e30:	d0f0      	beq.n	d6e14 <_ZN7FatFile5fgetsEPcsS0_+0x18>
    str[n++] = ch;
   d6e32:	f806 100a 	strb.w	r1, [r6, sl]
   d6e36:	b224      	sxth	r4, r4
    if (!delim) {
   d6e38:	b93f      	cbnz	r7, d6e4a <_ZN7FatFile5fgetsEPcsS0_+0x4e>
      if (ch == '\n') {
   d6e3a:	290a      	cmp	r1, #10
   d6e3c:	d10a      	bne.n	d6e54 <_ZN7FatFile5fgetsEPcsS0_+0x58>
  str[n] = '\0';
   d6e3e:	2300      	movs	r3, #0
   d6e40:	5533      	strb	r3, [r6, r4]
}
   d6e42:	4620      	mov	r0, r4
   d6e44:	b002      	add	sp, #8
   d6e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (strchr(delim, ch)) {
   d6e4a:	4638      	mov	r0, r7
   d6e4c:	f007 f910 	bl	de070 <strchr>
   d6e50:	2800      	cmp	r0, #0
   d6e52:	d1f4      	bne.n	d6e3e <_ZN7FatFile5fgetsEPcsS0_+0x42>
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
   d6e54:	46a2      	mov	sl, r4
   d6e56:	e7db      	b.n	d6e10 <_ZN7FatFile5fgetsEPcsS0_+0x14>
  if (r < 0) {
   d6e58:	2d00      	cmp	r5, #0
   d6e5a:	db01      	blt.n	d6e60 <_ZN7FatFile5fgetsEPcsS0_+0x64>
   d6e5c:	4654      	mov	r4, sl
   d6e5e:	e7ee      	b.n	d6e3e <_ZN7FatFile5fgetsEPcsS0_+0x42>
    return -1;
   d6e60:	f04f 34ff 	mov.w	r4, #4294967295
   d6e64:	e7ed      	b.n	d6e42 <_ZN7FatFile5fgetsEPcsS0_+0x46>

000d6e66 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d6e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d6e68:	2201      	movs	r2, #1
   d6e6a:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d6e6e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d6e72:	4604      	mov	r4, r0
   d6e74:	f7ff ff14 	bl	d6ca0 <_ZN7FatFile4readEPvj>
   d6e78:	2801      	cmp	r0, #1
   d6e7a:	bf0a      	itet	eq
   d6e7c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d6e80:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d6e84:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d6e88:	b002      	add	sp, #8
   d6e8a:	bd70      	pop	{r4, r5, r6, pc}

000d6e8c <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6e8e:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d6e90:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6e94:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6e96:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d6e9a:	d000      	beq.n	d6e9e <_ZN7FatFile12readDirCacheEb+0x12>
   d6e9c:	b999      	cbnz	r1, d6ec6 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d6e9e:	2201      	movs	r2, #1
   d6ea0:	f10d 0107 	add.w	r1, sp, #7
   d6ea4:	4620      	mov	r0, r4
   d6ea6:	f7ff fefb 	bl	d6ca0 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d6eaa:	b240      	sxtb	r0, r0
   d6eac:	2801      	cmp	r0, #1
   d6eae:	d002      	beq.n	d6eb6 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d6eb0:	2000      	movs	r0, #0
}
   d6eb2:	b003      	add	sp, #12
   d6eb4:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d6eb6:	6963      	ldr	r3, [r4, #20]
   d6eb8:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d6eba:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d6ebc:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d6ebe:	3030      	adds	r0, #48	; 0x30
   d6ec0:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d6ec4:	e7f5      	b.n	d6eb2 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d6ec6:	3320      	adds	r3, #32
   d6ec8:	e7f7      	b.n	d6eba <_ZN7FatFile12readDirCacheEb+0x2e>

000d6eca <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d6eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d6ece:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d6ed0:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d6ed2:	4604      	mov	r4, r0
   d6ed4:	460d      	mov	r5, r1
  if (!isOpen()) {
   d6ed6:	b162      	cbz	r2, d6ef2 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d6ed8:	6940      	ldr	r0, [r0, #20]
   d6eda:	4288      	cmp	r0, r1
   d6edc:	d002      	beq.n	d6ee4 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d6ede:	b919      	cbnz	r1, d6ee8 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d6ee0:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d6ee2:	6165      	str	r5, [r4, #20]
    return true;
   d6ee4:	2001      	movs	r0, #1
   d6ee6:	e006      	b.n	d6ef6 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d6ee8:	0716      	lsls	r6, r2, #28
   d6eea:	d506      	bpl.n	d6efa <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d6eec:	69e3      	ldr	r3, [r4, #28]
   d6eee:	428b      	cmp	r3, r1
   d6ef0:	d20b      	bcs.n	d6f0a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d6ef2:	6127      	str	r7, [r4, #16]
  return false;
   d6ef4:	2000      	movs	r0, #0
}
   d6ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d6efa:	0691      	lsls	r1, r2, #26
   d6efc:	d505      	bpl.n	d6f0a <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d6efe:	68a3      	ldr	r3, [r4, #8]
   d6f00:	891b      	ldrh	r3, [r3, #8]
   d6f02:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d6f06:	d9ec      	bls.n	d6ee2 <_ZN7FatFile7seekSetEm+0x18>
   d6f08:	e7f3      	b.n	d6ef2 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6f0a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d6f0e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d6f12:	1e43      	subs	r3, r0, #1
   d6f14:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6f18:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6f1a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6f1c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d6f1e:	42b3      	cmp	r3, r6
   d6f20:	d800      	bhi.n	d6f24 <_ZN7FatFile7seekSetEm+0x5a>
   d6f22:	b998      	cbnz	r0, d6f4c <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6f24:	0653      	lsls	r3, r2, #25
   d6f26:	bf4c      	ite	mi
   d6f28:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d6f2c:	6a23      	ldrpl	r3, [r4, #32]
   d6f2e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6f30:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d6f34:	2e00      	cmp	r6, #0
   d6f36:	d0d4      	beq.n	d6ee2 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6f38:	6921      	ldr	r1, [r4, #16]
   d6f3a:	68a0      	ldr	r0, [r4, #8]
   d6f3c:	4642      	mov	r2, r8
   d6f3e:	f000 fa28 	bl	d7392 <_ZN9FatVolume6fatGetEmPm>
   d6f42:	2800      	cmp	r0, #0
   d6f44:	f106 36ff 	add.w	r6, r6, #4294967295
   d6f48:	dcf4      	bgt.n	d6f34 <_ZN7FatFile7seekSetEm+0x6a>
   d6f4a:	e7d2      	b.n	d6ef2 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d6f4c:	1af6      	subs	r6, r6, r3
   d6f4e:	e7ef      	b.n	d6f30 <_ZN7FatFile7seekSetEm+0x66>

000d6f50 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d6f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f52:	460f      	mov	r7, r1
   d6f54:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d6f56:	2100      	movs	r1, #0
   d6f58:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d6f5a:	4604      	mov	r4, r0
   d6f5c:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d6f5e:	f007 f85b 	bl	de018 <memset>
  m_vol = dirFile->m_vol;
   d6f62:	68b8      	ldr	r0, [r7, #8]
   d6f64:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d6f66:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6f68:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d6f6c:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d6f70:	6a3b      	ldr	r3, [r7, #32]
   d6f72:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6f74:	0171      	lsls	r1, r6, #5
   d6f76:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6f7a:	7af3      	ldrb	r3, [r6, #11]
   d6f7c:	071f      	lsls	r7, r3, #28
   d6f7e:	d446      	bmi.n	d700e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6f80:	1843      	adds	r3, r0, r1
   d6f82:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6f86:	f003 0317 	and.w	r3, r3, #23
   d6f8a:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6f8c:	7af2      	ldrb	r2, [r6, #11]
   d6f8e:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d6f92:	bf04      	itt	eq
   d6f94:	f043 0308 	orreq.w	r3, r3, #8
   d6f98:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d6f9a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6f9e:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d6fa0:	f005 0303 	and.w	r3, r5, #3
   d6fa4:	2b01      	cmp	r3, #1
   d6fa6:	d02c      	beq.n	d7002 <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d6fa8:	2b02      	cmp	r3, #2
   d6faa:	d028      	beq.n	d6ffe <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d6fac:	bb7b      	cbnz	r3, d700e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d6fae:	056a      	lsls	r2, r5, #21
   d6fb0:	d42d      	bmi.n	d700e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d6fb2:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d6fb4:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d6fb6:	78a2      	ldrb	r2, [r4, #2]
   d6fb8:	0793      	lsls	r3, r2, #30
   d6fba:	d504      	bpl.n	d6fc6 <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d6fbc:	7823      	ldrb	r3, [r4, #0]
   d6fbe:	06df      	lsls	r7, r3, #27
   d6fc0:	d425      	bmi.n	d700e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d6fc2:	07de      	lsls	r6, r3, #31
   d6fc4:	d423      	bmi.n	d700e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6fc6:	11ab      	asrs	r3, r5, #6
   d6fc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d6fcc:	f005 0608 	and.w	r6, r5, #8
   d6fd0:	4333      	orrs	r3, r6
   d6fd2:	4313      	orrs	r3, r2
   d6fd4:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d6fd6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d6fd8:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6fda:	1843      	adds	r3, r0, r1
   d6fdc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d6fe0:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6fe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d6fe8:	056a      	lsls	r2, r5, #21
   d6fea:	d513      	bpl.n	d7014 <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6fec:	b959      	cbnz	r1, d7006 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d6fee:	78a3      	ldrb	r3, [r4, #2]
   d6ff0:	f043 0304 	orr.w	r3, r3, #4
   d6ff4:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6ff6:	046b      	lsls	r3, r5, #17
   d6ff8:	d410      	bmi.n	d701c <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d6ffa:	2001      	movs	r0, #1
}
   d6ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d6ffe:	2303      	movs	r3, #3
   d7000:	e7d8      	b.n	d6fb4 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d7002:	2302      	movs	r3, #2
   d7004:	e7d6      	b.n	d6fb4 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d7006:	f000 fa64 	bl	d74d2 <_ZN9FatVolume9freeChainEm>
   d700a:	2800      	cmp	r0, #0
   d700c:	d1ef      	bne.n	d6fee <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d700e:	2000      	movs	r0, #0
   d7010:	7020      	strb	r0, [r4, #0]
  return false;
   d7012:	e7f3      	b.n	d6ffc <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d7014:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d7016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7018:	61e3      	str	r3, [r4, #28]
   d701a:	e7ec      	b.n	d6ff6 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d701c:	69e1      	ldr	r1, [r4, #28]
   d701e:	4620      	mov	r0, r4
   d7020:	f7ff ff53 	bl	d6eca <_ZN7FatFile7seekSetEm>
   d7024:	2800      	cmp	r0, #0
   d7026:	d1e8      	bne.n	d6ffa <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d7028:	e7f1      	b.n	d700e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
	...

000d702c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d702c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d702e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d7030:	4604      	mov	r4, r0
  if (!isOpen()) {
   d7032:	b90b      	cbnz	r3, d7038 <_ZN7FatFile4syncEv+0xc>
    return true;
   d7034:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d7036:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d7038:	7883      	ldrb	r3, [r0, #2]
   d703a:	075a      	lsls	r2, r3, #29
   d703c:	d523      	bpl.n	d7086 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d703e:	2101      	movs	r1, #1
   d7040:	f7ff fe06 	bl	d6c50 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d7044:	4605      	mov	r5, r0
   d7046:	b928      	cbnz	r0, d7054 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d7048:	7863      	ldrb	r3, [r4, #1]
   d704a:	f043 0301 	orr.w	r3, r3, #1
   d704e:	7063      	strb	r3, [r4, #1]
  return false;
   d7050:	2000      	movs	r0, #0
   d7052:	e7f0      	b.n	d7036 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d7054:	7803      	ldrb	r3, [r0, #0]
   d7056:	2be5      	cmp	r3, #229	; 0xe5
   d7058:	d0f6      	beq.n	d7048 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d705a:	7823      	ldrb	r3, [r4, #0]
   d705c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d705e:	bf44      	itt	mi
   d7060:	69e3      	ldrmi	r3, [r4, #28]
   d7062:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d7064:	8c23      	ldrh	r3, [r4, #32]
   d7066:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d7068:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d706a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d706c:	4b09      	ldr	r3, [pc, #36]	; (d7094 <_ZN7FatFile4syncEv+0x68>)
   d706e:	681b      	ldr	r3, [r3, #0]
   d7070:	b12b      	cbz	r3, d707e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d7072:	f100 0116 	add.w	r1, r0, #22
   d7076:	3018      	adds	r0, #24
   d7078:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d707a:	8b2b      	ldrh	r3, [r5, #24]
   d707c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d707e:	78a3      	ldrb	r3, [r4, #2]
   d7080:	f023 0304 	bic.w	r3, r3, #4
   d7084:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d7086:	68a0      	ldr	r0, [r4, #8]
   d7088:	f7ff fa81 	bl	d658e <_ZN9FatVolume9cacheSyncEv>
   d708c:	2800      	cmp	r0, #0
   d708e:	d0db      	beq.n	d7048 <_ZN7FatFile4syncEv+0x1c>
   d7090:	e7d0      	b.n	d7034 <_ZN7FatFile4syncEv+0x8>
   d7092:	bf00      	nop
   d7094:	2003e5b4 	.word	0x2003e5b4

000d7098 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d7098:	b510      	push	{r4, lr}
   d709a:	4604      	mov	r4, r0
  bool rtn = sync();
   d709c:	f7ff ffc6 	bl	d702c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d70a0:	2300      	movs	r3, #0
   d70a2:	7023      	strb	r3, [r4, #0]
}
   d70a4:	bd10      	pop	{r4, pc}

000d70a6 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d70a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d70a8:	b093      	sub	sp, #76	; 0x4c
   d70aa:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d70ac:	2300      	movs	r3, #0
   d70ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d70b2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d70b4:	9201      	str	r2, [sp, #4]
   d70b6:	4606      	mov	r6, r0
   d70b8:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d70ba:	b113      	cbz	r3, d70c2 <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d70bc:	2000      	movs	r0, #0
}
   d70be:	b013      	add	sp, #76	; 0x4c
   d70c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d70c2:	780b      	ldrb	r3, [r1, #0]
   d70c4:	f013 0f70 	tst.w	r3, #112	; 0x70
   d70c8:	d0f8      	beq.n	d70bc <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d70ca:	7813      	ldrb	r3, [r2, #0]
   d70cc:	2b2f      	cmp	r3, #47	; 0x2f
   d70ce:	d112      	bne.n	d70f6 <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d70d0:	9a01      	ldr	r2, [sp, #4]
   d70d2:	7813      	ldrb	r3, [r2, #0]
   d70d4:	2b2f      	cmp	r3, #47	; 0x2f
   d70d6:	d102      	bne.n	d70de <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d70d8:	3201      	adds	r2, #1
   d70da:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d70dc:	e7f8      	b.n	d70d0 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d70de:	68a1      	ldr	r1, [r4, #8]
   d70e0:	b91b      	cbnz	r3, d70ea <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d70e2:	4630      	mov	r0, r6
   d70e4:	f7ff fdc3 	bl	d6c6e <_ZN7FatFile8openRootEP9FatVolume>
   d70e8:	e7e9      	b.n	d70be <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d70ea:	a809      	add	r0, sp, #36	; 0x24
   d70ec:	f7ff fdbf 	bl	d6c6e <_ZN7FatFile8openRootEP9FatVolume>
   d70f0:	2800      	cmp	r0, #0
   d70f2:	d0e3      	beq.n	d70bc <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d70f4:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d70f6:	9801      	ldr	r0, [sp, #4]
   d70f8:	aa01      	add	r2, sp, #4
   d70fa:	a903      	add	r1, sp, #12
   d70fc:	f7ff fa64 	bl	d65c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d7100:	2800      	cmp	r0, #0
   d7102:	d0db      	beq.n	d70bc <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d7104:	9b01      	ldr	r3, [sp, #4]
   d7106:	781b      	ldrb	r3, [r3, #0]
   d7108:	b19b      	cbz	r3, d7132 <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d710a:	2300      	movs	r3, #0
   d710c:	aa03      	add	r2, sp, #12
   d710e:	4621      	mov	r1, r4
   d7110:	4630      	mov	r0, r6
   d7112:	f7ff fb8d 	bl	d6830 <_ZN7FatFile4openEPS_P7fname_ti>
   d7116:	2800      	cmp	r0, #0
   d7118:	d0d0      	beq.n	d70bc <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d711a:	4635      	mov	r5, r6
   d711c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d711e:	ac09      	add	r4, sp, #36	; 0x24
   d7120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7126:	682b      	ldr	r3, [r5, #0]
   d7128:	6023      	str	r3, [r4, #0]
    close();
   d712a:	4630      	mov	r0, r6
   d712c:	f7ff ffb4 	bl	d7098 <_ZN7FatFile5closeEv>
  while (1) {
   d7130:	e7e0      	b.n	d70f4 <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d7132:	463b      	mov	r3, r7
   d7134:	aa03      	add	r2, sp, #12
   d7136:	4621      	mov	r1, r4
   d7138:	4630      	mov	r0, r6
   d713a:	f7ff fb79 	bl	d6830 <_ZN7FatFile4openEPS_P7fname_ti>
   d713e:	e7be      	b.n	d70be <_ZN7FatFile4openEPS_PKci+0x18>

000d7140 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d7140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7144:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d7146:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7148:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d714a:	4604      	mov	r4, r0
   d714c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d714e:	d55b      	bpl.n	d7208 <_ZN7FatFile5writeEPKvj+0xc8>
   d7150:	7883      	ldrb	r3, [r0, #2]
   d7152:	079a      	lsls	r2, r3, #30
   d7154:	d558      	bpl.n	d7208 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d7156:	071b      	lsls	r3, r3, #28
   d7158:	d451      	bmi.n	d71fe <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d715a:	6963      	ldr	r3, [r4, #20]
   d715c:	43db      	mvns	r3, r3
   d715e:	42bb      	cmp	r3, r7
   d7160:	d352      	bcc.n	d7208 <_ZN7FatFile5writeEPKvj+0xc8>
   d7162:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7164:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d7168:	6966      	ldr	r6, [r4, #20]
   d716a:	f1b8 0f00 	cmp.w	r8, #0
   d716e:	f000 8091 	beq.w	d7294 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d7172:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d7174:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d7176:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d717a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d717e:	d10e      	bne.n	d719e <_ZN7FatFile5writeEPKvj+0x5e>
   d7180:	b96d      	cbnz	r5, d719e <_ZN7FatFile5writeEPKvj+0x5e>
   d7182:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d7184:	2900      	cmp	r1, #0
   d7186:	d046      	beq.n	d7216 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7188:	4652      	mov	r2, sl
   d718a:	f000 f902 	bl	d7392 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d718e:	2800      	cmp	r0, #0
   d7190:	db3a      	blt.n	d7208 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d7192:	d104      	bne.n	d719e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d7194:	4620      	mov	r0, r4
   d7196:	f7ff fd13 	bl	d6bc0 <_ZN7FatFile10addClusterEv>
   d719a:	2800      	cmp	r0, #0
   d719c:	d034      	beq.n	d7208 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d719e:	6921      	ldr	r1, [r4, #16]
   d71a0:	68a0      	ldr	r0, [r4, #8]
   d71a2:	f000 f8f0 	bl	d7386 <_ZNK9FatVolume17clusterFirstBlockEm>
   d71a6:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d71a8:	68a0      	ldr	r0, [r4, #8]
   d71aa:	b915      	cbnz	r5, d71b2 <_ZN7FatFile5writeEPKvj+0x72>
   d71ac:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d71b0:	d23f      	bcs.n	d7232 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d71b2:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d71b6:	4546      	cmp	r6, r8
   d71b8:	bf28      	it	cs
   d71ba:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d71bc:	2d00      	cmp	r5, #0
   d71be:	d136      	bne.n	d722e <_ZN7FatFile5writeEPKvj+0xee>
   d71c0:	6962      	ldr	r2, [r4, #20]
   d71c2:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d71c4:	429a      	cmp	r2, r3
   d71c6:	bf34      	ite	cc
   d71c8:	2201      	movcc	r2, #1
   d71ca:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d71cc:	3024      	adds	r0, #36	; 0x24
   d71ce:	f000 f8b7 	bl	d7340 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d71d2:	b1c8      	cbz	r0, d7208 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d71d4:	4428      	add	r0, r5
   d71d6:	4632      	mov	r2, r6
   d71d8:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d71da:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d71dc:	f006 fef4 	bl	ddfc8 <memcpy>
      if (512 == (n + blockOffset)) {
   d71e0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d71e4:	d104      	bne.n	d71f0 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d71e6:	68a0      	ldr	r0, [r4, #8]
   d71e8:	3024      	adds	r0, #36	; 0x24
   d71ea:	f000 f881 	bl	d72f0 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d71ee:	b158      	cbz	r0, d7208 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d71f0:	6963      	ldr	r3, [r4, #20]
   d71f2:	4433      	add	r3, r6
   d71f4:	6163      	str	r3, [r4, #20]
    src += n;
   d71f6:	44b1      	add	r9, r6
    nToWrite -= n;
   d71f8:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d71fc:	e7b4      	b.n	d7168 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d71fe:	69c1      	ldr	r1, [r0, #28]
   d7200:	f7ff fe63 	bl	d6eca <_ZN7FatFile7seekSetEm>
   d7204:	2800      	cmp	r0, #0
   d7206:	d1a8      	bne.n	d715a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d7208:	7863      	ldrb	r3, [r4, #1]
   d720a:	f043 0301 	orr.w	r3, r3, #1
   d720e:	7063      	strb	r3, [r4, #1]
  return -1;
   d7210:	f04f 30ff 	mov.w	r0, #4294967295
   d7214:	e050      	b.n	d72b8 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d7216:	6a23      	ldr	r3, [r4, #32]
   d7218:	b93b      	cbnz	r3, d722a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d721a:	4620      	mov	r0, r4
   d721c:	f7ff fcd0 	bl	d6bc0 <_ZN7FatFile10addClusterEv>
   d7220:	2800      	cmp	r0, #0
   d7222:	d0f1      	beq.n	d7208 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d7224:	6923      	ldr	r3, [r4, #16]
   d7226:	6223      	str	r3, [r4, #32]
   d7228:	e7b9      	b.n	d719e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d722a:	6123      	str	r3, [r4, #16]
   d722c:	e7b7      	b.n	d719e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d722e:	2201      	movs	r2, #1
   d7230:	e7cc      	b.n	d71cc <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d7232:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d7236:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d7238:	d31b      	bcc.n	d7272 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d723a:	f890 c004 	ldrb.w	ip, [r0, #4]
   d723e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d7242:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d7244:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d7248:	4573      	cmp	r3, lr
   d724a:	bf28      	it	cs
   d724c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d724e:	4291      	cmp	r1, r2
      n = 512*nb;
   d7250:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7254:	d307      	bcc.n	d7266 <_ZN7FatFile5writeEPKvj+0x126>
   d7256:	441a      	add	r2, r3
   d7258:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d725a:	bf82      	ittt	hi
   d725c:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   d7260:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7264:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d7266:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d7268:	464a      	mov	r2, r9
   d726a:	6828      	ldr	r0, [r5, #0]
   d726c:	f000 fc47 	bl	d7afe <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d7270:	e7bd      	b.n	d71ee <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d7272:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d7274:	bf02      	ittt	eq
   d7276:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   d727a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d727e:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d7280:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d7282:	464a      	mov	r2, r9
   d7284:	6818      	ldr	r0, [r3, #0]
   d7286:	f000 fbc4 	bl	d7a12 <_ZN9SdSpiCard10writeBlockEmPKh>
   d728a:	2800      	cmp	r0, #0
   d728c:	d0bc      	beq.n	d7208 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d728e:	f44f 7600 	mov.w	r6, #512	; 0x200
   d7292:	e7ad      	b.n	d71f0 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d7294:	69e2      	ldr	r2, [r4, #28]
   d7296:	78a3      	ldrb	r3, [r4, #2]
   d7298:	42b2      	cmp	r2, r6
   d729a:	d204      	bcs.n	d72a6 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d729c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d729e:	f043 0304 	orr.w	r3, r3, #4
   d72a2:	70a3      	strb	r3, [r4, #2]
   d72a4:	e003      	b.n	d72ae <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d72a6:	4a08      	ldr	r2, [pc, #32]	; (d72c8 <_ZN7FatFile5writeEPKvj+0x188>)
   d72a8:	6812      	ldr	r2, [r2, #0]
   d72aa:	2a00      	cmp	r2, #0
   d72ac:	d1f7      	bne.n	d729e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d72ae:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d72b2:	2b00      	cmp	r3, #0
   d72b4:	db02      	blt.n	d72bc <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d72b6:	4638      	mov	r0, r7
}
   d72b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d72bc:	4620      	mov	r0, r4
   d72be:	f7ff feb5 	bl	d702c <_ZN7FatFile4syncEv>
   d72c2:	2800      	cmp	r0, #0
   d72c4:	d1f7      	bne.n	d72b6 <_ZN7FatFile5writeEPKvj+0x176>
   d72c6:	e79f      	b.n	d7208 <_ZN7FatFile5writeEPKvj+0xc8>
   d72c8:	2003e5b4 	.word	0x2003e5b4

000d72cc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d72cc:	b513      	push	{r0, r1, r4, lr}
   d72ce:	4604      	mov	r4, r0
    }
   d72d0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d72d2:	b159      	cbz	r1, d72ec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d72d4:	9101      	str	r1, [sp, #4]
   d72d6:	f006 feea 	bl	de0ae <strlen>
   d72da:	6823      	ldr	r3, [r4, #0]
   d72dc:	9901      	ldr	r1, [sp, #4]
   d72de:	68db      	ldr	r3, [r3, #12]
   d72e0:	4602      	mov	r2, r0
   d72e2:	4620      	mov	r0, r4
    }
   d72e4:	b002      	add	sp, #8
   d72e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d72ea:	4718      	bx	r3
    }
   d72ec:	b002      	add	sp, #8
   d72ee:	bd10      	pop	{r4, pc}

000d72f0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d72f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d72f2:	7803      	ldrb	r3, [r0, #0]
   d72f4:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d72f6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d72f8:	d520      	bpl.n	d733c <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d72fa:	6843      	ldr	r3, [r0, #4]
   d72fc:	6881      	ldr	r1, [r0, #8]
   d72fe:	f100 020c 	add.w	r2, r0, #12
   d7302:	6818      	ldr	r0, [r3, #0]
   d7304:	9201      	str	r2, [sp, #4]
   d7306:	f000 fb84 	bl	d7a12 <_ZN9SdSpiCard10writeBlockEmPKh>
   d730a:	9a01      	ldr	r2, [sp, #4]
   d730c:	4605      	mov	r5, r0
   d730e:	b918      	cbnz	r0, d7318 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d7310:	2500      	movs	r5, #0
}
   d7312:	4628      	mov	r0, r5
   d7314:	b003      	add	sp, #12
   d7316:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d7318:	7823      	ldrb	r3, [r4, #0]
   d731a:	079b      	lsls	r3, r3, #30
   d731c:	d404      	bmi.n	d7328 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d731e:	7823      	ldrb	r3, [r4, #0]
   d7320:	f023 0301 	bic.w	r3, r3, #1
   d7324:	7023      	strb	r3, [r4, #0]
   d7326:	e7f4      	b.n	d7312 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d7328:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d732c:	6919      	ldr	r1, [r3, #16]
   d732e:	4401      	add	r1, r0
   d7330:	6818      	ldr	r0, [r3, #0]
   d7332:	f000 fb6e 	bl	d7a12 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d7336:	2800      	cmp	r0, #0
   d7338:	d1f1      	bne.n	d731e <_ZN8FatCache4syncEv+0x2e>
   d733a:	e7e9      	b.n	d7310 <_ZN8FatCache4syncEv+0x20>
  return true;
   d733c:	2501      	movs	r5, #1
   d733e:	e7e8      	b.n	d7312 <_ZN8FatCache4syncEv+0x22>

000d7340 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7340:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7342:	6883      	ldr	r3, [r0, #8]
   d7344:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7346:	4604      	mov	r4, r0
   d7348:	460e      	mov	r6, r1
   d734a:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d734c:	d009      	beq.n	d7362 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d734e:	f7ff ffcf 	bl	d72f0 <_ZN8FatCache4syncEv>
   d7352:	b908      	cbnz	r0, d7358 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d7354:	2000      	movs	r0, #0
}
   d7356:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d7358:	076b      	lsls	r3, r5, #29
   d735a:	d50a      	bpl.n	d7372 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d735c:	2300      	movs	r3, #0
   d735e:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7360:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d7362:	7822      	ldrb	r2, [r4, #0]
   d7364:	f005 0503 	and.w	r5, r5, #3
   d7368:	4620      	mov	r0, r4
   d736a:	4315      	orrs	r5, r2
   d736c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d7370:	e7f1      	b.n	d7356 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7372:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d7374:	f104 020c 	add.w	r2, r4, #12
   d7378:	6818      	ldr	r0, [r3, #0]
   d737a:	4631      	mov	r1, r6
   d737c:	f000 fac0 	bl	d7900 <_ZN9SdSpiCard9readBlockEmPh>
   d7380:	2800      	cmp	r0, #0
   d7382:	d1eb      	bne.n	d735c <_ZN8FatCache4readEmh+0x1c>
   d7384:	e7e6      	b.n	d7354 <_ZN8FatCache4readEmh+0x14>

000d7386 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d7386:	7983      	ldrb	r3, [r0, #6]
   d7388:	6940      	ldr	r0, [r0, #20]
   d738a:	3902      	subs	r1, #2
   d738c:	4099      	lsls	r1, r3
}
   d738e:	4408      	add	r0, r1
   d7390:	4770      	bx	lr

000d7392 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7392:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d7394:	b570      	push	{r4, r5, r6, lr}
   d7396:	4605      	mov	r5, r0
   d7398:	460c      	mov	r4, r1
   d739a:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d739c:	d802      	bhi.n	d73a4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d739e:	f04f 30ff 	mov.w	r0, #4294967295
}
   d73a2:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d73a4:	69c3      	ldr	r3, [r0, #28]
   d73a6:	428b      	cmp	r3, r1
   d73a8:	d3f9      	bcc.n	d739e <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d73aa:	79c3      	ldrb	r3, [r0, #7]
   d73ac:	2b20      	cmp	r3, #32
   d73ae:	d116      	bne.n	d73de <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d73b0:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d73b2:	2202      	movs	r2, #2
   d73b4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d73b8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d73bc:	f7ff ffc0 	bl	d7340 <_ZN8FatCache4readEmh>
    if (!pc) {
   d73c0:	2800      	cmp	r0, #0
   d73c2:	d0ec      	beq.n	d739e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d73c4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d73c8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d73cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d73d0:	69ea      	ldr	r2, [r5, #28]
   d73d2:	429a      	cmp	r2, r3
  *value = next;
   d73d4:	bf26      	itte	cs
   d73d6:	6033      	strcs	r3, [r6, #0]
  return 1;
   d73d8:	2001      	movcs	r0, #1
    return 0;
   d73da:	2000      	movcc	r0, #0
   d73dc:	e7e1      	b.n	d73a2 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d73de:	2b10      	cmp	r3, #16
   d73e0:	d1dd      	bne.n	d739e <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d73e2:	6983      	ldr	r3, [r0, #24]
   d73e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d73e8:	2202      	movs	r2, #2
   d73ea:	4419      	add	r1, r3
   d73ec:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d73f0:	f7ff ffa6 	bl	d7340 <_ZN8FatCache4readEmh>
    if (!pc) {
   d73f4:	2800      	cmp	r0, #0
   d73f6:	d0d2      	beq.n	d739e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d73f8:	b2e4      	uxtb	r4, r4
   d73fa:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d73fe:	e7e7      	b.n	d73d0 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d7400 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7400:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d7402:	b538      	push	{r3, r4, r5, lr}
   d7404:	460c      	mov	r4, r1
   d7406:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d7408:	d801      	bhi.n	d740e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d740a:	2000      	movs	r0, #0
}
   d740c:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d740e:	69c3      	ldr	r3, [r0, #28]
   d7410:	428b      	cmp	r3, r1
   d7412:	d3fa      	bcc.n	d740a <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d7414:	79c3      	ldrb	r3, [r0, #7]
   d7416:	2b20      	cmp	r3, #32
   d7418:	d10f      	bne.n	d743a <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d741a:	6981      	ldr	r1, [r0, #24]
   d741c:	2203      	movs	r2, #3
   d741e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7422:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7426:	f7ff ff8b 	bl	d7340 <_ZN8FatCache4readEmh>
    if (!pc) {
   d742a:	2800      	cmp	r0, #0
   d742c:	d0ed      	beq.n	d740a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d742e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7432:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d7436:	2001      	movs	r0, #1
   d7438:	e7e8      	b.n	d740c <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d743a:	2b10      	cmp	r3, #16
   d743c:	d1e5      	bne.n	d740a <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d743e:	6983      	ldr	r3, [r0, #24]
   d7440:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7444:	2203      	movs	r2, #3
   d7446:	4419      	add	r1, r3
   d7448:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d744c:	f7ff ff78 	bl	d7340 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7450:	2800      	cmp	r0, #0
   d7452:	d0da      	beq.n	d740a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d7454:	b2e4      	uxtb	r4, r4
   d7456:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d745a:	e7ec      	b.n	d7436 <_ZN9FatVolume6fatPutEmm+0x36>

000d745c <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d745c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d7460:	68c4      	ldr	r4, [r0, #12]
   d7462:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7464:	4605      	mov	r5, r0
   d7466:	460e      	mov	r6, r1
   d7468:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d746a:	d301      	bcc.n	d7470 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d746c:	2701      	movs	r7, #1
   d746e:	e001      	b.n	d7474 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7470:	460c      	mov	r4, r1
    setStart = false;
   d7472:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d7474:	69eb      	ldr	r3, [r5, #28]
    find++;
   d7476:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7478:	42a3      	cmp	r3, r4
   d747a:	d202      	bcs.n	d7482 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d747c:	b9c7      	cbnz	r7, d74b0 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d747e:	68ec      	ldr	r4, [r5, #12]
   d7480:	e7f4      	b.n	d746c <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d7482:	42a6      	cmp	r6, r4
   d7484:	d014      	beq.n	d74b0 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d7486:	aa01      	add	r2, sp, #4
   d7488:	4621      	mov	r1, r4
   d748a:	4628      	mov	r0, r5
   d748c:	f7ff ff81 	bl	d7392 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7490:	2800      	cmp	r0, #0
   d7492:	db0d      	blt.n	d74b0 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d7494:	d0ee      	beq.n	d7474 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7496:	9b01      	ldr	r3, [sp, #4]
   d7498:	2b00      	cmp	r3, #0
   d749a:	d1eb      	bne.n	d7474 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d749c:	b107      	cbz	r7, d74a0 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d749e:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d74a0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d74a4:	4621      	mov	r1, r4
   d74a6:	4628      	mov	r0, r5
   d74a8:	f7ff ffaa 	bl	d7400 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d74ac:	4607      	mov	r7, r0
   d74ae:	b920      	cbnz	r0, d74ba <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d74b0:	2700      	movs	r7, #0
}
   d74b2:	4638      	mov	r0, r7
   d74b4:	b002      	add	sp, #8
   d74b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d74ba:	b916      	cbnz	r6, d74c2 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d74bc:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d74c0:	e7f7      	b.n	d74b2 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d74c2:	4622      	mov	r2, r4
   d74c4:	4631      	mov	r1, r6
   d74c6:	4628      	mov	r0, r5
   d74c8:	f7ff ff9a 	bl	d7400 <_ZN9FatVolume6fatPutEmm>
   d74cc:	2800      	cmp	r0, #0
   d74ce:	d1f5      	bne.n	d74bc <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d74d0:	e7ee      	b.n	d74b0 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d74d2 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d74d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d74d4:	4605      	mov	r5, r0
   d74d6:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d74d8:	aa01      	add	r2, sp, #4
   d74da:	4621      	mov	r1, r4
   d74dc:	4628      	mov	r0, r5
   d74de:	f7ff ff58 	bl	d7392 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d74e2:	1e06      	subs	r6, r0, #0
   d74e4:	db10      	blt.n	d7508 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d74e6:	2200      	movs	r2, #0
   d74e8:	4621      	mov	r1, r4
   d74ea:	4628      	mov	r0, r5
   d74ec:	f7ff ff88 	bl	d7400 <_ZN9FatVolume6fatPutEmm>
   d74f0:	b150      	cbz	r0, d7508 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d74f2:	68eb      	ldr	r3, [r5, #12]
   d74f4:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d74f6:	bf24      	itt	cs
   d74f8:	f104 34ff 	addcs.w	r4, r4, #4294967295
   d74fc:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d74fe:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d7500:	2e00      	cmp	r6, #0
   d7502:	d1e9      	bne.n	d74d8 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d7504:	b002      	add	sp, #8
   d7506:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d7508:	2000      	movs	r0, #0
   d750a:	e7fb      	b.n	d7504 <_ZN9FatVolume9freeChainEm+0x32>

000d750c <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d750c:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d750e:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d7510:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7512:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d7514:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   d7518:	4604      	mov	r4, r0
  m_fatType = 0;
   d751a:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d751c:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d7520:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d7522:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7526:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d7528:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d752c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d7530:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d7534:	460d      	mov	r5, r1
   d7536:	b1b9      	cbz	r1, d7568 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d7538:	2904      	cmp	r1, #4
   d753a:	d901      	bls.n	d7540 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d753c:	2000      	movs	r0, #0
}
   d753e:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d7540:	4611      	mov	r1, r2
   d7542:	4630      	mov	r0, r6
   d7544:	f7ff fefc 	bl	d7340 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7548:	2800      	cmp	r0, #0
   d754a:	d0f7      	beq.n	d753c <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d754c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7550:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d7554:	065b      	lsls	r3, r3, #25
   d7556:	d1f1      	bne.n	d753c <_ZN9FatVolume4initEh+0x30>
   d7558:	f105 011b 	add.w	r1, r5, #27
   d755c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d7560:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d7564:	2d00      	cmp	r5, #0
   d7566:	d0e9      	beq.n	d753c <_ZN9FatVolume4initEh+0x30>
   d7568:	2200      	movs	r2, #0
   d756a:	4629      	mov	r1, r5
   d756c:	4630      	mov	r0, r6
   d756e:	f7ff fee7 	bl	d7340 <_ZN8FatCache4readEmh>
  if (!pc) {
   d7572:	2800      	cmp	r0, #0
   d7574:	d0e2      	beq.n	d753c <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d7576:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d757a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d757e:	d1dd      	bne.n	d753c <_ZN9FatVolume4initEh+0x30>
   d7580:	7c03      	ldrb	r3, [r0, #16]
   d7582:	2b02      	cmp	r3, #2
   d7584:	d1da      	bne.n	d753c <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d7586:	89c3      	ldrh	r3, [r0, #14]
   d7588:	2b00      	cmp	r3, #0
   d758a:	d0d7      	beq.n	d753c <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d758c:	7b41      	ldrb	r1, [r0, #13]
   d758e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d7590:	1e4b      	subs	r3, r1, #1
   d7592:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d7594:	2300      	movs	r3, #0
   d7596:	71a3      	strb	r3, [r4, #6]
   d7598:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d759a:	2301      	movs	r3, #1
   d759c:	4299      	cmp	r1, r3
   d759e:	d007      	beq.n	d75b0 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d75a0:	3e01      	subs	r6, #1
   d75a2:	d0cb      	beq.n	d753c <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d75a4:	79a2      	ldrb	r2, [r4, #6]
   d75a6:	005b      	lsls	r3, r3, #1
   d75a8:	3201      	adds	r2, #1
   d75aa:	b2db      	uxtb	r3, r3
   d75ac:	71a2      	strb	r2, [r4, #6]
   d75ae:	e7f5      	b.n	d759c <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d75b0:	8ac1      	ldrh	r1, [r0, #22]
   d75b2:	b901      	cbnz	r1, d75b6 <_ZN9FatVolume4initEh+0xaa>
   d75b4:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d75b6:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d75b8:	89c3      	ldrh	r3, [r0, #14]
   d75ba:	442b      	add	r3, r5
   d75bc:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d75be:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d75c2:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d75c4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d75c8:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d75ca:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d75ce:	0149      	lsls	r1, r1, #5
   d75d0:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d75d4:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d75d8:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d75da:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d75de:	b902      	cbnz	r2, d75e2 <_ZN9FatVolume4initEh+0xd6>
   d75e0:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d75e2:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d75e4:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d75e6:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d75e8:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d75ea:	1c4b      	adds	r3, r1, #1
   d75ec:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d75ee:	f640 73f4 	movw	r3, #4084	; 0xff4
   d75f2:	4299      	cmp	r1, r3
   d75f4:	d802      	bhi.n	d75fc <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d75f6:	230c      	movs	r3, #12
   d75f8:	71e3      	strb	r3, [r4, #7]
   d75fa:	e79f      	b.n	d753c <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d75fc:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d7600:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d7602:	bf85      	ittet	hi
   d7604:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d7606:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d7608:	2310      	movls	r3, #16
    m_fatType = 32;
   d760a:	2320      	movhi	r3, #32
   d760c:	71e3      	strb	r3, [r4, #7]
  return true;
   d760e:	2001      	movs	r0, #1
   d7610:	e795      	b.n	d753e <_ZN9FatVolume4initEh+0x32>
	...

000d7614 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7614:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7616:	4e0e      	ldr	r6, [pc, #56]	; (d7650 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7618:	460d      	mov	r5, r1
   d761a:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d761c:	f001 fb16 	bl	d8c4c <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7620:	6833      	ldr	r3, [r6, #0]
   d7622:	1ac0      	subs	r0, r0, r3
   d7624:	4b0b      	ldr	r3, [pc, #44]	; (d7654 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d7626:	4298      	cmp	r0, r3
   d7628:	d908      	bls.n	d763c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d762a:	f001 fb17 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d762e:	4b0a      	ldr	r3, [pc, #40]	; (d7658 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7630:	6018      	str	r0, [r3, #0]
    		spark_process();
   d7632:	f001 fe07 	bl	d9244 <spark_process>
   d7636:	f001 fb09 	bl	d8c4c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d763a:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d763c:	f001 fb0e 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7640:	b280      	uxth	r0, r0
   d7642:	1b40      	subs	r0, r0, r5
}
   d7644:	42a0      	cmp	r0, r4
   d7646:	bfd4      	ite	le
   d7648:	2000      	movle	r0, #0
   d764a:	2001      	movgt	r0, #1
   d764c:	bd70      	pop	{r4, r5, r6, pc}
   d764e:	bf00      	nop
   d7650:	2003e5bc 	.word	0x2003e5bc
   d7654:	000186a0 	.word	0x000186a0
   d7658:	2003e7b8 	.word	0x2003e7b8

000d765c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d765c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d765e:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d7660:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7662:	b94d      	cbnz	r5, d7678 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7664:	6840      	ldr	r0, [r0, #4]
   d7666:	f000 fa6b 	bl	d7b40 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d766a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d766c:	4629      	mov	r1, r5
   d766e:	7d18      	ldrb	r0, [r3, #20]
   d7670:	f004 f945 	bl	db8fe <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7674:	2301      	movs	r3, #1
   d7676:	7223      	strb	r3, [r4, #8]
  }
}
   d7678:	bd38      	pop	{r3, r4, r5, pc}

000d767a <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d767a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d767c:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d767e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7680:	b16b      	cbz	r3, d769e <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d7682:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d7684:	2101      	movs	r1, #1
   d7686:	7d18      	ldrb	r0, [r3, #20]
   d7688:	f004 f939 	bl	db8fe <digitalWrite>
     m_spiDriver->send(data);
   d768c:	6860      	ldr	r0, [r4, #4]
   d768e:	21ff      	movs	r1, #255	; 0xff
   d7690:	f000 fa88 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d7694:	6860      	ldr	r0, [r4, #4]
   d7696:	f000 fa67 	bl	d7b68 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d769a:	2300      	movs	r3, #0
   d769c:	7223      	strb	r3, [r4, #8]
  }
}
   d769e:	bd10      	pop	{r4, pc}

000d76a0 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d76a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76a2:	4604      	mov	r4, r0
   d76a4:	460d      	mov	r5, r1
   d76a6:	4616      	mov	r6, r2
   d76a8:	f001 fad8 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d76ac:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d76ae:	6860      	ldr	r0, [r4, #4]
   d76b0:	f000 fa5d 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d76b4:	28ff      	cmp	r0, #255	; 0xff
   d76b6:	7260      	strb	r0, [r4, #9]
   d76b8:	d10e      	bne.n	d76d8 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d76ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d76be:	4639      	mov	r1, r7
   d76c0:	4620      	mov	r0, r4
   d76c2:	f7ff ffa7 	bl	d7614 <_ZN9SdSpiCard10isTimedOutEtt>
   d76c6:	2800      	cmp	r0, #0
   d76c8:	d0f1      	beq.n	d76ae <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d76ca:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d76cc:	4620      	mov	r0, r4
   d76ce:	7023      	strb	r3, [r4, #0]
   d76d0:	f7ff ffd3 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76d4:	2000      	movs	r0, #0
}
   d76d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d76d8:	28fe      	cmp	r0, #254	; 0xfe
   d76da:	d001      	beq.n	d76e0 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d76dc:	2350      	movs	r3, #80	; 0x50
   d76de:	e7f5      	b.n	d76cc <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d76e0:	6860      	ldr	r0, [r4, #4]
   d76e2:	4632      	mov	r2, r6
   d76e4:	4629      	mov	r1, r5
   d76e6:	f000 fa47 	bl	d7b78 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d76ea:	7260      	strb	r0, [r4, #9]
   d76ec:	b108      	cbz	r0, d76f2 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d76ee:	2360      	movs	r3, #96	; 0x60
   d76f0:	e7ec      	b.n	d76cc <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d76f2:	6860      	ldr	r0, [r4, #4]
   d76f4:	f000 fa3b 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
   d76f8:	6860      	ldr	r0, [r4, #4]
   d76fa:	f000 fa38 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
   d76fe:	2001      	movs	r0, #1
   d7700:	e7e9      	b.n	d76d6 <_ZN9SdSpiCard8readDataEPhj+0x36>

000d7702 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7702:	b570      	push	{r4, r5, r6, lr}
   d7704:	4604      	mov	r4, r0
   d7706:	460e      	mov	r6, r1
   d7708:	f001 faa8 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
   d770c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d770e:	4632      	mov	r2, r6
   d7710:	4629      	mov	r1, r5
   d7712:	4620      	mov	r0, r4
   d7714:	f7ff ff7e 	bl	d7614 <_ZN9SdSpiCard10isTimedOutEtt>
   d7718:	b930      	cbnz	r0, d7728 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d771a:	6860      	ldr	r0, [r4, #4]
   d771c:	f000 fa27 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7720:	28ff      	cmp	r0, #255	; 0xff
   d7722:	d1f4      	bne.n	d770e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7724:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d7726:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d7728:	2000      	movs	r0, #0
   d772a:	e7fc      	b.n	d7726 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d772c <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d772c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d772e:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7730:	9201      	str	r2, [sp, #4]
   d7732:	4604      	mov	r4, r0
   d7734:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d7736:	b90b      	cbnz	r3, d773c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7738:	f7ff ff90 	bl	d765c <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d773c:	b125      	cbz	r5, d7748 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d773e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7742:	4620      	mov	r0, r4
   d7744:	f7ff ffdd 	bl	d7702 <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d7748:	6860      	ldr	r0, [r4, #4]
   d774a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d774e:	f000 fa29 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
   d7752:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d7754:	af01      	add	r7, sp, #4
   d7756:	5db9      	ldrb	r1, [r7, r6]
   d7758:	6860      	ldr	r0, [r4, #4]
   d775a:	f000 fa23 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d775e:	3e01      	subs	r6, #1
   d7760:	d2f9      	bcs.n	d7756 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7762:	2d00      	cmp	r5, #0
   d7764:	6860      	ldr	r0, [r4, #4]
   d7766:	bf0c      	ite	eq
   d7768:	2195      	moveq	r1, #149	; 0x95
   d776a:	2187      	movne	r1, #135	; 0x87
   d776c:	f000 fa1a 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7770:	6860      	ldr	r0, [r4, #4]
   d7772:	f000 f9fc 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
   d7776:	250b      	movs	r5, #11
   d7778:	6860      	ldr	r0, [r4, #4]
   d777a:	f000 f9f8 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d777e:	0603      	lsls	r3, r0, #24
   d7780:	7260      	strb	r0, [r4, #9]
   d7782:	d503      	bpl.n	d778c <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d7784:	3d01      	subs	r5, #1
   d7786:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d778a:	d1f5      	bne.n	d7778 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d778c:	b003      	add	sp, #12
   d778e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7790 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7790:	b570      	push	{r4, r5, r6, lr}
   d7792:	4604      	mov	r4, r0
   d7794:	460d      	mov	r5, r1
   d7796:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7798:	2137      	movs	r1, #55	; 0x37
   d779a:	2200      	movs	r2, #0
   d779c:	f7ff ffc6 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d77a0:	4632      	mov	r2, r6
   d77a2:	4629      	mov	r1, r5
   d77a4:	4620      	mov	r0, r4
  }
   d77a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d77aa:	f7ff bfbf 	b.w	d772c <_ZN9SdSpiCard11cardCommandEhm>
	...

000d77b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d77b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d77b4:	2500      	movs	r5, #0
   d77b6:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d77b8:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d77ba:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d77bc:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d77be:	4604      	mov	r4, r0
   d77c0:	4690      	mov	r8, r2
   d77c2:	461e      	mov	r6, r3
   d77c4:	f001 fa4a 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d77c8:	4641      	mov	r1, r8
   d77ca:	4607      	mov	r7, r0
   d77cc:	6860      	ldr	r0, [r4, #4]
   d77ce:	f000 f9bb 	bl	d7b48 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d77d2:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d77d4:	4a49      	ldr	r2, [pc, #292]	; (d78fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d77d6:	721d      	strb	r5, [r3, #8]
   d77d8:	2501      	movs	r5, #1
   d77da:	60da      	str	r2, [r3, #12]
   d77dc:	821d      	strh	r5, [r3, #16]
  spiStart();
   d77de:	4620      	mov	r0, r4
   d77e0:	f7ff ff3c 	bl	d765c <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d77e4:	6863      	ldr	r3, [r4, #4]
   d77e6:	4629      	mov	r1, r5
   d77e8:	7d18      	ldrb	r0, [r3, #20]
   d77ea:	f004 f888 	bl	db8fe <digitalWrite>
   d77ee:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d77f0:	6860      	ldr	r0, [r4, #4]
   d77f2:	21ff      	movs	r1, #255	; 0xff
   d77f4:	3d01      	subs	r5, #1
   d77f6:	f000 f9d5 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d77fa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d77fe:	d1f7      	bne.n	d77f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d7800:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d7802:	4629      	mov	r1, r5
   d7804:	7d18      	ldrb	r0, [r3, #20]
   d7806:	f004 f87a 	bl	db8fe <digitalWrite>
  }
   d780a:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d780c:	2200      	movs	r2, #0
   d780e:	4611      	mov	r1, r2
   d7810:	4620      	mov	r0, r4
   d7812:	f7ff ff8b 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
   d7816:	2801      	cmp	r0, #1
   d7818:	4680      	mov	r8, r0
   d781a:	d018      	beq.n	d784e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d781c:	3d01      	subs	r5, #1
   d781e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7822:	d107      	bne.n	d7834 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d7824:	2320      	movs	r3, #32
  spiStop();
   d7826:	4620      	mov	r0, r4
   d7828:	7023      	strb	r3, [r4, #0]
   d782a:	f7ff ff26 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d782e:	2000      	movs	r0, #0
}
   d7830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d7834:	6860      	ldr	r0, [r4, #4]
   d7836:	21fd      	movs	r1, #253	; 0xfd
   d7838:	f000 f9b4 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
   d783c:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d7840:	6860      	ldr	r0, [r4, #4]
   d7842:	f000 f994 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d7846:	f1b8 0801 	subs.w	r8, r8, #1
   d784a:	d1f9      	bne.n	d7840 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d784c:	e7de      	b.n	d780c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d784e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7852:	2108      	movs	r1, #8
   d7854:	4620      	mov	r0, r4
   d7856:	f7ff ff69 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
   d785a:	2805      	cmp	r0, #5
   d785c:	d114      	bne.n	d7888 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d785e:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7862:	2500      	movs	r5, #0
   d7864:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d7866:	462a      	mov	r2, r5
   d7868:	2129      	movs	r1, #41	; 0x29
   d786a:	4620      	mov	r0, r4
   d786c:	f7ff ff90 	bl	d7790 <_ZN9SdSpiCard8cardAcmdEhm>
   d7870:	4602      	mov	r2, r0
   d7872:	b1d8      	cbz	r0, d78ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7874:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7878:	4639      	mov	r1, r7
   d787a:	4620      	mov	r0, r4
   d787c:	f7ff feca 	bl	d7614 <_ZN9SdSpiCard10isTimedOutEtt>
   d7880:	2800      	cmp	r0, #0
   d7882:	d0f0      	beq.n	d7866 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d7884:	2343      	movs	r3, #67	; 0x43
   d7886:	e7ce      	b.n	d7826 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d7888:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d788a:	6860      	ldr	r0, [r4, #4]
   d788c:	f000 f96f 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
   d7890:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d7892:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7896:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d7898:	d1f7      	bne.n	d788a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d789a:	28aa      	cmp	r0, #170	; 0xaa
   d789c:	d104      	bne.n	d78a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d789e:	2302      	movs	r3, #2
   d78a0:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d78a2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d78a6:	e7dd      	b.n	d7864 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d78a8:	2325      	movs	r3, #37	; 0x25
   d78aa:	e7bc      	b.n	d7826 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d78ac:	7aa3      	ldrb	r3, [r4, #10]
   d78ae:	2b02      	cmp	r3, #2
   d78b0:	d118      	bne.n	d78e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d78b2:	213a      	movs	r1, #58	; 0x3a
   d78b4:	4620      	mov	r0, r4
   d78b6:	f7ff ff39 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
   d78ba:	b108      	cbz	r0, d78c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d78bc:	2337      	movs	r3, #55	; 0x37
   d78be:	e7b2      	b.n	d7826 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d78c0:	6860      	ldr	r0, [r4, #4]
   d78c2:	f000 f954 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d78c6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d78ca:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d78cc:	bf04      	itt	eq
   d78ce:	2303      	moveq	r3, #3
   d78d0:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d78d2:	6860      	ldr	r0, [r4, #4]
   d78d4:	f000 f94b 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
   d78d8:	6860      	ldr	r0, [r4, #4]
   d78da:	f000 f948 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
   d78de:	6860      	ldr	r0, [r4, #4]
   d78e0:	f000 f945 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d78e4:	4620      	mov	r0, r4
   d78e6:	f7ff fec8 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d78ea:	6863      	ldr	r3, [r4, #4]
   d78ec:	7930      	ldrb	r0, [r6, #4]
   d78ee:	68b1      	ldr	r1, [r6, #8]
   d78f0:	89b2      	ldrh	r2, [r6, #12]
   d78f2:	821a      	strh	r2, [r3, #16]
   d78f4:	7218      	strb	r0, [r3, #8]
   d78f6:	60d9      	str	r1, [r3, #12]
  return true;
   d78f8:	2001      	movs	r0, #1
   d78fa:	e799      	b.n	d7830 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d78fc:	0003d090 	.word	0x0003d090

000d7900 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7900:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7902:	7a83      	ldrb	r3, [r0, #10]
   d7904:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7906:	bf18      	it	ne
   d7908:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d790a:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d790c:	460a      	mov	r2, r1
   d790e:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7910:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d7912:	f7ff ff0b 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
   d7916:	b130      	cbz	r0, d7926 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d7918:	2330      	movs	r3, #48	; 0x30
   d791a:	7023      	strb	r3, [r4, #0]
  spiStop();
   d791c:	4620      	mov	r0, r4
   d791e:	f7ff feac 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7922:	2500      	movs	r5, #0
   d7924:	e00b      	b.n	d793e <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d7926:	4629      	mov	r1, r5
   d7928:	f44f 7200 	mov.w	r2, #512	; 0x200
   d792c:	4620      	mov	r0, r4
   d792e:	f7ff feb7 	bl	d76a0 <_ZN9SdSpiCard8readDataEPhj>
   d7932:	4605      	mov	r5, r0
   d7934:	2800      	cmp	r0, #0
   d7936:	d0f1      	beq.n	d791c <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d7938:	4620      	mov	r0, r4
   d793a:	f7ff fe9e 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
}
   d793e:	4628      	mov	r0, r5
   d7940:	bd38      	pop	{r3, r4, r5, pc}

000d7942 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7942:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7944:	7a83      	ldrb	r3, [r0, #10]
   d7946:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7948:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d794a:	bf18      	it	ne
   d794c:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d794e:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7950:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d7952:	f7ff feeb 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
   d7956:	b130      	cbz	r0, d7966 <_ZN9SdSpiCard9readStartEm+0x24>
   d7958:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d795a:	4620      	mov	r0, r4
   d795c:	7023      	strb	r3, [r4, #0]
   d795e:	f7ff fe8c 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7962:	2000      	movs	r0, #0
}
   d7964:	bd10      	pop	{r4, pc}
  return true;
   d7966:	2001      	movs	r0, #1
   d7968:	e7fc      	b.n	d7964 <_ZN9SdSpiCard9readStartEm+0x22>

000d796a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d796a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d796c:	2200      	movs	r2, #0
   d796e:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d7970:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7972:	f7ff fedb 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
   d7976:	b130      	cbz	r0, d7986 <_ZN9SdSpiCard8readStopEv+0x1c>
   d7978:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d797a:	4620      	mov	r0, r4
   d797c:	7023      	strb	r3, [r4, #0]
   d797e:	f7ff fe7c 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7982:	2000      	movs	r0, #0
}
   d7984:	bd10      	pop	{r4, pc}
  spiStop();
   d7986:	4620      	mov	r0, r4
   d7988:	f7ff fe77 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d798c:	2001      	movs	r0, #1
   d798e:	e7f9      	b.n	d7984 <_ZN9SdSpiCard8readStopEv+0x1a>

000d7990 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7992:	4604      	mov	r4, r0
   d7994:	4616      	mov	r6, r2
   d7996:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7998:	f7ff ffd3 	bl	d7942 <_ZN9SdSpiCard9readStartEm>
   d799c:	b168      	cbz	r0, d79ba <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d799e:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d79a0:	b2ab      	uxth	r3, r5
   d79a2:	429f      	cmp	r7, r3
   d79a4:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d79a8:	d909      	bls.n	d79be <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d79aa:	f44f 7200 	mov.w	r2, #512	; 0x200
   d79ae:	4620      	mov	r0, r4
   d79b0:	f7ff fe76 	bl	d76a0 <_ZN9SdSpiCard8readDataEPhj>
   d79b4:	3501      	adds	r5, #1
   d79b6:	2800      	cmp	r0, #0
   d79b8:	d1f2      	bne.n	d79a0 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d79ba:	2000      	movs	r0, #0
   d79bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d79be:	4620      	mov	r0, r4
}
   d79c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d79c4:	f7ff bfd1 	b.w	d796a <_ZN9SdSpiCard8readStopEv>

000d79c8 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d79c8:	b538      	push	{r3, r4, r5, lr}
   d79ca:	4604      	mov	r4, r0
   d79cc:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d79ce:	6840      	ldr	r0, [r0, #4]
   d79d0:	f000 f8e8 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d79d4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d79d8:	6860      	ldr	r0, [r4, #4]
   d79da:	4629      	mov	r1, r5
   d79dc:	f000 f8e6 	bl	d7bac <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d79e0:	6860      	ldr	r0, [r4, #4]
   d79e2:	21ff      	movs	r1, #255	; 0xff
   d79e4:	f000 f8de 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
   d79e8:	6860      	ldr	r0, [r4, #4]
   d79ea:	21ff      	movs	r1, #255	; 0xff
   d79ec:	f000 f8da 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d79f0:	6860      	ldr	r0, [r4, #4]
   d79f2:	f000 f8bc 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d79f6:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d79f8:	f000 001f 	and.w	r0, r0, #31
   d79fc:	2805      	cmp	r0, #5
   d79fe:	d006      	beq.n	d7a0e <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d7a00:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7a02:	4620      	mov	r0, r4
   d7a04:	7023      	strb	r3, [r4, #0]
   d7a06:	f7ff fe38 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a0a:	2000      	movs	r0, #0
}
   d7a0c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d7a0e:	2001      	movs	r0, #1
   d7a10:	e7fc      	b.n	d7a0c <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d7a12 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7a12:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7a14:	7a83      	ldrb	r3, [r0, #10]
   d7a16:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7a18:	bf18      	it	ne
   d7a1a:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7a1c:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d7a1e:	460a      	mov	r2, r1
   d7a20:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7a22:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d7a24:	f7ff fe82 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
   d7a28:	4606      	mov	r6, r0
   d7a2a:	b130      	cbz	r0, d7a3a <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d7a2c:	2332      	movs	r3, #50	; 0x32
   d7a2e:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7a30:	4620      	mov	r0, r4
   d7a32:	f7ff fe22 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a36:	2500      	movs	r5, #0
   d7a38:	e01f      	b.n	d7a7a <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d7a3a:	462a      	mov	r2, r5
   d7a3c:	21fe      	movs	r1, #254	; 0xfe
   d7a3e:	4620      	mov	r0, r4
   d7a40:	f7ff ffc2 	bl	d79c8 <_ZN9SdSpiCard9writeDataEhPKh>
   d7a44:	2800      	cmp	r0, #0
   d7a46:	d0f3      	beq.n	d7a30 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a48:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7a4c:	4620      	mov	r0, r4
   d7a4e:	f7ff fe58 	bl	d7702 <_ZN9SdSpiCard11waitNotBusyEt>
   d7a52:	4605      	mov	r5, r0
   d7a54:	b908      	cbnz	r0, d7a5a <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d7a56:	235a      	movs	r3, #90	; 0x5a
   d7a58:	e7e9      	b.n	d7a2e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7a5a:	4632      	mov	r2, r6
   d7a5c:	210d      	movs	r1, #13
   d7a5e:	4620      	mov	r0, r4
   d7a60:	f7ff fe64 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
   d7a64:	b108      	cbz	r0, d7a6a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d7a66:	2329      	movs	r3, #41	; 0x29
   d7a68:	e7e1      	b.n	d7a2e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d7a6a:	6860      	ldr	r0, [r4, #4]
   d7a6c:	f000 f87f 	bl	d7b6e <_ZN14SdSpiAltDriver7receiveEv>
   d7a70:	2800      	cmp	r0, #0
   d7a72:	d1f8      	bne.n	d7a66 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d7a74:	4620      	mov	r0, r4
   d7a76:	f7ff fe00 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
}
   d7a7a:	4628      	mov	r0, r5
   d7a7c:	bd70      	pop	{r4, r5, r6, pc}

000d7a7e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d7a7e:	b513      	push	{r0, r1, r4, lr}
   d7a80:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a82:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d7a86:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a88:	f7ff fe3b 	bl	d7702 <_ZN9SdSpiCard11waitNotBusyEt>
   d7a8c:	9a01      	ldr	r2, [sp, #4]
   d7a8e:	b930      	cbnz	r0, d7a9e <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d7a90:	235b      	movs	r3, #91	; 0x5b
   d7a92:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7a94:	4620      	mov	r0, r4
   d7a96:	f7ff fdf0 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a9a:	2000      	movs	r0, #0
   d7a9c:	e005      	b.n	d7aaa <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7a9e:	21fc      	movs	r1, #252	; 0xfc
   d7aa0:	4620      	mov	r0, r4
   d7aa2:	f7ff ff91 	bl	d79c8 <_ZN9SdSpiCard9writeDataEhPKh>
   d7aa6:	2800      	cmp	r0, #0
   d7aa8:	d0f4      	beq.n	d7a94 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d7aaa:	b002      	add	sp, #8
   d7aac:	bd10      	pop	{r4, pc}

000d7aae <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7aae:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7ab0:	7a83      	ldrb	r3, [r0, #10]
   d7ab2:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7ab4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d7ab6:	bf18      	it	ne
   d7ab8:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7aba:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7abc:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d7abe:	f7ff fe35 	bl	d772c <_ZN9SdSpiCard11cardCommandEhm>
   d7ac2:	b130      	cbz	r0, d7ad2 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7ac4:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7ac6:	4620      	mov	r0, r4
   d7ac8:	7023      	strb	r3, [r4, #0]
   d7aca:	f7ff fdd6 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7ace:	2000      	movs	r0, #0
}
   d7ad0:	bd10      	pop	{r4, pc}
  return true;
   d7ad2:	2001      	movs	r0, #1
   d7ad4:	e7fc      	b.n	d7ad0 <_ZN9SdSpiCard10writeStartEm+0x22>

000d7ad6 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7ad6:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7ad8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d7adc:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7ade:	f7ff fe10 	bl	d7702 <_ZN9SdSpiCard11waitNotBusyEt>
   d7ae2:	4605      	mov	r5, r0
   d7ae4:	b930      	cbnz	r0, d7af4 <_ZN9SdSpiCard9writeStopEv+0x1e>
   d7ae6:	2356      	movs	r3, #86	; 0x56
   d7ae8:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d7aea:	4620      	mov	r0, r4
   d7aec:	f7ff fdc5 	bl	d767a <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d7af0:	4628      	mov	r0, r5
   d7af2:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d7af4:	6860      	ldr	r0, [r4, #4]
   d7af6:	21fd      	movs	r1, #253	; 0xfd
   d7af8:	f000 f854 	bl	d7ba4 <_ZN14SdSpiAltDriver4sendEh>
   d7afc:	e7f5      	b.n	d7aea <_ZN9SdSpiCard9writeStopEv+0x14>

000d7afe <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b00:	4604      	mov	r4, r0
   d7b02:	4616      	mov	r6, r2
   d7b04:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7b06:	f7ff ffd2 	bl	d7aae <_ZN9SdSpiCard10writeStartEm>
   d7b0a:	b170      	cbz	r0, d7b2a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7b0c:	2500      	movs	r5, #0
   d7b0e:	42bd      	cmp	r5, r7
   d7b10:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d7b14:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d7b16:	d004      	beq.n	d7b22 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7b18:	f7ff ffb1 	bl	d7a7e <_ZN9SdSpiCard9writeDataEPKh>
   d7b1c:	b128      	cbz	r0, d7b2a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7b1e:	3501      	adds	r5, #1
   d7b20:	e7f5      	b.n	d7b0e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d7b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d7b26:	f7ff bfd6 	b.w	d7ad6 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d7b2a:	4620      	mov	r0, r4
   d7b2c:	f7ff fda5 	bl	d767a <_ZN9SdSpiCard7spiStopEv>
}
   d7b30:	2000      	movs	r0, #0
   d7b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b34 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7b34:	4b01      	ldr	r3, [pc, #4]	; (d7b3c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7b36:	2201      	movs	r2, #1
   d7b38:	701a      	strb	r2, [r3, #0]
}
   d7b3a:	4770      	bx	lr
   d7b3c:	2003e5c0 	.word	0x2003e5c0

000d7b40 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7b40:	1d01      	adds	r1, r0, #4
   d7b42:	6800      	ldr	r0, [r0, #0]
   d7b44:	f001 bc6e 	b.w	d9424 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d7b48 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7b48:	b510      	push	{r4, lr}
   d7b4a:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7b4c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7b4e:	6800      	ldr	r0, [r0, #0]
   d7b50:	f001 fc3e 	bl	d93d0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7b54:	7d20      	ldrb	r0, [r4, #20]
   d7b56:	2101      	movs	r1, #1
   d7b58:	f003 fec0 	bl	db8dc <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7b5c:	7d20      	ldrb	r0, [r4, #20]
   d7b5e:	2101      	movs	r1, #1
}
   d7b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d7b64:	f003 becb 	b.w	db8fe <digitalWrite>

000d7b68 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7b68:	6800      	ldr	r0, [r0, #0]
   d7b6a:	f001 bc42 	b.w	d93f2 <_ZN8SPIClass14endTransactionEv>

000d7b6e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7b6e:	6800      	ldr	r0, [r0, #0]
   d7b70:	21ff      	movs	r1, #255	; 0xff
   d7b72:	f001 bcc5 	b.w	d9500 <_ZN8SPIClass8transferEh>
	...

000d7b78 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7b7a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b7c:	4a07      	ldr	r2, [pc, #28]	; (d7b9c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7b7e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7b80:	2500      	movs	r5, #0
   d7b82:	4c07      	ldr	r4, [pc, #28]	; (d7ba0 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b84:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7b86:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b88:	460a      	mov	r2, r1
   d7b8a:	4629      	mov	r1, r5
   d7b8c:	f001 fcbe 	bl	d950c <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7b90:	7823      	ldrb	r3, [r4, #0]
   d7b92:	2b00      	cmp	r3, #0
   d7b94:	d0fc      	beq.n	d7b90 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7b96:	2000      	movs	r0, #0
   d7b98:	b003      	add	sp, #12
   d7b9a:	bd30      	pop	{r4, r5, pc}
   d7b9c:	000d7b35 	.word	0x000d7b35
   d7ba0:	2003e5c0 	.word	0x2003e5c0

000d7ba4 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7ba4:	6800      	ldr	r0, [r0, #0]
   d7ba6:	f001 bcab 	b.w	d9500 <_ZN8SPIClass8transferEh>
	...

000d7bac <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7bae:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7bb0:	4a06      	ldr	r2, [pc, #24]	; (d7bcc <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7bb2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7bb4:	2500      	movs	r5, #0
   d7bb6:	4c06      	ldr	r4, [pc, #24]	; (d7bd0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7bb8:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7bba:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7bbc:	462a      	mov	r2, r5
   d7bbe:	f001 fca5 	bl	d950c <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d7bc2:	7823      	ldrb	r3, [r4, #0]
   d7bc4:	2b00      	cmp	r3, #0
   d7bc6:	d0fc      	beq.n	d7bc2 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7bc8:	b003      	add	sp, #12
   d7bca:	bd30      	pop	{r4, r5, pc}
   d7bcc:	000d7b35 	.word	0x000d7b35
   d7bd0:	2003e5c0 	.word	0x2003e5c0

000d7bd4 <_ZN16Adafruit_SSD167513setRAMAddressEtt>:
    @brief Some displays require setting the RAM address pointer
    @param x X address counter value
    @param y Y address counter value
*/
/**************************************************************************/
void Adafruit_SSD1675::setRAMAddress(uint16_t x, uint16_t y) {
   d7bd4:	b513      	push	{r0, r1, r4, lr}
  uint8_t buf[2];

  // Set RAM X address counter
  buf[0] = 0;
   d7bd6:	2300      	movs	r3, #0
   d7bd8:	f88d 3004 	strb.w	r3, [sp, #4]
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d7bdc:	aa01      	add	r2, sp, #4
   d7bde:	2301      	movs	r3, #1
   d7be0:	214e      	movs	r1, #78	; 0x4e
void Adafruit_SSD1675::setRAMAddress(uint16_t x, uint16_t y) {
   d7be2:	4604      	mov	r4, r0
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d7be4:	f000 fe55 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>

  // Set RAM Y address counter
  buf[0] = 0xF9;
   d7be8:	23f9      	movs	r3, #249	; 0xf9
   d7bea:	f8ad 3004 	strh.w	r3, [sp, #4]
  buf[1] = 0x00;
  EPD_command(SSD1675_SET_RAMYCOUNT, buf, 2);
   d7bee:	aa01      	add	r2, sp, #4
   d7bf0:	2302      	movs	r3, #2
   d7bf2:	214f      	movs	r1, #79	; 0x4f
   d7bf4:	4620      	mov	r0, r4
   d7bf6:	f000 fe4c 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
}
   d7bfa:	b002      	add	sp, #8
   d7bfc:	bd10      	pop	{r4, pc}

000d7bfe <_ZN16Adafruit_SSD167515writeRAMCommandEh>:
  if (index == 0) {
   d7bfe:	460a      	mov	r2, r1
   d7c00:	b911      	cbnz	r1, d7c08 <_ZN16Adafruit_SSD167515writeRAMCommandEh+0xa>
    return EPD_command(SSD1675_WRITE_RAM1, false);
   d7c02:	2124      	movs	r1, #36	; 0x24
    return EPD_command(SSD1675_WRITE_RAM2, false);
   d7c04:	f000 be2d 	b.w	d8862 <_ZN12Adafruit_EPD11EPD_commandEhb>
  if (index == 1) {
   d7c08:	2901      	cmp	r1, #1
   d7c0a:	d102      	bne.n	d7c12 <_ZN16Adafruit_SSD167515writeRAMCommandEh+0x14>
    return EPD_command(SSD1675_WRITE_RAM2, false);
   d7c0c:	2200      	movs	r2, #0
   d7c0e:	2126      	movs	r1, #38	; 0x26
   d7c10:	e7f8      	b.n	d7c04 <_ZN16Adafruit_SSD167515writeRAMCommandEh+0x6>
}
   d7c12:	2000      	movs	r0, #0
   d7c14:	4770      	bx	lr
	...

000d7c18 <_ZN16Adafruit_SSD1675C1Eiiaaaaa>:
Adafruit_SSD1675::Adafruit_SSD1675(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY)
   d7c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c1a:	b085      	sub	sp, #20
   d7c1c:	4604      	mov	r4, r0
  : Adafruit_EPD(width, height, DC, RST, CS, SRCS, BUSY) {
   d7c1e:	f99d c034 	ldrsb.w	ip, [sp, #52]	; 0x34
Adafruit_SSD1675::Adafruit_SSD1675(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY)
   d7c22:	f99d 7030 	ldrsb.w	r7, [sp, #48]	; 0x30
  : Adafruit_EPD(width, height, DC, RST, CS, SRCS, BUSY) {
   d7c26:	e9cd 7c02 	strd	r7, ip, [sp, #8]
   d7c2a:	f99d c02c 	ldrsb.w	ip, [sp, #44]	; 0x2c
   d7c2e:	f8cd c004 	str.w	ip, [sp, #4]
   d7c32:	f99d c028 	ldrsb.w	ip, [sp, #40]	; 0x28
   d7c36:	f8cd c000 	str.w	ip, [sp]
Adafruit_SSD1675::Adafruit_SSD1675(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY)
   d7c3a:	4616      	mov	r6, r2
   d7c3c:	460d      	mov	r5, r1
  : Adafruit_EPD(width, height, DC, RST, CS, SRCS, BUSY) {
   d7c3e:	f000 fbad 	bl	d839c <_ZN12Adafruit_EPDC1Eiiaaaaa>
   d7c42:	4b17      	ldr	r3, [pc, #92]	; (d7ca0 <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x88>)
   d7c44:	6023      	str	r3, [r4, #0]
  if ((height % 8) != 0) {
   d7c46:	f016 0307 	ands.w	r3, r6, #7
   d7c4a:	d007      	beq.n	d7c5c <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x44>
    height += 8 - (height % 8);
   d7c4c:	4272      	negs	r2, r6
   d7c4e:	f002 0207 	and.w	r2, r2, #7
   d7c52:	bf58      	it	pl
   d7c54:	4253      	negpl	r3, r2
   d7c56:	f1c3 0308 	rsb	r3, r3, #8
   d7c5a:	441e      	add	r6, r3
  buffer1_size = width * height / 8;
   d7c5c:	4375      	muls	r5, r6
   d7c5e:	bf48      	it	mi
   d7c60:	3507      	addmi	r5, #7
   d7c62:	f3c5 01cf 	ubfx	r1, r5, #3, #16
  if (SRCS >= 0) {
   d7c66:	2f00      	cmp	r7, #0
  buffer1_size = width * height / 8;
   d7c68:	ea4f 00e5 	mov.w	r0, r5, asr #3
   d7c6c:	85e1      	strh	r1, [r4, #46]	; 0x2e
  buffer2_size = buffer1_size;
   d7c6e:	8621      	strh	r1, [r4, #48]	; 0x30
  if (SRCS >= 0) {
   d7c70:	db0c      	blt.n	d7c8c <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x74>
    use_sram = true;
   d7c72:	2301      	movs	r3, #1
   d7c74:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    buffer1_addr = 0;
   d7c78:	2300      	movs	r3, #0
    buffer1 = buffer2 = NULL;
   d7c7a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
    buffer1_addr = 0;
   d7c7e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    buffer2_addr = buffer1_size;
   d7c82:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
}
   d7c86:	4620      	mov	r0, r4
   d7c88:	b005      	add	sp, #20
   d7c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buffer1 = (uint8_t *)malloc(buffer1_size);
   d7c8c:	b280      	uxth	r0, r0
   d7c8e:	f001 fb11 	bl	d92b4 <malloc>
   d7c92:	6360      	str	r0, [r4, #52]	; 0x34
    buffer2 = (uint8_t *)malloc(buffer2_size);
   d7c94:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   d7c96:	f001 fb0d 	bl	d92b4 <malloc>
   d7c9a:	63a0      	str	r0, [r4, #56]	; 0x38
   d7c9c:	e7f3      	b.n	d7c86 <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x6e>
   d7c9e:	bf00      	nop
   d7ca0:	000dec64 	.word	0x000dec64

000d7ca4 <_ZN16Adafruit_SSD16759busy_waitEv>:
{
   d7ca4:	b510      	push	{r4, lr}
  if (_busy_pin >= 0) {
   d7ca6:	f990 3025 	ldrsb.w	r3, [r0, #37]	; 0x25
   d7caa:	2b00      	cmp	r3, #0
{
   d7cac:	4604      	mov	r4, r0
  if (_busy_pin >= 0) {
   d7cae:	db09      	blt.n	d7cc4 <_ZN16Adafruit_SSD16759busy_waitEv+0x20>
    while(digitalRead(_busy_pin)) { //wait for busy low
   d7cb0:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   d7cb4:	b280      	uxth	r0, r0
   d7cb6:	f003 fe3b 	bl	db930 <digitalRead>
   d7cba:	b148      	cbz	r0, d7cd0 <_ZN16Adafruit_SSD16759busy_waitEv+0x2c>
      delay(10);
   d7cbc:	200a      	movs	r0, #10
   d7cbe:	f003 f8fb 	bl	daeb8 <delay>
    while(digitalRead(_busy_pin)) { //wait for busy low
   d7cc2:	e7f5      	b.n	d7cb0 <_ZN16Adafruit_SSD16759busy_waitEv+0xc>
}
   d7cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(BUSY_WAIT);
   d7cc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d7ccc:	f003 b8f4 	b.w	daeb8 <delay>
}
   d7cd0:	bd10      	pop	{r4, pc}

000d7cd2 <_ZN16Adafruit_SSD16756updateEv>:
{
   d7cd2:	b513      	push	{r0, r1, r4, lr}
  buf[0] = 0xC7;
   d7cd4:	23c7      	movs	r3, #199	; 0xc7
{
   d7cd6:	4604      	mov	r4, r0
  buf[0] = 0xC7;
   d7cd8:	f88d 3004 	strb.w	r3, [sp, #4]
  EPD_command(SSD1675_DISP_CTRL2, buf, 1);
   d7cdc:	aa01      	add	r2, sp, #4
   d7cde:	2301      	movs	r3, #1
   d7ce0:	2122      	movs	r1, #34	; 0x22
   d7ce2:	f000 fdd6 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_MASTER_ACTIVATE);
   d7ce6:	2201      	movs	r2, #1
   d7ce8:	2120      	movs	r1, #32
   d7cea:	4620      	mov	r0, r4
   d7cec:	f000 fdb9 	bl	d8862 <_ZN12Adafruit_EPD11EPD_commandEhb>
  busy_wait();
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	f7ff ffd7 	bl	d7ca4 <_ZN16Adafruit_SSD16759busy_waitEv>
  if (_busy_pin <= -1) {
   d7cf6:	f994 3025 	ldrsb.w	r3, [r4, #37]	; 0x25
   d7cfa:	2b00      	cmp	r3, #0
   d7cfc:	da03      	bge.n	d7d06 <_ZN16Adafruit_SSD16756updateEv+0x34>
    delay(1000);
   d7cfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7d02:	f003 f8d9 	bl	daeb8 <delay>
}
   d7d06:	b002      	add	sp, #8
   d7d08:	bd10      	pop	{r4, pc}
	...

000d7d0c <_ZN16Adafruit_SSD16757powerUpEv>:
{
   d7d0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7d10:	4604      	mov	r4, r0
  hardwareReset();
   d7d12:	f000 fb89 	bl	d8428 <_ZN12Adafruit_EPD13hardwareResetEv>
  delay(100);
   d7d16:	2064      	movs	r0, #100	; 0x64
   d7d18:	f003 f8ce 	bl	daeb8 <delay>
  busy_wait();
   d7d1c:	4620      	mov	r0, r4
   d7d1e:	f7ff ffc1 	bl	d7ca4 <_ZN16Adafruit_SSD16759busy_waitEv>
  EPD_command(SSD1675_SW_RESET);
   d7d22:	2201      	movs	r2, #1
   d7d24:	2112      	movs	r1, #18
   d7d26:	4620      	mov	r0, r4
   d7d28:	f000 fd9b 	bl	d8862 <_ZN12Adafruit_EPD11EPD_commandEhb>
  busy_wait();
   d7d2c:	4620      	mov	r0, r4
   d7d2e:	f7ff ffb9 	bl	d7ca4 <_ZN16Adafruit_SSD16759busy_waitEv>
  buf[0] = 0x54;
   d7d32:	2354      	movs	r3, #84	; 0x54
   d7d34:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_SET_ANALOGBLOCK, buf, 1);
   d7d38:	466a      	mov	r2, sp
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	2301      	movs	r3, #1
   d7d3e:	2174      	movs	r1, #116	; 0x74
   d7d40:	f000 fda7 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x3B;
   d7d44:	f04f 083b 	mov.w	r8, #59	; 0x3b
  EPD_command(SSD1675_SET_DIGITALBLOCK, buf, 1);
   d7d48:	466a      	mov	r2, sp
   d7d4a:	4620      	mov	r0, r4
   d7d4c:	2301      	movs	r3, #1
   d7d4e:	217e      	movs	r1, #126	; 0x7e
  buf[0] = 0x3B;
   d7d50:	f88d 8000 	strb.w	r8, [sp]
  EPD_command(SSD1675_SET_DIGITALBLOCK, buf, 1);
   d7d54:	f000 fd9d 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0xFA;   // 250-1
   d7d58:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   d7d5c:	f8ad 3000 	strh.w	r3, [sp]
  buf[2] = 0x00;
   d7d60:	2600      	movs	r6, #0
  EPD_command(SSD1675_DRIVER_CONTROL, buf, 3);
   d7d62:	466a      	mov	r2, sp
   d7d64:	4620      	mov	r0, r4
   d7d66:	2303      	movs	r3, #3
   d7d68:	2101      	movs	r1, #1
  buf[0] = 0x03;
   d7d6a:	2503      	movs	r5, #3
  buf[2] = 0x00;
   d7d6c:	f88d 6002 	strb.w	r6, [sp, #2]
  EPD_command(SSD1675_DRIVER_CONTROL, buf, 3);
   d7d70:	f000 fd8f 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_DATA_MODE, buf, 1);
   d7d74:	466a      	mov	r2, sp
   d7d76:	4620      	mov	r0, r4
   d7d78:	2301      	movs	r3, #1
   d7d7a:	2111      	movs	r1, #17
  buf[0] = 0x03;
   d7d7c:	f88d 5000 	strb.w	r5, [sp]
  EPD_command(SSD1675_DATA_MODE, buf, 1);
   d7d80:	f000 fd87 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x00;
   d7d84:	f44f 6370 	mov.w	r3, #3840	; 0xf00
   d7d88:	f8ad 3000 	strh.w	r3, [sp]
  EPD_command(SSD1675_SET_RAMXPOS, buf, 2);
   d7d8c:	466a      	mov	r2, sp
   d7d8e:	4620      	mov	r0, r4
   d7d90:	2302      	movs	r3, #2
   d7d92:	2144      	movs	r1, #68	; 0x44
   d7d94:	f000 fd7d 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x00;  // 0xF9-->(249+1)=250
   d7d98:	f44f 0379 	mov.w	r3, #16318464	; 0xf90000
   d7d9c:	9300      	str	r3, [sp, #0]
  EPD_command(SSD1675_SET_RAMYPOS, buf, 4);
   d7d9e:	466a      	mov	r2, sp
   d7da0:	4620      	mov	r0, r4
   d7da2:	2304      	movs	r3, #4
   d7da4:	2145      	movs	r1, #69	; 0x45
   d7da6:	f000 fd74 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_WRITE_BORDER, buf, 1);
   d7daa:	466a      	mov	r2, sp
   d7dac:	4620      	mov	r0, r4
   d7dae:	2301      	movs	r3, #1
   d7db0:	213c      	movs	r1, #60	; 0x3c
  buf[0] = 0x03;
   d7db2:	f88d 5000 	strb.w	r5, [sp]
  EPD_command(SSD1675_WRITE_BORDER, buf, 1);
   d7db6:	f000 fd6c 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x70;
   d7dba:	2370      	movs	r3, #112	; 0x70
   d7dbc:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_WRITE_VCOM, buf, 1);
   d7dc0:	466a      	mov	r2, sp
   d7dc2:	4620      	mov	r0, r4
   d7dc4:	2301      	movs	r3, #1
   d7dc6:	212c      	movs	r1, #44	; 0x2c
   d7dc8:	f000 fd63 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[70];
   d7dcc:	2315      	movs	r3, #21
   d7dce:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_GATE_VOLTAGE, buf, 1);
   d7dd2:	466a      	mov	r2, sp
   d7dd4:	4629      	mov	r1, r5
   d7dd6:	4620      	mov	r0, r4
   d7dd8:	2301      	movs	r3, #1
   d7dda:	f000 fd5a 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[71];
   d7dde:	f64a 0341 	movw	r3, #43073	; 0xa841
   d7de2:	f8ad 3000 	strh.w	r3, [sp]
  buf[2] = LUT_DATA[73];
   d7de6:	2732      	movs	r7, #50	; 0x32
  EPD_command(SSD1675_SOURCE_VOLTAGE, buf, 3);
   d7de8:	462b      	mov	r3, r5
   d7dea:	466a      	mov	r2, sp
   d7dec:	4620      	mov	r0, r4
   d7dee:	2104      	movs	r1, #4
  buf[2] = LUT_DATA[73];
   d7df0:	f88d 7002 	strb.w	r7, [sp, #2]
  EPD_command(SSD1675_SOURCE_VOLTAGE, buf, 3);
   d7df4:	f000 fd4d 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[74];
   d7df8:	2330      	movs	r3, #48	; 0x30
   d7dfa:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_WRITE_DUMMY, buf, 1);
   d7dfe:	466a      	mov	r2, sp
   d7e00:	4620      	mov	r0, r4
   d7e02:	2301      	movs	r3, #1
   d7e04:	213a      	movs	r1, #58	; 0x3a
   d7e06:	f000 fd44 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[75];
   d7e0a:	230a      	movs	r3, #10
   d7e0c:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_WRITE_GATELINE, buf, 1);
   d7e10:	466a      	mov	r2, sp
   d7e12:	4641      	mov	r1, r8
   d7e14:	4620      	mov	r0, r4
   d7e16:	2301      	movs	r3, #1
   d7e18:	f000 fd3b 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_WRITE_LUT, LUT_DATA, 70);
   d7e1c:	4639      	mov	r1, r7
   d7e1e:	4620      	mov	r0, r4
   d7e20:	4a0d      	ldr	r2, [pc, #52]	; (d7e58 <_ZN16Adafruit_SSD16757powerUpEv+0x14c>)
   d7e22:	2346      	movs	r3, #70	; 0x46
   d7e24:	f000 fd35 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d7e28:	466a      	mov	r2, sp
   d7e2a:	4620      	mov	r0, r4
   d7e2c:	2301      	movs	r3, #1
   d7e2e:	214e      	movs	r1, #78	; 0x4e
  buf[0] = 0;
   d7e30:	f88d 6000 	strb.w	r6, [sp]
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d7e34:	f000 fd2d 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0xF9;
   d7e38:	23f9      	movs	r3, #249	; 0xf9
   d7e3a:	f8ad 3000 	strh.w	r3, [sp]
  EPD_command(SSD1675_SET_RAMYCOUNT, buf, 2);
   d7e3e:	466a      	mov	r2, sp
   d7e40:	2302      	movs	r3, #2
   d7e42:	214f      	movs	r1, #79	; 0x4f
   d7e44:	4620      	mov	r0, r4
   d7e46:	f000 fd24 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  busy_wait();
   d7e4a:	4620      	mov	r0, r4
   d7e4c:	f7ff ff2a 	bl	d7ca4 <_ZN16Adafruit_SSD16759busy_waitEv>
}
   d7e50:	b002      	add	sp, #8
   d7e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7e56:	bf00      	nop
   d7e58:	000dec10 	.word	0x000dec10

000d7e5c <_ZN16Adafruit_SSD16759powerDownEv>:
{
   d7e5c:	b513      	push	{r0, r1, r4, lr}
  if (_reset_pin >= 0) {
   d7e5e:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
   d7e62:	2b00      	cmp	r3, #0
{
   d7e64:	4604      	mov	r4, r0
  if (_reset_pin >= 0) {
   d7e66:	db0b      	blt.n	d7e80 <_ZN16Adafruit_SSD16759powerDownEv+0x24>
    buf[0] = 0x01;
   d7e68:	2301      	movs	r3, #1
    EPD_command(SSD1675_DEEP_SLEEP, buf, 1);
   d7e6a:	aa01      	add	r2, sp, #4
   d7e6c:	2110      	movs	r1, #16
    buf[0] = 0x01;
   d7e6e:	f88d 3004 	strb.w	r3, [sp, #4]
    EPD_command(SSD1675_DEEP_SLEEP, buf, 1);
   d7e72:	f000 fd0e 	bl	d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>
    delay(100);
   d7e76:	2064      	movs	r0, #100	; 0x64
   d7e78:	f003 f81e 	bl	daeb8 <delay>
}
   d7e7c:	b002      	add	sp, #8
   d7e7e:	bd10      	pop	{r4, pc}
    EPD_command(SSD1675_SW_RESET);
   d7e80:	2201      	movs	r2, #1
   d7e82:	2112      	movs	r1, #18
   d7e84:	f000 fced 	bl	d8862 <_ZN12Adafruit_EPD11EPD_commandEhb>
    busy_wait();
   d7e88:	4620      	mov	r0, r4
   d7e8a:	f7ff ff0b 	bl	d7ca4 <_ZN16Adafruit_SSD16759busy_waitEv>
}
   d7e8e:	e7f5      	b.n	d7e7c <_ZN16Adafruit_SSD16759powerDownEv+0x20>

000d7e90 <_ZN16Adafruit_SSD16755beginEb>:
{
   d7e90:	b510      	push	{r4, lr}
   d7e92:	4604      	mov	r4, r0
  Adafruit_EPD::begin(reset);
   d7e94:	f000 fb74 	bl	d8580 <_ZN12Adafruit_EPD5beginEb>
  setBlackBuffer(0, true);  // black defaults to inverted
   d7e98:	4620      	mov	r0, r4
   d7e9a:	2201      	movs	r2, #1
   d7e9c:	2100      	movs	r1, #0
   d7e9e:	f000 faeb 	bl	d8478 <_ZN12Adafruit_EPD14setBlackBufferEab>
  setColorBuffer(0, true);  // no secondary buffer, so we'll just reuse index 0
   d7ea2:	4620      	mov	r0, r4
   d7ea4:	2201      	movs	r2, #1
   d7ea6:	2100      	movs	r1, #0
   d7ea8:	f000 fafe 	bl	d84a8 <_ZN12Adafruit_EPD14setColorBufferEab>
  powerDown();
   d7eac:	6823      	ldr	r3, [r4, #0]
   d7eae:	4620      	mov	r0, r4
   d7eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
   d7eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  powerDown();
   d7eb6:	4718      	bx	r3

000d7eb8 <_ZN16Adafruit_MCPSRAMC1Ea>:
*/
/**************************************************************************/
Adafruit_MCPSRAM::Adafruit_MCPSRAM(int8_t cs)
{
	_cs = cs;
	hwSPI = true;
   d7eb8:	2201      	movs	r2, #1
	_cs = cs;
   d7eba:	7041      	strb	r1, [r0, #1]
	hwSPI = true;
   d7ebc:	7002      	strb	r2, [r0, #0]
}
   d7ebe:	4770      	bx	lr

000d7ec0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
    byte transfer(byte data) {
   d7ec0:	b507      	push	{r0, r1, r2, lr}
   d7ec2:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   d7ec4:	f7fd fed6 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7ec8:	9901      	ldr	r1, [sp, #4]
    }
   d7eca:	b003      	add	sp, #12
   d7ecc:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   d7ed0:	f001 bb16 	b.w	d9500 <_ZN8SPIClass8transferEh>

000d7ed4 <_ZN16Adafruit_MCPSRAM6csHighEv>:
/*!
    @brief set chip select pin high
*/
/**************************************************************************/
void Adafruit_MCPSRAM::csHigh()
{
   d7ed4:	b510      	push	{r4, lr}
   d7ed6:	4604      	mov	r4, r0
        instance().endTransaction();
   d7ed8:	f7fd fecc 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7edc:	f001 fa89 	bl	d93f2 <_ZN8SPIClass14endTransactionEv>
      SPI.endTransaction();
#endif
#ifdef HAVE_PORTREG
	*csport |= cspinmask;
#else
	digitalWrite(_cs, HIGH);
   d7ee0:	f994 0001 	ldrsb.w	r0, [r4, #1]
   d7ee4:	2101      	movs	r1, #1
#endif
}
   d7ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(_cs, HIGH);
   d7eea:	b280      	uxth	r0, r0
   d7eec:	f003 bd07 	b.w	db8fe <digitalWrite>

000d7ef0 <_ZN16Adafruit_MCPSRAM5csLowEv>:
/*!
    @brief set chip select pin low
*/
/**************************************************************************/
void Adafruit_MCPSRAM::csLow()
{
   d7ef0:	b530      	push	{r4, r5, lr}
   d7ef2:	b085      	sub	sp, #20
      dataMode_{dataMode}
   d7ef4:	4b0b      	ldr	r3, [pc, #44]	; (d7f24 <_ZN16Adafruit_MCPSRAM5csLowEv+0x34>)
   d7ef6:	9300      	str	r3, [sp, #0]
   d7ef8:	4b0b      	ldr	r3, [pc, #44]	; (d7f28 <_ZN16Adafruit_MCPSRAM5csLowEv+0x38>)
   d7efa:	9302      	str	r3, [sp, #8]
   d7efc:	4604      	mov	r4, r0
   d7efe:	2301      	movs	r3, #1
   d7f00:	2500      	movs	r5, #0
   d7f02:	f8ad 300c 	strh.w	r3, [sp, #12]
   d7f06:	f88d 5004 	strb.w	r5, [sp, #4]
        return instance().beginTransaction(settings);
   d7f0a:	f7fd feb3 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7f0e:	4669      	mov	r1, sp
   d7f10:	f001 fa88 	bl	d9424 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
      SPI.beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0));
#endif	
#ifdef HAVE_PORTREG
	*csport &= ~cspinmask;
#else
	digitalWrite(_cs, LOW);
   d7f14:	f994 0001 	ldrsb.w	r0, [r4, #1]
   d7f18:	4629      	mov	r1, r5
   d7f1a:	b280      	uxth	r0, r0
   d7f1c:	f003 fcef 	bl	db8fe <digitalWrite>
#endif
}
   d7f20:	b005      	add	sp, #20
   d7f22:	bd30      	pop	{r4, r5, pc}
   d7f24:	000de5d4 	.word	0x000de5d4
   d7f28:	003d0900 	.word	0x003d0900

000d7f2c <_ZN16Adafruit_MCPSRAM5beginEv>:
{
   d7f2c:	b570      	push	{r4, r5, r6, lr}
   d7f2e:	4604      	mov	r4, r0
	 pinMode(_cs, OUTPUT);
   d7f30:	f990 0001 	ldrsb.w	r0, [r0, #1]
   d7f34:	2101      	movs	r1, #1
   d7f36:	b280      	uxth	r0, r0
   d7f38:	f003 fcd0 	bl	db8dc <pinMode>
	csHigh();
   d7f3c:	4620      	mov	r0, r4
   d7f3e:	f7ff ffc9 	bl	d7ed4 <_ZN16Adafruit_MCPSRAM6csHighEv>
    if (!hwSPI){
   d7f42:	7823      	ldrb	r3, [r4, #0]
   d7f44:	b19b      	cbz	r3, d7f6e <_ZN16Adafruit_MCPSRAM5beginEv+0x42>
        instance().begin();
   d7f46:	f7fd fe95 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7f4a:	f001 fa41 	bl	d93d0 <_ZN8SPIClass5beginEv>
csLow();
   d7f4e:	4620      	mov	r0, r4
   d7f50:	f7ff ffce 	bl	d7ef0 <_ZN16Adafruit_MCPSRAM5csLowEv>
   d7f54:	2503      	movs	r5, #3
	  if(hwSPI) {
   d7f56:	7823      	ldrb	r3, [r4, #0]
   d7f58:	b1cb      	cbz	r3, d7f8e <_ZN16Adafruit_MCPSRAM5beginEv+0x62>
		(void)SPI.transfer(0xFF);
   d7f5a:	20ff      	movs	r0, #255	; 0xff
   d7f5c:	f7ff ffb0 	bl	d7ec0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
for(int i=0; i<3; i++){
   d7f60:	3d01      	subs	r5, #1
   d7f62:	d1f8      	bne.n	d7f56 <_ZN16Adafruit_MCPSRAM5beginEv+0x2a>
csHigh();
   d7f64:	4620      	mov	r0, r4
}
   d7f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
csHigh();
   d7f6a:	f7ff bfb3 	b.w	d7ed4 <_ZN16Adafruit_MCPSRAM6csHighEv>
      pinMode(_mosi, OUTPUT);
   d7f6e:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d7f72:	2101      	movs	r1, #1
   d7f74:	b280      	uxth	r0, r0
   d7f76:	f003 fcb1 	bl	db8dc <pinMode>
      pinMode(_sck, OUTPUT);
   d7f7a:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d7f7e:	2101      	movs	r1, #1
   d7f80:	b280      	uxth	r0, r0
   d7f82:	f003 fcab 	bl	db8dc <pinMode>
    if (hwSPI){
   d7f86:	7823      	ldrb	r3, [r4, #0]
   d7f88:	2b00      	cmp	r3, #0
   d7f8a:	d0e0      	beq.n	d7f4e <_ZN16Adafruit_MCPSRAM5beginEv+0x22>
   d7f8c:	e7db      	b.n	d7f46 <_ZN16Adafruit_MCPSRAM5beginEv+0x1a>
   d7f8e:	2608      	movs	r6, #8
		  digitalWrite(_sck, LOW);
   d7f90:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d7f94:	2100      	movs	r1, #0
   d7f96:	b280      	uxth	r0, r0
   d7f98:	f003 fcb1 	bl	db8fe <digitalWrite>
		  if(0xFF & bit) digitalWrite(_mosi, HIGH);
   d7f9c:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d7fa0:	2101      	movs	r1, #1
   d7fa2:	b280      	uxth	r0, r0
   d7fa4:	f003 fcab 	bl	db8fe <digitalWrite>
		  digitalWrite(_sck, HIGH);
   d7fa8:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d7fac:	2101      	movs	r1, #1
   d7fae:	b280      	uxth	r0, r0
   d7fb0:	f003 fca5 	bl	db8fe <digitalWrite>
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d7fb4:	3e01      	subs	r6, #1
   d7fb6:	d1eb      	bne.n	d7f90 <_ZN16Adafruit_MCPSRAM5beginEv+0x64>
   d7fb8:	e7d2      	b.n	d7f60 <_ZN16Adafruit_MCPSRAM5beginEv+0x34>

000d7fba <_ZN16Adafruit_MCPSRAM5writeEtPhth>:
{
   d7fba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fbe:	b085      	sub	sp, #20
   d7fc0:	460d      	mov	r5, r1
   d7fc2:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
   d7fc6:	9201      	str	r2, [sp, #4]
   d7fc8:	461e      	mov	r6, r3
   d7fca:	4604      	mov	r4, r0
csLow();
   d7fcc:	f7ff ff90 	bl	d7ef0 <_ZN16Adafruit_MCPSRAM5csLowEv>
cmdbuf[1] = (addr >> 8);
   d7fd0:	122b      	asrs	r3, r5, #8
cmdbuf[0] = reg;
   d7fd2:	f88d b00c 	strb.w	fp, [sp, #12]
cmdbuf[1] = (addr >> 8);
   d7fd6:	f88d 300d 	strb.w	r3, [sp, #13]
cmdbuf[2] = addr & 0xFF;
   d7fda:	f88d 500e 	strb.w	r5, [sp, #14]
for(int i=0; i<3; i++){
   d7fde:	f10d 0a0c 	add.w	sl, sp, #12
   d7fe2:	2700      	movs	r7, #0
  if(hwSPI) {
   d7fe4:	7823      	ldrb	r3, [r4, #0]
  uint8_t d = cmdbuf[i];
   d7fe6:	f81a 9b01 	ldrb.w	r9, [sl], #1
  if(hwSPI) {
   d7fea:	b19b      	cbz	r3, d8014 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x5a>
    (void)SPI.transfer(d);
   d7fec:	4648      	mov	r0, r9
   d7fee:	f7ff ff67 	bl	d7ec0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  if(reg != MCPSRAM_WRITE) break;
   d7ff2:	f1bb 0f02 	cmp.w	fp, #2
   d7ff6:	d102      	bne.n	d7ffe <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x44>
for(int i=0; i<3; i++){
   d7ff8:	3701      	adds	r7, #1
   d7ffa:	2f03      	cmp	r7, #3
   d7ffc:	d1f2      	bne.n	d7fe4 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x2a>
   d7ffe:	2500      	movs	r5, #0
for(int i=0; i<num; i++){
   d8000:	42ae      	cmp	r6, r5
   d8002:	dd25      	ble.n	d8050 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x96>
  if(hwSPI) {
   d8004:	7823      	ldrb	r3, [r4, #0]
   d8006:	b11b      	cbz	r3, d8010 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x56>
    (void)SPI.transfer(d);
   d8008:	9b01      	ldr	r3, [sp, #4]
   d800a:	5d58      	ldrb	r0, [r3, r5]
   d800c:	f7ff ff58 	bl	d7ec0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
for(int i=0; i<num; i++){
   d8010:	3501      	adds	r5, #1
   d8012:	e7f5      	b.n	d8000 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x46>
   d8014:	f04f 0808 	mov.w	r8, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8018:	2580      	movs	r5, #128	; 0x80
      digitalWrite(_sck, LOW);
   d801a:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d801e:	2100      	movs	r1, #0
   d8020:	b280      	uxth	r0, r0
   d8022:	f003 fc6c 	bl	db8fe <digitalWrite>
      if(d & bit) digitalWrite(_mosi, HIGH);
   d8026:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d802a:	ea19 0105 	ands.w	r1, r9, r5
   d802e:	bf18      	it	ne
   d8030:	2101      	movne	r1, #1
      else        digitalWrite(_mosi, LOW);
   d8032:	b280      	uxth	r0, r0
   d8034:	f003 fc63 	bl	db8fe <digitalWrite>
      digitalWrite(_sck, HIGH);
   d8038:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d803c:	2101      	movs	r1, #1
   d803e:	b280      	uxth	r0, r0
   d8040:	f003 fc5d 	bl	db8fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8044:	f1b8 0801 	subs.w	r8, r8, #1
   d8048:	ea4f 0555 	mov.w	r5, r5, lsr #1
   d804c:	d1e5      	bne.n	d801a <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x60>
   d804e:	e7d0      	b.n	d7ff2 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x38>
csHigh();
   d8050:	4620      	mov	r0, r4
}
   d8052:	b005      	add	sp, #20
   d8054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
csHigh();
   d8058:	f7ff bf3c 	b.w	d7ed4 <_ZN16Adafruit_MCPSRAM6csHighEv>

000d805c <_ZN16Adafruit_MCPSRAM6write8Ethh>:
{
   d805c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d805e:	f88d 200f 	strb.w	r2, [sp, #15]
	this->write(addr, &val, 1, reg);
   d8062:	9300      	str	r3, [sp, #0]
   d8064:	f10d 020f 	add.w	r2, sp, #15
   d8068:	2301      	movs	r3, #1
   d806a:	f7ff ffa6 	bl	d7fba <_ZN16Adafruit_MCPSRAM5writeEtPhth>
}
   d806e:	b005      	add	sp, #20
   d8070:	f85d fb04 	ldr.w	pc, [sp], #4

000d8074 <_ZN16Adafruit_MCPSRAM4readEtPhth>:
{
   d8074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8078:	b085      	sub	sp, #20
   d807a:	460e      	mov	r6, r1
   d807c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
   d8080:	9301      	str	r3, [sp, #4]
   d8082:	4604      	mov	r4, r0
   d8084:	4615      	mov	r5, r2
csLow();
   d8086:	f7ff ff33 	bl	d7ef0 <_ZN16Adafruit_MCPSRAM5csLowEv>
cmdbuf[1] = (addr >> 8);
   d808a:	1233      	asrs	r3, r6, #8
cmdbuf[0] = reg;
   d808c:	f88d b00c 	strb.w	fp, [sp, #12]
cmdbuf[1] = (addr >> 8);
   d8090:	f88d 300d 	strb.w	r3, [sp, #13]
cmdbuf[2] = addr & 0xFF;
   d8094:	f88d 600e 	strb.w	r6, [sp, #14]
for(int i=0; i<3; i++){
   d8098:	f10d 0a0c 	add.w	sl, sp, #12
   d809c:	2700      	movs	r7, #0
  if(hwSPI) {
   d809e:	7823      	ldrb	r3, [r4, #0]
  uint8_t d = cmdbuf[i];
   d80a0:	f81a 9b01 	ldrb.w	r9, [sl], #1
  if(hwSPI) {
   d80a4:	b1ab      	cbz	r3, d80d2 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x5e>
    (void)SPI.transfer(d);
   d80a6:	4648      	mov	r0, r9
   d80a8:	f7ff ff0a 	bl	d7ec0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  if(reg != MCPSRAM_READ) break;
   d80ac:	f1bb 0f03 	cmp.w	fp, #3
   d80b0:	d102      	bne.n	d80b8 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x44>
for(int i=0; i<3; i++){
   d80b2:	3701      	adds	r7, #1
   d80b4:	2f03      	cmp	r7, #3
   d80b6:	d1f2      	bne.n	d809e <_ZN16Adafruit_MCPSRAM4readEtPhth+0x2a>
   d80b8:	9b01      	ldr	r3, [sp, #4]
   d80ba:	442b      	add	r3, r5
   d80bc:	4698      	mov	r8, r3
for(int i=0; i<num; i++){
   d80be:	45a8      	cmp	r8, r5
   d80c0:	d03f      	beq.n	d8142 <_ZN16Adafruit_MCPSRAM4readEtPhth+0xce>
  if(hwSPI) {
   d80c2:	7823      	ldrb	r3, [r4, #0]
   d80c4:	b31b      	cbz	r3, d810e <_ZN16Adafruit_MCPSRAM4readEtPhth+0x9a>
    buf[i] = SPI.transfer(0x00);
   d80c6:	2000      	movs	r0, #0
   d80c8:	f7ff fefa 	bl	d7ec0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d80cc:	7028      	strb	r0, [r5, #0]
for(int i=0; i<num; i++){
   d80ce:	3501      	adds	r5, #1
   d80d0:	e7f5      	b.n	d80be <_ZN16Adafruit_MCPSRAM4readEtPhth+0x4a>
   d80d2:	f04f 0808 	mov.w	r8, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d80d6:	2680      	movs	r6, #128	; 0x80
      digitalWrite(_sck, LOW);
   d80d8:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d80dc:	2100      	movs	r1, #0
   d80de:	b280      	uxth	r0, r0
   d80e0:	f003 fc0d 	bl	db8fe <digitalWrite>
      if(d & bit) digitalWrite(_mosi, HIGH);
   d80e4:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d80e8:	ea19 0106 	ands.w	r1, r9, r6
   d80ec:	bf18      	it	ne
   d80ee:	2101      	movne	r1, #1
      else        digitalWrite(_mosi, LOW);
   d80f0:	b280      	uxth	r0, r0
   d80f2:	f003 fc04 	bl	db8fe <digitalWrite>
      digitalWrite(_sck, HIGH);
   d80f6:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d80fa:	2101      	movs	r1, #1
   d80fc:	b280      	uxth	r0, r0
   d80fe:	f003 fbfe 	bl	db8fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8102:	f1b8 0801 	subs.w	r8, r8, #1
   d8106:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d810a:	d1e5      	bne.n	d80d8 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x64>
   d810c:	e7ce      	b.n	d80ac <_ZN16Adafruit_MCPSRAM4readEtPhth+0x38>
   d810e:	2708      	movs	r7, #8
      digitalWrite(_sck, LOW);
   d8110:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d8114:	2100      	movs	r1, #0
   d8116:	b280      	uxth	r0, r0
   d8118:	f003 fbf1 	bl	db8fe <digitalWrite>
      digitalWrite(_sck, HIGH);
   d811c:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d8120:	2101      	movs	r1, #1
   d8122:	b280      	uxth	r0, r0
   d8124:	f003 fbeb 	bl	db8fe <digitalWrite>
	  buf[i] = (buf[i] << 1) | digitalRead(_miso);
   d8128:	f994 0003 	ldrsb.w	r0, [r4, #3]
   d812c:	782e      	ldrb	r6, [r5, #0]
   d812e:	b280      	uxth	r0, r0
   d8130:	f003 fbfe 	bl	db930 <digitalRead>
   d8134:	0076      	lsls	r6, r6, #1
   d8136:	b276      	sxtb	r6, r6
   d8138:	4330      	orrs	r0, r6
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d813a:	3f01      	subs	r7, #1
	  buf[i] = (buf[i] << 1) | digitalRead(_miso);
   d813c:	7028      	strb	r0, [r5, #0]
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d813e:	d1e7      	bne.n	d8110 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x9c>
   d8140:	e7c5      	b.n	d80ce <_ZN16Adafruit_MCPSRAM4readEtPhth+0x5a>
csHigh();
   d8142:	4620      	mov	r0, r4
}
   d8144:	b005      	add	sp, #20
   d8146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
csHigh();
   d814a:	f7ff bec3 	b.w	d7ed4 <_ZN16Adafruit_MCPSRAM6csHighEv>

000d814e <_ZN16Adafruit_MCPSRAM5read8Eth>:
{
   d814e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	this->read(addr, &c, 1, reg);
   d8150:	2301      	movs	r3, #1
   d8152:	9200      	str	r2, [sp, #0]
   d8154:	f10d 020f 	add.w	r2, sp, #15
   d8158:	f7ff ff8c 	bl	d8074 <_ZN16Adafruit_MCPSRAM4readEtPhth>
}
   d815c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d8160:	b005      	add	sp, #20
   d8162:	f85d fb04 	ldr.w	pc, [sp], #4

000d8166 <_ZN16Adafruit_MCPSRAM5eraseEtth>:
{
   d8166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d816a:	460e      	mov	r6, r1
   d816c:	461d      	mov	r5, r3
   d816e:	4604      	mov	r4, r0
   d8170:	4690      	mov	r8, r2
	csLow();
   d8172:	f7ff febd 	bl	d7ef0 <_ZN16Adafruit_MCPSRAM5csLowEv>
	cmdbuf[0] = MCPSRAM_WRITE;
   d8176:	2302      	movs	r3, #2
   d8178:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdbuf[1] = (addr >> 8);
   d817c:	1233      	asrs	r3, r6, #8
   d817e:	f88d 3005 	strb.w	r3, [sp, #5]
	cmdbuf[2] = addr & 0xFF;
   d8182:	f88d 6006 	strb.w	r6, [sp, #6]
	for(int i=0; i<3; i++){
   d8186:	f10d 0b04 	add.w	fp, sp, #4
   d818a:	2700      	movs	r7, #0
		if(hwSPI) {
   d818c:	7823      	ldrb	r3, [r4, #0]
		uint8_t d = cmdbuf[i];
   d818e:	f81b ab01 	ldrb.w	sl, [fp], #1
		if(hwSPI) {
   d8192:	b17b      	cbz	r3, d81b4 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x4e>
			(void)SPI.transfer(d);
   d8194:	4650      	mov	r0, sl
   d8196:	f7ff fe93 	bl	d7ec0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for(int i=0; i<3; i++){
   d819a:	3701      	adds	r7, #1
   d819c:	2f03      	cmp	r7, #3
   d819e:	d1f5      	bne.n	d818c <_ZN16Adafruit_MCPSRAM5eraseEtth+0x26>
   d81a0:	2700      	movs	r7, #0
	for(uint16_t i=0; i<length; i++){
   d81a2:	45b8      	cmp	r8, r7
   d81a4:	d042      	beq.n	d822c <_ZN16Adafruit_MCPSRAM5eraseEtth+0xc6>
		if(hwSPI) {
   d81a6:	7823      	ldrb	r3, [r4, #0]
   d81a8:	b313      	cbz	r3, d81f0 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x8a>
			(void)SPI.transfer(d);
   d81aa:	4628      	mov	r0, r5
   d81ac:	f7ff fe88 	bl	d7ec0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for(uint16_t i=0; i<length; i++){
   d81b0:	3701      	adds	r7, #1
   d81b2:	e7f6      	b.n	d81a2 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x3c>
   d81b4:	f04f 0908 	mov.w	r9, #8
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d81b8:	2680      	movs	r6, #128	; 0x80
				digitalWrite(_sck, LOW);
   d81ba:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d81be:	2100      	movs	r1, #0
   d81c0:	b280      	uxth	r0, r0
   d81c2:	f003 fb9c 	bl	db8fe <digitalWrite>
				if(d & bit) digitalWrite(_mosi, HIGH);
   d81c6:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d81ca:	ea1a 0106 	ands.w	r1, sl, r6
   d81ce:	bf18      	it	ne
   d81d0:	2101      	movne	r1, #1
				else        digitalWrite(_mosi, LOW);
   d81d2:	b280      	uxth	r0, r0
   d81d4:	f003 fb93 	bl	db8fe <digitalWrite>
				digitalWrite(_sck, HIGH);
   d81d8:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d81dc:	2101      	movs	r1, #1
   d81de:	b280      	uxth	r0, r0
   d81e0:	f003 fb8d 	bl	db8fe <digitalWrite>
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d81e4:	f1b9 0901 	subs.w	r9, r9, #1
   d81e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d81ec:	d1e5      	bne.n	d81ba <_ZN16Adafruit_MCPSRAM5eraseEtth+0x54>
   d81ee:	e7d4      	b.n	d819a <_ZN16Adafruit_MCPSRAM5eraseEtth+0x34>
   d81f0:	f04f 0908 	mov.w	r9, #8
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d81f4:	2680      	movs	r6, #128	; 0x80
				digitalWrite(_sck, LOW);
   d81f6:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d81fa:	2100      	movs	r1, #0
   d81fc:	b280      	uxth	r0, r0
   d81fe:	f003 fb7e 	bl	db8fe <digitalWrite>
				if(d & bit) digitalWrite(_mosi, HIGH);
   d8202:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d8206:	ea15 0106 	ands.w	r1, r5, r6
   d820a:	bf18      	it	ne
   d820c:	2101      	movne	r1, #1
				else        digitalWrite(_mosi, LOW);
   d820e:	b280      	uxth	r0, r0
   d8210:	f003 fb75 	bl	db8fe <digitalWrite>
				digitalWrite(_sck, HIGH);
   d8214:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d8218:	2101      	movs	r1, #1
   d821a:	b280      	uxth	r0, r0
   d821c:	f003 fb6f 	bl	db8fe <digitalWrite>
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8220:	f1b9 0901 	subs.w	r9, r9, #1
   d8224:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d8228:	d1e5      	bne.n	d81f6 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x90>
   d822a:	e7c1      	b.n	d81b0 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x4a>
	csHigh();
   d822c:	4620      	mov	r0, r4
}
   d822e:	b003      	add	sp, #12
   d8230:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	csHigh();
   d8234:	f7ff be4e 	b.w	d7ed4 <_ZN16Adafruit_MCPSRAM6csHighEv>

000d8238 <_ZN12Adafruit_EPD9drawPixelEsst>:
	@param x the x axis position
	@param y the y axis position
	@param color the color of the pixel
*/
/**************************************************************************/
void Adafruit_EPD::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d8238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d823c:	1e0f      	subs	r7, r1, #0
void Adafruit_EPD::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d823e:	4605      	mov	r5, r0
   d8240:	4614      	mov	r4, r2
   d8242:	4699      	mov	r9, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d8244:	f2c0 80a6 	blt.w	d8394 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
   d8248:	f7fd fd0a 	bl	d5c60 <_ZNK12Adafruit_GFX5widthEv>
   d824c:	42b8      	cmp	r0, r7
   d824e:	f340 80a1 	ble.w	d8394 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
   d8252:	2c00      	cmp	r4, #0
   d8254:	f2c0 809e 	blt.w	d8394 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
   d8258:	4628      	mov	r0, r5
   d825a:	f7fd fd04 	bl	d5c66 <_ZNK12Adafruit_GFX6heightEv>
   d825e:	42a0      	cmp	r0, r4
   d8260:	f340 8098 	ble.w	d8394 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
    return;

  uint8_t *pBuf;

  // deal with non-8-bit heights
  uint16_t _HEIGHT = HEIGHT;
   d8264:	f8b5 800a 	ldrh.w	r8, [r5, #10]
  if (_HEIGHT % 8 != 0) {
   d8268:	f018 0f07 	tst.w	r8, #7
    _HEIGHT += 8 - (_HEIGHT % 8);
   d826c:	bf1c      	itt	ne
   d826e:	f028 0807 	bicne.w	r8, r8, #7
   d8272:	f108 0808 	addne.w	r8, r8, #8
  }

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d8276:	4628      	mov	r0, r5
    _HEIGHT += 8 - (_HEIGHT % 8);
   d8278:	bf18      	it	ne
   d827a:	fa1f f888 	uxthne.w	r8, r8
  switch (getRotation()) {
   d827e:	f7fd fced 	bl	d5c5c <_ZNK12Adafruit_GFX11getRotationEv>
   d8282:	2802      	cmp	r0, #2
   d8284:	d031      	beq.n	d82ea <_ZN12Adafruit_EPD9drawPixelEsst+0xb2>
   d8286:	2803      	cmp	r0, #3
   d8288:	d037      	beq.n	d82fa <_ZN12Adafruit_EPD9drawPixelEsst+0xc2>
   d828a:	2801      	cmp	r0, #1
   d828c:	d104      	bne.n	d8298 <_ZN12Adafruit_EPD9drawPixelEsst+0x60>
  case 1:
    EPD_swap(x, y);
    x = WIDTH - x - 1;
   d828e:	892a      	ldrh	r2, [r5, #8]
   d8290:	43e4      	mvns	r4, r4
   d8292:	4422      	add	r2, r4
    break;
   d8294:	463c      	mov	r4, r7
    x = WIDTH - x - 1;
   d8296:	b217      	sxth	r7, r2
  case 3:
    EPD_swap(x, y);
    y = _HEIGHT - y - 1;
    break;
  }
  uint16_t addr = ( (uint32_t)(WIDTH - 1 - x) * (uint32_t)_HEIGHT + y)/8;
   d8298:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
  uint8_t c;
  if (use_sram) {
   d829c:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
  uint16_t addr = ( (uint32_t)(WIDTH - 1 - x) * (uint32_t)_HEIGHT + y)/8;
   d82a0:	3e01      	subs	r6, #1
   d82a2:	1bf6      	subs	r6, r6, r7
   d82a4:	fb08 4606 	mla	r6, r8, r6, r4
   d82a8:	f1a9 0703 	sub.w	r7, r9, #3
   d82ac:	08f0      	lsrs	r0, r6, #3
   d82ae:	b2bf      	uxth	r7, r7
   d82b0:	f3c6 06cf 	ubfx	r6, r6, #3, #16
  if (use_sram) {
   d82b4:	b333      	cbz	r3, d8304 <_ZN12Adafruit_EPD9drawPixelEsst+0xcc>
    if ((color == EPD_RED) || (color == EPD_GRAY)) {
   d82b6:	2f01      	cmp	r7, #1
      addr = colorbuffer_addr + addr;
   d82b8:	bf94      	ite	ls
   d82ba:	f8b5 1048 	ldrhls.w	r1, [r5, #72]	; 0x48
    } else {
      addr = blackbuffer_addr + addr;
   d82be:	f8b5 104a 	ldrhhi.w	r1, [r5, #74]	; 0x4a
   d82c2:	440e      	add	r6, r1
   d82c4:	b2b6      	uxth	r6, r6
    }
    c = sram.read8(addr);
   d82c6:	2203      	movs	r2, #3
   d82c8:	4631      	mov	r1, r6
   d82ca:	f105 0027 	add.w	r0, r5, #39	; 0x27
   d82ce:	f7ff ff3e 	bl	d814e <_ZN16Adafruit_MCPSRAM5read8Eth>
    } else {
      pBuf = black_buffer + addr;
    }
  }

  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d82d2:	2f01      	cmp	r7, #1
    c = sram.read8(addr);
   d82d4:	f88d 0007 	strb.w	r0, [sp, #7]
    pBuf = &c;
   d82d8:	f10d 0007 	add.w	r0, sp, #7
  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d82dc:	d917      	bls.n	d830e <_ZN12Adafruit_EPD9drawPixelEsst+0xd6>
   d82de:	f1b9 0f00 	cmp.w	r9, #0
   d82e2:	d145      	bne.n	d8370 <_ZN12Adafruit_EPD9drawPixelEsst+0x138>
      ((color == EPD_BLACK) && blackInverted)) {
   d82e4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d82e8:	e013      	b.n	d8312 <_ZN12Adafruit_EPD9drawPixelEsst+0xda>
    x = WIDTH - x - 1;
   d82ea:	8929      	ldrh	r1, [r5, #8]
    y = _HEIGHT - y - 1;
   d82ec:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d82ee:	3901      	subs	r1, #1
   d82f0:	1bcf      	subs	r7, r1, r7
    y = _HEIGHT - y - 1;
   d82f2:	4444      	add	r4, r8
    x = WIDTH - x - 1;
   d82f4:	b23f      	sxth	r7, r7
    y = _HEIGHT - y - 1;
   d82f6:	b224      	sxth	r4, r4
    break;
   d82f8:	e7ce      	b.n	d8298 <_ZN12Adafruit_EPD9drawPixelEsst+0x60>
    y = _HEIGHT - y - 1;
   d82fa:	43f9      	mvns	r1, r7
   d82fc:	4441      	add	r1, r8
    break;
   d82fe:	4627      	mov	r7, r4
    y = _HEIGHT - y - 1;
   d8300:	b20c      	sxth	r4, r1
    break;
   d8302:	e7c9      	b.n	d8298 <_ZN12Adafruit_EPD9drawPixelEsst+0x60>
    if((color == EPD_RED) || (color == EPD_GRAY)) {
   d8304:	2f01      	cmp	r7, #1
   d8306:	b280      	uxth	r0, r0
   d8308:	d814      	bhi.n	d8334 <_ZN12Adafruit_EPD9drawPixelEsst+0xfc>
      pBuf = color_buffer + addr;
   d830a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d830c:	4418      	add	r0, r3
  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d830e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
      ((color == EPD_BLACK) && blackInverted)) {
   d8312:	b193      	cbz	r3, d833a <_ZN12Adafruit_EPD9drawPixelEsst+0x102>
    *pBuf &= ~(1 << (7 - y%8));
   d8314:	4263      	negs	r3, r4
   d8316:	f003 0307 	and.w	r3, r3, #7
   d831a:	f004 0407 	and.w	r4, r4, #7
   d831e:	bf58      	it	pl
   d8320:	425c      	negpl	r4, r3
   d8322:	f1c4 0407 	rsb	r4, r4, #7
   d8326:	2301      	movs	r3, #1
   d8328:	40a3      	lsls	r3, r4
   d832a:	7804      	ldrb	r4, [r0, #0]
   d832c:	ea24 0403 	bic.w	r4, r4, r3
  } else if (((color == EPD_RED || color == EPD_GRAY) && !colorInverted) ||
	     ((color == EPD_BLACK) && !blackInverted)) {
    *pBuf |= (1 << (7 - y%8));
  } else if (color == EPD_INVERSE) {
    *pBuf ^= (1 << (7 - y%8));
   d8330:	7004      	strb	r4, [r0, #0]
   d8332:	e010      	b.n	d8356 <_ZN12Adafruit_EPD9drawPixelEsst+0x11e>
      pBuf = black_buffer + addr;
   d8334:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d8336:	4418      	add	r0, r3
  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d8338:	e7d1      	b.n	d82de <_ZN12Adafruit_EPD9drawPixelEsst+0xa6>
    *pBuf |= (1 << (7 - y%8));
   d833a:	4263      	negs	r3, r4
   d833c:	f003 0307 	and.w	r3, r3, #7
   d8340:	f004 0407 	and.w	r4, r4, #7
   d8344:	bf58      	it	pl
   d8346:	425c      	negpl	r4, r3
   d8348:	7802      	ldrb	r2, [r0, #0]
   d834a:	f1c4 0407 	rsb	r4, r4, #7
   d834e:	2301      	movs	r3, #1
   d8350:	40a3      	lsls	r3, r4
   d8352:	4313      	orrs	r3, r2
   d8354:	7003      	strb	r3, [r0, #0]
  }

  if (use_sram) {
   d8356:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
   d835a:	b1db      	cbz	r3, d8394 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
    sram.write8(addr, *pBuf);
   d835c:	7802      	ldrb	r2, [r0, #0]
   d835e:	2302      	movs	r3, #2
   d8360:	4631      	mov	r1, r6
   d8362:	f105 0027 	add.w	r0, r5, #39	; 0x27
  }
}
   d8366:	b003      	add	sp, #12
   d8368:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    sram.write8(addr, *pBuf);
   d836c:	f7ff be76 	b.w	d805c <_ZN16Adafruit_MCPSRAM6write8Ethh>
  } else if (color == EPD_INVERSE) {
   d8370:	f1b9 0f02 	cmp.w	r9, #2
   d8374:	d1ef      	bne.n	d8356 <_ZN12Adafruit_EPD9drawPixelEsst+0x11e>
    *pBuf ^= (1 << (7 - y%8));
   d8376:	4263      	negs	r3, r4
   d8378:	f003 0307 	and.w	r3, r3, #7
   d837c:	f004 0407 	and.w	r4, r4, #7
   d8380:	bf58      	it	pl
   d8382:	425c      	negpl	r4, r3
   d8384:	f1c4 0407 	rsb	r4, r4, #7
   d8388:	2301      	movs	r3, #1
   d838a:	fa03 f404 	lsl.w	r4, r3, r4
   d838e:	7803      	ldrb	r3, [r0, #0]
   d8390:	405c      	eors	r4, r3
   d8392:	e7cd      	b.n	d8330 <_ZN12Adafruit_EPD9drawPixelEsst+0xf8>
}
   d8394:	b003      	add	sp, #12
   d8396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d839c <_ZN12Adafruit_EPDC1Eiiaaaaa>:
Adafruit_EPD::Adafruit_EPD(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY) : Adafruit_GFX(width, height),
   d839c:	b570      	push	{r4, r5, r6, lr}
sram(SRCS) {
   d839e:	b212      	sxth	r2, r2
Adafruit_EPD::Adafruit_EPD(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY) : Adafruit_GFX(width, height),
   d83a0:	4604      	mov	r4, r0
sram(SRCS) {
   d83a2:	b209      	sxth	r1, r1
Adafruit_EPD::Adafruit_EPD(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY) : Adafruit_GFX(width, height),
   d83a4:	f99d 5018 	ldrsb.w	r5, [sp, #24]
   d83a8:	461e      	mov	r6, r3
sram(SRCS) {
   d83aa:	f7fd fa0b 	bl	d57c4 <_ZN12Adafruit_GFXC1Ess>
   d83ae:	4620      	mov	r0, r4
   d83b0:	4b13      	ldr	r3, [pc, #76]	; (d8400 <_ZN12Adafruit_EPDC1Eiiaaaaa+0x64>)
   d83b2:	f840 3b27 	str.w	r3, [r0], #39
   d83b6:	4629      	mov	r1, r5
   d83b8:	f7ff fd7e 	bl	d7eb8 <_ZN16Adafruit_MCPSRAMC1Ea>
  _cs_pin = CS;
   d83bc:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d83c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  _reset_pin = RST;
   d83c4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d83c8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  _busy_pin = BUSY;
   d83cc:	f99d 301c 	ldrsb.w	r3, [sp, #28]
   d83d0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if (SRCS >= 0) {
   d83d4:	43ed      	mvns	r5, r5
  hwSPI = true;
   d83d6:	2301      	movs	r3, #1
  if (SRCS >= 0) {
   d83d8:	0fed      	lsrs	r5, r5, #31
  hwSPI = true;
   d83da:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  singleByteTxns = false;
   d83de:	2300      	movs	r3, #0
  buffer1 = buffer2 = color_buffer = black_buffer = NULL;
   d83e0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
   d83e4:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  colorbuffer_addr = blackbuffer_addr = 0;
   d83e8:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  _dc_pin = DC;
   d83ec:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
  if (SRCS >= 0) {
   d83f0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  singleByteTxns = false;
   d83f4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  buffer1_size = buffer2_size = 0;
   d83f8:	8623      	strh	r3, [r4, #48]	; 0x30
   d83fa:	85e3      	strh	r3, [r4, #46]	; 0x2e
}
   d83fc:	4620      	mov	r0, r4
   d83fe:	bd70      	pop	{r4, r5, r6, pc}
   d8400:	000decd0 	.word	0x000decd0

000d8404 <_ZN12Adafruit_EPDD1Ev>:
Adafruit_EPD::~Adafruit_EPD()
   d8404:	b510      	push	{r4, lr}
   d8406:	4b07      	ldr	r3, [pc, #28]	; (d8424 <_ZN12Adafruit_EPDD1Ev+0x20>)
   d8408:	6003      	str	r3, [r0, #0]
   d840a:	4604      	mov	r4, r0
  if (buffer1 != NULL) {
   d840c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d840e:	b118      	cbz	r0, d8418 <_ZN12Adafruit_EPDD1Ev+0x14>
    free(buffer1);
   d8410:	f000 ff58 	bl	d92c4 <free>
    buffer1 = NULL;
   d8414:	2300      	movs	r3, #0
   d8416:	6363      	str	r3, [r4, #52]	; 0x34
  if (buffer2 != NULL) {
   d8418:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d841a:	b108      	cbz	r0, d8420 <_ZN12Adafruit_EPDD1Ev+0x1c>
    free(buffer2);
   d841c:	f000 ff52 	bl	d92c4 <free>
}
   d8420:	4620      	mov	r0, r4
   d8422:	bd10      	pop	{r4, pc}
   d8424:	000decd0 	.word	0x000decd0

000d8428 <_ZN12Adafruit_EPD13hardwareResetEv>:
void Adafruit_EPD::hardwareReset(void) {
   d8428:	b510      	push	{r4, lr}
   d842a:	4604      	mov	r4, r0
  if (_reset_pin >= 0) {
   d842c:	f990 0023 	ldrsb.w	r0, [r0, #35]	; 0x23
   d8430:	2800      	cmp	r0, #0
   d8432:	db20      	blt.n	d8476 <_ZN12Adafruit_EPD13hardwareResetEv+0x4e>
    pinMode(_reset_pin, OUTPUT);
   d8434:	2101      	movs	r1, #1
   d8436:	b280      	uxth	r0, r0
   d8438:	f003 fa50 	bl	db8dc <pinMode>
    digitalWrite(_reset_pin, HIGH);
   d843c:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   d8440:	2101      	movs	r1, #1
   d8442:	b280      	uxth	r0, r0
   d8444:	f003 fa5b 	bl	db8fe <digitalWrite>
    delay(10);
   d8448:	200a      	movs	r0, #10
   d844a:	f002 fd35 	bl	daeb8 <delay>
    digitalWrite(_reset_pin, LOW);
   d844e:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   d8452:	2100      	movs	r1, #0
   d8454:	b280      	uxth	r0, r0
   d8456:	f003 fa52 	bl	db8fe <digitalWrite>
    delay(10);
   d845a:	200a      	movs	r0, #10
   d845c:	f002 fd2c 	bl	daeb8 <delay>
    digitalWrite(_reset_pin, HIGH);
   d8460:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   d8464:	2101      	movs	r1, #1
   d8466:	b280      	uxth	r0, r0
   d8468:	f003 fa49 	bl	db8fe <digitalWrite>
}
   d846c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(10);
   d8470:	200a      	movs	r0, #10
   d8472:	f002 bd21 	b.w	daeb8 <delay>
}
   d8476:	bd10      	pop	{r4, pc}

000d8478 <_ZN12Adafruit_EPD14setBlackBufferEab>:
    @param index 0 or 1, for primary or secondary value
    @param inverted Whether to invert the logical value
*/
/**************************************************************************/
 void Adafruit_EPD::setBlackBuffer(int8_t index, bool inverted) {
   if (index == 0) {
   d8478:	b961      	cbnz	r1, d8494 <_ZN12Adafruit_EPD14setBlackBufferEab+0x1c>
     if (use_sram) {
   d847a:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d847e:	b133      	cbz	r3, d848e <_ZN12Adafruit_EPD14setBlackBufferEab+0x16>
       blackbuffer_addr = buffer1_addr;
   d8480:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
       black_buffer = buffer1;
     }
   }
   if (index == 1) {
     if (use_sram) {
       blackbuffer_addr = buffer2_addr;
   d8484:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
     } else {
       black_buffer = buffer2;
     }
   }
   blackInverted = inverted;
   d8488:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 }
   d848c:	4770      	bx	lr
       black_buffer = buffer1;
   d848e:	6b43      	ldr	r3, [r0, #52]	; 0x34
       black_buffer = buffer2;
   d8490:	6403      	str	r3, [r0, #64]	; 0x40
   d8492:	e7f9      	b.n	d8488 <_ZN12Adafruit_EPD14setBlackBufferEab+0x10>
   if (index == 1) {
   d8494:	2901      	cmp	r1, #1
   d8496:	d1f7      	bne.n	d8488 <_ZN12Adafruit_EPD14setBlackBufferEab+0x10>
     if (use_sram) {
   d8498:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d849c:	b113      	cbz	r3, d84a4 <_ZN12Adafruit_EPD14setBlackBufferEab+0x2c>
       blackbuffer_addr = buffer2_addr;
   d849e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   d84a2:	e7ef      	b.n	d8484 <_ZN12Adafruit_EPD14setBlackBufferEab+0xc>
       black_buffer = buffer2;
   d84a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d84a6:	e7f3      	b.n	d8490 <_ZN12Adafruit_EPD14setBlackBufferEab+0x18>

000d84a8 <_ZN12Adafruit_EPD14setColorBufferEab>:
    @param index 0 or 1, for primary or secondary value
    @param inverted Whether to invert the logical value
*/
/**************************************************************************/
 void Adafruit_EPD::setColorBuffer(int8_t index, bool inverted) {
   if (index == 0) {
   d84a8:	b961      	cbnz	r1, d84c4 <_ZN12Adafruit_EPD14setColorBufferEab+0x1c>
     if (use_sram) {
   d84aa:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d84ae:	b133      	cbz	r3, d84be <_ZN12Adafruit_EPD14setColorBufferEab+0x16>
       colorbuffer_addr = buffer1_addr;
   d84b0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
       color_buffer = buffer1;
     }
   }
   if (index == 1) {
     if (use_sram) {
       colorbuffer_addr = buffer2_addr;
   d84b4:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
     } else {
       color_buffer = buffer2;
     }
   }
   colorInverted = inverted;
   d84b8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 }
   d84bc:	4770      	bx	lr
       color_buffer = buffer1;
   d84be:	6b43      	ldr	r3, [r0, #52]	; 0x34
       color_buffer = buffer2;
   d84c0:	63c3      	str	r3, [r0, #60]	; 0x3c
   d84c2:	e7f9      	b.n	d84b8 <_ZN12Adafruit_EPD14setColorBufferEab+0x10>
   if (index == 1) {
   d84c4:	2901      	cmp	r1, #1
   d84c6:	d1f7      	bne.n	d84b8 <_ZN12Adafruit_EPD14setColorBufferEab+0x10>
     if (use_sram) {
   d84c8:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d84cc:	b113      	cbz	r3, d84d4 <_ZN12Adafruit_EPD14setColorBufferEab+0x2c>
       colorbuffer_addr = buffer2_addr;
   d84ce:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   d84d2:	e7ef      	b.n	d84b4 <_ZN12Adafruit_EPD14setColorBufferEab+0xc>
       color_buffer = buffer2;
   d84d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d84d6:	e7f3      	b.n	d84c0 <_ZN12Adafruit_EPD14setColorBufferEab+0x18>

000d84d8 <_ZN12Adafruit_EPD11clearBufferEv>:
/*!
    @brief clear all data buffers
*/
/**************************************************************************/
void Adafruit_EPD::clearBuffer()
{
   d84d8:	b510      	push	{r4, lr}
  if (use_sram) {
   d84da:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
{
   d84de:	4604      	mov	r4, r0
  if (use_sram) {
   d84e0:	b1c3      	cbz	r3, d8514 <_ZN12Adafruit_EPD11clearBufferEv+0x3c>
    if (buffer1_size != 0) {
   d84e2:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   d84e4:	b142      	cbz	r2, d84f8 <_ZN12Adafruit_EPD11clearBufferEv+0x20>
      if (blackInverted) {
   d84e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d84ea:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   d84ee:	3027      	adds	r0, #39	; 0x27
   d84f0:	b103      	cbz	r3, d84f4 <_ZN12Adafruit_EPD11clearBufferEv+0x1c>
	sram.erase(buffer1_addr, buffer1_size, 0xFF);
   d84f2:	23ff      	movs	r3, #255	; 0xff
      } else {
	sram.erase(buffer1_addr, buffer1_size, 0x00);
   d84f4:	f7ff fe37 	bl	d8166 <_ZN16Adafruit_MCPSRAM5eraseEtth>
      }
    }
    if (buffer2_size != 0) {
   d84f8:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d84fa:	b1fa      	cbz	r2, d853c <_ZN12Adafruit_EPD11clearBufferEv+0x64>
      if (colorInverted) {
   d84fc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   d8500:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
   d8504:	f104 0027 	add.w	r0, r4, #39	; 0x27
   d8508:	b103      	cbz	r3, d850c <_ZN12Adafruit_EPD11clearBufferEv+0x34>
	sram.erase(buffer2_addr, buffer2_size, 0xFF);
   d850a:	23ff      	movs	r3, #255	; 0xff
      } else {
	memset(buffer2, 0x00, buffer2_size);
      }
    }
  }
}
   d850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sram.erase(buffer2_addr, buffer2_size, 0x00);
   d8510:	f7ff be29 	b.w	d8166 <_ZN16Adafruit_MCPSRAM5eraseEtth>
    if (buffer1) {
   d8514:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d8516:	b130      	cbz	r0, d8526 <_ZN12Adafruit_EPD11clearBufferEv+0x4e>
      if (blackInverted) {
   d8518:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d851c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   d851e:	b101      	cbz	r1, d8522 <_ZN12Adafruit_EPD11clearBufferEv+0x4a>
	memset(buffer1, 0xFF, buffer1_size);
   d8520:	21ff      	movs	r1, #255	; 0xff
	memset(buffer1, 0x00, buffer1_size);
   d8522:	f005 fd79 	bl	de018 <memset>
    if (buffer2) {
   d8526:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d8528:	b140      	cbz	r0, d853c <_ZN12Adafruit_EPD11clearBufferEv+0x64>
      if (colorInverted) {
   d852a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   d852e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d8530:	b101      	cbz	r1, d8534 <_ZN12Adafruit_EPD11clearBufferEv+0x5c>
	memset(buffer2, 0xFF, buffer2_size);
   d8532:	21ff      	movs	r1, #255	; 0xff
}
   d8534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(buffer2, 0x00, buffer2_size);
   d8538:	f005 bd6e 	b.w	de018 <memset>
}
   d853c:	bd10      	pop	{r4, pc}

000d853e <_ZN12Adafruit_EPD6dcHighEv>:
void Adafruit_EPD::dcHigh()
{
#ifdef HAVE_PORTREG
  *dcport |= dcpinmask;
#else
  digitalWrite(_dc_pin, HIGH);
   d853e:	f990 0022 	ldrsb.w	r0, [r0, #34]	; 0x22
   d8542:	2101      	movs	r1, #1
   d8544:	b280      	uxth	r0, r0
   d8546:	f003 b9da 	b.w	db8fe <digitalWrite>

000d854a <_ZN12Adafruit_EPD5dcLowEv>:
void Adafruit_EPD::dcLow()
{
#ifdef HAVE_PORTREG
  *dcport &= ~dcpinmask;
#else
  digitalWrite(_dc_pin, LOW);
   d854a:	f990 0022 	ldrsb.w	r0, [r0, #34]	; 0x22
   d854e:	2100      	movs	r1, #0
   d8550:	b280      	uxth	r0, r0
   d8552:	f003 b9d4 	b.w	db8fe <digitalWrite>
	...

000d8558 <_ZN12Adafruit_EPD6csHighEv>:
{
   d8558:	b510      	push	{r4, lr}
   d855a:	4604      	mov	r4, r0
        instance().endTransaction();
   d855c:	f7fd fb8a 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8560:	f000 ff47 	bl	d93f2 <_ZN8SPIClass14endTransactionEv>
  _isInTransaction = false;
   d8564:	4b05      	ldr	r3, [pc, #20]	; (d857c <_ZN12Adafruit_EPD6csHighEv+0x24>)
  digitalWrite(_cs_pin, HIGH);
   d8566:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
  _isInTransaction = false;
   d856a:	2200      	movs	r2, #0
   d856c:	701a      	strb	r2, [r3, #0]
}
   d856e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(_cs_pin, HIGH);
   d8572:	2101      	movs	r1, #1
   d8574:	b280      	uxth	r0, r0
   d8576:	f003 b9c2 	b.w	db8fe <digitalWrite>
   d857a:	bf00      	nop
   d857c:	2003e5c1 	.word	0x2003e5c1

000d8580 <_ZN12Adafruit_EPD5beginEb>:
void Adafruit_EPD::begin(bool reset) {
   d8580:	b537      	push	{r0, r1, r2, r4, r5, lr}
  setBlackBuffer(0, true);   // black defaults to inverted
   d8582:	2201      	movs	r2, #1
void Adafruit_EPD::begin(bool reset) {
   d8584:	460d      	mov	r5, r1
  setBlackBuffer(0, true);   // black defaults to inverted
   d8586:	2100      	movs	r1, #0
void Adafruit_EPD::begin(bool reset) {
   d8588:	4604      	mov	r4, r0
  setBlackBuffer(0, true);   // black defaults to inverted
   d858a:	f7ff ff75 	bl	d8478 <_ZN12Adafruit_EPD14setBlackBufferEab>
  setColorBuffer(1, false);  // red defaults to not inverted
   d858e:	2200      	movs	r2, #0
   d8590:	2101      	movs	r1, #1
   d8592:	f7ff ff89 	bl	d84a8 <_ZN12Adafruit_EPD14setColorBufferEab>
  if (use_sram) {
   d8596:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d859a:	b14b      	cbz	r3, d85b0 <_ZN12Adafruit_EPD5beginEb+0x30>
    sram.begin();
   d859c:	3027      	adds	r0, #39	; 0x27
   d859e:	9001      	str	r0, [sp, #4]
   d85a0:	f7ff fcc4 	bl	d7f2c <_ZN16Adafruit_MCPSRAM5beginEv>
    sram.write8(0, K640_SEQUENTIAL_MODE, MCPSRAM_WRSR);
   d85a4:	9801      	ldr	r0, [sp, #4]
   d85a6:	2301      	movs	r3, #1
   d85a8:	2240      	movs	r2, #64	; 0x40
   d85aa:	2100      	movs	r1, #0
   d85ac:	f7ff fd56 	bl	d805c <_ZN16Adafruit_MCPSRAM6write8Ethh>
  pinMode(_dc_pin, OUTPUT);
   d85b0:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
   d85b4:	2101      	movs	r1, #1
   d85b6:	b280      	uxth	r0, r0
   d85b8:	f003 f990 	bl	db8dc <pinMode>
  pinMode(_cs_pin, OUTPUT);
   d85bc:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   d85c0:	2101      	movs	r1, #1
   d85c2:	b280      	uxth	r0, r0
   d85c4:	f003 f98a 	bl	db8dc <pinMode>
  csHigh();
   d85c8:	4620      	mov	r0, r4
   d85ca:	f7ff ffc5 	bl	d8558 <_ZN12Adafruit_EPD6csHighEv>
  if (!hwSPI){
   d85ce:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
   d85d2:	b9d3      	cbnz	r3, d860a <_ZN12Adafruit_EPD5beginEb+0x8a>
    pinMode(_sid_pin, OUTPUT);
   d85d4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d85d8:	2101      	movs	r1, #1
   d85da:	b280      	uxth	r0, r0
   d85dc:	f003 f97e 	bl	db8dc <pinMode>
    pinMode(_sclk_pin, OUTPUT);
   d85e0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d85e4:	2101      	movs	r1, #1
   d85e6:	b280      	uxth	r0, r0
   d85e8:	f003 f978 	bl	db8dc <pinMode>
  if (reset) {
   d85ec:	b115      	cbz	r5, d85f4 <_ZN12Adafruit_EPD5beginEb+0x74>
    hardwareReset();
   d85ee:	4620      	mov	r0, r4
   d85f0:	f7ff ff1a 	bl	d8428 <_ZN12Adafruit_EPD13hardwareResetEv>
  if (_busy_pin >= 0) {
   d85f4:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   d85f8:	2800      	cmp	r0, #0
   d85fa:	db0b      	blt.n	d8614 <_ZN12Adafruit_EPD5beginEb+0x94>
    pinMode(_busy_pin, INPUT);
   d85fc:	2100      	movs	r1, #0
   d85fe:	b280      	uxth	r0, r0
}
   d8600:	b003      	add	sp, #12
   d8602:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    pinMode(_busy_pin, INPUT);
   d8606:	f003 b969 	b.w	db8dc <pinMode>
        instance().begin();
   d860a:	f7fd fb33 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d860e:	f000 fedf 	bl	d93d0 <_ZN8SPIClass5beginEv>
    }
   d8612:	e7eb      	b.n	d85ec <_ZN12Adafruit_EPD5beginEb+0x6c>
}
   d8614:	b003      	add	sp, #12
   d8616:	bd30      	pop	{r4, r5, pc}

000d8618 <_ZN12Adafruit_EPD5csLowEv>:
{
   d8618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!_isInTransaction) {
   d861a:	4d0d      	ldr	r5, [pc, #52]	; (d8650 <_ZN12Adafruit_EPD5csLowEv+0x38>)
   d861c:	782b      	ldrb	r3, [r5, #0]
{
   d861e:	4604      	mov	r4, r0
  if (!_isInTransaction) {
   d8620:	b973      	cbnz	r3, d8640 <_ZN12Adafruit_EPD5csLowEv+0x28>
   d8622:	4a0c      	ldr	r2, [pc, #48]	; (d8654 <_ZN12Adafruit_EPD5csLowEv+0x3c>)
   d8624:	f88d 3004 	strb.w	r3, [sp, #4]
   d8628:	2601      	movs	r6, #1
   d862a:	4b0b      	ldr	r3, [pc, #44]	; (d8658 <_ZN12Adafruit_EPD5csLowEv+0x40>)
   d862c:	9200      	str	r2, [sp, #0]
   d862e:	9302      	str	r3, [sp, #8]
   d8630:	f8ad 600c 	strh.w	r6, [sp, #12]
        return instance().beginTransaction(settings);
   d8634:	f7fd fb1e 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8638:	4669      	mov	r1, sp
   d863a:	f000 fef3 	bl	d9424 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    _isInTransaction = true;
   d863e:	702e      	strb	r6, [r5, #0]
  digitalWrite(_cs_pin, LOW);
   d8640:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   d8644:	2100      	movs	r1, #0
   d8646:	b280      	uxth	r0, r0
   d8648:	f003 f959 	bl	db8fe <digitalWrite>
}
   d864c:	b004      	add	sp, #16
   d864e:	bd70      	pop	{r4, r5, r6, pc}
   d8650:	2003e5c1 	.word	0x2003e5c1
   d8654:	000de5d4 	.word	0x000de5d4
   d8658:	003d0900 	.word	0x003d0900

000d865c <_ZN12Adafruit_EPD11SPItransferEh>:
uint8_t Adafruit_EPD::SPItransfer(uint8_t d) {
   d865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hwSPI) {
   d865e:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
uint8_t Adafruit_EPD::SPItransfer(uint8_t d) {
   d8662:	4605      	mov	r5, r0
   d8664:	460e      	mov	r6, r1
  if (hwSPI) {
   d8666:	b1b3      	cbz	r3, d8696 <_ZN12Adafruit_EPD11SPItransferEh+0x3a>
    if (singleByteTxns){
   d8668:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   d866c:	b163      	cbz	r3, d8688 <_ZN12Adafruit_EPD11SPItransferEh+0x2c>
      csLow();
   d866e:	f7ff ffd3 	bl	d8618 <_ZN12Adafruit_EPD5csLowEv>
        return instance().transfer(data);
   d8672:	f7fd faff 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8676:	4631      	mov	r1, r6
   d8678:	f000 ff42 	bl	d9500 <_ZN8SPIClass8transferEh>
   d867c:	4604      	mov	r4, r0
      csHigh();
   d867e:	4628      	mov	r0, r5
   d8680:	f7ff ff6a 	bl	d8558 <_ZN12Adafruit_EPD6csHighEv>
}
   d8684:	4620      	mov	r0, r4
   d8686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8688:	f7fd faf4 	bl	d5c74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d868c:	4631      	mov	r1, r6
   d868e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d8692:	f000 bf35 	b.w	d9500 <_ZN8SPIClass8transferEh>
   d8696:	2408      	movs	r4, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8698:	2780      	movs	r7, #128	; 0x80
      digitalWrite(_sclk_pin, LOW);
   d869a:	f995 0021 	ldrsb.w	r0, [r5, #33]	; 0x21
   d869e:	2100      	movs	r1, #0
   d86a0:	b280      	uxth	r0, r0
   d86a2:	f003 f92c 	bl	db8fe <digitalWrite>
      if(d & bit) digitalWrite(_sid_pin, HIGH);
   d86a6:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d86aa:	ea16 0107 	ands.w	r1, r6, r7
   d86ae:	bf18      	it	ne
   d86b0:	2101      	movne	r1, #1
      else        digitalWrite(_sid_pin, LOW);
   d86b2:	b280      	uxth	r0, r0
   d86b4:	f003 f923 	bl	db8fe <digitalWrite>
      digitalWrite(_sclk_pin, HIGH);
   d86b8:	f995 0021 	ldrsb.w	r0, [r5, #33]	; 0x21
   d86bc:	2101      	movs	r1, #1
   d86be:	b280      	uxth	r0, r0
   d86c0:	f003 f91d 	bl	db8fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d86c4:	3c01      	subs	r4, #1
   d86c6:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d86ca:	d1e6      	bne.n	d869a <_ZN12Adafruit_EPD11SPItransferEh+0x3e>
   d86cc:	e7da      	b.n	d8684 <_ZN12Adafruit_EPD11SPItransferEh+0x28>

000d86ce <_ZN12Adafruit_EPD7displayEv>:
{
   d86ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  powerUp();
   d86d2:	6803      	ldr	r3, [r0, #0]
{
   d86d4:	4604      	mov	r4, r0
  powerUp();
   d86d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d86d8:	4798      	blx	r3
  setRAMAddress(0, 0);
   d86da:	6823      	ldr	r3, [r4, #0]
   d86dc:	2200      	movs	r2, #0
   d86de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d86e0:	4611      	mov	r1, r2
   d86e2:	4620      	mov	r0, r4
   d86e4:	4798      	blx	r3
  if (use_sram) {
   d86e6:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
   d86ea:	b3b5      	cbz	r5, d875a <_ZN12Adafruit_EPD7displayEv+0x8c>
    sram.csLow();
   d86ec:	f104 0727 	add.w	r7, r4, #39	; 0x27
   d86f0:	4638      	mov	r0, r7
   d86f2:	f7ff fbfd 	bl	d7ef0 <_ZN16Adafruit_MCPSRAM5csLowEv>
    SPItransfer(MCPSRAM_READ);
   d86f6:	2103      	movs	r1, #3
   d86f8:	4620      	mov	r0, r4
   d86fa:	f7ff ffaf 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer1_addr >> 8);
   d86fe:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   d8702:	4620      	mov	r0, r4
   d8704:	0a09      	lsrs	r1, r1, #8
   d8706:	f7ff ffa9 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer1_addr & 0xFF);
   d870a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   d870e:	4620      	mov	r0, r4
   d8710:	f7ff ffa4 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
    c = writeRAMCommand(0);
   d8714:	6823      	ldr	r3, [r4, #0]
   d8716:	2100      	movs	r1, #0
   d8718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d871a:	4620      	mov	r0, r4
   d871c:	4798      	blx	r3
   d871e:	4605      	mov	r5, r0
    dcHigh();
   d8720:	4620      	mov	r0, r4
   d8722:	f7ff ff0c 	bl	d853e <_ZN12Adafruit_EPD6dcHighEv>
   d8726:	2600      	movs	r6, #0
    for(uint16_t i=0; i<buffer1_size; i++){
   d8728:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   d872a:	b2b3      	uxth	r3, r6
   d872c:	429a      	cmp	r2, r3
   d872e:	d906      	bls.n	d873e <_ZN12Adafruit_EPD7displayEv+0x70>
      c = SPItransfer(c);
   d8730:	4629      	mov	r1, r5
   d8732:	4620      	mov	r0, r4
   d8734:	f7ff ff92 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
   d8738:	3601      	adds	r6, #1
   d873a:	4605      	mov	r5, r0
    for(uint16_t i=0; i<buffer1_size; i++){
   d873c:	e7f4      	b.n	d8728 <_ZN12Adafruit_EPD7displayEv+0x5a>
    csHigh();
   d873e:	4620      	mov	r0, r4
   d8740:	f7ff ff0a 	bl	d8558 <_ZN12Adafruit_EPD6csHighEv>
    sram.csHigh();
   d8744:	4638      	mov	r0, r7
   d8746:	f7ff fbc5 	bl	d7ed4 <_ZN16Adafruit_MCPSRAM6csHighEv>
  if (buffer2_size == 0) {
   d874a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d874c:	b9e3      	cbnz	r3, d8788 <_ZN12Adafruit_EPD7displayEv+0xba>
    update();
   d874e:	6823      	ldr	r3, [r4, #0]
   d8750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  powerDown();
   d8752:	4620      	mov	r0, r4
}
   d8754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  powerDown();
   d8758:	4718      	bx	r3
    writeRAMCommand(0);
   d875a:	6823      	ldr	r3, [r4, #0]
   d875c:	4629      	mov	r1, r5
   d875e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8760:	4620      	mov	r0, r4
   d8762:	4798      	blx	r3
    dcHigh();
   d8764:	4620      	mov	r0, r4
   d8766:	f7ff feea 	bl	d853e <_ZN12Adafruit_EPD6dcHighEv>
    for(uint16_t i=0; i<buffer1_size; i++) {
   d876a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   d876c:	b2ab      	uxth	r3, r5
   d876e:	429a      	cmp	r2, r3
   d8770:	d906      	bls.n	d8780 <_ZN12Adafruit_EPD7displayEv+0xb2>
      SPItransfer(buffer1[i]);
   d8772:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d8774:	4620      	mov	r0, r4
   d8776:	5cd1      	ldrb	r1, [r2, r3]
   d8778:	f7ff ff70 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
    for(uint16_t i=0; i<buffer1_size; i++) {
   d877c:	3501      	adds	r5, #1
   d877e:	e7f4      	b.n	d876a <_ZN12Adafruit_EPD7displayEv+0x9c>
    csHigh();
   d8780:	4620      	mov	r0, r4
   d8782:	f7ff fee9 	bl	d8558 <_ZN12Adafruit_EPD6csHighEv>
   d8786:	e7e0      	b.n	d874a <_ZN12Adafruit_EPD7displayEv+0x7c>
  delay(2);
   d8788:	2002      	movs	r0, #2
   d878a:	f002 fb95 	bl	daeb8 <delay>
  setRAMAddress(0, 0);
   d878e:	6823      	ldr	r3, [r4, #0]
   d8790:	2200      	movs	r2, #0
   d8792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8794:	4611      	mov	r1, r2
   d8796:	4620      	mov	r0, r4
   d8798:	4798      	blx	r3
  if (use_sram) {
   d879a:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
   d879e:	b3ad      	cbz	r5, d880c <_ZN12Adafruit_EPD7displayEv+0x13e>
    sram.csLow();
   d87a0:	f104 0727 	add.w	r7, r4, #39	; 0x27
   d87a4:	4638      	mov	r0, r7
   d87a6:	f7ff fba3 	bl	d7ef0 <_ZN16Adafruit_MCPSRAM5csLowEv>
    SPItransfer(MCPSRAM_READ);
   d87aa:	2103      	movs	r1, #3
   d87ac:	4620      	mov	r0, r4
   d87ae:	f7ff ff55 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer2_addr >> 8);
   d87b2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
   d87b6:	4620      	mov	r0, r4
   d87b8:	0a09      	lsrs	r1, r1, #8
   d87ba:	f7ff ff4f 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer2_addr & 0xFF);
   d87be:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   d87c2:	4620      	mov	r0, r4
   d87c4:	f7ff ff4a 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
    c = writeRAMCommand(1);
   d87c8:	6823      	ldr	r3, [r4, #0]
   d87ca:	2101      	movs	r1, #1
   d87cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d87ce:	4620      	mov	r0, r4
   d87d0:	4798      	blx	r3
   d87d2:	4605      	mov	r5, r0
    dcHigh();
   d87d4:	4620      	mov	r0, r4
   d87d6:	f7ff feb2 	bl	d853e <_ZN12Adafruit_EPD6dcHighEv>
   d87da:	2600      	movs	r6, #0
    for(uint16_t i=0; i<buffer2_size; i++){
   d87dc:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d87de:	b2b3      	uxth	r3, r6
   d87e0:	429a      	cmp	r2, r3
   d87e2:	d906      	bls.n	d87f2 <_ZN12Adafruit_EPD7displayEv+0x124>
      c = SPItransfer(c);
   d87e4:	4629      	mov	r1, r5
   d87e6:	4620      	mov	r0, r4
   d87e8:	f7ff ff38 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
   d87ec:	3601      	adds	r6, #1
   d87ee:	4605      	mov	r5, r0
    for(uint16_t i=0; i<buffer2_size; i++){
   d87f0:	e7f4      	b.n	d87dc <_ZN12Adafruit_EPD7displayEv+0x10e>
    csHigh();
   d87f2:	4620      	mov	r0, r4
   d87f4:	f7ff feb0 	bl	d8558 <_ZN12Adafruit_EPD6csHighEv>
    sram.csHigh();
   d87f8:	4638      	mov	r0, r7
   d87fa:	f7ff fb6b 	bl	d7ed4 <_ZN16Adafruit_MCPSRAM6csHighEv>
  update();
   d87fe:	6823      	ldr	r3, [r4, #0]
   d8800:	4620      	mov	r0, r4
   d8802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8804:	4798      	blx	r3
  powerDown();
   d8806:	6823      	ldr	r3, [r4, #0]
   d8808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d880a:	e7a2      	b.n	d8752 <_ZN12Adafruit_EPD7displayEv+0x84>
    writeRAMCommand(1);
   d880c:	6823      	ldr	r3, [r4, #0]
   d880e:	2101      	movs	r1, #1
   d8810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8812:	4620      	mov	r0, r4
   d8814:	4798      	blx	r3
    dcHigh();
   d8816:	4620      	mov	r0, r4
   d8818:	f7ff fe91 	bl	d853e <_ZN12Adafruit_EPD6dcHighEv>
    for(uint16_t i=0; i<buffer2_size; i++){
   d881c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d881e:	b2ab      	uxth	r3, r5
   d8820:	429a      	cmp	r2, r3
   d8822:	d906      	bls.n	d8832 <_ZN12Adafruit_EPD7displayEv+0x164>
      SPItransfer(buffer2[i]);
   d8824:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d8826:	4620      	mov	r0, r4
   d8828:	5cd1      	ldrb	r1, [r2, r3]
   d882a:	f7ff ff17 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
    for(uint16_t i=0; i<buffer2_size; i++){
   d882e:	3501      	adds	r5, #1
   d8830:	e7f4      	b.n	d881c <_ZN12Adafruit_EPD7displayEv+0x14e>
    csHigh();
   d8832:	4620      	mov	r0, r4
   d8834:	f7ff fe90 	bl	d8558 <_ZN12Adafruit_EPD6csHighEv>
   d8838:	e7e1      	b.n	d87fe <_ZN12Adafruit_EPD7displayEv+0x130>

000d883a <_ZN12Adafruit_EPD8EPD_dataEPKht>:
{
   d883a:	b570      	push	{r4, r5, r6, lr}
   d883c:	460c      	mov	r4, r1
   d883e:	4615      	mov	r5, r2
   d8840:	4606      	mov	r6, r0
  dcHigh();
   d8842:	f7ff fe7c 	bl	d853e <_ZN12Adafruit_EPD6dcHighEv>
  for (uint16_t i=0; i<len; i++) {
   d8846:	4425      	add	r5, r4
   d8848:	42ac      	cmp	r4, r5
   d884a:	d005      	beq.n	d8858 <_ZN12Adafruit_EPD8EPD_dataEPKht+0x1e>
    SPItransfer(buf[i]);
   d884c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8850:	4630      	mov	r0, r6
   d8852:	f7ff ff03 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
  for (uint16_t i=0; i<len; i++) {
   d8856:	e7f7      	b.n	d8848 <_ZN12Adafruit_EPD8EPD_dataEPKht+0xe>
  csHigh();
   d8858:	4630      	mov	r0, r6
}
   d885a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  csHigh();
   d885e:	f7ff be7b 	b.w	d8558 <_ZN12Adafruit_EPD6csHighEv>

000d8862 <_ZN12Adafruit_EPD11EPD_commandEhb>:
uint8_t Adafruit_EPD::EPD_command(uint8_t c, bool end) {
   d8862:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8864:	4604      	mov	r4, r0
   d8866:	9101      	str	r1, [sp, #4]
   d8868:	4616      	mov	r6, r2
  csHigh();
   d886a:	f7ff fe75 	bl	d8558 <_ZN12Adafruit_EPD6csHighEv>
  dcLow();
   d886e:	4620      	mov	r0, r4
   d8870:	f7ff fe6b 	bl	d854a <_ZN12Adafruit_EPD5dcLowEv>
  csLow();
   d8874:	4620      	mov	r0, r4
   d8876:	f7ff fecf 	bl	d8618 <_ZN12Adafruit_EPD5csLowEv>
  uint8_t data = SPItransfer(c);
   d887a:	9901      	ldr	r1, [sp, #4]
   d887c:	4620      	mov	r0, r4
   d887e:	f7ff feed 	bl	d865c <_ZN12Adafruit_EPD11SPItransferEh>
   d8882:	4605      	mov	r5, r0
  if (end) {
   d8884:	b116      	cbz	r6, d888c <_ZN12Adafruit_EPD11EPD_commandEhb+0x2a>
    csHigh();
   d8886:	4620      	mov	r0, r4
   d8888:	f7ff fe66 	bl	d8558 <_ZN12Adafruit_EPD6csHighEv>
}
   d888c:	4628      	mov	r0, r5
   d888e:	b002      	add	sp, #8
   d8890:	bd70      	pop	{r4, r5, r6, pc}

000d8892 <_ZN12Adafruit_EPD11EPD_commandEhPKht>:
{
   d8892:	b570      	push	{r4, r5, r6, lr}
   d8894:	4604      	mov	r4, r0
   d8896:	4615      	mov	r5, r2
   d8898:	461e      	mov	r6, r3
  EPD_command(c, false);
   d889a:	2200      	movs	r2, #0
   d889c:	f7ff ffe1 	bl	d8862 <_ZN12Adafruit_EPD11EPD_commandEhb>
  EPD_data(buf, len);
   d88a0:	4632      	mov	r2, r6
   d88a2:	4629      	mov	r1, r5
   d88a4:	4620      	mov	r0, r4
}
   d88a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  EPD_data(buf, len);
   d88aa:	f7ff bfc6 	b.w	d883a <_ZN12Adafruit_EPD8EPD_dataEPKht>

000d88ae <_ZL6conv2dPKc>:
const uint8_t daysInMonth[] PROGMEM = {31, 28, 31, 30, 31, 30,
                                       31, 31, 30, 31, 30};

/**************************************************************************/
/*!
    @brief  Given a date, return number of days since 2000/01/01,
   d88ae:	7803      	ldrb	r3, [r0, #0]
            valid for 2000--2099
    @param y Year
   d88b0:	7840      	ldrb	r0, [r0, #1]
    @brief  Given a date, return number of days since 2000/01/01,
   d88b2:	3b30      	subs	r3, #48	; 0x30
   d88b4:	b2db      	uxtb	r3, r3
/*!
   d88b6:	2b0a      	cmp	r3, #10
   d88b8:	bf28      	it	cs
   d88ba:	2300      	movcs	r3, #0
    @param y Year
   d88bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d88c0:	3830      	subs	r0, #48	; 0x30
   d88c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    @param m Month
   d88c6:	b2c0      	uxtb	r0, r0
   d88c8:	4770      	bx	lr

000d88ca <_ZL18write_i2c_registerhhh.constprop.0>:
  This version: MIT (see LICENSE)
   d88ca:	b538      	push	{r3, r4, r5, lr}
   d88cc:	460c      	mov	r4, r1
   d88ce:	4605      	mov	r5, r0
*/
   d88d0:	f003 f888 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d88d4:	2168      	movs	r1, #104	; 0x68
   d88d6:	f002 feed 	bl	db6b4 <_ZN7TwoWire17beginTransmissionEh>
/**************************************************************************/
   d88da:	f003 f883 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d88de:	6803      	ldr	r3, [r0, #0]
   d88e0:	4629      	mov	r1, r5
   d88e2:	689b      	ldr	r3, [r3, #8]
   d88e4:	4798      	blx	r3

   d88e6:	f003 f87d 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d88ea:	6803      	ldr	r3, [r0, #0]
   d88ec:	4621      	mov	r1, r4
   d88ee:	689b      	ldr	r3, [r3, #8]
   d88f0:	4798      	blx	r3
#ifdef __AVR_ATtiny85__
   d88f2:	f003 f877 	bl	db9e4 <_Z19__fetch_global_Wirev>
#include <TinyWireM.h>
   d88f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#ifdef __AVR_ATtiny85__
   d88fa:	f002 bee6 	b.w	db6ca <_ZN7TwoWire15endTransmissionEv>

000d88fe <_ZL17read_i2c_registerhh.constprop.0>:
    - RTC_Millis is based on `millis()`
   d88fe:	b510      	push	{r4, lr}
   d8900:	4604      	mov	r4, r0
    - RTC_Micros is based on `micros()`; its drift rate can be tuned by
   d8902:	f003 f86f 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8906:	2168      	movs	r1, #104	; 0x68
   d8908:	f002 fed4 	bl	db6b4 <_ZN7TwoWire17beginTransmissionEh>
      the user
   d890c:	f003 f86a 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8910:	6803      	ldr	r3, [r0, #0]
   d8912:	4621      	mov	r1, r4
   d8914:	689b      	ldr	r3, [r3, #8]
   d8916:	4798      	blx	r3

   d8918:	f003 f864 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d891c:	f002 fed5 	bl	db6ca <_ZN7TwoWire15endTransmissionEv>

   d8920:	f003 f860 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8924:	2201      	movs	r2, #1
   d8926:	2168      	movs	r1, #104	; 0x68
   d8928:	f002 fec1 	bl	db6ae <_ZN7TwoWire11requestFromEhj>
  Original library by JeeLabs https://jeelabs.org/pub/docs/rtclib/, released to
   d892c:	f003 f85a 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8930:	6803      	ldr	r3, [r0, #0]
   d8932:	695b      	ldr	r3, [r3, #20]
   d8934:	4798      	blx	r3
  the public domain.
   d8936:	b2c0      	uxtb	r0, r0
   d8938:	bd10      	pop	{r4, pc}

000d893a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    @param s Seconds
    @return Number of seconds total
*/
/**************************************************************************/
static uint32_t time2ulong(uint16_t days, uint8_t h, uint8_t m, uint8_t s) {
  return ((days * 24UL + h) * 60 + m) * 60 + s;
   d893a:	b530      	push	{r4, r5, lr}
   d893c:	460d      	mov	r5, r1
   d893e:	b085      	sub	sp, #20
   d8940:	4604      	mov	r4, r0
}

/**************************************************************************/
   d8942:	6808      	ldr	r0, [r1, #0]
   d8944:	6849      	ldr	r1, [r1, #4]
   d8946:	ab01      	add	r3, sp, #4
   d8948:	c303      	stmia	r3!, {r0, r1}
   d894a:	8928      	ldrh	r0, [r5, #8]
   d894c:	7aa9      	ldrb	r1, [r5, #10]
   d894e:	8018      	strh	r0, [r3, #0]
   d8950:	7099      	strb	r1, [r3, #2]
/*!
   d8952:	f10d 000d 	add.w	r0, sp, #13
   d8956:	f7ff ffaa 	bl	d88ae <_ZL6conv2dPKc>
   d895a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d895e:	7020      	strb	r0, [r4, #0]
    @brief  Constructor from
        [Unix time](https://en.wikipedia.org/wiki/Unix_time).
   d8960:	3b41      	subs	r3, #65	; 0x41
   d8962:	2b12      	cmp	r3, #18
   d8964:	d816      	bhi.n	d8994 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x5a>
   d8966:	e8df f003 	tbb	[pc, r3]
   d896a:	1532      	.short	0x1532
   d896c:	30154615 	.word	0x30154615
   d8970:	0a151515 	.word	0x0a151515
   d8974:	44391515 	.word	0x44391515
   d8978:	15151542 	.word	0x15151542
   d897c:	40          	.byte	0x40
   d897d:	00          	.byte	0x00

   d897e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d8982:	2b61      	cmp	r3, #97	; 0x61
   d8984:	d01f      	beq.n	d89c6 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8c>
   d8986:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d898a:	2b6e      	cmp	r3, #110	; 0x6e
   d898c:	bf0c      	ite	eq
   d898e:	2306      	moveq	r3, #6
   d8990:	2307      	movne	r3, #7
    elapsed since the epoch: 1970-01-01 00:00:00. This number is analogous
    to Unix time, with two small differences:

     - The Unix epoch is specified to be at 00:00:00
       [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time),
       whereas this class has no notion of time zones. The epoch used in
   d8992:	7063      	strb	r3, [r4, #1]
       this class is then at 00:00:00 on whatever time zone the user chooses
       to use, ignoring changes in DST.
   d8994:	a802      	add	r0, sp, #8
   d8996:	f7ff ff8a 	bl	d88ae <_ZL6conv2dPKc>
   d899a:	70a0      	strb	r0, [r4, #2]

   d899c:	6810      	ldr	r0, [r2, #0]
   d899e:	6851      	ldr	r1, [r2, #4]
   d89a0:	ab01      	add	r3, sp, #4
   d89a2:	c303      	stmia	r3!, {r0, r1}
     - Unix time is conventionally represented with signed numbers, whereas
   d89a4:	a801      	add	r0, sp, #4
   d89a6:	f7ff ff82 	bl	d88ae <_ZL6conv2dPKc>
   d89aa:	70e0      	strb	r0, [r4, #3]
       this constructor takes an unsigned argument. Because of this, it does
   d89ac:	f10d 0007 	add.w	r0, sp, #7
   d89b0:	f7ff ff7d 	bl	d88ae <_ZL6conv2dPKc>
   d89b4:	7120      	strb	r0, [r4, #4]
       _not_ suffer from the
   d89b6:	f10d 000a 	add.w	r0, sp, #10
   d89ba:	f7ff ff78 	bl	d88ae <_ZL6conv2dPKc>
   d89be:	7160      	strb	r0, [r4, #5]
       [year 2038 problem](https://en.wikipedia.org/wiki/Year_2038_problem).
   d89c0:	4620      	mov	r0, r4
   d89c2:	b005      	add	sp, #20
   d89c4:	bd30      	pop	{r4, r5, pc}

   d89c6:	2301      	movs	r3, #1
   d89c8:	e7e3      	b.n	d8992 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    This builds a DateTime from an integer specifying the number of seconds
   d89ca:	2302      	movs	r3, #2
   d89cc:	e7e1      	b.n	d8992 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    elapsed since the epoch: 1970-01-01 00:00:00. This number is analogous
   d89ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d89d2:	2b72      	cmp	r3, #114	; 0x72
   d89d4:	bf0c      	ite	eq
   d89d6:	2304      	moveq	r3, #4
   d89d8:	2308      	movne	r3, #8
   d89da:	e7da      	b.n	d8992 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    to Unix time, with two small differences:
   d89dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d89e0:	2b72      	cmp	r3, #114	; 0x72
   d89e2:	bf0c      	ite	eq
   d89e4:	2303      	moveq	r3, #3
   d89e6:	2305      	movne	r3, #5
   d89e8:	e7d3      	b.n	d8992 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>

   d89ea:	2309      	movs	r3, #9
   d89ec:	e7d1      	b.n	d8992 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
     - The Unix epoch is specified to be at 00:00:00
   d89ee:	230a      	movs	r3, #10
   d89f0:	e7cf      	b.n	d8992 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
       [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time),
   d89f2:	230b      	movs	r3, #11
   d89f4:	e7cd      	b.n	d8992 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
       whereas this class has no notion of time zones. The epoch used in
   d89f6:	230c      	movs	r3, #12
   d89f8:	e7cb      	b.n	d8992 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>

000d89fa <_ZN10RTC_DS13073nowEv>:
/**************************************************************************/
/*!
    @brief  Constructor for generating the build time.

    This constructor expects its parameters to be strings in the format
    generated by the compiler's preprocessor macros `__DATE__` and
   d89fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d89fe:	4604      	mov	r4, r0
    `__TIME__`. Usage:
   d8a00:	f002 fff0 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a04:	2168      	movs	r1, #104	; 0x68
   d8a06:	f002 fe59 	bl	db6bc <_ZN7TwoWire17beginTransmissionEi>

   d8a0a:	f002 ffeb 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a0e:	6803      	ldr	r3, [r0, #0]
   d8a10:	2100      	movs	r1, #0
   d8a12:	689b      	ldr	r3, [r3, #8]
   d8a14:	4798      	blx	r3
    ```
   d8a16:	f002 ffe5 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a1a:	f002 fe56 	bl	db6ca <_ZN7TwoWire15endTransmissionEv>
    DateTime buildTime(__DATE__, __TIME__);
    ```
   d8a1e:	f002 ffe1 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a22:	2207      	movs	r2, #7
   d8a24:	2168      	movs	r1, #104	; 0x68
   d8a26:	f002 fe42 	bl	db6ae <_ZN7TwoWire11requestFromEhj>

   d8a2a:	f002 ffdb 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a2e:	6803      	ldr	r3, [r0, #0]
   d8a30:	695b      	ldr	r3, [r3, #20]
   d8a32:	4798      	blx	r3
   d8a34:	f000 097f 	and.w	r9, r0, #127	; 0x7f
}
   d8a38:	f3c0 1002 	ubfx	r0, r0, #4, #3
   d8a3c:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   d8a40:	eb09 0040 	add.w	r0, r9, r0, lsl #1
   d8a44:	fa5f f980 	uxtb.w	r9, r0
    @note The `F()` macro can be used to reduce the RAM footprint, see
   d8a48:	f002 ffcc 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a4c:	6803      	ldr	r3, [r0, #0]
   d8a4e:	695b      	ldr	r3, [r3, #20]
   d8a50:	4798      	blx	r3
}
   d8a52:	f3c0 1503 	ubfx	r5, r0, #4, #4
   d8a56:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   d8a5a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   d8a5e:	b2c5      	uxtb	r5, r0
        the next constructor.
   d8a60:	f002 ffc0 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a64:	6803      	ldr	r3, [r0, #0]
   d8a66:	695b      	ldr	r3, [r3, #20]
   d8a68:	4798      	blx	r3
}
   d8a6a:	f3c0 1603 	ubfx	r6, r0, #4, #4
   d8a6e:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   d8a72:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   d8a76:	b2c6      	uxtb	r6, r0

   d8a78:	f002 ffb4 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a7c:	6803      	ldr	r3, [r0, #0]
   d8a7e:	695b      	ldr	r3, [r3, #20]
   d8a80:	4798      	blx	r3
    @param date Date string, e.g. "Apr 16 2020".
   d8a82:	f002 ffaf 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a86:	6803      	ldr	r3, [r0, #0]
   d8a88:	695b      	ldr	r3, [r3, #20]
   d8a8a:	4798      	blx	r3
}
   d8a8c:	f3c0 1703 	ubfx	r7, r0, #4, #4
   d8a90:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   d8a94:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   d8a98:	b2c7      	uxtb	r7, r0
    @param time Time string, e.g. "18:34:56".
   d8a9a:	f002 ffa3 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8a9e:	6803      	ldr	r3, [r0, #0]
   d8aa0:	695b      	ldr	r3, [r3, #20]
   d8aa2:	4798      	blx	r3
}
   d8aa4:	f3c0 1803 	ubfx	r8, r0, #4, #4
   d8aa8:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   d8aac:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   d8ab0:	fa5f f880 	uxtb.w	r8, r0
*/
   d8ab4:	f002 ff96 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8ab8:	6803      	ldr	r3, [r0, #0]
   d8aba:	695b      	ldr	r3, [r3, #20]
   d8abc:	4798      	blx	r3
}
   d8abe:	f3c0 1303 	ubfx	r3, r0, #4, #4
   d8ac2:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d8ac6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  Wire._I2C_WRITE((byte)reg);
   d8aca:	7020      	strb	r0, [r4, #0]
  Wire._I2C_WRITE((byte)val);
   d8acc:	f884 8001 	strb.w	r8, [r4, #1]
  Wire.endTransmission();
   d8ad0:	70a7      	strb	r7, [r4, #2]
}
   d8ad2:	70e6      	strb	r6, [r4, #3]

   d8ad4:	7125      	strb	r5, [r4, #4]
/**************************************************************************/
   d8ad6:	f884 9005 	strb.w	r9, [r4, #5]
/**************************************************************************/
DateTime::DateTime(const char *date, const char *time) {
  yOff = conv2d(date + 9);
   d8ada:	4620      	mov	r0, r4
   d8adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8ae0 <_ZN10RTC_DS32316adjustERK8DateTime>:
    | ss        | the second as a 2-digit number (00--59)                |

    If either "AP" or "ap" is used, the "hh" specifier uses 12-hour mode
    (range: 01--12). Otherwise it works in 24-hour mode (range: 00--23).

    The specifiers within _buffer_ will be overwritten with the appropriate
   d8ae0:	b538      	push	{r3, r4, r5, lr}
   d8ae2:	4605      	mov	r5, r0
    values from the DateTime. Any characters not belonging to one of the
   d8ae4:	f002 ff7e 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8ae8:	2168      	movs	r1, #104	; 0x68
   d8aea:	f002 fde7 	bl	db6bc <_ZN7TwoWire17beginTransmissionEi>
    above specifiers are left as-is.
   d8aee:	f002 ff79 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8af2:	6803      	ldr	r3, [r0, #0]
   d8af4:	2100      	movs	r1, #0
   d8af6:	689b      	ldr	r3, [r3, #8]
   d8af8:	4798      	blx	r3

   d8afa:	f002 ff73 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8afe:	7969      	ldrb	r1, [r5, #5]

   d8b00:	240a      	movs	r4, #10
   d8b02:	fbb1 f3f4 	udiv	r3, r1, r4
   d8b06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8b0a:	eb01 0143 	add.w	r1, r1, r3, lsl #1

   d8b0e:	6803      	ldr	r3, [r0, #0]
   d8b10:	b2c9      	uxtb	r1, r1
   d8b12:	689b      	ldr	r3, [r3, #8]
   d8b14:	4798      	blx	r3
    __Example__: The format "DDD, DD MMM YYYY hh:mm:ss" generates an output
   d8b16:	f002 ff65 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8b1a:	7929      	ldrb	r1, [r5, #4]

   d8b1c:	fbb1 f3f4 	udiv	r3, r1, r4
   d8b20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8b24:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    __Example__: The format "DDD, DD MMM YYYY hh:mm:ss" generates an output
   d8b28:	6803      	ldr	r3, [r0, #0]
   d8b2a:	b2c9      	uxtb	r1, r1
   d8b2c:	689b      	ldr	r3, [r3, #8]
   d8b2e:	4798      	blx	r3
    of the form "Thu, 16 Apr 2020 18:34:56.
   d8b30:	f002 ff58 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8b34:	78e9      	ldrb	r1, [r5, #3]

   d8b36:	fbb1 f3f4 	udiv	r3, r1, r4
   d8b3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8b3e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    of the form "Thu, 16 Apr 2020 18:34:56.
   d8b42:	6803      	ldr	r3, [r0, #0]
   d8b44:	b2c9      	uxtb	r1, r1
   d8b46:	689b      	ldr	r3, [r3, #8]
   d8b48:	4798      	blx	r3

   d8b4a:	f002 ff4b 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8b4e:	6803      	ldr	r3, [r0, #0]
   d8b50:	2100      	movs	r1, #0
   d8b52:	689b      	ldr	r3, [r3, #8]
   d8b54:	4798      	blx	r3
    @see The `timestamp()` method provides similar functionnality, but it
   d8b56:	f002 ff45 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8b5a:	78a9      	ldrb	r1, [r5, #2]

   d8b5c:	fbb1 f3f4 	udiv	r3, r1, r4
   d8b60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8b64:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    @see The `timestamp()` method provides similar functionnality, but it
   d8b68:	6803      	ldr	r3, [r0, #0]
   d8b6a:	b2c9      	uxtb	r1, r1
   d8b6c:	689b      	ldr	r3, [r3, #8]
   d8b6e:	4798      	blx	r3
        returns a `String` object and supports a limited choice of
   d8b70:	f002 ff38 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8b74:	7869      	ldrb	r1, [r5, #1]

   d8b76:	fbb1 f3f4 	udiv	r3, r1, r4
   d8b7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8b7e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
        returns a `String` object and supports a limited choice of
   d8b82:	6803      	ldr	r3, [r0, #0]
   d8b84:	b2c9      	uxtb	r1, r1
   d8b86:	689b      	ldr	r3, [r3, #8]
   d8b88:	4798      	blx	r3
        predefined formats.
   d8b8a:	f002 ff2b 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8b8e:	7829      	ldrb	r1, [r5, #0]
   d8b90:	6803      	ldr	r3, [r0, #0]

   d8b92:	fbb1 f4f4 	udiv	r4, r1, r4
   d8b96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   d8b9a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
        predefined formats.
   d8b9e:	689b      	ldr	r3, [r3, #8]
   d8ba0:	b2c9      	uxtb	r1, r1
   d8ba2:	4798      	blx	r3

   d8ba4:	f002 ff1e 	bl	db9e4 <_Z19__fetch_global_Wirev>
   d8ba8:	f002 fd8f 	bl	db6ca <_ZN7TwoWire15endTransmissionEv>
    @param[in,out] buffer Array of `char` for holding the format description
        and the formatted DateTime. Before calling this method, the buffer
   d8bac:	200f      	movs	r0, #15
   d8bae:	f7ff fea6 	bl	d88fe <_ZL17read_i2c_registerhh.constprop.0>
        should be initialized by the user with the format string. The method
        will overwrite the buffer with the formatted date and/or time.

   d8bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        will overwrite the buffer with the formatted date and/or time.
   d8bb6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   d8bba:	200f      	movs	r0, #15
   d8bbc:	f7ff be85 	b.w	d88ca <_ZL18write_i2c_registerhhh.constprop.0>

000d8bc0 <_ZN10RTC_DS32313nowEv>:
   d8bc0:	b510      	push	{r4, lr}
   d8bc2:	4604      	mov	r4, r0
   d8bc4:	f7ff ff19 	bl	d89fa <_ZN10RTC_DS13073nowEv>
   d8bc8:	4620      	mov	r0, r4
   d8bca:	bd10      	pop	{r4, pc}

000d8bcc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8bcc:	b508      	push	{r3, lr}
   d8bce:	4b02      	ldr	r3, [pc, #8]	; (d8bd8 <netdb_freeaddrinfo+0xc>)
   d8bd0:	681b      	ldr	r3, [r3, #0]
   d8bd2:	689b      	ldr	r3, [r3, #8]
   d8bd4:	9301      	str	r3, [sp, #4]
   d8bd6:	bd08      	pop	{r3, pc}
   d8bd8:	00030268 	.word	0x00030268

000d8bdc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8bdc:	b508      	push	{r3, lr}
   d8bde:	4b02      	ldr	r3, [pc, #8]	; (d8be8 <netdb_getaddrinfo+0xc>)
   d8be0:	681b      	ldr	r3, [r3, #0]
   d8be2:	68db      	ldr	r3, [r3, #12]
   d8be4:	9301      	str	r3, [sp, #4]
   d8be6:	bd08      	pop	{r3, pc}
   d8be8:	00030268 	.word	0x00030268

000d8bec <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8bec:	b508      	push	{r3, lr}
   d8bee:	4b02      	ldr	r3, [pc, #8]	; (d8bf8 <HAL_Pin_Mode+0xc>)
   d8bf0:	681b      	ldr	r3, [r3, #0]
   d8bf2:	689b      	ldr	r3, [r3, #8]
   d8bf4:	9301      	str	r3, [sp, #4]
   d8bf6:	bd08      	pop	{r3, pc}
   d8bf8:	0003022c 	.word	0x0003022c

000d8bfc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8bfc:	b508      	push	{r3, lr}
   d8bfe:	4b02      	ldr	r3, [pc, #8]	; (d8c08 <HAL_Get_Pin_Mode+0xc>)
   d8c00:	681b      	ldr	r3, [r3, #0]
   d8c02:	68db      	ldr	r3, [r3, #12]
   d8c04:	9301      	str	r3, [sp, #4]
   d8c06:	bd08      	pop	{r3, pc}
   d8c08:	0003022c 	.word	0x0003022c

000d8c0c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d8c0c:	b508      	push	{r3, lr}
   d8c0e:	4b02      	ldr	r3, [pc, #8]	; (d8c18 <HAL_GPIO_Write+0xc>)
   d8c10:	681b      	ldr	r3, [r3, #0]
   d8c12:	691b      	ldr	r3, [r3, #16]
   d8c14:	9301      	str	r3, [sp, #4]
   d8c16:	bd08      	pop	{r3, pc}
   d8c18:	0003022c 	.word	0x0003022c

000d8c1c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d8c1c:	b508      	push	{r3, lr}
   d8c1e:	4b02      	ldr	r3, [pc, #8]	; (d8c28 <HAL_GPIO_Read+0xc>)
   d8c20:	681b      	ldr	r3, [r3, #0]
   d8c22:	695b      	ldr	r3, [r3, #20]
   d8c24:	9301      	str	r3, [sp, #4]
   d8c26:	bd08      	pop	{r3, pc}
   d8c28:	0003022c 	.word	0x0003022c

000d8c2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d8c2c:	b508      	push	{r3, lr}
   d8c2e:	4b02      	ldr	r3, [pc, #8]	; (d8c38 <HAL_RNG_GetRandomNumber+0xc>)
   d8c30:	681b      	ldr	r3, [r3, #0]
   d8c32:	685b      	ldr	r3, [r3, #4]
   d8c34:	9301      	str	r3, [sp, #4]
   d8c36:	bd08      	pop	{r3, pc}
   d8c38:	00030218 	.word	0x00030218

000d8c3c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d8c3c:	b508      	push	{r3, lr}
   d8c3e:	4b02      	ldr	r3, [pc, #8]	; (d8c48 <HAL_Delay_Microseconds+0xc>)
   d8c40:	681b      	ldr	r3, [r3, #0]
   d8c42:	68db      	ldr	r3, [r3, #12]
   d8c44:	9301      	str	r3, [sp, #4]
   d8c46:	bd08      	pop	{r3, pc}
   d8c48:	00030218 	.word	0x00030218

000d8c4c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d8c4c:	b508      	push	{r3, lr}
   d8c4e:	4b02      	ldr	r3, [pc, #8]	; (d8c58 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d8c50:	681b      	ldr	r3, [r3, #0]
   d8c52:	691b      	ldr	r3, [r3, #16]
   d8c54:	9301      	str	r3, [sp, #4]
   d8c56:	bd08      	pop	{r3, pc}
   d8c58:	00030218 	.word	0x00030218

000d8c5c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d8c5c:	b508      	push	{r3, lr}
   d8c5e:	4b02      	ldr	r3, [pc, #8]	; (d8c68 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8c60:	681b      	ldr	r3, [r3, #0]
   d8c62:	695b      	ldr	r3, [r3, #20]
   d8c64:	9301      	str	r3, [sp, #4]
   d8c66:	bd08      	pop	{r3, pc}
   d8c68:	00030218 	.word	0x00030218

000d8c6c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d8c6c:	b508      	push	{r3, lr}
   d8c6e:	4b02      	ldr	r3, [pc, #8]	; (d8c78 <HAL_EEPROM_Init+0xc>)
   d8c70:	681b      	ldr	r3, [r3, #0]
   d8c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8c74:	9301      	str	r3, [sp, #4]
   d8c76:	bd08      	pop	{r3, pc}
   d8c78:	00030218 	.word	0x00030218

000d8c7c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d8c7c:	b508      	push	{r3, lr}
   d8c7e:	4b02      	ldr	r3, [pc, #8]	; (d8c88 <HAL_EEPROM_Get+0xc>)
   d8c80:	681b      	ldr	r3, [r3, #0]
   d8c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8c84:	9301      	str	r3, [sp, #4]
   d8c86:	bd08      	pop	{r3, pc}
   d8c88:	00030218 	.word	0x00030218

000d8c8c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d8c8c:	b508      	push	{r3, lr}
   d8c8e:	4b02      	ldr	r3, [pc, #8]	; (d8c98 <HAL_EEPROM_Put+0xc>)
   d8c90:	681b      	ldr	r3, [r3, #0]
   d8c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8c94:	9301      	str	r3, [sp, #4]
   d8c96:	bd08      	pop	{r3, pc}
   d8c98:	00030218 	.word	0x00030218

000d8c9c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d8c9c:	b508      	push	{r3, lr}
   d8c9e:	4b02      	ldr	r3, [pc, #8]	; (d8ca8 <hal_rtc_time_is_valid+0xc>)
   d8ca0:	681b      	ldr	r3, [r3, #0]
   d8ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8ca4:	9301      	str	r3, [sp, #4]
   d8ca6:	bd08      	pop	{r3, pc}
   d8ca8:	00030218 	.word	0x00030218

000d8cac <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d8cac:	b508      	push	{r3, lr}
   d8cae:	4b02      	ldr	r3, [pc, #8]	; (d8cb8 <hal_timer_millis+0xc>)
   d8cb0:	681b      	ldr	r3, [r3, #0]
   d8cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8cb4:	9301      	str	r3, [sp, #4]
   d8cb6:	bd08      	pop	{r3, pc}
   d8cb8:	00030218 	.word	0x00030218

000d8cbc <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d8cbc:	b508      	push	{r3, lr}
   d8cbe:	4b02      	ldr	r3, [pc, #8]	; (d8cc8 <hal_rtc_get_time+0xc>)
   d8cc0:	681b      	ldr	r3, [r3, #0]
   d8cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8cc4:	9301      	str	r3, [sp, #4]
   d8cc6:	bd08      	pop	{r3, pc}
   d8cc8:	00030218 	.word	0x00030218

000d8ccc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d8ccc:	b508      	push	{r3, lr}
   d8cce:	4b02      	ldr	r3, [pc, #8]	; (d8cd8 <hal_ble_stack_init+0xc>)
   d8cd0:	681b      	ldr	r3, [r3, #0]
   d8cd2:	689b      	ldr	r3, [r3, #8]
   d8cd4:	9301      	str	r3, [sp, #4]
   d8cd6:	bd08      	pop	{r3, pc}
   d8cd8:	00030278 	.word	0x00030278

000d8cdc <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d8cdc:	b508      	push	{r3, lr}
   d8cde:	4b02      	ldr	r3, [pc, #8]	; (d8ce8 <hal_ble_gap_set_advertising_data+0xc>)
   d8ce0:	681b      	ldr	r3, [r3, #0]
   d8ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8ce4:	9301      	str	r3, [sp, #4]
   d8ce6:	bd08      	pop	{r3, pc}
   d8ce8:	00030278 	.word	0x00030278

000d8cec <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d8cec:	b508      	push	{r3, lr}
   d8cee:	4b02      	ldr	r3, [pc, #8]	; (d8cf8 <hal_ble_gap_set_scan_response_data+0xc>)
   d8cf0:	681b      	ldr	r3, [r3, #0]
   d8cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8cf4:	9301      	str	r3, [sp, #4]
   d8cf6:	bd08      	pop	{r3, pc}
   d8cf8:	00030278 	.word	0x00030278

000d8cfc <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d8cfc:	b508      	push	{r3, lr}
   d8cfe:	4b02      	ldr	r3, [pc, #8]	; (d8d08 <hal_ble_gap_start_advertising+0xc>)
   d8d00:	681b      	ldr	r3, [r3, #0]
   d8d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d8d04:	9301      	str	r3, [sp, #4]
   d8d06:	bd08      	pop	{r3, pc}
   d8d08:	00030278 	.word	0x00030278

000d8d0c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d8d0c:	b508      	push	{r3, lr}
   d8d0e:	4b03      	ldr	r3, [pc, #12]	; (d8d1c <hal_ble_gap_disconnect+0x10>)
   d8d10:	681b      	ldr	r3, [r3, #0]
   d8d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d8d16:	9301      	str	r3, [sp, #4]
   d8d18:	bd08      	pop	{r3, pc}
   d8d1a:	0000      	.short	0x0000
   d8d1c:	00030278 	.word	0x00030278

000d8d20 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d8d20:	b508      	push	{r3, lr}
   d8d22:	4b03      	ldr	r3, [pc, #12]	; (d8d30 <hal_ble_gatt_server_add_service+0x10>)
   d8d24:	681b      	ldr	r3, [r3, #0]
   d8d26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d8d2a:	9301      	str	r3, [sp, #4]
   d8d2c:	bd08      	pop	{r3, pc}
   d8d2e:	0000      	.short	0x0000
   d8d30:	00030278 	.word	0x00030278

000d8d34 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d8d34:	b508      	push	{r3, lr}
   d8d36:	4b03      	ldr	r3, [pc, #12]	; (d8d44 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d8d38:	681b      	ldr	r3, [r3, #0]
   d8d3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d8d3e:	9301      	str	r3, [sp, #4]
   d8d40:	bd08      	pop	{r3, pc}
   d8d42:	0000      	.short	0x0000
   d8d44:	00030278 	.word	0x00030278

000d8d48 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d8d48:	b508      	push	{r3, lr}
   d8d4a:	4b03      	ldr	r3, [pc, #12]	; (d8d58 <hal_ble_gatt_client_write_with_response+0x10>)
   d8d4c:	681b      	ldr	r3, [r3, #0]
   d8d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d8d52:	9301      	str	r3, [sp, #4]
   d8d54:	bd08      	pop	{r3, pc}
   d8d56:	0000      	.short	0x0000
   d8d58:	00030278 	.word	0x00030278

000d8d5c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d8d5c:	b508      	push	{r3, lr}
   d8d5e:	4b03      	ldr	r3, [pc, #12]	; (d8d6c <hal_ble_gatt_client_write_without_response+0x10>)
   d8d60:	681b      	ldr	r3, [r3, #0]
   d8d62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d8d66:	9301      	str	r3, [sp, #4]
   d8d68:	bd08      	pop	{r3, pc}
   d8d6a:	0000      	.short	0x0000
   d8d6c:	00030278 	.word	0x00030278

000d8d70 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d8d70:	b508      	push	{r3, lr}
   d8d72:	4b03      	ldr	r3, [pc, #12]	; (d8d80 <hal_ble_gatt_server_add_characteristic+0x10>)
   d8d74:	681b      	ldr	r3, [r3, #0]
   d8d76:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d8d7a:	9301      	str	r3, [sp, #4]
   d8d7c:	bd08      	pop	{r3, pc}
   d8d7e:	0000      	.short	0x0000
   d8d80:	00030278 	.word	0x00030278

000d8d84 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d8d84:	b508      	push	{r3, lr}
   d8d86:	4b03      	ldr	r3, [pc, #12]	; (d8d94 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d8d88:	681b      	ldr	r3, [r3, #0]
   d8d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d8d8e:	9301      	str	r3, [sp, #4]
   d8d90:	bd08      	pop	{r3, pc}
   d8d92:	0000      	.short	0x0000
   d8d94:	00030278 	.word	0x00030278

000d8d98 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d8d98:	b508      	push	{r3, lr}
   d8d9a:	4b03      	ldr	r3, [pc, #12]	; (d8da8 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d8d9c:	681b      	ldr	r3, [r3, #0]
   d8d9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d8da2:	9301      	str	r3, [sp, #4]
   d8da4:	bd08      	pop	{r3, pc}
   d8da6:	0000      	.short	0x0000
   d8da8:	00030278 	.word	0x00030278

000d8dac <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d8dac:	b508      	push	{r3, lr}
   d8dae:	4b03      	ldr	r3, [pc, #12]	; (d8dbc <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d8db0:	681b      	ldr	r3, [r3, #0]
   d8db2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d8db6:	9301      	str	r3, [sp, #4]
   d8db8:	bd08      	pop	{r3, pc}
   d8dba:	0000      	.short	0x0000
   d8dbc:	00030278 	.word	0x00030278

000d8dc0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8dc0:	b508      	push	{r3, lr}
   d8dc2:	4b02      	ldr	r3, [pc, #8]	; (d8dcc <os_mutex_recursive_create+0xc>)
   d8dc4:	681b      	ldr	r3, [r3, #0]
   d8dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8dc8:	9301      	str	r3, [sp, #4]
   d8dca:	bd08      	pop	{r3, pc}
   d8dcc:	00030248 	.word	0x00030248

000d8dd0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d8dd0:	b508      	push	{r3, lr}
   d8dd2:	4b02      	ldr	r3, [pc, #8]	; (d8ddc <os_mutex_recursive_destroy+0xc>)
   d8dd4:	681b      	ldr	r3, [r3, #0]
   d8dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8dd8:	9301      	str	r3, [sp, #4]
   d8dda:	bd08      	pop	{r3, pc}
   d8ddc:	00030248 	.word	0x00030248

000d8de0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d8de0:	b508      	push	{r3, lr}
   d8de2:	4b02      	ldr	r3, [pc, #8]	; (d8dec <os_mutex_recursive_lock+0xc>)
   d8de4:	681b      	ldr	r3, [r3, #0]
   d8de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8de8:	9301      	str	r3, [sp, #4]
   d8dea:	bd08      	pop	{r3, pc}
   d8dec:	00030248 	.word	0x00030248

000d8df0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d8df0:	b508      	push	{r3, lr}
   d8df2:	4b02      	ldr	r3, [pc, #8]	; (d8dfc <os_mutex_recursive_unlock+0xc>)
   d8df4:	681b      	ldr	r3, [r3, #0]
   d8df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8df8:	9301      	str	r3, [sp, #4]
   d8dfa:	bd08      	pop	{r3, pc}
   d8dfc:	00030248 	.word	0x00030248

000d8e00 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8e00:	b508      	push	{r3, lr}
   d8e02:	4b02      	ldr	r3, [pc, #8]	; (d8e0c <inet_inet_ntop+0xc>)
   d8e04:	681b      	ldr	r3, [r3, #0]
   d8e06:	695b      	ldr	r3, [r3, #20]
   d8e08:	9301      	str	r3, [sp, #4]
   d8e0a:	bd08      	pop	{r3, pc}
   d8e0c:	00030264 	.word	0x00030264

000d8e10 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8e10:	b508      	push	{r3, lr}
   d8e12:	4b02      	ldr	r3, [pc, #8]	; (d8e1c <hal_usart_init+0xc>)
   d8e14:	681b      	ldr	r3, [r3, #0]
   d8e16:	681b      	ldr	r3, [r3, #0]
   d8e18:	9301      	str	r3, [sp, #4]
   d8e1a:	bd08      	pop	{r3, pc}
   d8e1c:	0003023c 	.word	0x0003023c

000d8e20 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8e20:	b508      	push	{r3, lr}
   d8e22:	4b02      	ldr	r3, [pc, #8]	; (d8e2c <hal_usart_write+0xc>)
   d8e24:	681b      	ldr	r3, [r3, #0]
   d8e26:	68db      	ldr	r3, [r3, #12]
   d8e28:	9301      	str	r3, [sp, #4]
   d8e2a:	bd08      	pop	{r3, pc}
   d8e2c:	0003023c 	.word	0x0003023c

000d8e30 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8e30:	b508      	push	{r3, lr}
   d8e32:	4b02      	ldr	r3, [pc, #8]	; (d8e3c <hal_usart_available+0xc>)
   d8e34:	681b      	ldr	r3, [r3, #0]
   d8e36:	691b      	ldr	r3, [r3, #16]
   d8e38:	9301      	str	r3, [sp, #4]
   d8e3a:	bd08      	pop	{r3, pc}
   d8e3c:	0003023c 	.word	0x0003023c

000d8e40 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d8e40:	b508      	push	{r3, lr}
   d8e42:	4b02      	ldr	r3, [pc, #8]	; (d8e4c <hal_usart_read+0xc>)
   d8e44:	681b      	ldr	r3, [r3, #0]
   d8e46:	695b      	ldr	r3, [r3, #20]
   d8e48:	9301      	str	r3, [sp, #4]
   d8e4a:	bd08      	pop	{r3, pc}
   d8e4c:	0003023c 	.word	0x0003023c

000d8e50 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d8e50:	b508      	push	{r3, lr}
   d8e52:	4b02      	ldr	r3, [pc, #8]	; (d8e5c <hal_usart_peek+0xc>)
   d8e54:	681b      	ldr	r3, [r3, #0]
   d8e56:	699b      	ldr	r3, [r3, #24]
   d8e58:	9301      	str	r3, [sp, #4]
   d8e5a:	bd08      	pop	{r3, pc}
   d8e5c:	0003023c 	.word	0x0003023c

000d8e60 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8e60:	b508      	push	{r3, lr}
   d8e62:	4b02      	ldr	r3, [pc, #8]	; (d8e6c <hal_usart_flush+0xc>)
   d8e64:	681b      	ldr	r3, [r3, #0]
   d8e66:	69db      	ldr	r3, [r3, #28]
   d8e68:	9301      	str	r3, [sp, #4]
   d8e6a:	bd08      	pop	{r3, pc}
   d8e6c:	0003023c 	.word	0x0003023c

000d8e70 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8e70:	b508      	push	{r3, lr}
   d8e72:	4b02      	ldr	r3, [pc, #8]	; (d8e7c <hal_usart_is_enabled+0xc>)
   d8e74:	681b      	ldr	r3, [r3, #0]
   d8e76:	6a1b      	ldr	r3, [r3, #32]
   d8e78:	9301      	str	r3, [sp, #4]
   d8e7a:	bd08      	pop	{r3, pc}
   d8e7c:	0003023c 	.word	0x0003023c

000d8e80 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8e80:	b508      	push	{r3, lr}
   d8e82:	4b02      	ldr	r3, [pc, #8]	; (d8e8c <hal_usart_available_data_for_write+0xc>)
   d8e84:	681b      	ldr	r3, [r3, #0]
   d8e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8e88:	9301      	str	r3, [sp, #4]
   d8e8a:	bd08      	pop	{r3, pc}
   d8e8c:	0003023c 	.word	0x0003023c

000d8e90 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d8e90:	b508      	push	{r3, lr}
   d8e92:	4b02      	ldr	r3, [pc, #8]	; (d8e9c <hal_i2c_begin+0xc>)
   d8e94:	681b      	ldr	r3, [r3, #0]
   d8e96:	68db      	ldr	r3, [r3, #12]
   d8e98:	9301      	str	r3, [sp, #4]
   d8e9a:	bd08      	pop	{r3, pc}
   d8e9c:	00030228 	.word	0x00030228

000d8ea0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d8ea0:	b508      	push	{r3, lr}
   d8ea2:	4b02      	ldr	r3, [pc, #8]	; (d8eac <hal_i2c_begin_transmission+0xc>)
   d8ea4:	681b      	ldr	r3, [r3, #0]
   d8ea6:	699b      	ldr	r3, [r3, #24]
   d8ea8:	9301      	str	r3, [sp, #4]
   d8eaa:	bd08      	pop	{r3, pc}
   d8eac:	00030228 	.word	0x00030228

000d8eb0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d8eb0:	b508      	push	{r3, lr}
   d8eb2:	4b02      	ldr	r3, [pc, #8]	; (d8ebc <hal_i2c_end_transmission+0xc>)
   d8eb4:	681b      	ldr	r3, [r3, #0]
   d8eb6:	69db      	ldr	r3, [r3, #28]
   d8eb8:	9301      	str	r3, [sp, #4]
   d8eba:	bd08      	pop	{r3, pc}
   d8ebc:	00030228 	.word	0x00030228

000d8ec0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d8ec0:	b508      	push	{r3, lr}
   d8ec2:	4b02      	ldr	r3, [pc, #8]	; (d8ecc <hal_i2c_write+0xc>)
   d8ec4:	681b      	ldr	r3, [r3, #0]
   d8ec6:	6a1b      	ldr	r3, [r3, #32]
   d8ec8:	9301      	str	r3, [sp, #4]
   d8eca:	bd08      	pop	{r3, pc}
   d8ecc:	00030228 	.word	0x00030228

000d8ed0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d8ed0:	b508      	push	{r3, lr}
   d8ed2:	4b02      	ldr	r3, [pc, #8]	; (d8edc <hal_i2c_available+0xc>)
   d8ed4:	681b      	ldr	r3, [r3, #0]
   d8ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8ed8:	9301      	str	r3, [sp, #4]
   d8eda:	bd08      	pop	{r3, pc}
   d8edc:	00030228 	.word	0x00030228

000d8ee0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d8ee0:	b508      	push	{r3, lr}
   d8ee2:	4b02      	ldr	r3, [pc, #8]	; (d8eec <hal_i2c_read+0xc>)
   d8ee4:	681b      	ldr	r3, [r3, #0]
   d8ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8ee8:	9301      	str	r3, [sp, #4]
   d8eea:	bd08      	pop	{r3, pc}
   d8eec:	00030228 	.word	0x00030228

000d8ef0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d8ef0:	b508      	push	{r3, lr}
   d8ef2:	4b02      	ldr	r3, [pc, #8]	; (d8efc <hal_i2c_peek+0xc>)
   d8ef4:	681b      	ldr	r3, [r3, #0]
   d8ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8ef8:	9301      	str	r3, [sp, #4]
   d8efa:	bd08      	pop	{r3, pc}
   d8efc:	00030228 	.word	0x00030228

000d8f00 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8f00:	b508      	push	{r3, lr}
   d8f02:	4b02      	ldr	r3, [pc, #8]	; (d8f0c <hal_i2c_flush+0xc>)
   d8f04:	681b      	ldr	r3, [r3, #0]
   d8f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8f08:	9301      	str	r3, [sp, #4]
   d8f0a:	bd08      	pop	{r3, pc}
   d8f0c:	00030228 	.word	0x00030228

000d8f10 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8f10:	b508      	push	{r3, lr}
   d8f12:	4b02      	ldr	r3, [pc, #8]	; (d8f1c <hal_i2c_is_enabled+0xc>)
   d8f14:	681b      	ldr	r3, [r3, #0]
   d8f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8f18:	9301      	str	r3, [sp, #4]
   d8f1a:	bd08      	pop	{r3, pc}
   d8f1c:	00030228 	.word	0x00030228

000d8f20 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8f20:	b508      	push	{r3, lr}
   d8f22:	4b02      	ldr	r3, [pc, #8]	; (d8f2c <hal_i2c_init+0xc>)
   d8f24:	681b      	ldr	r3, [r3, #0]
   d8f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8f28:	9301      	str	r3, [sp, #4]
   d8f2a:	bd08      	pop	{r3, pc}
   d8f2c:	00030228 	.word	0x00030228

000d8f30 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d8f30:	b508      	push	{r3, lr}
   d8f32:	4b02      	ldr	r3, [pc, #8]	; (d8f3c <hal_i2c_lock+0xc>)
   d8f34:	681b      	ldr	r3, [r3, #0]
   d8f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8f38:	9301      	str	r3, [sp, #4]
   d8f3a:	bd08      	pop	{r3, pc}
   d8f3c:	00030228 	.word	0x00030228

000d8f40 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d8f40:	b508      	push	{r3, lr}
   d8f42:	4b02      	ldr	r3, [pc, #8]	; (d8f4c <hal_i2c_unlock+0xc>)
   d8f44:	681b      	ldr	r3, [r3, #0]
   d8f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8f48:	9301      	str	r3, [sp, #4]
   d8f4a:	bd08      	pop	{r3, pc}
   d8f4c:	00030228 	.word	0x00030228

000d8f50 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8f50:	b508      	push	{r3, lr}
   d8f52:	4b02      	ldr	r3, [pc, #8]	; (d8f5c <hal_i2c_request_ex+0xc>)
   d8f54:	681b      	ldr	r3, [r3, #0]
   d8f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8f58:	9301      	str	r3, [sp, #4]
   d8f5a:	bd08      	pop	{r3, pc}
   d8f5c:	00030228 	.word	0x00030228

000d8f60 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d8f60:	b508      	push	{r3, lr}
   d8f62:	4b02      	ldr	r3, [pc, #8]	; (d8f6c <hal_spi_begin+0xc>)
   d8f64:	681b      	ldr	r3, [r3, #0]
   d8f66:	681b      	ldr	r3, [r3, #0]
   d8f68:	9301      	str	r3, [sp, #4]
   d8f6a:	bd08      	pop	{r3, pc}
   d8f6c:	00030230 	.word	0x00030230

000d8f70 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d8f70:	b508      	push	{r3, lr}
   d8f72:	4b02      	ldr	r3, [pc, #8]	; (d8f7c <hal_spi_transfer+0xc>)
   d8f74:	681b      	ldr	r3, [r3, #0]
   d8f76:	695b      	ldr	r3, [r3, #20]
   d8f78:	9301      	str	r3, [sp, #4]
   d8f7a:	bd08      	pop	{r3, pc}
   d8f7c:	00030230 	.word	0x00030230

000d8f80 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d8f80:	b508      	push	{r3, lr}
   d8f82:	4b02      	ldr	r3, [pc, #8]	; (d8f8c <hal_spi_init+0xc>)
   d8f84:	681b      	ldr	r3, [r3, #0]
   d8f86:	69db      	ldr	r3, [r3, #28]
   d8f88:	9301      	str	r3, [sp, #4]
   d8f8a:	bd08      	pop	{r3, pc}
   d8f8c:	00030230 	.word	0x00030230

000d8f90 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d8f90:	b508      	push	{r3, lr}
   d8f92:	4b02      	ldr	r3, [pc, #8]	; (d8f9c <hal_spi_is_enabled+0xc>)
   d8f94:	681b      	ldr	r3, [r3, #0]
   d8f96:	6a1b      	ldr	r3, [r3, #32]
   d8f98:	9301      	str	r3, [sp, #4]
   d8f9a:	bd08      	pop	{r3, pc}
   d8f9c:	00030230 	.word	0x00030230

000d8fa0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d8fa0:	b508      	push	{r3, lr}
   d8fa2:	4b02      	ldr	r3, [pc, #8]	; (d8fac <hal_spi_info+0xc>)
   d8fa4:	681b      	ldr	r3, [r3, #0]
   d8fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8fa8:	9301      	str	r3, [sp, #4]
   d8faa:	bd08      	pop	{r3, pc}
   d8fac:	00030230 	.word	0x00030230

000d8fb0 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   d8fb0:	b508      	push	{r3, lr}
   d8fb2:	4b02      	ldr	r3, [pc, #8]	; (d8fbc <hal_spi_transfer_dma+0xc>)
   d8fb4:	681b      	ldr	r3, [r3, #0]
   d8fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8fb8:	9301      	str	r3, [sp, #4]
   d8fba:	bd08      	pop	{r3, pc}
   d8fbc:	00030230 	.word	0x00030230

000d8fc0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d8fc0:	b508      	push	{r3, lr}
   d8fc2:	4b02      	ldr	r3, [pc, #8]	; (d8fcc <hal_spi_transfer_dma_status+0xc>)
   d8fc4:	681b      	ldr	r3, [r3, #0]
   d8fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8fc8:	9301      	str	r3, [sp, #4]
   d8fca:	bd08      	pop	{r3, pc}
   d8fcc:	00030230 	.word	0x00030230

000d8fd0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8fd0:	b508      	push	{r3, lr}
   d8fd2:	4b02      	ldr	r3, [pc, #8]	; (d8fdc <hal_spi_set_settings+0xc>)
   d8fd4:	681b      	ldr	r3, [r3, #0]
   d8fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8fd8:	9301      	str	r3, [sp, #4]
   d8fda:	bd08      	pop	{r3, pc}
   d8fdc:	00030230 	.word	0x00030230

000d8fe0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d8fe0:	b508      	push	{r3, lr}
   d8fe2:	4b02      	ldr	r3, [pc, #8]	; (d8fec <hal_spi_acquire+0xc>)
   d8fe4:	681b      	ldr	r3, [r3, #0]
   d8fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8fe8:	9301      	str	r3, [sp, #4]
   d8fea:	bd08      	pop	{r3, pc}
   d8fec:	00030230 	.word	0x00030230

000d8ff0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d8ff0:	b508      	push	{r3, lr}
   d8ff2:	4b02      	ldr	r3, [pc, #8]	; (d8ffc <hal_spi_release+0xc>)
   d8ff4:	681b      	ldr	r3, [r3, #0]
   d8ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8ff8:	9301      	str	r3, [sp, #4]
   d8ffa:	bd08      	pop	{r3, pc}
   d8ffc:	00030230 	.word	0x00030230

000d9000 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   d9000:	b508      	push	{r3, lr}
   d9002:	4b02      	ldr	r3, [pc, #8]	; (d900c <cellular_signal+0xc>)
   d9004:	681b      	ldr	r3, [r3, #0]
   d9006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9008:	9301      	str	r3, [sp, #4]
   d900a:	bd08      	pop	{r3, pc}
   d900c:	00030274 	.word	0x00030274

000d9010 <cellular_set_active_sim>:
#if !HAL_PLATFORM_NCP
DYNALIB_FN(34, hal_cellular, cellular_connect, cellular_result_t(void*))
DYNALIB_FN(35, hal_cellular, cellular_disconnect, cellular_result_t(void*))
#define BASE_CELL_IDX 36 // Base index for all subsequent functions
#else // HAL_PLATFORM_NCP
DYNALIB_FN(34, hal_cellular, cellular_set_active_sim, cellular_result_t(int, void*))
   d9010:	b508      	push	{r3, lr}
   d9012:	4b03      	ldr	r3, [pc, #12]	; (d9020 <cellular_set_active_sim+0x10>)
   d9014:	681b      	ldr	r3, [r3, #0]
   d9016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d901a:	9301      	str	r3, [sp, #4]
   d901c:	bd08      	pop	{r3, pc}
   d901e:	0000      	.short	0x0000
   d9020:	00030274 	.word	0x00030274

000d9024 <cellular_credentials_clear>:
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
   d9024:	b508      	push	{r3, lr}
   d9026:	4b03      	ldr	r3, [pc, #12]	; (d9034 <cellular_credentials_clear+0x10>)
   d9028:	681b      	ldr	r3, [r3, #0]
   d902a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   d902e:	9301      	str	r3, [sp, #4]
   d9030:	bd08      	pop	{r3, pc}
   d9032:	0000      	.short	0x0000
   d9034:	00030274 	.word	0x00030274

000d9038 <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d9038:	b508      	push	{r3, lr}
   d903a:	4b02      	ldr	r3, [pc, #8]	; (d9044 <dct_write_app_data+0xc>)
   d903c:	681b      	ldr	r3, [r3, #0]
   d903e:	685b      	ldr	r3, [r3, #4]
   d9040:	9301      	str	r3, [sp, #4]
   d9042:	bd08      	pop	{r3, pc}
   d9044:	00030258 	.word	0x00030258

000d9048 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d9048:	b508      	push	{r3, lr}
   d904a:	4b02      	ldr	r3, [pc, #8]	; (d9054 <HAL_USB_USART_Init+0xc>)
   d904c:	681b      	ldr	r3, [r3, #0]
   d904e:	681b      	ldr	r3, [r3, #0]
   d9050:	9301      	str	r3, [sp, #4]
   d9052:	bd08      	pop	{r3, pc}
   d9054:	0003024c 	.word	0x0003024c

000d9058 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d9058:	b508      	push	{r3, lr}
   d905a:	4b02      	ldr	r3, [pc, #8]	; (d9064 <HAL_USB_USART_Begin+0xc>)
   d905c:	681b      	ldr	r3, [r3, #0]
   d905e:	685b      	ldr	r3, [r3, #4]
   d9060:	9301      	str	r3, [sp, #4]
   d9062:	bd08      	pop	{r3, pc}
   d9064:	0003024c 	.word	0x0003024c

000d9068 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d9068:	b508      	push	{r3, lr}
   d906a:	4b02      	ldr	r3, [pc, #8]	; (d9074 <HAL_USB_USART_Available_Data+0xc>)
   d906c:	681b      	ldr	r3, [r3, #0]
   d906e:	691b      	ldr	r3, [r3, #16]
   d9070:	9301      	str	r3, [sp, #4]
   d9072:	bd08      	pop	{r3, pc}
   d9074:	0003024c 	.word	0x0003024c

000d9078 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d9078:	b508      	push	{r3, lr}
   d907a:	4b02      	ldr	r3, [pc, #8]	; (d9084 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d907c:	681b      	ldr	r3, [r3, #0]
   d907e:	695b      	ldr	r3, [r3, #20]
   d9080:	9301      	str	r3, [sp, #4]
   d9082:	bd08      	pop	{r3, pc}
   d9084:	0003024c 	.word	0x0003024c

000d9088 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9088:	b508      	push	{r3, lr}
   d908a:	4b02      	ldr	r3, [pc, #8]	; (d9094 <HAL_USB_USART_Receive_Data+0xc>)
   d908c:	681b      	ldr	r3, [r3, #0]
   d908e:	699b      	ldr	r3, [r3, #24]
   d9090:	9301      	str	r3, [sp, #4]
   d9092:	bd08      	pop	{r3, pc}
   d9094:	0003024c 	.word	0x0003024c

000d9098 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9098:	b508      	push	{r3, lr}
   d909a:	4b02      	ldr	r3, [pc, #8]	; (d90a4 <HAL_USB_USART_Send_Data+0xc>)
   d909c:	681b      	ldr	r3, [r3, #0]
   d909e:	69db      	ldr	r3, [r3, #28]
   d90a0:	9301      	str	r3, [sp, #4]
   d90a2:	bd08      	pop	{r3, pc}
   d90a4:	0003024c 	.word	0x0003024c

000d90a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d90a8:	b508      	push	{r3, lr}
   d90aa:	4b02      	ldr	r3, [pc, #8]	; (d90b4 <HAL_USB_USART_Flush_Data+0xc>)
   d90ac:	681b      	ldr	r3, [r3, #0]
   d90ae:	6a1b      	ldr	r3, [r3, #32]
   d90b0:	9301      	str	r3, [sp, #4]
   d90b2:	bd08      	pop	{r3, pc}
   d90b4:	0003024c 	.word	0x0003024c

000d90b8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d90b8:	b508      	push	{r3, lr}
   d90ba:	4b02      	ldr	r3, [pc, #8]	; (d90c4 <panic_+0xc>)
   d90bc:	681b      	ldr	r3, [r3, #0]
   d90be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d90c0:	9301      	str	r3, [sp, #4]
   d90c2:	bd08      	pop	{r3, pc}
   d90c4:	00030260 	.word	0x00030260

000d90c8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d90c8:	b508      	push	{r3, lr}
   d90ca:	4b02      	ldr	r3, [pc, #8]	; (d90d4 <log_message+0xc>)
   d90cc:	681b      	ldr	r3, [r3, #0]
   d90ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d90d0:	9301      	str	r3, [sp, #4]
   d90d2:	bd08      	pop	{r3, pc}
   d90d4:	00030260 	.word	0x00030260

000d90d8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d90d8:	b508      	push	{r3, lr}
   d90da:	4b03      	ldr	r3, [pc, #12]	; (d90e8 <diag_get_source+0x10>)
   d90dc:	681b      	ldr	r3, [r3, #0]
   d90de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d90e2:	9301      	str	r3, [sp, #4]
   d90e4:	bd08      	pop	{r3, pc}
   d90e6:	0000      	.short	0x0000
   d90e8:	00030260 	.word	0x00030260

000d90ec <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d90ec:	b508      	push	{r3, lr}
   d90ee:	4b02      	ldr	r3, [pc, #8]	; (d90f8 <system_mode+0xc>)
   d90f0:	681b      	ldr	r3, [r3, #0]
   d90f2:	681b      	ldr	r3, [r3, #0]
   d90f4:	9301      	str	r3, [sp, #4]
   d90f6:	bd08      	pop	{r3, pc}
   d90f8:	00030220 	.word	0x00030220

000d90fc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d90fc:	b508      	push	{r3, lr}
   d90fe:	4b02      	ldr	r3, [pc, #8]	; (d9108 <set_system_mode+0xc>)
   d9100:	681b      	ldr	r3, [r3, #0]
   d9102:	685b      	ldr	r3, [r3, #4]
   d9104:	9301      	str	r3, [sp, #4]
   d9106:	bd08      	pop	{r3, pc}
   d9108:	00030220 	.word	0x00030220

000d910c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d910c:	b508      	push	{r3, lr}
   d910e:	4b02      	ldr	r3, [pc, #8]	; (d9118 <system_delay_ms+0xc>)
   d9110:	681b      	ldr	r3, [r3, #0]
   d9112:	695b      	ldr	r3, [r3, #20]
   d9114:	9301      	str	r3, [sp, #4]
   d9116:	bd08      	pop	{r3, pc}
   d9118:	00030220 	.word	0x00030220

000d911c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d911c:	b508      	push	{r3, lr}
   d911e:	4b02      	ldr	r3, [pc, #8]	; (d9128 <system_thread_set_state+0xc>)
   d9120:	681b      	ldr	r3, [r3, #0]
   d9122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9124:	9301      	str	r3, [sp, #4]
   d9126:	bd08      	pop	{r3, pc}
   d9128:	00030220 	.word	0x00030220

000d912c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d912c:	b508      	push	{r3, lr}
   d912e:	4b02      	ldr	r3, [pc, #8]	; (d9138 <system_thread_get_state+0xc>)
   d9130:	681b      	ldr	r3, [r3, #0]
   d9132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9134:	9301      	str	r3, [sp, #4]
   d9136:	bd08      	pop	{r3, pc}
   d9138:	00030220 	.word	0x00030220

000d913c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d913c:	b508      	push	{r3, lr}
   d913e:	4b03      	ldr	r3, [pc, #12]	; (d914c <system_ctrl_set_app_request_handler+0x10>)
   d9140:	681b      	ldr	r3, [r3, #0]
   d9142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d9146:	9301      	str	r3, [sp, #4]
   d9148:	bd08      	pop	{r3, pc}
   d914a:	0000      	.short	0x0000
   d914c:	00030220 	.word	0x00030220

000d9150 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d9150:	b508      	push	{r3, lr}
   d9152:	4b03      	ldr	r3, [pc, #12]	; (d9160 <system_ctrl_set_result+0x10>)
   d9154:	681b      	ldr	r3, [r3, #0]
   d9156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d915a:	9301      	str	r3, [sp, #4]
   d915c:	bd08      	pop	{r3, pc}
   d915e:	0000      	.short	0x0000
   d9160:	00030220 	.word	0x00030220

000d9164 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d9164:	b508      	push	{r3, lr}
   d9166:	4b02      	ldr	r3, [pc, #8]	; (d9170 <network_connect+0xc>)
   d9168:	681b      	ldr	r3, [r3, #0]
   d916a:	685b      	ldr	r3, [r3, #4]
   d916c:	9301      	str	r3, [sp, #4]
   d916e:	bd08      	pop	{r3, pc}
   d9170:	00030240 	.word	0x00030240

000d9174 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d9174:	b508      	push	{r3, lr}
   d9176:	4b02      	ldr	r3, [pc, #8]	; (d9180 <network_connecting+0xc>)
   d9178:	681b      	ldr	r3, [r3, #0]
   d917a:	689b      	ldr	r3, [r3, #8]
   d917c:	9301      	str	r3, [sp, #4]
   d917e:	bd08      	pop	{r3, pc}
   d9180:	00030240 	.word	0x00030240

000d9184 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d9184:	b508      	push	{r3, lr}
   d9186:	4b02      	ldr	r3, [pc, #8]	; (d9190 <network_disconnect+0xc>)
   d9188:	681b      	ldr	r3, [r3, #0]
   d918a:	68db      	ldr	r3, [r3, #12]
   d918c:	9301      	str	r3, [sp, #4]
   d918e:	bd08      	pop	{r3, pc}
   d9190:	00030240 	.word	0x00030240

000d9194 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d9194:	b508      	push	{r3, lr}
   d9196:	4b02      	ldr	r3, [pc, #8]	; (d91a0 <network_ready+0xc>)
   d9198:	681b      	ldr	r3, [r3, #0]
   d919a:	691b      	ldr	r3, [r3, #16]
   d919c:	9301      	str	r3, [sp, #4]
   d919e:	bd08      	pop	{r3, pc}
   d91a0:	00030240 	.word	0x00030240

000d91a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d91a4:	b508      	push	{r3, lr}
   d91a6:	4b02      	ldr	r3, [pc, #8]	; (d91b0 <network_on+0xc>)
   d91a8:	681b      	ldr	r3, [r3, #0]
   d91aa:	695b      	ldr	r3, [r3, #20]
   d91ac:	9301      	str	r3, [sp, #4]
   d91ae:	bd08      	pop	{r3, pc}
   d91b0:	00030240 	.word	0x00030240

000d91b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d91b4:	b508      	push	{r3, lr}
   d91b6:	4b02      	ldr	r3, [pc, #8]	; (d91c0 <network_off+0xc>)
   d91b8:	681b      	ldr	r3, [r3, #0]
   d91ba:	699b      	ldr	r3, [r3, #24]
   d91bc:	9301      	str	r3, [sp, #4]
   d91be:	bd08      	pop	{r3, pc}
   d91c0:	00030240 	.word	0x00030240

000d91c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d91c4:	b508      	push	{r3, lr}
   d91c6:	4b02      	ldr	r3, [pc, #8]	; (d91d0 <network_listen+0xc>)
   d91c8:	681b      	ldr	r3, [r3, #0]
   d91ca:	69db      	ldr	r3, [r3, #28]
   d91cc:	9301      	str	r3, [sp, #4]
   d91ce:	bd08      	pop	{r3, pc}
   d91d0:	00030240 	.word	0x00030240

000d91d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d91d4:	b508      	push	{r3, lr}
   d91d6:	4b02      	ldr	r3, [pc, #8]	; (d91e0 <network_listening+0xc>)
   d91d8:	681b      	ldr	r3, [r3, #0]
   d91da:	6a1b      	ldr	r3, [r3, #32]
   d91dc:	9301      	str	r3, [sp, #4]
   d91de:	bd08      	pop	{r3, pc}
   d91e0:	00030240 	.word	0x00030240

000d91e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d91e4:	b508      	push	{r3, lr}
   d91e6:	4b02      	ldr	r3, [pc, #8]	; (d91f0 <network_set_listen_timeout+0xc>)
   d91e8:	681b      	ldr	r3, [r3, #0]
   d91ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d91ec:	9301      	str	r3, [sp, #4]
   d91ee:	bd08      	pop	{r3, pc}
   d91f0:	00030240 	.word	0x00030240

000d91f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d91f4:	b508      	push	{r3, lr}
   d91f6:	4b02      	ldr	r3, [pc, #8]	; (d9200 <network_get_listen_timeout+0xc>)
   d91f8:	681b      	ldr	r3, [r3, #0]
   d91fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d91fc:	9301      	str	r3, [sp, #4]
   d91fe:	bd08      	pop	{r3, pc}
   d9200:	00030240 	.word	0x00030240

000d9204 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d9204:	b508      	push	{r3, lr}
   d9206:	4b02      	ldr	r3, [pc, #8]	; (d9210 <network_is_on+0xc>)
   d9208:	681b      	ldr	r3, [r3, #0]
   d920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d920c:	9301      	str	r3, [sp, #4]
   d920e:	bd08      	pop	{r3, pc}
   d9210:	00030240 	.word	0x00030240

000d9214 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d9214:	b508      	push	{r3, lr}
   d9216:	4b02      	ldr	r3, [pc, #8]	; (d9220 <network_is_off+0xc>)
   d9218:	681b      	ldr	r3, [r3, #0]
   d921a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d921c:	9301      	str	r3, [sp, #4]
   d921e:	bd08      	pop	{r3, pc}
   d9220:	00030240 	.word	0x00030240

000d9224 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d9224:	b508      	push	{r3, lr}
   d9226:	4b02      	ldr	r3, [pc, #8]	; (d9230 <spark_variable+0xc>)
   d9228:	681b      	ldr	r3, [r3, #0]
   d922a:	681b      	ldr	r3, [r3, #0]
   d922c:	9301      	str	r3, [sp, #4]
   d922e:	bd08      	pop	{r3, pc}
   d9230:	00030244 	.word	0x00030244

000d9234 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d9234:	b508      	push	{r3, lr}
   d9236:	4b02      	ldr	r3, [pc, #8]	; (d9240 <spark_function+0xc>)
   d9238:	681b      	ldr	r3, [r3, #0]
   d923a:	685b      	ldr	r3, [r3, #4]
   d923c:	9301      	str	r3, [sp, #4]
   d923e:	bd08      	pop	{r3, pc}
   d9240:	00030244 	.word	0x00030244

000d9244 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d9244:	b508      	push	{r3, lr}
   d9246:	4b02      	ldr	r3, [pc, #8]	; (d9250 <spark_process+0xc>)
   d9248:	681b      	ldr	r3, [r3, #0]
   d924a:	689b      	ldr	r3, [r3, #8]
   d924c:	9301      	str	r3, [sp, #4]
   d924e:	bd08      	pop	{r3, pc}
   d9250:	00030244 	.word	0x00030244

000d9254 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d9254:	b508      	push	{r3, lr}
   d9256:	4b02      	ldr	r3, [pc, #8]	; (d9260 <spark_cloud_flag_connected+0xc>)
   d9258:	681b      	ldr	r3, [r3, #0]
   d925a:	695b      	ldr	r3, [r3, #20]
   d925c:	9301      	str	r3, [sp, #4]
   d925e:	bd08      	pop	{r3, pc}
   d9260:	00030244 	.word	0x00030244

000d9264 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d9264:	b508      	push	{r3, lr}
   d9266:	4b02      	ldr	r3, [pc, #8]	; (d9270 <spark_deviceID+0xc>)
   d9268:	681b      	ldr	r3, [r3, #0]
   d926a:	69db      	ldr	r3, [r3, #28]
   d926c:	9301      	str	r3, [sp, #4]
   d926e:	bd08      	pop	{r3, pc}
   d9270:	00030244 	.word	0x00030244

000d9274 <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d9274:	b508      	push	{r3, lr}
   d9276:	4b02      	ldr	r3, [pc, #8]	; (d9280 <spark_sync_time+0xc>)
   d9278:	681b      	ldr	r3, [r3, #0]
   d927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d927c:	9301      	str	r3, [sp, #4]
   d927e:	bd08      	pop	{r3, pc}
   d9280:	00030244 	.word	0x00030244

000d9284 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d9284:	b508      	push	{r3, lr}
   d9286:	4b02      	ldr	r3, [pc, #8]	; (d9290 <spark_sync_time_pending+0xc>)
   d9288:	681b      	ldr	r3, [r3, #0]
   d928a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d928c:	9301      	str	r3, [sp, #4]
   d928e:	bd08      	pop	{r3, pc}
   d9290:	00030244 	.word	0x00030244

000d9294 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d9294:	b508      	push	{r3, lr}
   d9296:	4b02      	ldr	r3, [pc, #8]	; (d92a0 <spark_sync_time_last+0xc>)
   d9298:	681b      	ldr	r3, [r3, #0]
   d929a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d929c:	9301      	str	r3, [sp, #4]
   d929e:	bd08      	pop	{r3, pc}
   d92a0:	00030244 	.word	0x00030244

000d92a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d92a4:	b508      	push	{r3, lr}
   d92a6:	4b02      	ldr	r3, [pc, #8]	; (d92b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d92a8:	681b      	ldr	r3, [r3, #0]
   d92aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d92ac:	9301      	str	r3, [sp, #4]
   d92ae:	bd08      	pop	{r3, pc}
   d92b0:	00030244 	.word	0x00030244

000d92b4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d92b4:	b508      	push	{r3, lr}
   d92b6:	4b02      	ldr	r3, [pc, #8]	; (d92c0 <malloc+0xc>)
   d92b8:	681b      	ldr	r3, [r3, #0]
   d92ba:	681b      	ldr	r3, [r3, #0]
   d92bc:	9301      	str	r3, [sp, #4]
   d92be:	bd08      	pop	{r3, pc}
   d92c0:	0003021c 	.word	0x0003021c

000d92c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d92c4:	b508      	push	{r3, lr}
   d92c6:	4b02      	ldr	r3, [pc, #8]	; (d92d0 <free+0xc>)
   d92c8:	681b      	ldr	r3, [r3, #0]
   d92ca:	685b      	ldr	r3, [r3, #4]
   d92cc:	9301      	str	r3, [sp, #4]
   d92ce:	bd08      	pop	{r3, pc}
   d92d0:	0003021c 	.word	0x0003021c

000d92d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d92d4:	b508      	push	{r3, lr}
   d92d6:	4b02      	ldr	r3, [pc, #8]	; (d92e0 <realloc+0xc>)
   d92d8:	681b      	ldr	r3, [r3, #0]
   d92da:	689b      	ldr	r3, [r3, #8]
   d92dc:	9301      	str	r3, [sp, #4]
   d92de:	bd08      	pop	{r3, pc}
   d92e0:	0003021c 	.word	0x0003021c

000d92e4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d92e4:	b508      	push	{r3, lr}
   d92e6:	4b02      	ldr	r3, [pc, #8]	; (d92f0 <vsnprintf+0xc>)
   d92e8:	681b      	ldr	r3, [r3, #0]
   d92ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d92ec:	9301      	str	r3, [sp, #4]
   d92ee:	bd08      	pop	{r3, pc}
   d92f0:	0003021c 	.word	0x0003021c

000d92f4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d92f4:	b508      	push	{r3, lr}
   d92f6:	4b02      	ldr	r3, [pc, #8]	; (d9300 <abort+0xc>)
   d92f8:	681b      	ldr	r3, [r3, #0]
   d92fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d92fc:	9301      	str	r3, [sp, #4]
   d92fe:	bd08      	pop	{r3, pc}
   d9300:	0003021c 	.word	0x0003021c

000d9304 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d9304:	b508      	push	{r3, lr}
   d9306:	4b02      	ldr	r3, [pc, #8]	; (d9310 <__errno+0xc>)
   d9308:	681b      	ldr	r3, [r3, #0]
   d930a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d930c:	9301      	str	r3, [sp, #4]
   d930e:	bd08      	pop	{r3, pc}
   d9310:	0003021c 	.word	0x0003021c

000d9314 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d9314:	b508      	push	{r3, lr}
   d9316:	4b02      	ldr	r3, [pc, #8]	; (d9320 <newlib_impure_ptr_callback+0xc>)
   d9318:	681b      	ldr	r3, [r3, #0]
   d931a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d931c:	9301      	str	r3, [sp, #4]
   d931e:	bd08      	pop	{r3, pc}
   d9320:	0003021c 	.word	0x0003021c

000d9324 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d9324:	b508      	push	{r3, lr}
   d9326:	4b02      	ldr	r3, [pc, #8]	; (d9330 <localtime_r+0xc>)
   d9328:	681b      	ldr	r3, [r3, #0]
   d932a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d932c:	9301      	str	r3, [sp, #4]
   d932e:	bd08      	pop	{r3, pc}
   d9330:	0003021c 	.word	0x0003021c

000d9334 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9334:	2200      	movs	r2, #0
   d9336:	6840      	ldr	r0, [r0, #4]
   d9338:	4611      	mov	r1, r2
   d933a:	f7ff bf4b 	b.w	d91d4 <network_listening>

000d933e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d933e:	2200      	movs	r2, #0
   d9340:	6840      	ldr	r0, [r0, #4]
   d9342:	4611      	mov	r1, r2
   d9344:	f7ff bf56 	b.w	d91f4 <network_get_listen_timeout>

000d9348 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9348:	6840      	ldr	r0, [r0, #4]
   d934a:	2200      	movs	r2, #0
   d934c:	f7ff bf4a 	b.w	d91e4 <network_set_listen_timeout>

000d9350 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d9350:	6840      	ldr	r0, [r0, #4]
   d9352:	2200      	movs	r2, #0
   d9354:	f081 0101 	eor.w	r1, r1, #1
   d9358:	f7ff bf34 	b.w	d91c4 <network_listen>

000d935c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d935c:	2300      	movs	r3, #0
   d935e:	6840      	ldr	r0, [r0, #4]
   d9360:	461a      	mov	r2, r3
   d9362:	4619      	mov	r1, r3
   d9364:	f7ff bf26 	b.w	d91b4 <network_off>

000d9368 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9368:	2300      	movs	r3, #0
   d936a:	6840      	ldr	r0, [r0, #4]
   d936c:	461a      	mov	r2, r3
   d936e:	4619      	mov	r1, r3
   d9370:	f7ff bf18 	b.w	d91a4 <network_on>

000d9374 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9374:	2200      	movs	r2, #0
   d9376:	6840      	ldr	r0, [r0, #4]
   d9378:	4611      	mov	r1, r2
   d937a:	f7ff bf0b 	b.w	d9194 <network_ready>

000d937e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d937e:	2200      	movs	r2, #0
   d9380:	6840      	ldr	r0, [r0, #4]
   d9382:	4611      	mov	r1, r2
   d9384:	f7ff bef6 	b.w	d9174 <network_connecting>

000d9388 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9388:	6840      	ldr	r0, [r0, #4]
   d938a:	2200      	movs	r2, #0
   d938c:	2102      	movs	r1, #2
   d938e:	f7ff bef9 	b.w	d9184 <network_disconnect>

000d9392 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9392:	2300      	movs	r3, #0
   d9394:	6840      	ldr	r0, [r0, #4]
   d9396:	461a      	mov	r2, r3
   d9398:	f7ff bee4 	b.w	d9164 <network_connect>

000d939c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d939c:	4b02      	ldr	r3, [pc, #8]	; (d93a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d939e:	2203      	movs	r2, #3
   d93a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d93a2:	4a02      	ldr	r2, [pc, #8]	; (d93ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d93a4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d93a6:	4770      	bx	lr
   d93a8:	2003e5c4 	.word	0x2003e5c4
   d93ac:	000ded3c 	.word	0x000ded3c

000d93b0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d93b0:	2100      	movs	r1, #0
   d93b2:	f7ff be15 	b.w	d8fe0 <hal_spi_acquire>

000d93b6 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d93b6:	2100      	movs	r1, #0
   d93b8:	f7ff be1a 	b.w	d8ff0 <hal_spi_release>

000d93bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d93bc:	b510      	push	{r4, lr}
   d93be:	4604      	mov	r4, r0
   d93c0:	4608      	mov	r0, r1
{
    _spi = spi;
   d93c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d93c4:	f7ff fddc 	bl	d8f80 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d93c8:	2300      	movs	r3, #0
   d93ca:	6063      	str	r3, [r4, #4]
}
   d93cc:	4620      	mov	r0, r4
   d93ce:	bd10      	pop	{r4, pc}

000d93d0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d93d0:	b510      	push	{r4, lr}
   d93d2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d93d4:	7800      	ldrb	r0, [r0, #0]
   d93d6:	f7ff ffeb 	bl	d93b0 <_ZN8SPIClass4lockEv.isra.0>
   d93da:	b948      	cbnz	r0, d93f0 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d93dc:	7820      	ldrb	r0, [r4, #0]
   d93de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d93e2:	f7ff fdbd 	bl	d8f60 <hal_spi_begin>
        unlock();
   d93e6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d93e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d93ec:	f7ff bfe3 	b.w	d93b6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d93f0:	bd10      	pop	{r4, pc}

000d93f2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d93f2:	7800      	ldrb	r0, [r0, #0]
   d93f4:	f7ff bfdf 	b.w	d93b6 <_ZN8SPIClass6unlockEv.isra.0>

000d93f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d93f8:	0840      	lsrs	r0, r0, #1
{
   d93fa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d93fc:	6018      	str	r0, [r3, #0]
   d93fe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9400:	6818      	ldr	r0, [r3, #0]
   d9402:	4288      	cmp	r0, r1
   d9404:	b2e5      	uxtb	r5, r4
   d9406:	d906      	bls.n	d9416 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9408:	3401      	adds	r4, #1
   d940a:	2c08      	cmp	r4, #8
   d940c:	d002      	beq.n	d9414 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d940e:	0840      	lsrs	r0, r0, #1
   d9410:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d9412:	e7f5      	b.n	d9400 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9414:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d9416:	4b02      	ldr	r3, [pc, #8]	; (d9420 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9418:	5d5b      	ldrb	r3, [r3, r5]
   d941a:	7013      	strb	r3, [r2, #0]
}
   d941c:	bd30      	pop	{r4, r5, pc}
   d941e:	bf00      	nop
   d9420:	000ded70 	.word	0x000ded70

000d9424 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9428:	4606      	mov	r6, r0
   d942a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d942c:	7800      	ldrb	r0, [r0, #0]
{
   d942e:	460c      	mov	r4, r1
    CHECK(lock());
   d9430:	f7ff ffbe 	bl	d93b0 <_ZN8SPIClass4lockEv.isra.0>
   d9434:	2800      	cmp	r0, #0
   d9436:	db1b      	blt.n	d9470 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d9438:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d943a:	2214      	movs	r2, #20
   d943c:	2100      	movs	r1, #0
   d943e:	a809      	add	r0, sp, #36	; 0x24
   d9440:	f004 fdea 	bl	de018 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9444:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d9446:	2200      	movs	r2, #0
   d9448:	a909      	add	r1, sp, #36	; 0x24
   d944a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d944c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d9450:	f7ff fda6 	bl	d8fa0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d9454:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d9458:	b113      	cbz	r3, d9460 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d945a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d945e:	b155      	cbz	r5, d9476 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9460:	2700      	movs	r7, #0
   d9462:	46b9      	mov	r9, r7
   d9464:	46b8      	mov	r8, r7
   d9466:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d9468:	7923      	ldrb	r3, [r4, #4]
   d946a:	b15d      	cbz	r5, d9484 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d946c:	b1c3      	cbz	r3, d94a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d946e:	2000      	movs	r0, #0
}
   d9470:	b00f      	add	sp, #60	; 0x3c
   d9472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d9476:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d947a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d947e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9482:	e7f1      	b.n	d9468 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9484:	2b00      	cmp	r3, #0
   d9486:	d135      	bne.n	d94f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d9488:	68a3      	ldr	r3, [r4, #8]
   d948a:	4543      	cmp	r3, r8
   d948c:	d108      	bne.n	d94a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d948e:	f88d 9020 	strb.w	r9, [sp, #32]
   d9492:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9496:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d949a:	89a3      	ldrh	r3, [r4, #12]
   d949c:	429a      	cmp	r2, r3
   d949e:	d0e6      	beq.n	d946e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d94a0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d94a2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d94a4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d94a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d94aa:	ab04      	add	r3, sp, #16
   d94ac:	f10d 020f 	add.w	r2, sp, #15
   d94b0:	f7ff ffa2 	bl	d93f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d94b4:	7921      	ldrb	r1, [r4, #4]
   d94b6:	b985      	cbnz	r5, d94da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d94b8:	b989      	cbnz	r1, d94de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d94ba:	68a3      	ldr	r3, [r4, #8]
   d94bc:	4543      	cmp	r3, r8
   d94be:	d30e      	bcc.n	d94de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d94c0:	f88d 9020 	strb.w	r9, [sp, #32]
   d94c4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d94c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d94cc:	89a3      	ldrh	r3, [r4, #12]
   d94ce:	429a      	cmp	r2, r3
   d94d0:	d105      	bne.n	d94de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d94d2:	9b04      	ldr	r3, [sp, #16]
   d94d4:	4543      	cmp	r3, r8
   d94d6:	d102      	bne.n	d94de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d94d8:	e7c9      	b.n	d946e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d94da:	2900      	cmp	r1, #0
   d94dc:	d1f9      	bne.n	d94d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d94de:	2300      	movs	r3, #0
   d94e0:	9301      	str	r3, [sp, #4]
   d94e2:	7b63      	ldrb	r3, [r4, #13]
   d94e4:	9300      	str	r3, [sp, #0]
   d94e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d94ea:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d94ec:	7830      	ldrb	r0, [r6, #0]
   d94ee:	f7ff fd6f 	bl	d8fd0 <hal_spi_set_settings>
   d94f2:	e7bc      	b.n	d946e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d94f4:	e9cd 5500 	strd	r5, r5, [sp]
   d94f8:	462b      	mov	r3, r5
   d94fa:	462a      	mov	r2, r5
   d94fc:	2101      	movs	r1, #1
   d94fe:	e7f5      	b.n	d94ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9500 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9500:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9502:	7800      	ldrb	r0, [r0, #0]
   d9504:	f7ff fd34 	bl	d8f70 <hal_spi_transfer>
}
   d9508:	b2c0      	uxtb	r0, r0
   d950a:	bd08      	pop	{r3, pc}

000d950c <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d950c:	b530      	push	{r4, r5, lr}
   d950e:	b087      	sub	sp, #28
   d9510:	4604      	mov	r4, r0
   d9512:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9514:	9500      	str	r5, [sp, #0]
   d9516:	7800      	ldrb	r0, [r0, #0]
   d9518:	f7ff fd4a 	bl	d8fb0 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d951c:	b93d      	cbnz	r5, d952e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d951e:	7820      	ldrb	r0, [r4, #0]
   d9520:	a902      	add	r1, sp, #8
   d9522:	f7ff fd4d 	bl	d8fc0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d9526:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d952a:	07db      	lsls	r3, r3, #31
   d952c:	d4f7      	bmi.n	d951e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   d952e:	b007      	add	sp, #28
   d9530:	bd30      	pop	{r4, r5, pc}
	...

000d9534 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9534:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9536:	4b09      	ldr	r3, [pc, #36]	; (d955c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9538:	4c09      	ldr	r4, [pc, #36]	; (d9560 <_GLOBAL__sub_I_System+0x2c>)
   d953a:	2202      	movs	r2, #2
   d953c:	2000      	movs	r0, #0
   d953e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9540:	4b08      	ldr	r3, [pc, #32]	; (d9564 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d9542:	6020      	str	r0, [r4, #0]
   d9544:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d9546:	71a0      	strb	r0, [r4, #6]
   d9548:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d954a:	f7ff fdd7 	bl	d90fc <set_system_mode>
SystemClass System;
   d954e:	4620      	mov	r0, r4
   d9550:	4a05      	ldr	r2, [pc, #20]	; (d9568 <_GLOBAL__sub_I_System+0x34>)
   d9552:	4906      	ldr	r1, [pc, #24]	; (d956c <_GLOBAL__sub_I_System+0x38>)
   d9554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9558:	f002 ba94 	b.w	dba84 <__aeabi_atexit>
   d955c:	2003e5d8 	.word	0x2003e5d8
   d9560:	2003e5cc 	.word	0x2003e5cc
   d9564:	ffff0000 	.word	0xffff0000
   d9568:	2003de20 	.word	0x2003de20
   d956c:	000d4169 	.word	0x000d4169

000d9570 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9570:	b510      	push	{r4, lr}
   d9572:	4604      	mov	r4, r0
{
	free(buffer);
   d9574:	6800      	ldr	r0, [r0, #0]
   d9576:	f7ff fea5 	bl	d92c4 <free>
}
   d957a:	4620      	mov	r0, r4
   d957c:	bd10      	pop	{r4, pc}

000d957e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d957e:	b510      	push	{r4, lr}
   d9580:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9582:	6800      	ldr	r0, [r0, #0]
   d9584:	b108      	cbz	r0, d958a <_ZN6String10invalidateEv+0xc>
   d9586:	f7ff fe9d 	bl	d92c4 <free>
	buffer = NULL;
   d958a:	2300      	movs	r3, #0
	capacity = len = 0;
   d958c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9590:	6023      	str	r3, [r4, #0]
}
   d9592:	bd10      	pop	{r4, pc}

000d9594 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9594:	b538      	push	{r3, r4, r5, lr}
   d9596:	4604      	mov	r4, r0
   d9598:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d959a:	6800      	ldr	r0, [r0, #0]
   d959c:	3101      	adds	r1, #1
   d959e:	f7ff fe99 	bl	d92d4 <realloc>
	if (newbuffer) {
   d95a2:	b110      	cbz	r0, d95aa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d95a4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d95a8:	2001      	movs	r0, #1
	}
	return 0;
}
   d95aa:	bd38      	pop	{r3, r4, r5, pc}

000d95ac <_ZN6String7reserveEj>:
{
   d95ac:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d95ae:	6803      	ldr	r3, [r0, #0]
{
   d95b0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d95b2:	b123      	cbz	r3, d95be <_ZN6String7reserveEj+0x12>
   d95b4:	6843      	ldr	r3, [r0, #4]
   d95b6:	428b      	cmp	r3, r1
   d95b8:	d301      	bcc.n	d95be <_ZN6String7reserveEj+0x12>
   d95ba:	2001      	movs	r0, #1
}
   d95bc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d95be:	4620      	mov	r0, r4
   d95c0:	f7ff ffe8 	bl	d9594 <_ZN6String12changeBufferEj>
   d95c4:	2800      	cmp	r0, #0
   d95c6:	d0f9      	beq.n	d95bc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d95c8:	68a3      	ldr	r3, [r4, #8]
   d95ca:	2b00      	cmp	r3, #0
   d95cc:	d1f5      	bne.n	d95ba <_ZN6String7reserveEj+0xe>
   d95ce:	6822      	ldr	r2, [r4, #0]
   d95d0:	7013      	strb	r3, [r2, #0]
   d95d2:	e7f2      	b.n	d95ba <_ZN6String7reserveEj+0xe>

000d95d4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d95d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d95d6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d95d8:	4611      	mov	r1, r2
   d95da:	9201      	str	r2, [sp, #4]
{
   d95dc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d95de:	f7ff ffe5 	bl	d95ac <_ZN6String7reserveEj>
   d95e2:	9a01      	ldr	r2, [sp, #4]
   d95e4:	b928      	cbnz	r0, d95f2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d95e6:	4620      	mov	r0, r4
   d95e8:	f7ff ffc9 	bl	d957e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d95ec:	4620      	mov	r0, r4
   d95ee:	b003      	add	sp, #12
   d95f0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d95f2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d95f4:	4629      	mov	r1, r5
   d95f6:	6820      	ldr	r0, [r4, #0]
   d95f8:	f004 fce6 	bl	ddfc8 <memcpy>
	buffer[len] = 0;
   d95fc:	6822      	ldr	r2, [r4, #0]
   d95fe:	68a3      	ldr	r3, [r4, #8]
   d9600:	2100      	movs	r1, #0
   d9602:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9604:	e7f2      	b.n	d95ec <_ZN6String4copyEPKcj+0x18>

000d9606 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9606:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9608:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d960a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d960e:	4604      	mov	r4, r0
	len = 0;
   d9610:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9612:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9614:	b141      	cbz	r1, d9628 <_ZN6StringC1EPKc+0x22>
   d9616:	4608      	mov	r0, r1
   d9618:	9101      	str	r1, [sp, #4]
   d961a:	f004 fd48 	bl	de0ae <strlen>
   d961e:	9901      	ldr	r1, [sp, #4]
   d9620:	4602      	mov	r2, r0
   d9622:	4620      	mov	r0, r4
   d9624:	f7ff ffd6 	bl	d95d4 <_ZN6String4copyEPKcj>
}
   d9628:	4620      	mov	r0, r4
   d962a:	b002      	add	sp, #8
   d962c:	bd10      	pop	{r4, pc}

000d962e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d962e:	b538      	push	{r3, r4, r5, lr}
   d9630:	4605      	mov	r5, r0
	if (buffer) {
   d9632:	6800      	ldr	r0, [r0, #0]
{
   d9634:	460c      	mov	r4, r1
	if (buffer) {
   d9636:	b168      	cbz	r0, d9654 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d9638:	686a      	ldr	r2, [r5, #4]
   d963a:	688b      	ldr	r3, [r1, #8]
   d963c:	429a      	cmp	r2, r3
   d963e:	d307      	bcc.n	d9650 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9640:	6809      	ldr	r1, [r1, #0]
   d9642:	f004 fd2c 	bl	de09e <strcpy>
			len = rhs.len;
   d9646:	68a3      	ldr	r3, [r4, #8]
   d9648:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d964a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d964c:	60a3      	str	r3, [r4, #8]
}
   d964e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d9650:	f7ff fe38 	bl	d92c4 <free>
	buffer = rhs.buffer;
   d9654:	6823      	ldr	r3, [r4, #0]
   d9656:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9658:	6863      	ldr	r3, [r4, #4]
   d965a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d965c:	68a3      	ldr	r3, [r4, #8]
   d965e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9660:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d9662:	e9c4 3300 	strd	r3, r3, [r4]
   d9666:	e7f1      	b.n	d964c <_ZN6String4moveERS_+0x1e>

000d9668 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9668:	4288      	cmp	r0, r1
{
   d966a:	b510      	push	{r4, lr}
   d966c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d966e:	d005      	beq.n	d967c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9670:	680b      	ldr	r3, [r1, #0]
   d9672:	b12b      	cbz	r3, d9680 <_ZN6StringaSERKS_+0x18>
   d9674:	688a      	ldr	r2, [r1, #8]
   d9676:	4619      	mov	r1, r3
   d9678:	f7ff ffac 	bl	d95d4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d967c:	4620      	mov	r0, r4
   d967e:	bd10      	pop	{r4, pc}
	else invalidate();
   d9680:	f7ff ff7d 	bl	d957e <_ZN6String10invalidateEv>
   d9684:	e7fa      	b.n	d967c <_ZN6StringaSERKS_+0x14>

000d9686 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9686:	b510      	push	{r4, lr}
	buffer = NULL;
   d9688:	2300      	movs	r3, #0
String::String(const String &value)
   d968a:	4604      	mov	r4, r0
	capacity = 0;
   d968c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9690:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9692:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9694:	f7ff ffe8 	bl	d9668 <_ZN6StringaSERKS_>
}
   d9698:	4620      	mov	r0, r4
   d969a:	bd10      	pop	{r4, pc}

000d969c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d969c:	4288      	cmp	r0, r1
{
   d969e:	b510      	push	{r4, lr}
   d96a0:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d96a2:	d001      	beq.n	d96a8 <_ZN6StringaSEOS_+0xc>
   d96a4:	f7ff ffc3 	bl	d962e <_ZN6String4moveERS_>
	return *this;
}
   d96a8:	4620      	mov	r0, r4
   d96aa:	bd10      	pop	{r4, pc}

000d96ac <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d96ac:	b513      	push	{r0, r1, r4, lr}
   d96ae:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d96b0:	b159      	cbz	r1, d96ca <_ZN6StringaSEPKc+0x1e>
   d96b2:	4608      	mov	r0, r1
   d96b4:	9101      	str	r1, [sp, #4]
   d96b6:	f004 fcfa 	bl	de0ae <strlen>
   d96ba:	9901      	ldr	r1, [sp, #4]
   d96bc:	4602      	mov	r2, r0
   d96be:	4620      	mov	r0, r4
   d96c0:	f7ff ff88 	bl	d95d4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d96c4:	4620      	mov	r0, r4
   d96c6:	b002      	add	sp, #8
   d96c8:	bd10      	pop	{r4, pc}
	else invalidate();
   d96ca:	f7ff ff58 	bl	d957e <_ZN6String10invalidateEv>
   d96ce:	e7f9      	b.n	d96c4 <_ZN6StringaSEPKc+0x18>

000d96d0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d96d0:	b570      	push	{r4, r5, r6, lr}
   d96d2:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d96d4:	460e      	mov	r6, r1
   d96d6:	b909      	cbnz	r1, d96dc <_ZN6String6concatEPKcj+0xc>
   d96d8:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d96da:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d96dc:	b16a      	cbz	r2, d96fa <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d96de:	6884      	ldr	r4, [r0, #8]
   d96e0:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d96e2:	4621      	mov	r1, r4
   d96e4:	f7ff ff62 	bl	d95ac <_ZN6String7reserveEj>
   d96e8:	2800      	cmp	r0, #0
   d96ea:	d0f5      	beq.n	d96d8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d96ec:	6828      	ldr	r0, [r5, #0]
   d96ee:	68ab      	ldr	r3, [r5, #8]
   d96f0:	4631      	mov	r1, r6
   d96f2:	4418      	add	r0, r3
   d96f4:	f004 fcd3 	bl	de09e <strcpy>
	len = newlen;
   d96f8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d96fa:	2001      	movs	r0, #1
   d96fc:	e7ed      	b.n	d96da <_ZN6String6concatEPKcj+0xa>

000d96fe <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d96fe:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9700:	688a      	ldr	r2, [r1, #8]
   d9702:	6809      	ldr	r1, [r1, #0]
{
   d9704:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9706:	f7ff ffe3 	bl	d96d0 <_ZN6String6concatEPKcj>
   d970a:	b910      	cbnz	r0, d9712 <_ZplRK15StringSumHelperRK6String+0x14>
   d970c:	4620      	mov	r0, r4
   d970e:	f7ff ff36 	bl	d957e <_ZN6String10invalidateEv>
	return a;
}
   d9712:	4620      	mov	r0, r4
   d9714:	bd10      	pop	{r4, pc}

000d9716 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d9716:	b513      	push	{r0, r1, r4, lr}
   d9718:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d971a:	b929      	cbnz	r1, d9728 <_ZplRK15StringSumHelperPKc+0x12>
   d971c:	4620      	mov	r0, r4
   d971e:	f7ff ff2e 	bl	d957e <_ZN6String10invalidateEv>
	return a;
}
   d9722:	4620      	mov	r0, r4
   d9724:	b002      	add	sp, #8
   d9726:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9728:	4608      	mov	r0, r1
   d972a:	9101      	str	r1, [sp, #4]
   d972c:	f004 fcbf 	bl	de0ae <strlen>
   d9730:	9901      	ldr	r1, [sp, #4]
   d9732:	4602      	mov	r2, r0
   d9734:	4620      	mov	r0, r4
   d9736:	f7ff ffcb 	bl	d96d0 <_ZN6String6concatEPKcj>
   d973a:	2800      	cmp	r0, #0
   d973c:	d0ee      	beq.n	d971c <_ZplRK15StringSumHelperPKc+0x6>
   d973e:	e7f0      	b.n	d9722 <_ZplRK15StringSumHelperPKc+0xc>

000d9740 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d9740:	b558      	push	{r3, r4, r6, lr}
   d9742:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d9744:	b12a      	cbz	r2, d9752 <_ZNK6String8getBytesEPhjj+0x12>
   d9746:	b121      	cbz	r1, d9752 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d9748:	6884      	ldr	r4, [r0, #8]
   d974a:	42a3      	cmp	r3, r4
   d974c:	d302      	bcc.n	d9754 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d974e:	2300      	movs	r3, #0
   d9750:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d9752:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d9754:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d9756:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d9758:	6801      	ldr	r1, [r0, #0]
   d975a:	4294      	cmp	r4, r2
   d975c:	bf28      	it	cs
   d975e:	4614      	movcs	r4, r2
   d9760:	4419      	add	r1, r3
   d9762:	4622      	mov	r2, r4
   d9764:	4630      	mov	r0, r6
   d9766:	f004 fcaa 	bl	de0be <strncpy>
	buf[n] = 0;
   d976a:	2300      	movs	r3, #0
   d976c:	5533      	strb	r3, [r6, r4]
   d976e:	e7f0      	b.n	d9752 <_ZNK6String8getBytesEPhjj+0x12>

000d9770 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d9770:	6800      	ldr	r0, [r0, #0]
   d9772:	b108      	cbz	r0, d9778 <_ZNK6String5toIntEv+0x8>
   d9774:	f004 bc08 	b.w	ddf88 <atol>
	return 0;
}
   d9778:	4770      	bx	lr

000d977a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d977a:	4770      	bx	lr

000d977c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d977c:	4770      	bx	lr

000d977e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d977e:	4770      	bx	lr

000d9780 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d9780:	4770      	bx	lr
	...

000d9784 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d9784:	4b06      	ldr	r3, [pc, #24]	; (d97a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d9786:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d9788:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d978a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d978e:	d005      	beq.n	d979c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d9790:	4608      	mov	r0, r1
   d9792:	f002 f983 	bl	dba9c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d9796:	2800      	cmp	r0, #0
	return nullptr;
   d9798:	bf08      	it	eq
   d979a:	2400      	moveq	r4, #0
      }
   d979c:	4620      	mov	r0, r4
   d979e:	bd10      	pop	{r4, pc}
   d97a0:	000deec0 	.word	0x000deec0

000d97a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d97a4:	4b06      	ldr	r3, [pc, #24]	; (d97c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d97a6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d97a8:	b510      	push	{r4, lr}
   d97aa:	f100 040c 	add.w	r4, r0, #12
	    ||
   d97ae:	d005      	beq.n	d97bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d97b0:	4608      	mov	r0, r1
   d97b2:	f002 f973 	bl	dba9c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d97b6:	2800      	cmp	r0, #0
	return nullptr;
   d97b8:	bf08      	it	eq
   d97ba:	2400      	moveq	r4, #0
      }
   d97bc:	4620      	mov	r0, r4
   d97be:	bd10      	pop	{r4, pc}
   d97c0:	000deec0 	.word	0x000deec0

000d97c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d97c4:	4b06      	ldr	r3, [pc, #24]	; (d97e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d97c6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d97c8:	b510      	push	{r4, lr}
   d97ca:	f100 040c 	add.w	r4, r0, #12
	    ||
   d97ce:	d005      	beq.n	d97dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d97d0:	4608      	mov	r0, r1
   d97d2:	f002 f963 	bl	dba9c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d97d6:	2800      	cmp	r0, #0
	return nullptr;
   d97d8:	bf08      	it	eq
   d97da:	2400      	moveq	r4, #0
      }
   d97dc:	4620      	mov	r0, r4
   d97de:	bd10      	pop	{r4, pc}
   d97e0:	000deec0 	.word	0x000deec0

000d97e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d97e4:	b510      	push	{r4, lr}
   d97e6:	2168      	movs	r1, #104	; 0x68
   d97e8:	4604      	mov	r4, r0
   d97ea:	f002 f950 	bl	dba8e <_ZdlPvj>
   d97ee:	4620      	mov	r0, r4
   d97f0:	bd10      	pop	{r4, pc}

000d97f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d97f2:	b510      	push	{r4, lr}
   d97f4:	2128      	movs	r1, #40	; 0x28
   d97f6:	4604      	mov	r4, r0
   d97f8:	f002 f949 	bl	dba8e <_ZdlPvj>
   d97fc:	4620      	mov	r0, r4
   d97fe:	bd10      	pop	{r4, pc}

000d9800 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d9800:	b510      	push	{r4, lr}
   d9802:	2130      	movs	r1, #48	; 0x30
   d9804:	4604      	mov	r4, r0
   d9806:	f002 f942 	bl	dba8e <_ZdlPvj>
   d980a:	4620      	mov	r0, r4
   d980c:	bd10      	pop	{r4, pc}

000d980e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d980e:	f7fa bc46 	b.w	d409e <_ZdlPv>

000d9812 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d9812:	f7fa bc44 	b.w	d409e <_ZdlPv>

000d9816 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d9816:	f7fa bc42 	b.w	d409e <_ZdlPv>

000d981a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d981a:	b510      	push	{r4, lr}
          _M_dispose();
   d981c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d981e:	4604      	mov	r4, r0
          _M_dispose();
   d9820:	689b      	ldr	r3, [r3, #8]
   d9822:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d9824:	68a3      	ldr	r3, [r4, #8]
   d9826:	3b01      	subs	r3, #1
   d9828:	60a3      	str	r3, [r4, #8]
   d982a:	b92b      	cbnz	r3, d9838 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d982c:	6823      	ldr	r3, [r4, #0]
   d982e:	4620      	mov	r0, r4
   d9830:	68db      	ldr	r3, [r3, #12]
    }
   d9832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d9836:	4718      	bx	r3
    }
   d9838:	bd10      	pop	{r4, pc}

000d983a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d983a:	b510      	push	{r4, lr}
   d983c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d983e:	6800      	ldr	r0, [r0, #0]
   d9840:	b108      	cbz	r0, d9846 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d9842:	f7ff fac5 	bl	d8dd0 <os_mutex_recursive_destroy>
    }
   d9846:	4620      	mov	r0, r4
   d9848:	bd10      	pop	{r4, pc}
	...

000d984c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d984c:	b510      	push	{r4, lr}
        mutex_.lock();
   d984e:	4b04      	ldr	r3, [pc, #16]	; (d9860 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d9850:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d9852:	6818      	ldr	r0, [r3, #0]
   d9854:	f7ff fac4 	bl	d8de0 <os_mutex_recursive_lock>
        locked_ = true;
   d9858:	2301      	movs	r3, #1
   d985a:	7023      	strb	r3, [r4, #0]
    }
   d985c:	bd10      	pop	{r4, pc}
   d985e:	bf00      	nop
   d9860:	2003e5e4 	.word	0x2003e5e4

000d9864 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d9864:	b510      	push	{r4, lr}
        mutex_.unlock();
   d9866:	4b04      	ldr	r3, [pc, #16]	; (d9878 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d9868:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d986a:	6818      	ldr	r0, [r3, #0]
   d986c:	f7ff fac0 	bl	d8df0 <os_mutex_recursive_unlock>
        locked_ = false;
   d9870:	2300      	movs	r3, #0
   d9872:	7023      	strb	r3, [r4, #0]
    }
   d9874:	bd10      	pop	{r4, pc}
   d9876:	bf00      	nop
   d9878:	2003e5e4 	.word	0x2003e5e4

000d987c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d987c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d987e:	2500      	movs	r5, #0
   d9880:	1cec      	adds	r4, r5, #3
   d9882:	428c      	cmp	r4, r1
   d9884:	d80d      	bhi.n	d98a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d9886:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d9888:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d988a:	5d87      	ldrb	r7, [r0, r6]
   d988c:	4297      	cmp	r7, r2
   d988e:	d105      	bne.n	d989c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d9890:	4426      	add	r6, r4
   d9892:	42b1      	cmp	r1, r6
   d9894:	d305      	bcc.n	d98a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d9896:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d9898:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d989c:	3401      	adds	r4, #1
   d989e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d98a0:	e7ee      	b.n	d9880 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d98a2:	2000      	movs	r0, #0
   d98a4:	e7f9      	b.n	d989a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d98a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d98a6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d98aa:	4604      	mov	r4, r0
   d98ac:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d98b0:	461e      	mov	r6, r3
   d98b2:	4689      	mov	r9, r1
   d98b4:	ab01      	add	r3, sp, #4
   d98b6:	4690      	mov	r8, r2
   d98b8:	460a      	mov	r2, r1
   d98ba:	6a01      	ldr	r1, [r0, #32]
   d98bc:	f7ff ffde 	bl	d987c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d98c0:	6a25      	ldr	r5, [r4, #32]
   d98c2:	1cb3      	adds	r3, r6, #2
   d98c4:	bb17      	cbnz	r7, d990c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d98c6:	b308      	cbz	r0, d990c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d98c8:	195f      	adds	r7, r3, r5
   d98ca:	1a3f      	subs	r7, r7, r0
   d98cc:	2f1f      	cmp	r7, #31
   d98ce:	d819      	bhi.n	d9904 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d98d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d98d4:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d98d8:	eba5 0209 	sub.w	r2, r5, r9
   d98dc:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d98de:	eb00 0109 	add.w	r1, r0, r9
   d98e2:	eb06 000a 	add.w	r0, r6, sl
   d98e6:	b292      	uxth	r2, r2
   d98e8:	4421      	add	r1, r4
   d98ea:	4420      	add	r0, r4
   d98ec:	f004 fb7a 	bl	ddfe4 <memmove>
            selfData_[offset] = len + 1;
   d98f0:	1c73      	adds	r3, r6, #1
   d98f2:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d98f6:	4632      	mov	r2, r6
   d98f8:	4641      	mov	r1, r8
   d98fa:	eb04 000a 	add.w	r0, r4, sl
   d98fe:	f004 fb63 	bl	ddfc8 <memcpy>
            selfLen_ = staLen + len + 2;
   d9902:	6227      	str	r7, [r4, #32]
}
   d9904:	6a20      	ldr	r0, [r4, #32]
   d9906:	b002      	add	sp, #8
   d9908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d990c:	442b      	add	r3, r5
   d990e:	2b1f      	cmp	r3, #31
   d9910:	d8f8      	bhi.n	d9904 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d9912:	1c73      	adds	r3, r6, #1
   d9914:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d9916:	1ca8      	adds	r0, r5, #2
   d9918:	4425      	add	r5, r4
   d991a:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d991c:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d991e:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d9922:	4641      	mov	r1, r8
   d9924:	4420      	add	r0, r4
   d9926:	f004 fb4f 	bl	ddfc8 <memcpy>
        selfLen_ += len;
   d992a:	6a23      	ldr	r3, [r4, #32]
   d992c:	4433      	add	r3, r6
   d992e:	6223      	str	r3, [r4, #32]
   d9930:	e7e8      	b.n	d9904 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d9934 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d9934:	4a02      	ldr	r2, [pc, #8]	; (d9940 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d9936:	2100      	movs	r1, #0
   d9938:	200a      	movs	r0, #10
   d993a:	f7ff bbbd 	b.w	d90b8 <panic_>
   d993e:	bf00      	nop
   d9940:	000d8c3d 	.word	0x000d8c3d

000d9944 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9944:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9946:	b538      	push	{r3, r4, r5, lr}
   d9948:	4604      	mov	r4, r0
	  switch (__op)
   d994a:	d007      	beq.n	d995c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d994c:	2a03      	cmp	r2, #3
   d994e:	d011      	beq.n	d9974 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d9950:	2a01      	cmp	r2, #1
   d9952:	d101      	bne.n	d9958 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d9954:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d9956:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9958:	2000      	movs	r0, #0
   d995a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d995c:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d995e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9960:	f7fa fb99 	bl	d4096 <_Znwj>
   d9964:	4603      	mov	r3, r0
   d9966:	2800      	cmp	r0, #0
   d9968:	d0f5      	beq.n	d9956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d996a:	e895 0003 	ldmia.w	r5, {r0, r1}
   d996e:	e883 0003 	stmia.w	r3, {r0, r1}
   d9972:	e7f0      	b.n	d9956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d9974:	6800      	ldr	r0, [r0, #0]
   d9976:	2800      	cmp	r0, #0
   d9978:	d0ee      	beq.n	d9958 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d997a:	2108      	movs	r1, #8
   d997c:	f002 f887 	bl	dba8e <_ZdlPvj>
   d9980:	e7ea      	b.n	d9958 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d9982 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9982:	b430      	push	{r4, r5}
   d9984:	460d      	mov	r5, r1
   d9986:	4611      	mov	r1, r2
   d9988:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d998a:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d998c:	6809      	ldr	r1, [r1, #0]
   d998e:	6828      	ldr	r0, [r5, #0]
   d9990:	e9d3 4300 	ldrd	r4, r3, [r3]
   d9994:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d9996:	bc30      	pop	{r4, r5}
   d9998:	4760      	bx	ip

000d999a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d999a:	b510      	push	{r4, lr}
      if (_M_manager)
   d999c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d999e:	4604      	mov	r4, r0
      if (_M_manager)
   d99a0:	b113      	cbz	r3, d99a8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d99a2:	2203      	movs	r2, #3
   d99a4:	4601      	mov	r1, r0
   d99a6:	4798      	blx	r3
    }
   d99a8:	4620      	mov	r0, r4
   d99aa:	bd10      	pop	{r4, pc}

000d99ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d99ac:	b510      	push	{r4, lr}
   d99ae:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d99b0:	3058      	adds	r0, #88	; 0x58
   d99b2:	f7ff fff2 	bl	d999a <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d99b6:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d99ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d99be:	f7ff bdd7 	b.w	d9570 <_ZN6StringD1Ev>

000d99c2 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d99c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d99c6:	b2da      	uxtb	r2, r3
   d99c8:	2a09      	cmp	r2, #9
   d99ca:	d801      	bhi.n	d99d0 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d99cc:	4618      	mov	r0, r3
   d99ce:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d99d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d99d4:	2b05      	cmp	r3, #5
   d99d6:	d801      	bhi.n	d99dc <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d99d8:	3857      	subs	r0, #87	; 0x57
   d99da:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d99dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d99e0:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d99e2:	bf94      	ite	ls
   d99e4:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d99e6:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d99ea:	4770      	bx	lr

000d99ec <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d99ec:	b510      	push	{r4, lr}
            locked_(false) {
   d99ee:	2300      	movs	r3, #0
    WiringBleLock() :
   d99f0:	4604      	mov	r4, r0
            locked_(false) {
   d99f2:	7003      	strb	r3, [r0, #0]
        lock();
   d99f4:	f7ff ff2a 	bl	d984c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d99f8:	4620      	mov	r0, r4
   d99fa:	bd10      	pop	{r4, pc}

000d99fc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d99fc:	b510      	push	{r4, lr}
        if (locked_) {
   d99fe:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d9a00:	4604      	mov	r4, r0
        if (locked_) {
   d9a02:	b10b      	cbz	r3, d9a08 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d9a04:	f7ff ff2e 	bl	d9864 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d9a08:	4620      	mov	r0, r4
   d9a0a:	bd10      	pop	{r4, pc}

000d9a0c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d9a0c:	b082      	sub	sp, #8
   d9a0e:	4603      	mov	r3, r0
    address_ = addr;
   d9a10:	6808      	ldr	r0, [r1, #0]
   d9a12:	6849      	ldr	r1, [r1, #4]
   d9a14:	466a      	mov	r2, sp
   d9a16:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d9a18:	466a      	mov	r2, sp
   d9a1a:	ca03      	ldmia	r2!, {r0, r1}
   d9a1c:	6018      	str	r0, [r3, #0]
}
   d9a1e:	4618      	mov	r0, r3
    address_ = addr.address_;
   d9a20:	6059      	str	r1, [r3, #4]
}
   d9a22:	b002      	add	sp, #8
   d9a24:	4770      	bx	lr

000d9a26 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d9a26:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d9a28:	7982      	ldrb	r2, [r0, #6]
   d9a2a:	798b      	ldrb	r3, [r1, #6]
   d9a2c:	429a      	cmp	r2, r3
   d9a2e:	d106      	bne.n	d9a3e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d9a30:	2206      	movs	r2, #6
   d9a32:	f004 fabb 	bl	ddfac <memcmp>
   d9a36:	fab0 f080 	clz	r0, r0
   d9a3a:	0940      	lsrs	r0, r0, #5
}
   d9a3c:	bd08      	pop	{r3, pc}
    return false;
   d9a3e:	2000      	movs	r0, #0
   d9a40:	e7fc      	b.n	d9a3c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d9a42 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d9a42:	f04f 33ff 	mov.w	r3, #4294967295
   d9a46:	6003      	str	r3, [r0, #0]
   d9a48:	8083      	strh	r3, [r0, #4]
}
   d9a4a:	2000      	movs	r0, #0
   d9a4c:	4770      	bx	lr

000d9a4e <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d9a4e:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d9a50:	b508      	push	{r3, lr}
        : address_{} {
   d9a52:	6001      	str	r1, [r0, #0]
   d9a54:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d9a56:	4602      	mov	r2, r0
    clear();
   d9a58:	f7ff fff3 	bl	d9a42 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d9a5c:	7191      	strb	r1, [r2, #6]
}
   d9a5e:	4610      	mov	r0, r2
   d9a60:	bd08      	pop	{r3, pc}
	...

000d9a64 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d9a64:	2201      	movs	r2, #1
   d9a66:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9a68:	4a06      	ldr	r2, [pc, #24]	; (d9a84 <_ZN8particle7BleUuidC1Ev+0x20>)
   d9a6a:	6811      	ldr	r1, [r2, #0]
   d9a6c:	6001      	str	r1, [r0, #0]
   d9a6e:	6851      	ldr	r1, [r2, #4]
   d9a70:	6041      	str	r1, [r0, #4]
   d9a72:	8911      	ldrh	r1, [r2, #8]
   d9a74:	7a92      	ldrb	r2, [r2, #10]
   d9a76:	7282      	strb	r2, [r0, #10]
   d9a78:	2200      	movs	r2, #0
   d9a7a:	8101      	strh	r1, [r0, #8]
   d9a7c:	f8c0 200b 	str.w	r2, [r0, #11]
   d9a80:	73c2      	strb	r2, [r0, #15]
}
   d9a82:	4770      	bx	lr
   d9a84:	000deec8 	.word	0x000deec8

000d9a88 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d9a88:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d9a8a:	690b      	ldr	r3, [r1, #16]
   d9a8c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d9a8e:	f101 0210 	add.w	r2, r1, #16
   d9a92:	4603      	mov	r3, r0
   d9a94:	f851 4b04 	ldr.w	r4, [r1], #4
   d9a98:	f843 4b04 	str.w	r4, [r3], #4
   d9a9c:	4291      	cmp	r1, r2
   d9a9e:	d1f9      	bne.n	d9a94 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d9aa0:	bd10      	pop	{r4, pc}

000d9aa2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d9aa2:	b510      	push	{r4, lr}
    if (uuid128) {
   d9aa4:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d9aa6:	4604      	mov	r4, r0
    if (uuid128) {
   d9aa8:	b1b1      	cbz	r1, d9ad8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d9aaa:	2a01      	cmp	r2, #1
   d9aac:	f101 0210 	add.w	r2, r1, #16
   d9ab0:	d10a      	bne.n	d9ac8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d9ab2:	4601      	mov	r1, r0
   d9ab4:	f853 0b04 	ldr.w	r0, [r3], #4
   d9ab8:	f841 0b04 	str.w	r0, [r1], #4
   d9abc:	4293      	cmp	r3, r2
   d9abe:	d1f9      	bne.n	d9ab4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d9ac0:	2301      	movs	r3, #1
   d9ac2:	6123      	str	r3, [r4, #16]
}
   d9ac4:	4620      	mov	r0, r4
   d9ac6:	bd10      	pop	{r4, pc}
   d9ac8:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d9aca:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d9ace:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d9ad2:	429a      	cmp	r2, r3
   d9ad4:	d1f9      	bne.n	d9aca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d9ad6:	e7f3      	b.n	d9ac0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d9ad8:	2210      	movs	r2, #16
   d9ada:	f004 fa9d 	bl	de018 <memset>
   d9ade:	e7f1      	b.n	d9ac4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d9ae0 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d9ae0:	b538      	push	{r3, r4, r5, lr}
   d9ae2:	4604      	mov	r4, r0
   d9ae4:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d9ae6:	461a      	mov	r2, r3
   d9ae8:	f7ff ffdb 	bl	d9aa2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d9aec:	81a5      	strh	r5, [r4, #12]
}
   d9aee:	4620      	mov	r0, r4
   d9af0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9af4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d9af4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d9af6:	6902      	ldr	r2, [r0, #16]
   d9af8:	b922      	cbnz	r2, d9b04 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d9afa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9afc:	3800      	subs	r0, #0
   d9afe:	bf18      	it	ne
   d9b00:	2001      	movne	r0, #1
}
   d9b02:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9b04:	4902      	ldr	r1, [pc, #8]	; (d9b10 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d9b06:	2210      	movs	r2, #16
   d9b08:	f004 fa50 	bl	ddfac <memcmp>
   d9b0c:	e7f6      	b.n	d9afc <_ZNK8particle7BleUuid7isValidEv+0x8>
   d9b0e:	bf00      	nop
   d9b10:	000deee8 	.word	0x000deee8

000d9b14 <_ZNK8particle7BleUuid4typeEv>:
}
   d9b14:	6900      	ldr	r0, [r0, #16]
   d9b16:	4770      	bx	lr

000d9b18 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d9b18:	b538      	push	{r3, r4, r5, lr}
   d9b1a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d9b1c:	2214      	movs	r2, #20
   d9b1e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d9b20:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d9b22:	f004 fa79 	bl	de018 <memset>
    if (type_ == BleUuidType::SHORT) {
   d9b26:	6923      	ldr	r3, [r4, #16]
   d9b28:	b93b      	cbnz	r3, d9b3a <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d9b2a:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d9b2c:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d9b2e:	7b23      	ldrb	r3, [r4, #12]
   d9b30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d9b34:	802b      	strh	r3, [r5, #0]
}
   d9b36:	4628      	mov	r0, r5
   d9b38:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d9b3a:	2301      	movs	r3, #1
   d9b3c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d9b3e:	f104 0210 	add.w	r2, r4, #16
   d9b42:	462b      	mov	r3, r5
   d9b44:	f854 1b04 	ldr.w	r1, [r4], #4
   d9b48:	f843 1b04 	str.w	r1, [r3], #4
   d9b4c:	4294      	cmp	r4, r2
   d9b4e:	d1f9      	bne.n	d9b44 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d9b50:	e7f1      	b.n	d9b36 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d9b52 <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d9b52:	7b42      	ldrb	r2, [r0, #13]
   d9b54:	7b00      	ldrb	r0, [r0, #12]
}
   d9b56:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d9b5a:	4770      	bx	lr

000d9b5c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d9b5c:	4770      	bx	lr

000d9b5e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d9b5e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d9b60:	6902      	ldr	r2, [r0, #16]
   d9b62:	690b      	ldr	r3, [r1, #16]
   d9b64:	429a      	cmp	r2, r3
   d9b66:	d106      	bne.n	d9b76 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d9b68:	2210      	movs	r2, #16
   d9b6a:	f004 fa1f 	bl	ddfac <memcmp>
   d9b6e:	fab0 f080 	clz	r0, r0
   d9b72:	0940      	lsrs	r0, r0, #5
}
   d9b74:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d9b76:	2000      	movs	r0, #0
   d9b78:	e7fc      	b.n	d9b74 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d9b7c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d9b7c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d9b7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d9b82:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9b84:	4b32      	ldr	r3, [pc, #200]	; (d9c50 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d9b86:	681a      	ldr	r2, [r3, #0]
   d9b88:	6002      	str	r2, [r0, #0]
   d9b8a:	685a      	ldr	r2, [r3, #4]
   d9b8c:	6042      	str	r2, [r0, #4]
   d9b8e:	2500      	movs	r5, #0
   d9b90:	891a      	ldrh	r2, [r3, #8]
   d9b92:	7a9b      	ldrb	r3, [r3, #10]
   d9b94:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d9b96:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9b98:	7283      	strb	r3, [r0, #10]
   d9b9a:	f8c0 500b 	str.w	r5, [r0, #11]
   d9b9e:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d9ba0:	460e      	mov	r6, r1
   d9ba2:	b321      	cbz	r1, d9bee <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d9ba4:	2124      	movs	r1, #36	; 0x24
   d9ba6:	4630      	mov	r0, r6
   d9ba8:	f004 fa9c 	bl	de0e4 <strnlen>
   d9bac:	2804      	cmp	r0, #4
   d9bae:	d121      	bne.n	d9bf4 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d9bb0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d9bb4:	af01      	add	r7, sp, #4
   d9bb6:	1cb5      	adds	r5, r6, #2
   d9bb8:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d9bba:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d9bbe:	f7ff ff00 	bl	d99c2 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d9bc2:	f1b0 0800 	subs.w	r8, r0, #0
   d9bc6:	db10      	blt.n	d9bea <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d9bc8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d9bcc:	f7ff fef9 	bl	d99c2 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d9bd0:	2800      	cmp	r0, #0
   d9bd2:	db0a      	blt.n	d9bea <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d9bd4:	3502      	adds	r5, #2
   d9bd6:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d9bda:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d9bdc:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d9be0:	d1eb      	bne.n	d9bba <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d9be2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d9be6:	ba5b      	rev16	r3, r3
   d9be8:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d9bea:	2300      	movs	r3, #0
   d9bec:	6123      	str	r3, [r4, #16]
}
   d9bee:	b002      	add	sp, #8
   d9bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d9bf4:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d9bf6:	2124      	movs	r1, #36	; 0x24
   d9bf8:	4630      	mov	r0, r6
   d9bfa:	f004 fa73 	bl	de0e4 <strnlen>
   d9bfe:	42a8      	cmp	r0, r5
   d9c00:	d806      	bhi.n	d9c10 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d9c02:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d9c04:	2300      	movs	r3, #0
    while (len > 0) {
   d9c06:	42bc      	cmp	r4, r7
   d9c08:	d0f1      	beq.n	d9bee <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d9c0a:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d9c0e:	e7fa      	b.n	d9c06 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d9c10:	2f00      	cmp	r7, #0
   d9c12:	d0ec      	beq.n	d9bee <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d9c14:	5d70      	ldrb	r0, [r6, r5]
   d9c16:	f7ff fed4 	bl	d99c2 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d9c1a:	0603      	lsls	r3, r0, #24
   d9c1c:	d415      	bmi.n	d9c4a <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d9c1e:	0100      	lsls	r0, r0, #4
   d9c20:	3f01      	subs	r7, #1
   d9c22:	fa5f f880 	uxtb.w	r8, r0
   d9c26:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d9c2a:	2124      	movs	r1, #36	; 0x24
   d9c2c:	4630      	mov	r0, r6
   d9c2e:	f004 fa59 	bl	de0e4 <strnlen>
   d9c32:	3501      	adds	r5, #1
   d9c34:	42a8      	cmp	r0, r5
   d9c36:	d908      	bls.n	d9c4a <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d9c38:	5d70      	ldrb	r0, [r6, r5]
   d9c3a:	f7ff fec2 	bl	d99c2 <_ZN8particle11hexToNibbleEc>
   d9c3e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d9c40:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d9c42:	bfa4      	itt	ge
   d9c44:	ea40 0008 	orrge.w	r0, r0, r8
   d9c48:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d9c4a:	3501      	adds	r5, #1
   d9c4c:	e7d3      	b.n	d9bf6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d9c4e:	bf00      	nop
   d9c50:	000deec8 	.word	0x000deec8

000d9c54 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d9c54:	b513      	push	{r0, r1, r4, lr}
   d9c56:	4604      	mov	r4, r0
   d9c58:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d9c5a:	f7ff ff03 	bl	d9a64 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d9c5e:	4620      	mov	r0, r4
   d9c60:	9901      	ldr	r1, [sp, #4]
   d9c62:	f7ff ff8b 	bl	d9b7c <_ZN8particle7BleUuid9constructEPKc>
}
   d9c66:	4620      	mov	r0, r4
   d9c68:	b002      	add	sp, #8
   d9c6a:	bd10      	pop	{r4, pc}

000d9c6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d9c6c:	b430      	push	{r4, r5}
   d9c6e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d9c72:	b912      	cbnz	r2, d9c7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d9c74:	6a00      	ldr	r0, [r0, #32]
}
   d9c76:	bc30      	pop	{r4, r5}
   d9c78:	4770      	bx	lr
   d9c7a:	9502      	str	r5, [sp, #8]
   d9c7c:	bc30      	pop	{r4, r5}
   d9c7e:	f7ff be12 	b.w	d98a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d9c82 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d9c82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9c84:	4604      	mov	r4, r0
          selfLen_(0) {
   d9c86:	4602      	mov	r2, r0
   d9c88:	f100 011f 	add.w	r1, r0, #31
   d9c8c:	2300      	movs	r3, #0
   d9c8e:	f802 3b01 	strb.w	r3, [r2], #1
   d9c92:	4291      	cmp	r1, r2
   d9c94:	d1fb      	bne.n	d9c8e <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d9c96:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d9c98:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d9c9a:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d9c9c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d9c9e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d9ca2:	4619      	mov	r1, r3
   d9ca4:	f10d 020f 	add.w	r2, sp, #15
   d9ca8:	4620      	mov	r0, r4
   d9caa:	f7ff ffdf 	bl	d9c6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d9cae:	4620      	mov	r0, r4
   d9cb0:	b004      	add	sp, #16
   d9cb2:	bd10      	pop	{r4, pc}

000d9cb4 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   d9cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9cb6:	460a      	mov	r2, r1
   d9cb8:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d9cba:	2114      	movs	r1, #20
   d9cbc:	4610      	mov	r0, r2
   d9cbe:	9203      	str	r2, [sp, #12]
   d9cc0:	f004 fa10 	bl	de0e4 <strnlen>
   d9cc4:	2100      	movs	r1, #0
   d9cc6:	4603      	mov	r3, r0
   d9cc8:	9100      	str	r1, [sp, #0]
   d9cca:	9a03      	ldr	r2, [sp, #12]
   d9ccc:	2109      	movs	r1, #9
   d9cce:	4620      	mov	r0, r4
   d9cd0:	f7ff ffcc 	bl	d9c6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d9cd4:	b004      	add	sp, #16
   d9cd6:	bd10      	pop	{r4, pc}

000d9cd8 <_ZN8particle18BleAdvertisingData15appendLocalNameERK6String>:
    return appendLocalName(name.c_str());
   d9cd8:	6809      	ldr	r1, [r1, #0]
   d9cda:	f7ff bfeb 	b.w	d9cb4 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>

000d9cde <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   d9cde:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   d9ce0:	9300      	str	r3, [sp, #0]
   d9ce2:	4613      	mov	r3, r2
   d9ce4:	460a      	mov	r2, r1
   d9ce6:	21ff      	movs	r1, #255	; 0xff
   d9ce8:	f7ff ffc0 	bl	d9c6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d9cec:	b003      	add	sp, #12
   d9cee:	f85d fb04 	ldr.w	pc, [sp], #4

000d9cf2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d9cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d9cf4:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d9cf6:	460e      	mov	r6, r1
   d9cf8:	ab01      	add	r3, sp, #4
   d9cfa:	6a01      	ldr	r1, [r0, #32]
   d9cfc:	4604      	mov	r4, r0
   d9cfe:	f7ff fdbd 	bl	d987c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d9d02:	4605      	mov	r5, r0
   d9d04:	b178      	cbz	r0, d9d26 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d9d06:	9801      	ldr	r0, [sp, #4]
   d9d08:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d9d0a:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d9d0c:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d9d0e:	4421      	add	r1, r4
   d9d10:	1b52      	subs	r2, r2, r5
   d9d12:	4420      	add	r0, r4
   d9d14:	f004 f958 	bl	ddfc8 <memcpy>
        selfLen_ -= len;
   d9d18:	6a20      	ldr	r0, [r4, #32]
   d9d1a:	1b40      	subs	r0, r0, r5
   d9d1c:	6220      	str	r0, [r4, #32]
        remove(type);
   d9d1e:	4631      	mov	r1, r6
   d9d20:	4620      	mov	r0, r4
   d9d22:	f7ff ffe6 	bl	d9cf2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d9d26:	b002      	add	sp, #8
   d9d28:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9d2c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d9d2c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d9d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9d32:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d9d34:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d9d36:	8043      	strh	r3, [r0, #2]
   d9d38:	220e      	movs	r2, #14
   d9d3a:	4629      	mov	r1, r5
   d9d3c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d9d3e:	7105      	strb	r5, [r0, #4]
   d9d40:	3006      	adds	r0, #6
   d9d42:	f004 f969 	bl	de018 <memset>
   d9d46:	f104 0014 	add.w	r0, r4, #20
   d9d4a:	f7ff fe8b 	bl	d9a64 <_ZN8particle7BleUuidC1Ev>
   d9d4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d9d52:	f7ff fe87 	bl	d9a64 <_ZN8particle7BleUuidC1Ev>
   d9d56:	4904      	ldr	r1, [pc, #16]	; (d9d68 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d9d58:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d9d5c:	f7ff fc53 	bl	d9606 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d9d60:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d9d62:	4620      	mov	r0, r4
   d9d64:	bd38      	pop	{r3, r4, r5, pc}
   d9d66:	bf00      	nop
   d9d68:	000de27f 	.word	0x000de27f

000d9d6c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d9d6c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d9d6e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d9d72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d9d76:	4293      	cmp	r3, r2
   d9d78:	4618      	mov	r0, r3
   d9d7a:	d006      	beq.n	d9d8a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d9d7c:	6804      	ldr	r4, [r0, #0]
   d9d7e:	8824      	ldrh	r4, [r4, #0]
   d9d80:	428c      	cmp	r4, r1
   d9d82:	f103 0308 	add.w	r3, r3, #8
   d9d86:	d1f6      	bne.n	d9d76 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d9d88:	bd10      	pop	{r4, pc}
        return nullptr;
   d9d8a:	2000      	movs	r0, #0
   d9d8c:	e7fc      	b.n	d9d88 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d9d90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d9d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9d92:	4606      	mov	r6, r0
   d9d94:	b085      	sub	sp, #20
   d9d96:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d9d98:	460d      	mov	r5, r1
   d9d9a:	2900      	cmp	r1, #0
   d9d9c:	d050      	beq.n	d9e40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d9d9e:	2a00      	cmp	r2, #0
   d9da0:	d04e      	beq.n	d9e40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d9da2:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d9da4:	7823      	ldrb	r3, [r4, #0]
   d9da6:	2af4      	cmp	r2, #244	; 0xf4
   d9da8:	bf28      	it	cs
   d9daa:	22f4      	movcs	r2, #244	; 0xf4
   d9dac:	b343      	cbz	r3, d9e00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d9dae:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d9db0:	0798      	lsls	r0, r3, #30
   d9db2:	d509      	bpl.n	d9dc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d9db4:	89a0      	ldrh	r0, [r4, #12]
   d9db6:	9203      	str	r2, [sp, #12]
   d9db8:	2300      	movs	r3, #0
   d9dba:	f7fe ffbb 	bl	d8d34 <hal_ble_gatt_server_set_characteristic_value>
   d9dbe:	2800      	cmp	r0, #0
   d9dc0:	9a03      	ldr	r2, [sp, #12]
   d9dc2:	da03      	bge.n	d9dcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d9dc4:	b005      	add	sp, #20
   d9dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d9dc8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d9dcc:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d9dce:	7923      	ldrb	r3, [r4, #4]
   d9dd0:	06d9      	lsls	r1, r3, #27
   d9dd2:	d509      	bpl.n	d9de8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d9dd4:	2f01      	cmp	r7, #1
   d9dd6:	d007      	beq.n	d9de8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d9dd8:	89a0      	ldrh	r0, [r4, #12]
   d9dda:	2300      	movs	r3, #0
   d9ddc:	4629      	mov	r1, r5
}
   d9dde:	b005      	add	sp, #20
   d9de0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d9de4:	f7fe bfd8 	b.w	d8d98 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d9de8:	069b      	lsls	r3, r3, #26
   d9dea:	d5eb      	bpl.n	d9dc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d9dec:	2f02      	cmp	r7, #2
   d9dee:	d0e9      	beq.n	d9dc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d9df0:	89a0      	ldrh	r0, [r4, #12]
   d9df2:	2300      	movs	r3, #0
   d9df4:	4629      	mov	r1, r5
}
   d9df6:	b005      	add	sp, #20
   d9df8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d9dfc:	f7fe bfd6 	b.w	d8dac <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d9e00:	8860      	ldrh	r0, [r4, #2]
   d9e02:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d9e06:	4288      	cmp	r0, r1
   d9e08:	d01c      	beq.n	d9e44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d9e0a:	7921      	ldrb	r1, [r4, #4]
   d9e0c:	074e      	lsls	r6, r1, #29
   d9e0e:	d501      	bpl.n	d9e14 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d9e10:	2f01      	cmp	r7, #1
   d9e12:	d104      	bne.n	d9e1e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d9e14:	070b      	lsls	r3, r1, #28
   d9e16:	d409      	bmi.n	d9e2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d9e18:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d9e1c:	e7d2      	b.n	d9dc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d9e1e:	89a1      	ldrh	r1, [r4, #12]
   d9e20:	9300      	str	r3, [sp, #0]
   d9e22:	4613      	mov	r3, r2
   d9e24:	462a      	mov	r2, r5
   d9e26:	f7fe ff99 	bl	d8d5c <hal_ble_gatt_client_write_without_response>
   d9e2a:	e7cb      	b.n	d9dc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d9e2c:	2f02      	cmp	r7, #2
   d9e2e:	d0f3      	beq.n	d9e18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d9e30:	2300      	movs	r3, #0
   d9e32:	89a1      	ldrh	r1, [r4, #12]
   d9e34:	9300      	str	r3, [sp, #0]
   d9e36:	4613      	mov	r3, r2
   d9e38:	462a      	mov	r2, r5
   d9e3a:	f7fe ff85 	bl	d8d48 <hal_ble_gatt_client_write_with_response>
   d9e3e:	e7c1      	b.n	d9dc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d9e40:	4802      	ldr	r0, [pc, #8]	; (d9e4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d9e42:	e7bf      	b.n	d9dc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d9e44:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d9e48:	e7bc      	b.n	d9dc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d9e4a:	bf00      	nop
   d9e4c:	fffffef2 	.word	0xfffffef2

000d9e50 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d9e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d9e54:	2600      	movs	r6, #0
   d9e56:	6006      	str	r6, [r0, #0]
   d9e58:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9e5a:	2028      	movs	r0, #40	; 0x28
   d9e5c:	460c      	mov	r4, r1
   d9e5e:	f7fa f91a 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d9e62:	1e05      	subs	r5, r0, #0
   d9e64:	f105 080c 	add.w	r8, r5, #12
   d9e68:	d00f      	beq.n	d9e8a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d9e6a:	2301      	movs	r3, #1
   d9e6c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d9e70:	4b08      	ldr	r3, [pc, #32]	; (d9e94 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d9e72:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d9e74:	4640      	mov	r0, r8
   d9e76:	f7ff fdf5 	bl	d9a64 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d9e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d9e7c:	622e      	str	r6, [r5, #32]
   d9e7e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d9e82:	4646      	mov	r6, r8
   d9e84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d9e86:	6823      	ldr	r3, [r4, #0]
   d9e88:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d9e8a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d9e8e:	4638      	mov	r0, r7
   d9e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9e94:	000dee90 	.word	0x000dee90

000d9e98 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d9e98:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d9e9a:	2500      	movs	r5, #0
   d9e9c:	6005      	str	r5, [r0, #0]
   d9e9e:	4606      	mov	r6, r0
   d9ea0:	2030      	movs	r0, #48	; 0x30
   d9ea2:	f7fa f8f8 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d9ea6:	4604      	mov	r4, r0
   d9ea8:	b188      	cbz	r0, d9ece <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d9eaa:	2301      	movs	r3, #1
   d9eac:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d9eb0:	4b09      	ldr	r3, [pc, #36]	; (d9ed8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d9eb2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d9eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9eb8:	8183      	strh	r3, [r0, #12]
   d9eba:	300e      	adds	r0, #14
   d9ebc:	f7ff fdc7 	bl	d9a4e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d9ec0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d9ec4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d9ec8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d9ecc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d9ece:	6074      	str	r4, [r6, #4]
   d9ed0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d9ed2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d9ed4:	4630      	mov	r0, r6
   d9ed6:	bd70      	pop	{r4, r5, r6, pc}
   d9ed8:	000deeac 	.word	0x000deeac

000d9edc <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d9edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9ede:	460d      	mov	r5, r1
   d9ee0:	4604      	mov	r4, r0
    WiringBleLock lk;
   d9ee2:	a801      	add	r0, sp, #4
   d9ee4:	f7ff fd82 	bl	d99ec <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d9ee8:	682a      	ldr	r2, [r5, #0]
   d9eea:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d9eee:	6023      	str	r3, [r4, #0]
   d9ef0:	6853      	ldr	r3, [r2, #4]
   d9ef2:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d9ef4:	a801      	add	r0, sp, #4
   d9ef6:	f7ff fd81 	bl	d99fc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d9efa:	4620      	mov	r0, r4
   d9efc:	b003      	add	sp, #12
   d9efe:	bd30      	pop	{r4, r5, pc}

000d9f00 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d9f00:	b530      	push	{r4, r5, lr}
   d9f02:	4605      	mov	r5, r0
   d9f04:	b087      	sub	sp, #28
   d9f06:	460c      	mov	r4, r1
    WiringBleLock lk;
   d9f08:	a801      	add	r0, sp, #4
   d9f0a:	f7ff fd6f 	bl	d99ec <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d9f0e:	682a      	ldr	r2, [r5, #0]
   d9f10:	6823      	ldr	r3, [r4, #0]
   d9f12:	8812      	ldrh	r2, [r2, #0]
   d9f14:	881b      	ldrh	r3, [r3, #0]
   d9f16:	429a      	cmp	r2, r3
   d9f18:	d10d      	bne.n	d9f36 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d9f1a:	4629      	mov	r1, r5
   d9f1c:	a802      	add	r0, sp, #8
   d9f1e:	f7ff ffdd 	bl	d9edc <_ZNK8particle13BlePeerDevice7addressEv>
   d9f22:	4621      	mov	r1, r4
   d9f24:	a804      	add	r0, sp, #16
   d9f26:	f7ff ffd9 	bl	d9edc <_ZNK8particle13BlePeerDevice7addressEv>
   d9f2a:	a904      	add	r1, sp, #16
   d9f2c:	a802      	add	r0, sp, #8
   d9f2e:	f7ff fd7a 	bl	d9a26 <_ZNK8particle10BleAddresseqERKS0_>
   d9f32:	4604      	mov	r4, r0
   d9f34:	b900      	cbnz	r0, d9f38 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d9f36:	2400      	movs	r4, #0
    WiringBleLock lk;
   d9f38:	a801      	add	r0, sp, #4
   d9f3a:	f7ff fd5f 	bl	d99fc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d9f3e:	4620      	mov	r0, r4
   d9f40:	b007      	add	sp, #28
   d9f42:	bd30      	pop	{r4, r5, pc}

000d9f44 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d9f44:	b510      	push	{r4, lr}
   d9f46:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d9f48:	2054      	movs	r0, #84	; 0x54
   d9f4a:	f7fa f8a4 	bl	d4096 <_Znwj>
   d9f4e:	4601      	mov	r1, r0
   d9f50:	b160      	cbz	r0, d9f6c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d9f52:	2300      	movs	r3, #0
   d9f54:	e9c0 3300 	strd	r3, r3, [r0]
   d9f58:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9f5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9f60:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d9f64:	6203      	str	r3, [r0, #32]
   d9f66:	62c3      	str	r3, [r0, #44]	; 0x2c
   d9f68:	63c3      	str	r3, [r0, #60]	; 0x3c
   d9f6a:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d9f6c:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d9f6e:	b919      	cbnz	r1, d9f78 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d9f70:	4a09      	ldr	r2, [pc, #36]	; (d9f98 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d9f72:	200a      	movs	r0, #10
   d9f74:	f7ff f8a0 	bl	d90b8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d9f78:	2000      	movs	r0, #0
   d9f7a:	f7fe fea7 	bl	d8ccc <hal_ble_stack_init>
   d9f7e:	b120      	cbz	r0, d9f8a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d9f80:	4a05      	ldr	r2, [pc, #20]	; (d9f98 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d9f82:	2100      	movs	r1, #0
   d9f84:	200a      	movs	r0, #10
   d9f86:	f7ff f897 	bl	d90b8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d9f8a:	6821      	ldr	r1, [r4, #0]
   d9f8c:	4803      	ldr	r0, [pc, #12]	; (d9f9c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d9f8e:	2200      	movs	r2, #0
   d9f90:	f7fe fef8 	bl	d8d84 <hal_ble_set_callback_on_periph_link_events>
}
   d9f94:	4620      	mov	r0, r4
   d9f96:	bd10      	pop	{r4, pc}
   d9f98:	000d8c3d 	.word	0x000d8c3d
   d9f9c:	000da335 	.word	0x000da335

000d9fa0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d9fa0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d9fa2:	4c0b      	ldr	r4, [pc, #44]	; (d9fd0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d9fa4:	7823      	ldrb	r3, [r4, #0]
   d9fa6:	f3bf 8f5b 	dmb	ish
   d9faa:	07db      	lsls	r3, r3, #31
   d9fac:	d40e      	bmi.n	d9fcc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d9fae:	4620      	mov	r0, r4
   d9fb0:	f7fa f882 	bl	d40b8 <__cxa_guard_acquire>
   d9fb4:	b150      	cbz	r0, d9fcc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d9fb6:	4807      	ldr	r0, [pc, #28]	; (d9fd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d9fb8:	f7ff ffc4 	bl	d9f44 <_ZN8particle14BleLocalDeviceC1Ev>
   d9fbc:	4620      	mov	r0, r4
   d9fbe:	f7fa f880 	bl	d40c2 <__cxa_guard_release>
   d9fc2:	4a05      	ldr	r2, [pc, #20]	; (d9fd8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d9fc4:	4905      	ldr	r1, [pc, #20]	; (d9fdc <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d9fc6:	4803      	ldr	r0, [pc, #12]	; (d9fd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d9fc8:	f001 fd5c 	bl	dba84 <__aeabi_atexit>
    return instance;
}
   d9fcc:	4801      	ldr	r0, [pc, #4]	; (d9fd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d9fce:	bd10      	pop	{r4, pc}
   d9fd0:	2003e5dc 	.word	0x2003e5dc
   d9fd4:	2003e5e8 	.word	0x2003e5e8
   d9fd8:	2003de20 	.word	0x2003de20
   d9fdc:	000da1b5 	.word	0x000da1b5

000d9fe0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d9fe0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d9fe2:	6803      	ldr	r3, [r0, #0]
   d9fe4:	3b09      	subs	r3, #9
   d9fe6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d9fe8:	b08d      	sub	sp, #52	; 0x34
   d9fea:	4604      	mov	r4, r0
   d9fec:	460d      	mov	r5, r1
    switch (event->type) {
   d9fee:	d811      	bhi.n	da014 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d9ff0:	f7ff ffd6 	bl	d9fa0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d9ff4:	88a1      	ldrh	r1, [r4, #4]
   d9ff6:	6800      	ldr	r0, [r0, #0]
   d9ff8:	f7ff feb8 	bl	d9d6c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d9ffc:	4603      	mov	r3, r0
   d9ffe:	b958      	cbnz	r0, da018 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   da000:	2220      	movs	r2, #32
   da002:	e9cd 2004 	strd	r2, r0, [sp, #16]
   da006:	4a0b      	ldr	r2, [pc, #44]	; (da034 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   da008:	9200      	str	r2, [sp, #0]
   da00a:	490b      	ldr	r1, [pc, #44]	; (da038 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   da00c:	aa04      	add	r2, sp, #16
   da00e:	2032      	movs	r0, #50	; 0x32
   da010:	f7ff f85a 	bl	d90c8 <log_message>
}
   da014:	b00d      	add	sp, #52	; 0x34
   da016:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   da018:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   da01a:	2a00      	cmp	r2, #0
   da01c:	d0fa      	beq.n	da014 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   da01e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da022:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   da026:	e9cd 1203 	strd	r1, r2, [sp, #12]
   da02a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   da02c:	aa04      	add	r2, sp, #16
   da02e:	a903      	add	r1, sp, #12
   da030:	47a0      	blx	r4
}
   da032:	e7ef      	b.n	da014 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   da034:	000ded9f 	.word	0x000ded9f
   da038:	000ded78 	.word	0x000ded78

000da03c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   da03c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   da03e:	2000      	movs	r0, #0
   da040:	f7fe fe44 	bl	d8ccc <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   da044:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   da048:	bd08      	pop	{r3, pc}

000da04a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   da04a:	4608      	mov	r0, r1
   da04c:	b911      	cbnz	r1, da054 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   da04e:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   da050:	f7fe be44 	b.w	d8cdc <hal_ble_gap_set_advertising_data>
   da054:	6a09      	ldr	r1, [r1, #32]
   da056:	2200      	movs	r2, #0
   da058:	e7fa      	b.n	da050 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000da05a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   da05a:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   da05c:	4608      	mov	r0, r1
   da05e:	b929      	cbnz	r1, da06c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   da060:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   da062:	b003      	add	sp, #12
   da064:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   da068:	f7fe be40 	b.w	d8cec <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   da06c:	2101      	movs	r1, #1
   da06e:	9001      	str	r0, [sp, #4]
   da070:	f7ff fe3f 	bl	d9cf2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   da074:	9801      	ldr	r0, [sp, #4]
   da076:	2200      	movs	r2, #0
   da078:	6a01      	ldr	r1, [r0, #32]
   da07a:	e7f2      	b.n	da062 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000da07c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   da07c:	b538      	push	{r3, r4, r5, lr}
   da07e:	4604      	mov	r4, r0
   da080:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   da082:	f7ff ffe2 	bl	da04a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   da086:	2800      	cmp	r0, #0
   da088:	db0a      	blt.n	da0a0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   da08a:	4629      	mov	r1, r5
   da08c:	4620      	mov	r0, r4
   da08e:	f7ff ffe4 	bl	da05a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   da092:	2800      	cmp	r0, #0
   da094:	db04      	blt.n	da0a0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   da096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   da09a:	2000      	movs	r0, #0
   da09c:	f7fe be2e 	b.w	d8cfc <hal_ble_gap_start_advertising>
}
   da0a0:	bd38      	pop	{r3, r4, r5, pc}

000da0a2 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   da0a2:	6803      	ldr	r3, [r0, #0]
   da0a4:	69d8      	ldr	r0, [r3, #28]
}
   da0a6:	2800      	cmp	r0, #0
   da0a8:	bfd4      	ite	le
   da0aa:	2000      	movle	r0, #0
   da0ac:	2001      	movgt	r0, #1
   da0ae:	4770      	bx	lr

000da0b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   da0b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da0b2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   da0b4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   da0b6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da0b8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   da0ba:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da0bc:	f7f9 ffeb 	bl	d4096 <_Znwj>
   da0c0:	b118      	cbz	r0, da0ca <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   da0c2:	682b      	ldr	r3, [r5, #0]
   da0c4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   da0c6:	686b      	ldr	r3, [r5, #4]
   da0c8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   da0ca:	4b03      	ldr	r3, [pc, #12]	; (da0d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   da0cc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   da0ce:	4b03      	ldr	r3, [pc, #12]	; (da0dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da0d0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   da0d2:	60a3      	str	r3, [r4, #8]
      }
   da0d4:	4620      	mov	r0, r4
   da0d6:	bd38      	pop	{r3, r4, r5, pc}
   da0d8:	000d9983 	.word	0x000d9983
   da0dc:	000d9945 	.word	0x000d9945

000da0e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   da0e0:	680b      	ldr	r3, [r1, #0]
   da0e2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   da0e4:	b113      	cbz	r3, da0ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   da0e6:	685a      	ldr	r2, [r3, #4]
   da0e8:	3201      	adds	r2, #1
   da0ea:	605a      	str	r2, [r3, #4]
      }
   da0ec:	4770      	bx	lr

000da0ee <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   da0ee:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da0f0:	f851 3b04 	ldr.w	r3, [r1], #4
   da0f4:	4604      	mov	r4, r0
   da0f6:	f840 3b04 	str.w	r3, [r0], #4
   da0fa:	f7ff fff1 	bl	da0e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   da0fe:	6823      	ldr	r3, [r4, #0]
   da100:	b90b      	cbnz	r3, da106 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   da102:	f7ff fc17 	bl	d9934 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   da106:	4620      	mov	r0, r4
   da108:	bd10      	pop	{r4, pc}

000da10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   da10a:	b510      	push	{r4, lr}
   da10c:	f851 3b04 	ldr.w	r3, [r1], #4
   da110:	4604      	mov	r4, r0
   da112:	f840 3b04 	str.w	r3, [r0], #4
   da116:	f7ff ffe3 	bl	da0e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   da11a:	4620      	mov	r0, r4
   da11c:	bd10      	pop	{r4, pc}

000da11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   da11e:	b510      	push	{r4, lr}
   da120:	f851 3b04 	ldr.w	r3, [r1], #4
   da124:	4604      	mov	r4, r0
   da126:	f840 3b04 	str.w	r3, [r0], #4
   da12a:	f7ff ffd9 	bl	da0e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   da12e:	4620      	mov	r0, r4
   da130:	bd10      	pop	{r4, pc}

000da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   da132:	b510      	push	{r4, lr}
   da134:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   da136:	6800      	ldr	r0, [r0, #0]
   da138:	b128      	cbz	r0, da146 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   da13a:	6843      	ldr	r3, [r0, #4]
   da13c:	3b01      	subs	r3, #1
   da13e:	6043      	str	r3, [r0, #4]
   da140:	b90b      	cbnz	r3, da146 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   da142:	f7ff fb6a 	bl	d981a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   da146:	4620      	mov	r0, r4
   da148:	bd10      	pop	{r4, pc}

000da14a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   da14a:	b510      	push	{r4, lr}
   da14c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   da14e:	3004      	adds	r0, #4
   da150:	f7ff ffef 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da154:	4620      	mov	r0, r4
   da156:	bd10      	pop	{r4, pc}

000da158 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da158:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da15a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   da15e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da160:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   da164:	42ae      	cmp	r6, r5
   da166:	d004      	beq.n	da172 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   da168:	1d28      	adds	r0, r5, #4
   da16a:	f7ff ffe2 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da16e:	3508      	adds	r5, #8
   da170:	e7f8      	b.n	da164 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   da172:	6820      	ldr	r0, [r4, #0]
   da174:	f7ff f8a6 	bl	d92c4 <free>
}
   da178:	4620      	mov	r0, r4
   da17a:	bd70      	pop	{r4, r5, r6, pc}

000da17c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da17c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da17e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   da182:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da184:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   da188:	42ae      	cmp	r6, r5
   da18a:	d004      	beq.n	da196 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   da18c:	1d28      	adds	r0, r5, #4
   da18e:	f7ff ffd0 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da192:	3508      	adds	r5, #8
   da194:	e7f8      	b.n	da188 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   da196:	6820      	ldr	r0, [r4, #0]
   da198:	f7ff f894 	bl	d92c4 <free>
}
   da19c:	4620      	mov	r0, r4
   da19e:	bd70      	pop	{r4, r5, r6, pc}

000da1a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   da1a0:	b510      	push	{r4, lr}
   da1a2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   da1a4:	3024      	adds	r0, #36	; 0x24
   da1a6:	f7ff ffe9 	bl	da17c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   da1aa:	f104 0018 	add.w	r0, r4, #24
   da1ae:	f7ff ffd3 	bl	da158 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   da1b2:	bd10      	pop	{r4, pc}

000da1b4 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   da1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   da1b6:	6804      	ldr	r4, [r0, #0]
   da1b8:	4606      	mov	r6, r0
   da1ba:	b324      	cbz	r4, da206 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   da1bc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   da1c0:	f7ff fbeb 	bl	d999a <_ZNSt14_Function_baseD1Ev>
   da1c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   da1c8:	f7ff fbe7 	bl	d999a <_ZNSt14_Function_baseD1Ev>
   da1cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   da1d0:	f7ff fbe3 	bl	d999a <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   da1d4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   da1d8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   da1dc:	42af      	cmp	r7, r5
   da1de:	d004      	beq.n	da1ea <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   da1e0:	1d28      	adds	r0, r5, #4
   da1e2:	f7ff ffa6 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da1e6:	3508      	adds	r5, #8
   da1e8:	e7f8      	b.n	da1dc <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   da1ea:	69a0      	ldr	r0, [r4, #24]
   da1ec:	f7ff f86a 	bl	d92c4 <free>
    ~BleLocalDeviceImpl() = default;
   da1f0:	f104 000c 	add.w	r0, r4, #12
   da1f4:	f7ff ffc2 	bl	da17c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   da1f8:	4620      	mov	r0, r4
   da1fa:	f7ff ffad 	bl	da158 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   da1fe:	2154      	movs	r1, #84	; 0x54
   da200:	4620      	mov	r0, r4
   da202:	f001 fc44 	bl	dba8e <_ZdlPvj>
   da206:	4630      	mov	r0, r6
   da208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da20a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   da20a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   da20c:	b510      	push	{r4, lr}
      if (_M_empty())
   da20e:	b90a      	cbnz	r2, da214 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   da210:	f001 fc41 	bl	dba96 <_ZSt25__throw_bad_function_callv>
    }
   da214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da218:	68c3      	ldr	r3, [r0, #12]
   da21a:	4718      	bx	r3

000da21c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   da21c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da220:	4604      	mov	r4, r0
   da222:	460d      	mov	r5, r1
   da224:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da226:	d914      	bls.n	da252 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   da228:	4290      	cmp	r0, r2
   da22a:	d213      	bcs.n	da254 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   da22c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   da230:	1a75      	subs	r5, r6, r1
   da232:	f1a1 0708 	sub.w	r7, r1, #8
   da236:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   da238:	42b7      	cmp	r7, r6
   da23a:	d018      	beq.n	da26e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   da23c:	b11c      	cbz	r4, da246 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   da23e:	4631      	mov	r1, r6
   da240:	4620      	mov	r0, r4
   da242:	f7ff ff6c 	bl	da11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   da246:	1d30      	adds	r0, r6, #4
   da248:	f7ff ff73 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   da24c:	3e08      	subs	r6, #8
   da24e:	3c08      	subs	r4, #8
   da250:	e7f2      	b.n	da238 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   da252:	d00c      	beq.n	da26e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   da254:	42b5      	cmp	r5, r6
   da256:	d00a      	beq.n	da26e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   da258:	b11c      	cbz	r4, da262 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   da25a:	4629      	mov	r1, r5
   da25c:	4620      	mov	r0, r4
   da25e:	f7ff ff5e 	bl	da11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   da262:	1d28      	adds	r0, r5, #4
   da264:	f7ff ff65 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   da268:	3508      	adds	r5, #8
   da26a:	3408      	adds	r4, #8
   da26c:	e7f2      	b.n	da254 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   da26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da270 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   da274:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da278:	4605      	mov	r5, r0
   da27a:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   da27c:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   da280:	42a7      	cmp	r7, r4
   da282:	d103      	bne.n	da28c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   da284:	2600      	movs	r6, #0
}
   da286:	4630      	mov	r0, r6
   da288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   da28c:	4641      	mov	r1, r8
   da28e:	4620      	mov	r0, r4
   da290:	f7ff fe36 	bl	d9f00 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   da294:	4606      	mov	r6, r0
   da296:	b908      	cbnz	r0, da29c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   da298:	3408      	adds	r4, #8
   da29a:	e7f1      	b.n	da280 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   da29c:	2c00      	cmp	r4, #0
   da29e:	d0f1      	beq.n	da284 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   da2a0:	1d20      	adds	r0, r4, #4
   da2a2:	f7ff ff46 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   da2a6:	e9d5 3200 	ldrd	r3, r2, [r5]
   da2aa:	f104 0108 	add.w	r1, r4, #8
   da2ae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   da2b2:	4620      	mov	r0, r4
   da2b4:	f7ff ffb2 	bl	da21c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   da2b8:	686b      	ldr	r3, [r5, #4]
   da2ba:	3b01      	subs	r3, #1
   da2bc:	606b      	str	r3, [r5, #4]
    return true;
   da2be:	e7e2      	b.n	da286 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000da2c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   da2c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da2c2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   da2c4:	6846      	ldr	r6, [r0, #4]
   da2c6:	4668      	mov	r0, sp
   da2c8:	f7ff ff29 	bl	da11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da2cc:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   da2d0:	429f      	cmp	r7, r3
   da2d2:	db12      	blt.n	da2fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   da2d4:	3701      	adds	r7, #1
        if (n > 0) {
   da2d6:	2f00      	cmp	r7, #0
   da2d8:	dd29      	ble.n	da32e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   da2da:	00f8      	lsls	r0, r7, #3
   da2dc:	f7fe ffea 	bl	d92b4 <malloc>
            if (!d) {
   da2e0:	4605      	mov	r5, r0
   da2e2:	b1f0      	cbz	r0, da322 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   da2e4:	e9d4 1200 	ldrd	r1, r2, [r4]
   da2e8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   da2ec:	f7ff ff96 	bl	da21c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   da2f0:	6820      	ldr	r0, [r4, #0]
   da2f2:	f7fe ffe7 	bl	d92c4 <free>
        data_ = d;
   da2f6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   da2f8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   da2fa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   da2fc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   da2fe:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   da302:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   da306:	4631      	mov	r1, r6
   da308:	f106 0008 	add.w	r0, r6, #8
   da30c:	f7ff ff86 	bl	da21c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   da310:	b11e      	cbz	r6, da31a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   da312:	4669      	mov	r1, sp
   da314:	4630      	mov	r0, r6
   da316:	f7ff ff02 	bl	da11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   da31a:	6863      	ldr	r3, [r4, #4]
   da31c:	3301      	adds	r3, #1
   da31e:	6063      	str	r3, [r4, #4]
    return true;
   da320:	2501      	movs	r5, #1
   da322:	a801      	add	r0, sp, #4
   da324:	f7ff ff05 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da328:	4628      	mov	r0, r5
   da32a:	b003      	add	sp, #12
   da32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   da32e:	2500      	movs	r5, #0
   da330:	e7de      	b.n	da2f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000da334 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   da334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da338:	4605      	mov	r5, r0
   da33a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   da33c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   da33e:	460c      	mov	r4, r1
        WiringBleLock lk;
   da340:	f7ff fb54 	bl	d99ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   da344:	682e      	ldr	r6, [r5, #0]
   da346:	2e04      	cmp	r6, #4
   da348:	d06b      	beq.n	da422 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   da34a:	d807      	bhi.n	da35c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   da34c:	2e03      	cmp	r6, #3
   da34e:	d028      	beq.n	da3a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   da350:	a803      	add	r0, sp, #12
   da352:	f7ff fb53 	bl	d99fc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   da356:	b00e      	add	sp, #56	; 0x38
   da358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   da35c:	f1a6 030c 	sub.w	r3, r6, #12
   da360:	2b03      	cmp	r3, #3
   da362:	d8f5      	bhi.n	da350 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   da364:	89a9      	ldrh	r1, [r5, #12]
   da366:	4620      	mov	r0, r4
   da368:	f7ff fd00 	bl	d9d6c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   da36c:	4607      	mov	r7, r0
   da36e:	2800      	cmp	r0, #0
   da370:	d0ee      	beq.n	da350 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   da372:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   da374:	2b00      	cmp	r3, #0
   da376:	d0eb      	beq.n	da350 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   da378:	2210      	movs	r2, #16
   da37a:	2100      	movs	r1, #0
   da37c:	a807      	add	r0, sp, #28
   da37e:	f003 fe4b 	bl	de018 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   da382:	2e0d      	cmp	r6, #13
                        };
   da384:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   da386:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   da38a:	f040 8092 	bne.w	da4b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   da38e:	686b      	ldr	r3, [r5, #4]
   da390:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   da392:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   da394:	9308      	str	r3, [sp, #32]
   da396:	6d23      	ldr	r3, [r4, #80]	; 0x50
   da398:	a906      	add	r1, sp, #24
   da39a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   da39e:	4798      	blx	r3
   da3a0:	e7d6      	b.n	da350 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   da3a2:	a804      	add	r0, sp, #16
   da3a4:	f7ff fd78 	bl	d9e98 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   da3a8:	9b04      	ldr	r3, [sp, #16]
   da3aa:	89aa      	ldrh	r2, [r5, #12]
   da3ac:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   da3ae:	6869      	ldr	r1, [r5, #4]
   da3b0:	9804      	ldr	r0, [sp, #16]
   da3b2:	3108      	adds	r1, #8
   da3b4:	3002      	adds	r0, #2
   da3b6:	f7ff fb29 	bl	d9a0c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   da3ba:	a904      	add	r1, sp, #16
   da3bc:	a806      	add	r0, sp, #24
   da3be:	f7ff feae 	bl	da11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   da3c2:	a906      	add	r1, sp, #24
   da3c4:	f104 0018 	add.w	r0, r4, #24
   da3c8:	f7ff ff7a 	bl	da2c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   da3cc:	4605      	mov	r5, r0
   da3ce:	a807      	add	r0, sp, #28
   da3d0:	f7ff feaf 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da3d4:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   da3d6:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   da3d8:	b98d      	cbnz	r5, da3fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   da3da:	4b3e      	ldr	r3, [pc, #248]	; (da4d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   da3dc:	493e      	ldr	r1, [pc, #248]	; (da4d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   da3de:	9300      	str	r3, [sp, #0]
   da3e0:	2032      	movs	r0, #50	; 0x32
   da3e2:	462b      	mov	r3, r5
   da3e4:	aa06      	add	r2, sp, #24
   da3e6:	9507      	str	r5, [sp, #28]
   da3e8:	f7fe fe6e 	bl	d90c8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   da3ec:	9b04      	ldr	r3, [sp, #16]
   da3ee:	4629      	mov	r1, r5
   da3f0:	8818      	ldrh	r0, [r3, #0]
   da3f2:	f7fe fc8b 	bl	d8d0c <hal_ble_gap_disconnect>
   da3f6:	a805      	add	r0, sp, #20
   da3f8:	f7ff fe9b 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da3fc:	e7a8      	b.n	da350 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   da3fe:	4a37      	ldr	r2, [pc, #220]	; (da4dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   da400:	9200      	str	r2, [sp, #0]
   da402:	2300      	movs	r3, #0
   da404:	4934      	ldr	r1, [pc, #208]	; (da4d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   da406:	9307      	str	r3, [sp, #28]
   da408:	aa06      	add	r2, sp, #24
   da40a:	2001      	movs	r0, #1
   da40c:	f7fe fe5c 	bl	d90c8 <log_message>
                if (impl->connectedCallback_) {
   da410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   da412:	2b00      	cmp	r3, #0
   da414:	d0ef      	beq.n	da3f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   da416:	a904      	add	r1, sp, #16
   da418:	f104 0024 	add.w	r0, r4, #36	; 0x24
   da41c:	f7ff fef5 	bl	da20a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   da420:	e7e9      	b.n	da3f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   da422:	89a9      	ldrh	r1, [r5, #12]
   da424:	4620      	mov	r0, r4
   da426:	f7ff fca1 	bl	d9d6c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   da42a:	4606      	mov	r6, r0
   da42c:	2800      	cmp	r0, #0
   da42e:	d08f      	beq.n	da350 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   da430:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   da432:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   da436:	f64f 72ff 	movw	r2, #65535	; 0xffff
   da43a:	802a      	strh	r2, [r5, #0]
   da43c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   da440:	4299      	cmp	r1, r3
   da442:	d003      	beq.n	da44c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   da444:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   da448:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   da44a:	e7f9      	b.n	da440 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   da44c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   da450:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   da454:	45b8      	cmp	r8, r7
   da456:	d004      	beq.n	da462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   da458:	1d38      	adds	r0, r7, #4
   da45a:	f7ff fe6a 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da45e:	3708      	adds	r7, #8
   da460:	e7f8      	b.n	da454 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   da462:	2300      	movs	r3, #0
   da464:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   da466:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   da46a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   da46e:	45b8      	cmp	r8, r7
   da470:	d004      	beq.n	da47c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   da472:	1d38      	adds	r0, r7, #4
   da474:	f7ff fe5d 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da478:	3708      	adds	r7, #8
   da47a:	e7f8      	b.n	da46e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   da47c:	2300      	movs	r3, #0
   da47e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   da480:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   da482:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da484:	b123      	cbz	r3, da490 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   da486:	4631      	mov	r1, r6
   da488:	f104 0034 	add.w	r0, r4, #52	; 0x34
   da48c:	f7ff febd 	bl	da20a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   da490:	2300      	movs	r3, #0
   da492:	2220      	movs	r2, #32
   da494:	e9cd 2306 	strd	r2, r3, [sp, #24]
   da498:	4a11      	ldr	r2, [pc, #68]	; (da4e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   da49a:	9200      	str	r2, [sp, #0]
   da49c:	490e      	ldr	r1, [pc, #56]	; (da4d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   da49e:	aa06      	add	r2, sp, #24
   da4a0:	2001      	movs	r0, #1
   da4a2:	f7fe fe11 	bl	d90c8 <log_message>
                    impl->peers_.removeOne(*peer);
   da4a6:	4631      	mov	r1, r6
   da4a8:	f104 0018 	add.w	r0, r4, #24
   da4ac:	f7ff fee0 	bl	da270 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   da4b0:	e74e      	b.n	da350 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   da4b2:	2e0f      	cmp	r6, #15
   da4b4:	f47f af6f 	bne.w	da396 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   da4b8:	686b      	ldr	r3, [r5, #4]
   da4ba:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   da4bc:	7a2b      	ldrb	r3, [r5, #8]
   da4be:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   da4c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   da4c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   da4ca:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   da4ce:	2308      	movs	r3, #8
   da4d0:	e760      	b.n	da394 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   da4d2:	bf00      	nop
   da4d4:	000dedb7 	.word	0x000dedb7
   da4d8:	000ded78 	.word	0x000ded78
   da4dc:	000deddd 	.word	0x000deddd
   da4e0:	000dedfa 	.word	0x000dedfa

000da4e4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   da4e4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   da4e6:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   da4e8:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da4ea:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   da4ee:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   da4f2:	6823      	ldr	r3, [r4, #0]
   da4f4:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da4f6:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da4f8:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   da4fa:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   da4fc:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   da4fe:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   da500:	f7ff fe17 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   da504:	4620      	mov	r0, r4
   da506:	b002      	add	sp, #8
   da508:	bd10      	pop	{r4, pc}

000da50a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   da50a:	b513      	push	{r0, r1, r4, lr}
   da50c:	460b      	mov	r3, r1
   da50e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da510:	e9d0 0100 	ldrd	r0, r1, [r0]
   da514:	466c      	mov	r4, sp
   da516:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   da51a:	e893 0003 	ldmia.w	r3, {r0, r1}
   da51e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   da522:	e894 0003 	ldmia.w	r4, {r0, r1}
   da526:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   da52a:	b002      	add	sp, #8
   da52c:	bd10      	pop	{r4, pc}

000da52e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   da52e:	b538      	push	{r3, r4, r5, lr}
   da530:	4605      	mov	r5, r0
   da532:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   da534:	f7ff ffe9 	bl	da50a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da538:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   da53a:	68a2      	ldr	r2, [r4, #8]
   da53c:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da53e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da540:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   da542:	68e2      	ldr	r2, [r4, #12]
   da544:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da546:	60e3      	str	r3, [r4, #12]
      }
   da548:	bd38      	pop	{r3, r4, r5, pc}

000da54a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   da54a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   da54c:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   da54e:	4604      	mov	r4, r0
   da550:	4608      	mov	r0, r1
	__x.swap(*this);
   da552:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   da554:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   da556:	f7ff ffea 	bl	da52e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   da55a:	4621      	mov	r1, r4
   da55c:	4668      	mov	r0, sp
   da55e:	f7ff ffe6 	bl	da52e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   da562:	4668      	mov	r0, sp
   da564:	f7ff fa19 	bl	d999a <_ZNSt14_Function_baseD1Ev>
      }
   da568:	4620      	mov	r0, r4
   da56a:	b004      	add	sp, #16
   da56c:	bd10      	pop	{r4, pc}

000da56e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   da56e:	b570      	push	{r4, r5, r6, lr}
   da570:	460e      	mov	r6, r1
   da572:	b088      	sub	sp, #32
   da574:	4604      	mov	r4, r0
   da576:	9201      	str	r2, [sp, #4]
   da578:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   da57a:	f7ff fbd7 	bl	d9d2c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   da57e:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   da580:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   da582:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   da584:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   da588:	f7ff f890 	bl	d96ac <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   da58c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   da590:	b185      	cbz	r5, da5b4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   da592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   da594:	9502      	str	r5, [sp, #8]
   da596:	a902      	add	r1, sp, #8
   da598:	a804      	add	r0, sp, #16
   da59a:	9303      	str	r3, [sp, #12]
   da59c:	f7ff fd88 	bl	da0b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   da5a0:	a904      	add	r1, sp, #16
   da5a2:	4630      	mov	r0, r6
   da5a4:	f7ff ffd1 	bl	da54a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   da5a8:	a804      	add	r0, sp, #16
   da5aa:	f7ff f9f6 	bl	d999a <_ZNSt14_Function_baseD1Ev>
    }
   da5ae:	4620      	mov	r0, r4
   da5b0:	b008      	add	sp, #32
   da5b2:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   da5b4:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   da5b6:	e7f3      	b.n	da5a0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000da5b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   da5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da5bc:	b086      	sub	sp, #24
   da5be:	4607      	mov	r7, r0
   da5c0:	461d      	mov	r5, r3
   da5c2:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   da5c4:	2300      	movs	r3, #0
   da5c6:	4689      	mov	r9, r1
   da5c8:	4692      	mov	sl, r2
   da5ca:	9304      	str	r3, [sp, #16]
   da5cc:	f7f9 fd63 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   da5d0:	1e06      	subs	r6, r0, #0
   da5d2:	f106 080c 	add.w	r8, r6, #12
   da5d6:	d01d      	beq.n	da614 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   da5d8:	2301      	movs	r3, #1
	: _M_impl(__a)
   da5da:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   da5dc:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   da5e0:	4b15      	ldr	r3, [pc, #84]	; (da638 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   da5e2:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   da5e6:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   da5ea:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   da5ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da5f0:	9300      	str	r3, [sp, #0]
   da5f2:	464a      	mov	r2, r9
   da5f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da5f6:	a903      	add	r1, sp, #12
   da5f8:	4640      	mov	r0, r8
   da5fa:	f7ff ffb8 	bl	da56e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   da5fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da602:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   da604:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   da606:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   da608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da60a:	f106 0434 	add.w	r4, r6, #52	; 0x34
   da60e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da610:	682b      	ldr	r3, [r5, #0]
   da612:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   da614:	a904      	add	r1, sp, #16
   da616:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   da618:	e9cd 8604 	strd	r8, r6, [sp, #16]
   da61c:	f7ff ff62 	bl	da4e4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   da620:	a805      	add	r0, sp, #20
   da622:	f7ff fd86 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   da626:	6839      	ldr	r1, [r7, #0]
   da628:	b919      	cbnz	r1, da632 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   da62a:	4a04      	ldr	r2, [pc, #16]	; (da63c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   da62c:	200a      	movs	r0, #10
   da62e:	f7fe fd43 	bl	d90b8 <panic_>
}
   da632:	b006      	add	sp, #24
   da634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da638:	000dee74 	.word	0x000dee74
   da63c:	000d8c3d 	.word	0x000d8c3d

000da640 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   da640:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   da642:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   da644:	b086      	sub	sp, #24
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   da646:	344c      	adds	r4, #76	; 0x4c
   da648:	b171      	cbz	r1, da668 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x28>
   da64a:	e9cd 1200 	strd	r1, r2, [sp]
   da64e:	a802      	add	r0, sp, #8
   da650:	4669      	mov	r1, sp
   da652:	f7ff fd2d 	bl	da0b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   da656:	a902      	add	r1, sp, #8
   da658:	4620      	mov	r0, r4
   da65a:	f7ff ff76 	bl	da54a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   da65e:	a802      	add	r0, sp, #8
   da660:	f7ff f99b 	bl	d999a <_ZNSt14_Function_baseD1Ev>
}
   da664:	b006      	add	sp, #24
   da666:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   da668:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   da66a:	e7f4      	b.n	da656 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000da66c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   da66c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da670:	4604      	mov	r4, r0
   da672:	460d      	mov	r5, r1
   da674:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da676:	d914      	bls.n	da6a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   da678:	4290      	cmp	r0, r2
   da67a:	d213      	bcs.n	da6a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   da67c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   da680:	1a75      	subs	r5, r6, r1
   da682:	f1a1 0708 	sub.w	r7, r1, #8
   da686:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   da688:	42b7      	cmp	r7, r6
   da68a:	d018      	beq.n	da6be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   da68c:	b11c      	cbz	r4, da696 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   da68e:	4631      	mov	r1, r6
   da690:	4620      	mov	r0, r4
   da692:	f7ff fd3a 	bl	da10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   da696:	1d30      	adds	r0, r6, #4
   da698:	f7ff fd4b 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   da69c:	3e08      	subs	r6, #8
   da69e:	3c08      	subs	r4, #8
   da6a0:	e7f2      	b.n	da688 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   da6a2:	d00c      	beq.n	da6be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   da6a4:	42b5      	cmp	r5, r6
   da6a6:	d00a      	beq.n	da6be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   da6a8:	b11c      	cbz	r4, da6b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   da6aa:	4629      	mov	r1, r5
   da6ac:	4620      	mov	r0, r4
   da6ae:	f7ff fd2c 	bl	da10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   da6b2:	1d28      	adds	r0, r5, #4
   da6b4:	f7ff fd3d 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   da6b8:	3508      	adds	r5, #8
   da6ba:	3408      	adds	r4, #8
   da6bc:	e7f2      	b.n	da6a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   da6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da6c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   da6c0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   da6c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   da6c4:	4605      	mov	r5, r0
        if (n > 0) {
   da6c6:	dd11      	ble.n	da6ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   da6c8:	00f0      	lsls	r0, r6, #3
   da6ca:	f7fe fdf3 	bl	d92b4 <malloc>
            if (!d) {
   da6ce:	4604      	mov	r4, r0
   da6d0:	b158      	cbz	r0, da6ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   da6d2:	e9d5 1200 	ldrd	r1, r2, [r5]
   da6d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   da6da:	f7ff ffc7 	bl	da66c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   da6de:	6828      	ldr	r0, [r5, #0]
   da6e0:	f7fe fdf0 	bl	d92c4 <free>
        data_ = d;
   da6e4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   da6e6:	60ae      	str	r6, [r5, #8]
        return true;
   da6e8:	2001      	movs	r0, #1
    }
   da6ea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   da6ec:	2400      	movs	r4, #0
   da6ee:	e7f6      	b.n	da6de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000da6f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   da6f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da6f2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   da6f4:	6845      	ldr	r5, [r0, #4]
   da6f6:	4668      	mov	r0, sp
   da6f8:	f7ff fd07 	bl	da10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da6fc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   da700:	4299      	cmp	r1, r3
   da702:	da10      	bge.n	da726 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   da704:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   da706:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   da708:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   da70c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   da710:	4629      	mov	r1, r5
   da712:	f105 0008 	add.w	r0, r5, #8
   da716:	f7ff ffa9 	bl	da66c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   da71a:	b98d      	cbnz	r5, da740 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   da71c:	6863      	ldr	r3, [r4, #4]
   da71e:	3301      	adds	r3, #1
   da720:	6063      	str	r3, [r4, #4]
    return true;
   da722:	2601      	movs	r6, #1
   da724:	e006      	b.n	da734 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da726:	3101      	adds	r1, #1
   da728:	4620      	mov	r0, r4
   da72a:	f7ff ffc9 	bl	da6c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   da72e:	4606      	mov	r6, r0
   da730:	2800      	cmp	r0, #0
   da732:	d1e7      	bne.n	da704 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   da734:	a801      	add	r0, sp, #4
   da736:	f7ff fcfc 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da73a:	4630      	mov	r0, r6
   da73c:	b002      	add	sp, #8
   da73e:	bd70      	pop	{r4, r5, r6, pc}
   da740:	4669      	mov	r1, sp
   da742:	4628      	mov	r0, r5
   da744:	f7ff fce1 	bl	da10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   da748:	e7e8      	b.n	da71c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000da74a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   da74a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da74e:	4604      	mov	r4, r0
   da750:	460d      	mov	r5, r1
   da752:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da754:	d914      	bls.n	da780 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   da756:	4290      	cmp	r0, r2
   da758:	d213      	bcs.n	da782 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   da75a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   da75e:	1a75      	subs	r5, r6, r1
   da760:	f1a1 0708 	sub.w	r7, r1, #8
   da764:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   da766:	42b7      	cmp	r7, r6
   da768:	d018      	beq.n	da79c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   da76a:	b11c      	cbz	r4, da774 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   da76c:	4631      	mov	r1, r6
   da76e:	4620      	mov	r0, r4
   da770:	f7ff fcbd 	bl	da0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   da774:	1d30      	adds	r0, r6, #4
   da776:	f7ff fcdc 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   da77a:	3e08      	subs	r6, #8
   da77c:	3c08      	subs	r4, #8
   da77e:	e7f2      	b.n	da766 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   da780:	d00c      	beq.n	da79c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   da782:	42b5      	cmp	r5, r6
   da784:	d00a      	beq.n	da79c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   da786:	b11c      	cbz	r4, da790 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   da788:	4629      	mov	r1, r5
   da78a:	4620      	mov	r0, r4
   da78c:	f7ff fcaf 	bl	da0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   da790:	1d28      	adds	r0, r5, #4
   da792:	f7ff fcce 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   da796:	3508      	adds	r5, #8
   da798:	3408      	adds	r4, #8
   da79a:	e7f2      	b.n	da782 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   da79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da79e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   da79e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   da7a0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   da7a2:	4605      	mov	r5, r0
        if (n > 0) {
   da7a4:	dd11      	ble.n	da7ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   da7a6:	00f0      	lsls	r0, r6, #3
   da7a8:	f7fe fd84 	bl	d92b4 <malloc>
            if (!d) {
   da7ac:	4604      	mov	r4, r0
   da7ae:	b158      	cbz	r0, da7c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   da7b0:	e9d5 1200 	ldrd	r1, r2, [r5]
   da7b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   da7b8:	f7ff ffc7 	bl	da74a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   da7bc:	6828      	ldr	r0, [r5, #0]
   da7be:	f7fe fd81 	bl	d92c4 <free>
        data_ = d;
   da7c2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   da7c4:	60ae      	str	r6, [r5, #8]
        return true;
   da7c6:	2001      	movs	r0, #1
    }
   da7c8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   da7ca:	2400      	movs	r4, #0
   da7cc:	e7f6      	b.n	da7bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000da7ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   da7ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da7d0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   da7d2:	6845      	ldr	r5, [r0, #4]
   da7d4:	4668      	mov	r0, sp
   da7d6:	f7ff fc8a 	bl	da0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da7da:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   da7de:	4299      	cmp	r1, r3
   da7e0:	da10      	bge.n	da804 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   da7e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   da7e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   da7e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   da7ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   da7ee:	4629      	mov	r1, r5
   da7f0:	f105 0008 	add.w	r0, r5, #8
   da7f4:	f7ff ffa9 	bl	da74a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   da7f8:	b98d      	cbnz	r5, da81e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   da7fa:	6863      	ldr	r3, [r4, #4]
   da7fc:	3301      	adds	r3, #1
   da7fe:	6063      	str	r3, [r4, #4]
    return true;
   da800:	2601      	movs	r6, #1
   da802:	e006      	b.n	da812 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da804:	3101      	adds	r1, #1
   da806:	4620      	mov	r0, r4
   da808:	f7ff ffc9 	bl	da79e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   da80c:	4606      	mov	r6, r0
   da80e:	2800      	cmp	r0, #0
   da810:	d1e7      	bne.n	da7e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   da812:	a801      	add	r0, sp, #4
   da814:	f7ff fc8d 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da818:	4630      	mov	r0, r6
   da81a:	b002      	add	sp, #8
   da81c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   da81e:	4669      	mov	r1, sp
   da820:	4628      	mov	r0, r5
   da822:	f7ff fc64 	bl	da0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   da826:	e7e8      	b.n	da7fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000da828 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   da828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da82c:	4617      	mov	r7, r2
   da82e:	b0a1      	sub	sp, #132	; 0x84
   da830:	4680      	mov	r8, r0
    WiringBleLock lk;
   da832:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   da834:	460e      	mov	r6, r1
    WiringBleLock lk;
   da836:	f7ff f8d9 	bl	d99ec <_ZN8particle3ble13WiringBleLockC1Ev>
   da83a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   da83c:	7923      	ldrb	r3, [r4, #4]
   da83e:	b953      	cbnz	r3, da856 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   da840:	4639      	mov	r1, r7
   da842:	4640      	mov	r0, r8
   da844:	f7ff fc53 	bl	da0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   da848:	a80a      	add	r0, sp, #40	; 0x28
   da84a:	f7ff f8d7 	bl	d99fc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   da84e:	4640      	mov	r0, r8
   da850:	b021      	add	sp, #132	; 0x84
   da852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   da856:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   da858:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   da85c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   da860:	9303      	str	r3, [sp, #12]
   da862:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   da866:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   da86a:	9b03      	ldr	r3, [sp, #12]
   da86c:	429d      	cmp	r5, r3
   da86e:	d021      	beq.n	da8b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   da870:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   da874:	4658      	mov	r0, fp
   da876:	f109 0114 	add.w	r1, r9, #20
   da87a:	f7ff f970 	bl	d9b5e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   da87e:	b1b8      	cbz	r0, da8b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   da880:	f109 0128 	add.w	r1, r9, #40	; 0x28
   da884:	4650      	mov	r0, sl
   da886:	f7ff f96a 	bl	d9b5e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   da88a:	b188      	cbz	r0, da8b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   da88c:	6823      	ldr	r3, [r4, #0]
   da88e:	f8d9 2000 	ldr.w	r2, [r9]
   da892:	4053      	eors	r3, r2
   da894:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   da898:	d10a      	bne.n	da8b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   da89a:	2220      	movs	r2, #32
   da89c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   da8a0:	4a5e      	ldr	r2, [pc, #376]	; (daa1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   da8a2:	9200      	str	r2, [sp, #0]
   da8a4:	aa15      	add	r2, sp, #84	; 0x54
   da8a6:	495e      	ldr	r1, [pc, #376]	; (daa20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   da8a8:	2032      	movs	r0, #50	; 0x32
   da8aa:	f7fe fc0d 	bl	d90c8 <log_message>
   da8ae:	e7c7      	b.n	da840 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   da8b0:	3508      	adds	r5, #8
   da8b2:	e7da      	b.n	da86a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   da8b4:	4650      	mov	r0, sl
   da8b6:	f7ff f91d 	bl	d9af4 <_ZNK8particle7BleUuid7isValidEv>
   da8ba:	b960      	cbnz	r0, da8d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   da8bc:	4959      	ldr	r1, [pc, #356]	; (daa24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   da8be:	2201      	movs	r2, #1
   da8c0:	a815      	add	r0, sp, #84	; 0x54
   da8c2:	ad15      	add	r5, sp, #84	; 0x54
   da8c4:	f7ff f8ed 	bl	d9aa2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   da8c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da8ca:	46d4      	mov	ip, sl
   da8cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   da8d0:	682b      	ldr	r3, [r5, #0]
   da8d2:	f8cc 3000 	str.w	r3, [ip]
   da8d6:	6833      	ldr	r3, [r6, #0]
   da8d8:	e9d3 5300 	ldrd	r5, r3, [r3]
   da8dc:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   da8e0:	455d      	cmp	r5, fp
   da8e2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   da8e4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   da8e6:	d06e      	beq.n	da9c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   da8e8:	f855 0b08 	ldr.w	r0, [r5], #8
   da8ec:	f7ff f937 	bl	d9b5e <_ZNK8particle7BleUuideqERKS0_>
   da8f0:	2800      	cmp	r0, #0
   da8f2:	d0f5      	beq.n	da8e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   da8f4:	f104 0a14 	add.w	sl, r4, #20
   da8f8:	4650      	mov	r0, sl
   da8fa:	f7ff f8fb 	bl	d9af4 <_ZNK8particle7BleUuid7isValidEv>
   da8fe:	b988      	cbnz	r0, da924 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   da900:	4b49      	ldr	r3, [pc, #292]	; (daa28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   da902:	4948      	ldr	r1, [pc, #288]	; (daa24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   da904:	881a      	ldrh	r2, [r3, #0]
   da906:	3201      	adds	r2, #1
   da908:	b292      	uxth	r2, r2
   da90a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   da90c:	a815      	add	r0, sp, #84	; 0x54
   da90e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   da910:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   da912:	f7ff f8e5 	bl	d9ae0 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   da916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da918:	46d4      	mov	ip, sl
   da91a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   da91e:	682b      	ldr	r3, [r5, #0]
   da920:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   da924:	2228      	movs	r2, #40	; 0x28
   da926:	2100      	movs	r1, #0
   da928:	a816      	add	r0, sp, #88	; 0x58
   da92a:	f003 fb75 	bl	de018 <memset>
    charInit.version = BLE_API_VERSION;
   da92e:	4b3f      	ldr	r3, [pc, #252]	; (daa2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   da930:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   da932:	4651      	mov	r1, sl
   da934:	a804      	add	r0, sp, #16
   da936:	f7ff f8ef 	bl	d9b18 <_ZN8particle7BleUuid7halUUIDEv>
   da93a:	ab04      	add	r3, sp, #16
   da93c:	aa18      	add	r2, sp, #96	; 0x60
   da93e:	f10d 0c20 	add.w	ip, sp, #32
   da942:	6818      	ldr	r0, [r3, #0]
   da944:	6859      	ldr	r1, [r3, #4]
   da946:	4615      	mov	r5, r2
   da948:	c503      	stmia	r5!, {r0, r1}
   da94a:	3308      	adds	r3, #8
   da94c:	4563      	cmp	r3, ip
   da94e:	462a      	mov	r2, r5
   da950:	d1f7      	bne.n	da942 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   da952:	6818      	ldr	r0, [r3, #0]
   da954:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   da956:	7923      	ldrb	r3, [r4, #4]
   da958:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   da95c:	f8d9 3000 	ldr.w	r3, [r9]
   da960:	8a9b      	ldrh	r3, [r3, #20]
   da962:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   da966:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da968:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   da96a:	4b31      	ldr	r3, [pc, #196]	; (daa30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   da96c:	2200      	movs	r2, #0
   da96e:	1da1      	adds	r1, r4, #6
   da970:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   da972:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   da976:	f7fe f9fb 	bl	d8d70 <hal_ble_gatt_server_add_characteristic>
   da97a:	2800      	cmp	r0, #0
   da97c:	f47f af60 	bne.w	da840 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   da980:	2301      	movs	r3, #1
   da982:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   da984:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   da986:	4639      	mov	r1, r7
        return characteristics_;
   da988:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   da98a:	a80d      	add	r0, sp, #52	; 0x34
   da98c:	f7ff fbaf 	bl	da0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   da990:	4620      	mov	r0, r4
   da992:	a90d      	add	r1, sp, #52	; 0x34
   da994:	f7ff ff1b 	bl	da7ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   da998:	4604      	mov	r4, r0
   da99a:	a80e      	add	r0, sp, #56	; 0x38
   da99c:	f7ff fbc9 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da9a0:	2c00      	cmp	r4, #0
   da9a2:	f47f af4d 	bne.w	da840 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   da9a6:	2320      	movs	r3, #32
   da9a8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   da9ac:	4b21      	ldr	r3, [pc, #132]	; (daa34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   da9ae:	9300      	str	r3, [sp, #0]
   da9b0:	aa0d      	add	r2, sp, #52	; 0x34
   da9b2:	4623      	mov	r3, r4
   da9b4:	e777      	b.n	da8a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   da9b6:	4639      	mov	r1, r7
   da9b8:	4640      	mov	r0, r8
   da9ba:	f7ff fb98 	bl	da0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   da9be:	a80c      	add	r0, sp, #48	; 0x30
   da9c0:	f7ff fbb7 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da9c4:	e740      	b.n	da848 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   da9c6:	a80b      	add	r0, sp, #44	; 0x2c
   da9c8:	f7ff fa42 	bl	d9e50 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   da9cc:	4651      	mov	r1, sl
   da9ce:	a815      	add	r0, sp, #84	; 0x54
   da9d0:	f7ff f8a2 	bl	d9b18 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   da9d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da9d6:	2300      	movs	r3, #0
   da9d8:	3214      	adds	r2, #20
   da9da:	a915      	add	r1, sp, #84	; 0x54
   da9dc:	2001      	movs	r0, #1
   da9de:	f7fe f99f 	bl	d8d20 <hal_ble_gatt_server_add_service>
   da9e2:	2800      	cmp	r0, #0
   da9e4:	d1e7      	bne.n	da9b6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   da9e6:	6835      	ldr	r5, [r6, #0]
   da9e8:	a90b      	add	r1, sp, #44	; 0x2c
   da9ea:	a80d      	add	r0, sp, #52	; 0x34
   da9ec:	f7ff fb8d 	bl	da10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   da9f0:	4628      	mov	r0, r5
   da9f2:	a90d      	add	r1, sp, #52	; 0x34
   da9f4:	f7ff fe7c 	bl	da6f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   da9f8:	4605      	mov	r5, r0
   da9fa:	a80e      	add	r0, sp, #56	; 0x38
   da9fc:	f7ff fb99 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   daa00:	2d00      	cmp	r5, #0
   daa02:	d0d8      	beq.n	da9b6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   daa04:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   daa06:	6853      	ldr	r3, [r2, #4]
   daa08:	6812      	ldr	r2, [r2, #0]
   daa0a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   daa0e:	3b01      	subs	r3, #1
   daa10:	a80c      	add	r0, sp, #48	; 0x30
   daa12:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   daa16:	f7ff fb8c 	bl	da132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   daa1a:	e76b      	b.n	da8f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   daa1c:	000dee19 	.word	0x000dee19
   daa20:	000ded78 	.word	0x000ded78
   daa24:	000deed8 	.word	0x000deed8
   daa28:	2003e5e0 	.word	0x2003e5e0
   daa2c:	002c0001 	.word	0x002c0001
   daa30:	000d9fe1 	.word	0x000d9fe1
   daa34:	000dee44 	.word	0x000dee44

000daa38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   daa38:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   daa3a:	4c06      	ldr	r4, [pc, #24]	; (daa54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   daa3c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   daa3e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   daa40:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   daa42:	f7fe f9bd 	bl	d8dc0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   daa46:	4620      	mov	r0, r4
   daa48:	4a03      	ldr	r2, [pc, #12]	; (daa58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   daa4a:	4904      	ldr	r1, [pc, #16]	; (daa5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   daa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   daa50:	f001 b818 	b.w	dba84 <__aeabi_atexit>
   daa54:	2003e5e4 	.word	0x2003e5e4
   daa58:	2003de20 	.word	0x2003de20
   daa5c:	000d983b 	.word	0x000d983b

000daa60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   daa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daa62:	4606      	mov	r6, r0
   daa64:	460d      	mov	r5, r1
  size_t n = 0;
   daa66:	188f      	adds	r7, r1, r2
   daa68:	2400      	movs	r4, #0
  while (size--) {
   daa6a:	42bd      	cmp	r5, r7
   daa6c:	d00c      	beq.n	daa88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   daa6e:	6833      	ldr	r3, [r6, #0]
   daa70:	f815 1b01 	ldrb.w	r1, [r5], #1
   daa74:	689b      	ldr	r3, [r3, #8]
   daa76:	4630      	mov	r0, r6
   daa78:	4798      	blx	r3
     if (chunk>=0)
   daa7a:	1e03      	subs	r3, r0, #0
   daa7c:	db01      	blt.n	daa82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   daa7e:	441c      	add	r4, r3
  while (size--) {
   daa80:	e7f3      	b.n	daa6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   daa82:	2c00      	cmp	r4, #0
   daa84:	bf08      	it	eq
   daa86:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   daa88:	4620      	mov	r0, r4
   daa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000daa8c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   daa8c:	b508      	push	{r3, lr}
  return write(str);
   daa8e:	f7fc fc1d 	bl	d72cc <_ZN5Print5writeEPKc>
}
   daa92:	bd08      	pop	{r3, pc}

000daa94 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   daa94:	6803      	ldr	r3, [r0, #0]
   daa96:	689b      	ldr	r3, [r3, #8]
   daa98:	4718      	bx	r3

000daa9a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   daa9a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   daa9c:	210d      	movs	r1, #13
{
   daa9e:	4605      	mov	r5, r0
  size_t n = print('\r');
   daaa0:	f7ff fff8 	bl	daa94 <_ZN5Print5printEc>
  n += print('\n');
   daaa4:	210a      	movs	r1, #10
  size_t n = print('\r');
   daaa6:	4604      	mov	r4, r0
  n += print('\n');
   daaa8:	4628      	mov	r0, r5
   daaaa:	f7ff fff3 	bl	daa94 <_ZN5Print5printEc>
  return n;
}
   daaae:	4420      	add	r0, r4
   daab0:	bd38      	pop	{r3, r4, r5, pc}

000daab2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   daab2:	b538      	push	{r3, r4, r5, lr}
   daab4:	4605      	mov	r5, r0
  return write(str);
   daab6:	f7fc fc09 	bl	d72cc <_ZN5Print5writeEPKc>
   daaba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   daabc:	4628      	mov	r0, r5
   daabe:	f7ff ffec 	bl	daa9a <_ZN5Print7printlnEv>
  return n;
}
   daac2:	4420      	add	r0, r4
   daac4:	bd38      	pop	{r3, r4, r5, pc}

000daac6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   daac6:	b530      	push	{r4, r5, lr}
   daac8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   daaca:	2300      	movs	r3, #0
   daacc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   daad0:	2a01      	cmp	r2, #1
   daad2:	bf98      	it	ls
   daad4:	220a      	movls	r2, #10
   daad6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   daad8:	460d      	mov	r5, r1
   daada:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   daade:	fb01 5312 	mls	r3, r1, r2, r5
   daae2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   daae6:	2b09      	cmp	r3, #9
   daae8:	bf94      	ite	ls
   daaea:	3330      	addls	r3, #48	; 0x30
   daaec:	3337      	addhi	r3, #55	; 0x37
   daaee:	b2db      	uxtb	r3, r3
  } while(n);
   daaf0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   daaf2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   daaf6:	d9ef      	bls.n	daad8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   daaf8:	4621      	mov	r1, r4
   daafa:	f7fc fbe7 	bl	d72cc <_ZN5Print5writeEPKc>
}
   daafe:	b00b      	add	sp, #44	; 0x2c
   dab00:	bd30      	pop	{r4, r5, pc}
	...

000dab04 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   dab04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dab08:	ec55 4b10 	vmov	r4, r5, d0
   dab0c:	4606      	mov	r6, r0
   dab0e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   dab10:	ee10 2a10 	vmov	r2, s0
   dab14:	ee10 0a10 	vmov	r0, s0
   dab18:	462b      	mov	r3, r5
   dab1a:	4629      	mov	r1, r5
   dab1c:	f002 fec4 	bl	dd8a8 <__aeabi_dcmpun>
   dab20:	b140      	cbz	r0, dab34 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   dab22:	4953      	ldr	r1, [pc, #332]	; (dac70 <_ZN5Print10printFloatEdh+0x16c>)
   dab24:	4630      	mov	r0, r6
   dab26:	f7fc fbd1 	bl	d72cc <_ZN5Print5writeEPKc>
   dab2a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   dab2c:	4650      	mov	r0, sl
   dab2e:	b003      	add	sp, #12
   dab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   dab34:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   dab38:	4b4e      	ldr	r3, [pc, #312]	; (dac74 <_ZN5Print10printFloatEdh+0x170>)
   dab3a:	f04f 32ff 	mov.w	r2, #4294967295
   dab3e:	4620      	mov	r0, r4
   dab40:	4649      	mov	r1, r9
   dab42:	f002 feb1 	bl	dd8a8 <__aeabi_dcmpun>
   dab46:	b948      	cbnz	r0, dab5c <_ZN5Print10printFloatEdh+0x58>
   dab48:	4b4a      	ldr	r3, [pc, #296]	; (dac74 <_ZN5Print10printFloatEdh+0x170>)
   dab4a:	f04f 32ff 	mov.w	r2, #4294967295
   dab4e:	4620      	mov	r0, r4
   dab50:	4649      	mov	r1, r9
   dab52:	f002 fe8b 	bl	dd86c <__aeabi_dcmple>
   dab56:	b908      	cbnz	r0, dab5c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   dab58:	4947      	ldr	r1, [pc, #284]	; (dac78 <_ZN5Print10printFloatEdh+0x174>)
   dab5a:	e7e3      	b.n	dab24 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   dab5c:	4b47      	ldr	r3, [pc, #284]	; (dac7c <_ZN5Print10printFloatEdh+0x178>)
   dab5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dab62:	4620      	mov	r0, r4
   dab64:	4629      	mov	r1, r5
   dab66:	f002 fe95 	bl	dd894 <__aeabi_dcmpgt>
   dab6a:	b108      	cbz	r0, dab70 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   dab6c:	4944      	ldr	r1, [pc, #272]	; (dac80 <_ZN5Print10printFloatEdh+0x17c>)
   dab6e:	e7d9      	b.n	dab24 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   dab70:	4b44      	ldr	r3, [pc, #272]	; (dac84 <_ZN5Print10printFloatEdh+0x180>)
   dab72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dab76:	4620      	mov	r0, r4
   dab78:	4629      	mov	r1, r5
   dab7a:	f002 fe6d 	bl	dd858 <__aeabi_dcmplt>
   dab7e:	2800      	cmp	r0, #0
   dab80:	d1f4      	bne.n	dab6c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   dab82:	2200      	movs	r2, #0
   dab84:	2300      	movs	r3, #0
   dab86:	4620      	mov	r0, r4
   dab88:	4629      	mov	r1, r5
   dab8a:	f002 fe65 	bl	dd858 <__aeabi_dcmplt>
   dab8e:	b1d0      	cbz	r0, dabc6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   dab90:	212d      	movs	r1, #45	; 0x2d
   dab92:	4630      	mov	r0, r6
   dab94:	f7ff ff7e 	bl	daa94 <_ZN5Print5printEc>
     number = -number;
   dab98:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   dab9c:	4682      	mov	sl, r0
     number = -number;
   dab9e:	461d      	mov	r5, r3
  double rounding = 0.5;
   daba0:	4939      	ldr	r1, [pc, #228]	; (dac88 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   daba2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; dac90 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   daba6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   dabaa:	2000      	movs	r0, #0
    rounding /= 10.0;
   dabac:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   dabb0:	fa5f f38b 	uxtb.w	r3, fp
   dabb4:	429f      	cmp	r7, r3
   dabb6:	d908      	bls.n	dabca <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   dabb8:	4642      	mov	r2, r8
   dabba:	464b      	mov	r3, r9
   dabbc:	f002 fd04 	bl	dd5c8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   dabc0:	f10b 0b01 	add.w	fp, fp, #1
   dabc4:	e7f4      	b.n	dabb0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   dabc6:	4682      	mov	sl, r0
   dabc8:	e7ea      	b.n	daba0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   dabca:	4622      	mov	r2, r4
   dabcc:	462b      	mov	r3, r5
   dabce:	f002 fa1b 	bl	dd008 <__adddf3>
   dabd2:	460d      	mov	r5, r1
   dabd4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   dabd6:	f002 fea5 	bl	dd924 <__aeabi_d2uiz>
   dabda:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   dabdc:	f002 fb50 	bl	dd280 <__aeabi_ui2d>
   dabe0:	4602      	mov	r2, r0
   dabe2:	460b      	mov	r3, r1
   dabe4:	4620      	mov	r0, r4
   dabe6:	4629      	mov	r1, r5
   dabe8:	f002 fa0c 	bl	dd004 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   dabec:	220a      	movs	r2, #10
   dabee:	4604      	mov	r4, r0
   dabf0:	460d      	mov	r5, r1
   dabf2:	4630      	mov	r0, r6
   dabf4:	4641      	mov	r1, r8
   dabf6:	f7ff ff66 	bl	daac6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   dabfa:	4482      	add	sl, r0
  if (digits > 0) {
   dabfc:	b127      	cbz	r7, dac08 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   dabfe:	4923      	ldr	r1, [pc, #140]	; (dac8c <_ZN5Print10printFloatEdh+0x188>)
   dac00:	4630      	mov	r0, r6
   dac02:	f7fc fb63 	bl	d72cc <_ZN5Print5writeEPKc>
    n += print(".");
   dac06:	4482      	add	sl, r0
    remainder *= 10.0;
   dac08:	f8df 9084 	ldr.w	r9, [pc, #132]	; dac90 <_ZN5Print10printFloatEdh+0x18c>
   dac0c:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   dac10:	3f01      	subs	r7, #1
   dac12:	b2ff      	uxtb	r7, r7
   dac14:	2fff      	cmp	r7, #255	; 0xff
   dac16:	d089      	beq.n	dab2c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   dac18:	4642      	mov	r2, r8
   dac1a:	464b      	mov	r3, r9
   dac1c:	4620      	mov	r0, r4
   dac1e:	4629      	mov	r1, r5
   dac20:	f002 fba8 	bl	dd374 <__aeabi_dmul>
   dac24:	4604      	mov	r4, r0
   dac26:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   dac28:	f002 fe54 	bl	dd8d4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   dac2c:	f1b0 0b00 	subs.w	fp, r0, #0
   dac30:	da1a      	bge.n	dac68 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   dac32:	212d      	movs	r1, #45	; 0x2d
   dac34:	4630      	mov	r0, r6
   dac36:	f7ff ff2d 	bl	daa94 <_ZN5Print5printEc>
            val = -n;
   dac3a:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   dac3e:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   dac40:	220a      	movs	r2, #10
   dac42:	4630      	mov	r0, r6
   dac44:	9301      	str	r3, [sp, #4]
   dac46:	f7ff ff3e 	bl	daac6 <_ZN5Print11printNumberEmh>
   dac4a:	9b01      	ldr	r3, [sp, #4]
   dac4c:	4418      	add	r0, r3
    n += print(toPrint);
   dac4e:	4482      	add	sl, r0
    remainder -= toPrint;
   dac50:	4658      	mov	r0, fp
   dac52:	f002 fb25 	bl	dd2a0 <__aeabi_i2d>
   dac56:	4602      	mov	r2, r0
   dac58:	460b      	mov	r3, r1
   dac5a:	4620      	mov	r0, r4
   dac5c:	4629      	mov	r1, r5
   dac5e:	f002 f9d1 	bl	dd004 <__aeabi_dsub>
   dac62:	4604      	mov	r4, r0
   dac64:	460d      	mov	r5, r1
  while (digits-- > 0)
   dac66:	e7d3      	b.n	dac10 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   dac68:	4659      	mov	r1, fp
        size_t t = 0;
   dac6a:	2300      	movs	r3, #0
   dac6c:	e7e8      	b.n	dac40 <_ZN5Print10printFloatEdh+0x13c>
   dac6e:	bf00      	nop
   dac70:	000deef8 	.word	0x000deef8
   dac74:	7fefffff 	.word	0x7fefffff
   dac78:	000deefc 	.word	0x000deefc
   dac7c:	41efffff 	.word	0x41efffff
   dac80:	000def00 	.word	0x000def00
   dac84:	c1efffff 	.word	0xc1efffff
   dac88:	3fe00000 	.word	0x3fe00000
   dac8c:	000dee69 	.word	0x000dee69
   dac90:	40240000 	.word	0x40240000

000dac94 <_ZN5Print5printEfi>:
{
   dac94:	b538      	push	{r3, r4, r5, lr}
   dac96:	4604      	mov	r4, r0
   dac98:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   dac9c:	b2cd      	uxtb	r5, r1
   dac9e:	f002 fb11 	bl	dd2c4 <__aeabi_f2d>
   daca2:	ec41 0b10 	vmov	d0, r0, r1
   daca6:	4629      	mov	r1, r5
   daca8:	4620      	mov	r0, r4
}
   dacaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   dacae:	f7ff bf29 	b.w	dab04 <_ZN5Print10printFloatEdh>

000dacb2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   dacb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dacb6:	b086      	sub	sp, #24
   dacb8:	af00      	add	r7, sp, #0
   dacba:	4605      	mov	r5, r0
   dacbc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   dacbe:	1d38      	adds	r0, r7, #4
   dacc0:	2114      	movs	r1, #20
{
   dacc2:	4614      	mov	r4, r2
    va_copy(args2, args);
   dacc4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   dacc6:	f7fe fb0d 	bl	d92e4 <vsnprintf>

    if (n<bufsize)
   dacca:	2813      	cmp	r0, #19
   daccc:	d80e      	bhi.n	dacec <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   dacce:	1d39      	adds	r1, r7, #4
   dacd0:	4628      	mov	r0, r5
   dacd2:	f7fc fafb 	bl	d72cc <_ZN5Print5writeEPKc>
   dacd6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   dacd8:	b11e      	cbz	r6, dace2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   dacda:	4628      	mov	r0, r5
   dacdc:	f7ff fedd 	bl	daa9a <_ZN5Print7printlnEv>
   dace0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   dace2:	4620      	mov	r0, r4
   dace4:	3718      	adds	r7, #24
   dace6:	46bd      	mov	sp, r7
   dace8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   dacec:	f100 0308 	add.w	r3, r0, #8
   dacf0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   dacf4:	46e8      	mov	r8, sp
        char bigger[n+1];
   dacf6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   dacfa:	4622      	mov	r2, r4
   dacfc:	1c41      	adds	r1, r0, #1
   dacfe:	683b      	ldr	r3, [r7, #0]
   dad00:	4668      	mov	r0, sp
   dad02:	f7fe faef 	bl	d92e4 <vsnprintf>
  return write(str);
   dad06:	4669      	mov	r1, sp
   dad08:	4628      	mov	r0, r5
   dad0a:	f7fc fadf 	bl	d72cc <_ZN5Print5writeEPKc>
   dad0e:	4604      	mov	r4, r0
   dad10:	46c5      	mov	sp, r8
   dad12:	e7e1      	b.n	dacd8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000dad14 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   dad14:	4b01      	ldr	r3, [pc, #4]	; (dad1c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dad16:	4a02      	ldr	r2, [pc, #8]	; (dad20 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dad18:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   dad1a:	4770      	bx	lr
   dad1c:	2003e5ec 	.word	0x2003e5ec
   dad20:	000def04 	.word	0x000def04

000dad24 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dad24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   dad28:	4a15      	ldr	r2, [pc, #84]	; (dad80 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dad2a:	f8df 8060 	ldr.w	r8, [pc, #96]	; dad8c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   dad2e:	e9d2 3200 	ldrd	r3, r2, [r2]
   dad32:	18c0      	adds	r0, r0, r3
   dad34:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   dad38:	4a12      	ldr	r2, [pc, #72]	; (dad84 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   dad3a:	e9d2 3200 	ldrd	r3, r2, [r2]
   dad3e:	18c6      	adds	r6, r0, r3
   dad40:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   dad44:	e9d8 2300 	ldrd	r2, r3, [r8]
   dad48:	42bb      	cmp	r3, r7
   dad4a:	bf08      	it	eq
   dad4c:	42b2      	cmpeq	r2, r6
{
   dad4e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   dad50:	d013      	beq.n	dad7a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   dad52:	a903      	add	r1, sp, #12
   dad54:	4668      	mov	r0, sp
   dad56:	e9cd 6700 	strd	r6, r7, [sp]
   dad5a:	f7fe fae3 	bl	d9324 <localtime_r>
	calendar_time.tm_year += 1900;
   dad5e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dad60:	4d09      	ldr	r5, [pc, #36]	; (dad88 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   dad62:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dad66:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   dad68:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dad6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dad6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dad6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dad70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dad72:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dad76:	6823      	ldr	r3, [r4, #0]
   dad78:	602b      	str	r3, [r5, #0]
    }
}
   dad7a:	b00c      	add	sp, #48	; 0x30
   dad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dad80:	2003e620 	.word	0x2003e620
   dad84:	2003e618 	.word	0x2003e618
   dad88:	2003e5f4 	.word	0x2003e5f4
   dad8c:	2003e628 	.word	0x2003e628

000dad90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   dad90:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dad92:	2000      	movs	r0, #0
   dad94:	f7fe fa76 	bl	d9284 <spark_sync_time_pending>
   dad98:	b128      	cbz	r0, dada6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dad9a:	f7fe fa5b 	bl	d9254 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dad9e:	f080 0001 	eor.w	r0, r0, #1
   dada2:	b2c0      	uxtb	r0, r0
    }
   dada4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dada6:	2001      	movs	r0, #1
   dada8:	e7fc      	b.n	dada4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000dadac <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dadac:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dadae:	f7ff ffb9 	bl	dad24 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dadb2:	4b02      	ldr	r3, [pc, #8]	; (dadbc <_ZN9TimeClass5monthEx+0x10>)
   dadb4:	6918      	ldr	r0, [r3, #16]
}
   dadb6:	3001      	adds	r0, #1
   dadb8:	bd08      	pop	{r3, pc}
   dadba:	bf00      	nop
   dadbc:	2003e5f4 	.word	0x2003e5f4

000dadc0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   dadc0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   dadc2:	2000      	movs	r0, #0
   dadc4:	f7fd ff6a 	bl	d8c9c <hal_rtc_time_is_valid>
    if (rtcstate)
   dadc8:	4604      	mov	r4, r0
   dadca:	b9a0      	cbnz	r0, dadf6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dadcc:	f7fe f98e 	bl	d90ec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dadd0:	2801      	cmp	r0, #1
   dadd2:	d110      	bne.n	dadf6 <_ZN9TimeClass7isValidEv+0x36>
   dadd4:	4620      	mov	r0, r4
   dadd6:	f7fe f9a9 	bl	d912c <system_thread_get_state>
   dadda:	b960      	cbnz	r0, dadf6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   daddc:	f7ff ffd8 	bl	dad90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dade0:	b910      	cbnz	r0, dade8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   dade2:	f7fe fa2f 	bl	d9244 <spark_process>
        while (_while() && !_condition()) {
   dade6:	e7f9      	b.n	daddc <_ZN9TimeClass7isValidEv+0x1c>
   dade8:	f7ff ffd2 	bl	dad90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   dadec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   dadf0:	2000      	movs	r0, #0
   dadf2:	f7fd bf53 	b.w	d8c9c <hal_rtc_time_is_valid>
}
   dadf6:	4620      	mov	r0, r4
   dadf8:	bd10      	pop	{r4, pc}

000dadfa <_ZN9TimeClass3nowEv>:
{
   dadfa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   dadfc:	f7ff ffe0 	bl	dadc0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   dae00:	2210      	movs	r2, #16
   dae02:	2100      	movs	r1, #0
   dae04:	4668      	mov	r0, sp
   dae06:	f003 f907 	bl	de018 <memset>
    hal_rtc_get_time(&tv, nullptr);
   dae0a:	2100      	movs	r1, #0
   dae0c:	4668      	mov	r0, sp
   dae0e:	f7fd ff55 	bl	d8cbc <hal_rtc_get_time>
}
   dae12:	9800      	ldr	r0, [sp, #0]
   dae14:	b005      	add	sp, #20
   dae16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dae1c <_ZN9TimeClass4hourEv>:
{
   dae1c:	b508      	push	{r3, lr}
	return hour(now());
   dae1e:	f7ff ffec 	bl	dadfa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dae22:	17c1      	asrs	r1, r0, #31
   dae24:	f7ff ff7e 	bl	dad24 <_ZL22Refresh_UnixTime_Cachex>
}
   dae28:	4b01      	ldr	r3, [pc, #4]	; (dae30 <_ZN9TimeClass4hourEv+0x14>)
   dae2a:	6898      	ldr	r0, [r3, #8]
   dae2c:	bd08      	pop	{r3, pc}
   dae2e:	bf00      	nop
   dae30:	2003e5f4 	.word	0x2003e5f4

000dae34 <_ZN9TimeClass6minuteEv>:
{
   dae34:	b508      	push	{r3, lr}
	return minute(now());
   dae36:	f7ff ffe0 	bl	dadfa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dae3a:	17c1      	asrs	r1, r0, #31
   dae3c:	f7ff ff72 	bl	dad24 <_ZL22Refresh_UnixTime_Cachex>
}
   dae40:	4b01      	ldr	r3, [pc, #4]	; (dae48 <_ZN9TimeClass6minuteEv+0x14>)
   dae42:	6858      	ldr	r0, [r3, #4]
   dae44:	bd08      	pop	{r3, pc}
   dae46:	bf00      	nop
   dae48:	2003e5f4 	.word	0x2003e5f4

000dae4c <_ZN9TimeClass6secondEv>:
{
   dae4c:	b508      	push	{r3, lr}
	return second(now());
   dae4e:	f7ff ffd4 	bl	dadfa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dae52:	17c1      	asrs	r1, r0, #31
   dae54:	f7ff ff66 	bl	dad24 <_ZL22Refresh_UnixTime_Cachex>
}
   dae58:	4b01      	ldr	r3, [pc, #4]	; (dae60 <_ZN9TimeClass6secondEv+0x14>)
   dae5a:	6818      	ldr	r0, [r3, #0]
   dae5c:	bd08      	pop	{r3, pc}
   dae5e:	bf00      	nop
   dae60:	2003e5f4 	.word	0x2003e5f4

000dae64 <_ZN9TimeClass3dayEv>:
{
   dae64:	b508      	push	{r3, lr}
	return day(now());
   dae66:	f7ff ffc8 	bl	dadfa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dae6a:	17c1      	asrs	r1, r0, #31
   dae6c:	f7ff ff5a 	bl	dad24 <_ZL22Refresh_UnixTime_Cachex>
}
   dae70:	4b01      	ldr	r3, [pc, #4]	; (dae78 <_ZN9TimeClass3dayEv+0x14>)
   dae72:	68d8      	ldr	r0, [r3, #12]
   dae74:	bd08      	pop	{r3, pc}
   dae76:	bf00      	nop
   dae78:	2003e5f4 	.word	0x2003e5f4

000dae7c <_ZN9TimeClass5monthEv>:
{
   dae7c:	b508      	push	{r3, lr}
	return month(now());
   dae7e:	f7ff ffbc 	bl	dadfa <_ZN9TimeClass3nowEv>
}
   dae82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   dae86:	17c1      	asrs	r1, r0, #31
   dae88:	f7ff bf90 	b.w	dadac <_ZN9TimeClass5monthEx>

000dae8c <_ZN9TimeClass4yearEv>:
{
   dae8c:	b508      	push	{r3, lr}
	return year(now());
   dae8e:	f7ff ffb4 	bl	dadfa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dae92:	17c1      	asrs	r1, r0, #31
   dae94:	f7ff ff46 	bl	dad24 <_ZL22Refresh_UnixTime_Cachex>
}
   dae98:	4b01      	ldr	r3, [pc, #4]	; (daea0 <_ZN9TimeClass4yearEv+0x14>)
   dae9a:	6958      	ldr	r0, [r3, #20]
   dae9c:	bd08      	pop	{r3, pc}
   dae9e:	bf00      	nop
   daea0:	2003e5f4 	.word	0x2003e5f4

000daea4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   daea4:	4b02      	ldr	r3, [pc, #8]	; (daeb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   daea6:	681a      	ldr	r2, [r3, #0]
   daea8:	4b02      	ldr	r3, [pc, #8]	; (daeb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   daeaa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   daeac:	4770      	bx	lr
   daeae:	bf00      	nop
   daeb0:	2003ddb0 	.word	0x2003ddb0
   daeb4:	2003e5f0 	.word	0x2003e5f0

000daeb8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   daeb8:	2100      	movs	r1, #0
   daeba:	f7fe b927 	b.w	d910c <system_delay_ms>

000daebe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   daebe:	b510      	push	{r4, lr}
   daec0:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   daec2:	f7fe fd6a 	bl	d999a <_ZNSt14_Function_baseD1Ev>
   daec6:	4620      	mov	r0, r4
   daec8:	bd10      	pop	{r4, pc}
	...

000daecc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   daecc:	4803      	ldr	r0, [pc, #12]	; (daedc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   daece:	4a04      	ldr	r2, [pc, #16]	; (daee0 <_GLOBAL__sub_I_RGB+0x14>)
   daed0:	4904      	ldr	r1, [pc, #16]	; (daee4 <_GLOBAL__sub_I_RGB+0x18>)
   daed2:	2300      	movs	r3, #0
   daed4:	6083      	str	r3, [r0, #8]
   daed6:	f000 bdd5 	b.w	dba84 <__aeabi_atexit>
   daeda:	bf00      	nop
   daedc:	2003e630 	.word	0x2003e630
   daee0:	2003de20 	.word	0x2003de20
   daee4:	000daebf 	.word	0x000daebf

000daee8 <_ZN14CellularSignalD1Ev>:
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   daee8:	4770      	bx	lr

000daeea <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   daeea:	7b00      	ldrb	r0, [r0, #12]
   daeec:	4770      	bx	lr

000daeee <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   daeee:	7b03      	ldrb	r3, [r0, #12]
   daef0:	b14b      	cbz	r3, daf06 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   daef2:	6903      	ldr	r3, [r0, #16]
   daef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   daef8:	d005      	beq.n	daf06 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   daefa:	6980      	ldr	r0, [r0, #24]
   daefc:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   daf00:	bf18      	it	ne
   daf02:	2001      	movne	r0, #1
   daf04:	4770      	bx	lr
   daf06:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   daf08:	4770      	bx	lr

000daf0a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   daf0a:	6803      	ldr	r3, [r0, #0]
   daf0c:	6a1b      	ldr	r3, [r3, #32]
   daf0e:	4718      	bx	r3

000daf10 <_ZNK14CellularSignal7printToER5Print>:
{
   daf10:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   daf12:	6803      	ldr	r3, [r0, #0]
{
   daf14:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   daf16:	691b      	ldr	r3, [r3, #16]
{
   daf18:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   daf1a:	4798      	blx	r3
   daf1c:	2102      	movs	r1, #2
   daf1e:	4628      	mov	r0, r5
   daf20:	f7ff feb8 	bl	dac94 <_ZN5Print5printEfi>
    n += p.print(',');
   daf24:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   daf26:	4604      	mov	r4, r0
    n += p.print(',');
   daf28:	4628      	mov	r0, r5
   daf2a:	f7ff fdb3 	bl	daa94 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   daf2e:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   daf30:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   daf32:	699b      	ldr	r3, [r3, #24]
   daf34:	4630      	mov	r0, r6
   daf36:	4798      	blx	r3
   daf38:	2102      	movs	r1, #2
   daf3a:	4628      	mov	r0, r5
   daf3c:	f7ff feaa 	bl	dac94 <_ZN5Print5printEfi>
}
   daf40:	4420      	add	r0, r4
   daf42:	bd70      	pop	{r4, r5, r6, pc}

000daf44 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   daf44:	f1a0 0004 	sub.w	r0, r0, #4
   daf48:	f7ff bfe2 	b.w	daf10 <_ZNK14CellularSignal7printToER5Print>

000daf4c <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   daf4c:	b510      	push	{r4, lr}
   daf4e:	2120      	movs	r1, #32
   daf50:	4604      	mov	r4, r0
   daf52:	f000 fd9c 	bl	dba8e <_ZdlPvj>
   daf56:	4620      	mov	r0, r4
   daf58:	bd10      	pop	{r4, pc}
	...

000daf5c <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   daf5c:	7b03      	ldrb	r3, [r0, #12]
   daf5e:	b17b      	cbz	r3, daf80 <_ZNK14CellularSignal11getStrengthEv+0x24>
   daf60:	6943      	ldr	r3, [r0, #20]
   daf62:	2b00      	cmp	r3, #0
   daf64:	db0c      	blt.n	daf80 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   daf66:	ee07 3a90 	vmov	s15, r3
   daf6a:	ed9f 7a07 	vldr	s14, [pc, #28]	; daf88 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   daf6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   daf72:	ee87 0a87 	vdiv.f32	s0, s15, s14
   daf76:	eddf 7a05 	vldr	s15, [pc, #20]	; daf8c <_ZNK14CellularSignal11getStrengthEv+0x30>
   daf7a:	ee20 0a27 	vmul.f32	s0, s0, s15
   daf7e:	4770      	bx	lr
    return -1.0f;
   daf80:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   daf84:	4770      	bx	lr
   daf86:	bf00      	nop
   daf88:	477fff00 	.word	0x477fff00
   daf8c:	42c80000 	.word	0x42c80000

000daf90 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   daf90:	7b03      	ldrb	r3, [r0, #12]
   daf92:	b163      	cbz	r3, dafae <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   daf94:	6903      	ldr	r3, [r0, #16]
   daf96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   daf9a:	d008      	beq.n	dafae <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   daf9c:	ee07 3a90 	vmov	s15, r3
   dafa0:	ed9f 7a04 	vldr	s14, [pc, #16]	; dafb4 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   dafa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dafa8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dafac:	4770      	bx	lr
    return 0.0f;
   dafae:	ed9f 0a02 	vldr	s0, [pc, #8]	; dafb8 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   dafb2:	4770      	bx	lr
   dafb4:	42c80000 	.word	0x42c80000
   dafb8:	00000000 	.word	0x00000000

000dafbc <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   dafbc:	7b03      	ldrb	r3, [r0, #12]
   dafbe:	b17b      	cbz	r3, dafe0 <_ZNK14CellularSignal10getQualityEv+0x24>
   dafc0:	69c3      	ldr	r3, [r0, #28]
   dafc2:	2b00      	cmp	r3, #0
   dafc4:	db0c      	blt.n	dafe0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   dafc6:	ee07 3a90 	vmov	s15, r3
   dafca:	ed9f 7a07 	vldr	s14, [pc, #28]	; dafe8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   dafce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dafd2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dafd6:	eddf 7a05 	vldr	s15, [pc, #20]	; dafec <_ZNK14CellularSignal10getQualityEv+0x30>
   dafda:	ee20 0a27 	vmul.f32	s0, s0, s15
   dafde:	4770      	bx	lr
    return -1.0f;
   dafe0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dafe4:	4770      	bx	lr
   dafe6:	bf00      	nop
   dafe8:	477fff00 	.word	0x477fff00
   dafec:	42c80000 	.word	0x42c80000

000daff0 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   daff0:	7b03      	ldrb	r3, [r0, #12]
   daff2:	b163      	cbz	r3, db00e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   daff4:	6983      	ldr	r3, [r0, #24]
   daff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   daffa:	d008      	beq.n	db00e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   daffc:	ee07 3a90 	vmov	s15, r3
   db000:	ed9f 7a04 	vldr	s14, [pc, #16]	; db014 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   db004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db008:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db00c:	4770      	bx	lr
    return 0.0f;
   db00e:	ed9f 0a02 	vldr	s0, [pc, #8]	; db018 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   db012:	4770      	bx	lr
   db014:	42c80000 	.word	0x42c80000
   db018:	00000000 	.word	0x00000000

000db01c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   db01c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   db01e:	460d      	mov	r5, r1
   db020:	f100 0408 	add.w	r4, r0, #8
   db024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db028:	e895 0003 	ldmia.w	r5, {r0, r1}
   db02c:	e884 0003 	stmia.w	r4, {r0, r1}
}
   db030:	2001      	movs	r0, #1
   db032:	bd30      	pop	{r4, r5, pc}

000db034 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   db034:	6800      	ldr	r0, [r0, #0]
   db036:	f000 bb4b 	b.w	db6d0 <_ZN7TwoWire4lockEv>

000db03a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   db03a:	b510      	push	{r4, lr}
   db03c:	4604      	mov	r4, r0
      lock_(_lock) {
   db03e:	6001      	str	r1, [r0, #0]
   db040:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   db042:	b10a      	cbz	r2, db048 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   db044:	f7ff fff6 	bl	db034 <_ZN9FuelGauge4lockEv>
}
   db048:	4620      	mov	r0, r4
   db04a:	bd10      	pop	{r4, pc}

000db04c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   db04c:	b513      	push	{r0, r1, r4, lr}
   db04e:	4604      	mov	r4, r0
   db050:	9101      	str	r1, [sp, #4]
            return &Wire1;
   db052:	f000 fcef 	bl	dba34 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   db056:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   db058:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   db05a:	4620      	mov	r0, r4
   db05c:	f7ff ffed 	bl	db03a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   db060:	4620      	mov	r0, r4
   db062:	b002      	add	sp, #8
   db064:	bd10      	pop	{r4, pc}

000db066 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   db066:	6800      	ldr	r0, [r0, #0]
   db068:	f000 bb3b 	b.w	db6e2 <_ZN7TwoWire6unlockEv>

000db06c <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   db06c:	b510      	push	{r4, lr}
    if (lock_) {
   db06e:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   db070:	4604      	mov	r4, r0
    if (lock_) {
   db072:	b10b      	cbz	r3, db078 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   db074:	f7ff fff7 	bl	db066 <_ZN9FuelGauge6unlockEv>
}
   db078:	4620      	mov	r0, r4
   db07a:	bd10      	pop	{r4, pc}

000db07c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db07c:	4b01      	ldr	r3, [pc, #4]	; (db084 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db07e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db080:	4770      	bx	lr
   db082:	bf00      	nop
   db084:	2003ddb8 	.word	0x2003ddb8

000db088 <serialEventRun>:
{
   db088:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db08a:	4b0b      	ldr	r3, [pc, #44]	; (db0b8 <serialEventRun+0x30>)
   db08c:	b143      	cbz	r3, db0a0 <serialEventRun+0x18>
   db08e:	f000 f983 	bl	db398 <_Z16_fetch_usbserialv>
   db092:	6803      	ldr	r3, [r0, #0]
   db094:	691b      	ldr	r3, [r3, #16]
   db096:	4798      	blx	r3
   db098:	2800      	cmp	r0, #0
   db09a:	dd01      	ble.n	db0a0 <serialEventRun+0x18>
        serialEvent();
   db09c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db0a0:	4b06      	ldr	r3, [pc, #24]	; (db0bc <serialEventRun+0x34>)
   db0a2:	b143      	cbz	r3, db0b6 <serialEventRun+0x2e>
   db0a4:	f000 fa6c 	bl	db580 <_Z22__fetch_global_Serial1v>
   db0a8:	6803      	ldr	r3, [r0, #0]
   db0aa:	691b      	ldr	r3, [r3, #16]
   db0ac:	4798      	blx	r3
   db0ae:	2800      	cmp	r0, #0
   db0b0:	dd01      	ble.n	db0b6 <serialEventRun+0x2e>
        serialEvent1();
   db0b2:	f3af 8000 	nop.w
}
   db0b6:	bd08      	pop	{r3, pc}
	...

000db0c0 <_post_loop>:
{
   db0c0:	b508      	push	{r3, lr}
	serialEventRun();
   db0c2:	f7ff ffe1 	bl	db088 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db0c6:	f7fd fdc9 	bl	d8c5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db0ca:	4b01      	ldr	r3, [pc, #4]	; (db0d0 <_post_loop+0x10>)
   db0cc:	6018      	str	r0, [r3, #0]
}
   db0ce:	bd08      	pop	{r3, pc}
   db0d0:	2003e7b8 	.word	0x2003e7b8

000db0d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db0d4:	4802      	ldr	r0, [pc, #8]	; (db0e0 <_Z33system_initialize_user_backup_ramv+0xc>)
   db0d6:	4a03      	ldr	r2, [pc, #12]	; (db0e4 <_Z33system_initialize_user_backup_ramv+0x10>)
   db0d8:	4903      	ldr	r1, [pc, #12]	; (db0e8 <_Z33system_initialize_user_backup_ramv+0x14>)
   db0da:	1a12      	subs	r2, r2, r0
   db0dc:	f002 bf74 	b.w	ddfc8 <memcpy>
   db0e0:	2003f400 	.word	0x2003f400
   db0e4:	2003f404 	.word	0x2003f404
   db0e8:	000df2b8 	.word	0x000df2b8

000db0ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db0ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db0ee:	2300      	movs	r3, #0
   db0f0:	9300      	str	r3, [sp, #0]
   db0f2:	461a      	mov	r2, r3
   db0f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db0f8:	f7fe f82a 	bl	d9150 <system_ctrl_set_result>
}
   db0fc:	b003      	add	sp, #12
   db0fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db104 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db104:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db106:	8843      	ldrh	r3, [r0, #2]
   db108:	2b0a      	cmp	r3, #10
   db10a:	d008      	beq.n	db11e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db10c:	2b50      	cmp	r3, #80	; 0x50
   db10e:	d10b      	bne.n	db128 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db110:	4b09      	ldr	r3, [pc, #36]	; (db138 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db112:	681b      	ldr	r3, [r3, #0]
   db114:	b14b      	cbz	r3, db12a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db116:	b003      	add	sp, #12
   db118:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db11c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db11e:	f7ff ffe5 	bl	db0ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db122:	b003      	add	sp, #12
   db124:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db128:	2300      	movs	r3, #0
   db12a:	9300      	str	r3, [sp, #0]
   db12c:	461a      	mov	r2, r3
   db12e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db132:	f7fe f80d 	bl	d9150 <system_ctrl_set_result>
}
   db136:	e7f4      	b.n	db122 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db138:	2003e644 	.word	0x2003e644

000db13c <module_user_init_hook>:
{
   db13c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db13e:	4c12      	ldr	r4, [pc, #72]	; (db188 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db140:	4812      	ldr	r0, [pc, #72]	; (db18c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db142:	4d13      	ldr	r5, [pc, #76]	; (db190 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db144:	2100      	movs	r1, #0
   db146:	f7fe f8e5 	bl	d9314 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db14a:	6823      	ldr	r3, [r4, #0]
   db14c:	42ab      	cmp	r3, r5
   db14e:	4b11      	ldr	r3, [pc, #68]	; (db194 <module_user_init_hook+0x58>)
   db150:	bf0c      	ite	eq
   db152:	2201      	moveq	r2, #1
   db154:	2200      	movne	r2, #0
   db156:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db158:	d002      	beq.n	db160 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   db15a:	f7ff ffbb 	bl	db0d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   db15e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db160:	f7fd fd64 	bl	d8c2c <HAL_RNG_GetRandomNumber>
   db164:	4604      	mov	r4, r0
    srand(seed);
   db166:	f002 ff5f 	bl	de028 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db16a:	4b0b      	ldr	r3, [pc, #44]	; (db198 <module_user_init_hook+0x5c>)
   db16c:	b113      	cbz	r3, db174 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   db16e:	4620      	mov	r0, r4
   db170:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db174:	2100      	movs	r1, #0
   db176:	4808      	ldr	r0, [pc, #32]	; (db198 <module_user_init_hook+0x5c>)
   db178:	f7fe f894 	bl	d92a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db17c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db180:	4806      	ldr	r0, [pc, #24]	; (db19c <module_user_init_hook+0x60>)
   db182:	2100      	movs	r1, #0
   db184:	f7fd bfda 	b.w	d913c <system_ctrl_set_app_request_handler>
   db188:	2003f400 	.word	0x2003f400
   db18c:	000db07d 	.word	0x000db07d
   db190:	9a271c1e 	.word	0x9a271c1e
   db194:	2003e640 	.word	0x2003e640
   db198:	00000000 	.word	0x00000000
   db19c:	000db105 	.word	0x000db105

000db1a0 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   db1a0:	b510      	push	{r4, lr}
   db1a2:	b088      	sub	sp, #32
   db1a4:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   db1a6:	4668      	mov	r0, sp
   db1a8:	f7fe fa2d 	bl	d9606 <_ZN6StringC1EPKc>
    return (*fn)(p);
   db1ac:	4669      	mov	r1, sp
   db1ae:	a804      	add	r0, sp, #16
   db1b0:	f7fe fa69 	bl	d9686 <_ZN6StringC1ERKS_>
   db1b4:	a804      	add	r0, sp, #16
   db1b6:	47a0      	blx	r4
   db1b8:	4604      	mov	r4, r0
   db1ba:	a804      	add	r0, sp, #16
   db1bc:	f7fe f9d8 	bl	d9570 <_ZN6StringD1Ev>
    String p(param);
   db1c0:	4668      	mov	r0, sp
   db1c2:	f7fe f9d5 	bl	d9570 <_ZN6StringD1Ev>
}
   db1c6:	4620      	mov	r0, r4
   db1c8:	b008      	add	sp, #32
   db1ca:	bd10      	pop	{r4, pc}

000db1cc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   db1cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   db1ce:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   db1d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   db1d4:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   db1d6:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   db1d8:	461a      	mov	r2, r3
   db1da:	4669      	mov	r1, sp
   db1dc:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   db1de:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   db1e2:	f8ad 4000 	strh.w	r4, [sp]
   db1e6:	f7fe f825 	bl	d9234 <spark_function>
}
   db1ea:	b004      	add	sp, #16
   db1ec:	bd10      	pop	{r4, pc}

000db1ee <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   db1ee:	4770      	bx	lr

000db1f0 <_ZN9IPAddressD0Ev>:
   db1f0:	b510      	push	{r4, lr}
   db1f2:	2118      	movs	r1, #24
   db1f4:	4604      	mov	r4, r0
   db1f6:	f000 fc4a 	bl	dba8e <_ZdlPvj>
   db1fa:	4620      	mov	r0, r4
   db1fc:	bd10      	pop	{r4, pc}

000db1fe <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   db1fe:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   db200:	7d03      	ldrb	r3, [r0, #20]
   db202:	2b06      	cmp	r3, #6
{
   db204:	b08d      	sub	sp, #52	; 0x34
   db206:	460e      	mov	r6, r1
   db208:	f100 0704 	add.w	r7, r0, #4
   db20c:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   db210:	d012      	beq.n	db238 <_ZNK9IPAddress7printToER5Print+0x3a>
   db212:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   db216:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   db21a:	220a      	movs	r2, #10
   db21c:	4630      	mov	r0, r6
   db21e:	f7ff fc52 	bl	daac6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   db222:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   db224:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   db226:	d019      	beq.n	db25c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   db228:	2c00      	cmp	r4, #0
   db22a:	d0f4      	beq.n	db216 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   db22c:	212e      	movs	r1, #46	; 0x2e
   db22e:	4630      	mov	r0, r6
   db230:	f7ff fc30 	bl	daa94 <_ZN5Print5printEc>
   db234:	4404      	add	r4, r0
   db236:	e7ee      	b.n	db216 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db238:	232f      	movs	r3, #47	; 0x2f
   db23a:	466a      	mov	r2, sp
   db23c:	4639      	mov	r1, r7
   db23e:	200a      	movs	r0, #10
		buf[0] = 0;
   db240:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db244:	f7fd fddc 	bl	d8e00 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   db248:	4668      	mov	r0, sp
   db24a:	f002 ff30 	bl	de0ae <strlen>
   db24e:	6833      	ldr	r3, [r6, #0]
   db250:	4602      	mov	r2, r0
   db252:	68db      	ldr	r3, [r3, #12]
   db254:	4669      	mov	r1, sp
   db256:	4630      	mov	r0, r6
   db258:	4798      	blx	r3
   db25a:	4604      	mov	r4, r0
    }
    return n;
}
   db25c:	4620      	mov	r0, r4
   db25e:	b00d      	add	sp, #52	; 0x34
   db260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000db264 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   db264:	b510      	push	{r4, lr}
   db266:	4b05      	ldr	r3, [pc, #20]	; (db27c <_ZN9IPAddressC1Ev+0x18>)
   db268:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   db26a:	2211      	movs	r2, #17
   db26c:	f840 3b04 	str.w	r3, [r0], #4
   db270:	2100      	movs	r1, #0
   db272:	f002 fed1 	bl	de018 <memset>
}
   db276:	4620      	mov	r0, r4
   db278:	bd10      	pop	{r4, pc}
   db27a:	bf00      	nop
   db27c:	000def68 	.word	0x000def68

000db280 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   db280:	4603      	mov	r3, r0
   db282:	4a07      	ldr	r2, [pc, #28]	; (db2a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   db284:	b510      	push	{r4, lr}
   db286:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   db28a:	f101 0210 	add.w	r2, r1, #16
   db28e:	f851 4b04 	ldr.w	r4, [r1], #4
   db292:	f843 4b04 	str.w	r4, [r3], #4
   db296:	4291      	cmp	r1, r2
   db298:	d1f9      	bne.n	db28e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   db29a:	780a      	ldrb	r2, [r1, #0]
   db29c:	701a      	strb	r2, [r3, #0]
}
   db29e:	bd10      	pop	{r4, pc}
   db2a0:	000def68 	.word	0x000def68

000db2a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   db2a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   db2a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   db2aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   db2ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   db2b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   db2b6:	2304      	movs	r3, #4
   db2b8:	6041      	str	r1, [r0, #4]
   db2ba:	7503      	strb	r3, [r0, #20]
}
   db2bc:	bd10      	pop	{r4, pc}
	...

000db2c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   db2c0:	b513      	push	{r0, r1, r4, lr}
   db2c2:	4b05      	ldr	r3, [pc, #20]	; (db2d8 <_ZN9IPAddressC1EPKh+0x18>)
   db2c4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   db2c6:	78cb      	ldrb	r3, [r1, #3]
   db2c8:	9300      	str	r3, [sp, #0]
   db2ca:	788b      	ldrb	r3, [r1, #2]
   db2cc:	784a      	ldrb	r2, [r1, #1]
   db2ce:	7809      	ldrb	r1, [r1, #0]
   db2d0:	f7ff ffe8 	bl	db2a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   db2d4:	b002      	add	sp, #8
   db2d6:	bd10      	pop	{r4, pc}
   db2d8:	000def68 	.word	0x000def68

000db2dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db2dc:	7441      	strb	r1, [r0, #17]
}
   db2de:	4770      	bx	lr

000db2e0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db2e0:	4770      	bx	lr

000db2e2 <_ZN9USBSerial4readEv>:
{
   db2e2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db2e4:	2100      	movs	r1, #0
   db2e6:	7c00      	ldrb	r0, [r0, #16]
   db2e8:	f7fd fece 	bl	d9088 <HAL_USB_USART_Receive_Data>
}
   db2ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db2f0:	bd08      	pop	{r3, pc}

000db2f2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   db2f2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db2f4:	2101      	movs	r1, #1
   db2f6:	7c00      	ldrb	r0, [r0, #16]
   db2f8:	f7fd fec6 	bl	d9088 <HAL_USB_USART_Receive_Data>
}
   db2fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db300:	bd08      	pop	{r3, pc}

000db302 <_ZN9USBSerial17availableForWriteEv>:
{
   db302:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db304:	7c00      	ldrb	r0, [r0, #16]
   db306:	f7fd feb7 	bl	d9078 <HAL_USB_USART_Available_Data_For_Write>
}
   db30a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db30e:	bd08      	pop	{r3, pc}

000db310 <_ZN9USBSerial9availableEv>:
{
   db310:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db312:	7c00      	ldrb	r0, [r0, #16]
   db314:	f7fd fea8 	bl	d9068 <HAL_USB_USART_Available_Data>
}
   db318:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db31c:	bd08      	pop	{r3, pc}

000db31e <_ZN9USBSerial5writeEh>:
{
   db31e:	b513      	push	{r0, r1, r4, lr}
   db320:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db322:	7c00      	ldrb	r0, [r0, #16]
{
   db324:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db326:	f7fd fea7 	bl	d9078 <HAL_USB_USART_Available_Data_For_Write>
   db32a:	2800      	cmp	r0, #0
   db32c:	9901      	ldr	r1, [sp, #4]
   db32e:	dc01      	bgt.n	db334 <_ZN9USBSerial5writeEh+0x16>
   db330:	7c60      	ldrb	r0, [r4, #17]
   db332:	b120      	cbz	r0, db33e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db334:	7c20      	ldrb	r0, [r4, #16]
   db336:	f7fd feaf 	bl	d9098 <HAL_USB_USART_Send_Data>
   db33a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db33e:	b002      	add	sp, #8
   db340:	bd10      	pop	{r4, pc}

000db342 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db342:	7c00      	ldrb	r0, [r0, #16]
   db344:	f7fd beb0 	b.w	d90a8 <HAL_USB_USART_Flush_Data>

000db348 <_ZN9USBSerialD0Ev>:
   db348:	b510      	push	{r4, lr}
   db34a:	2114      	movs	r1, #20
   db34c:	4604      	mov	r4, r0
   db34e:	f000 fb9e 	bl	dba8e <_ZdlPvj>
   db352:	4620      	mov	r0, r4
   db354:	bd10      	pop	{r4, pc}
	...

000db358 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db358:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   db35a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db35e:	4604      	mov	r4, r0
   db360:	4608      	mov	r0, r1
   db362:	2100      	movs	r1, #0
   db364:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db368:	4b04      	ldr	r3, [pc, #16]	; (db37c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db36a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db36c:	2301      	movs	r3, #1
  _serial = serial;
   db36e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db370:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db372:	4611      	mov	r1, r2
   db374:	f7fd fe68 	bl	d9048 <HAL_USB_USART_Init>
}
   db378:	4620      	mov	r0, r4
   db37a:	bd10      	pop	{r4, pc}
   db37c:	000def7c 	.word	0x000def7c

000db380 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db380:	7c00      	ldrb	r0, [r0, #16]
   db382:	2200      	movs	r2, #0
   db384:	f7fd be68 	b.w	d9058 <HAL_USB_USART_Begin>

000db388 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db388:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db38a:	2214      	movs	r2, #20
{
   db38c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db38e:	2100      	movs	r1, #0
   db390:	f002 fe42 	bl	de018 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db394:	4620      	mov	r0, r4
   db396:	bd10      	pop	{r4, pc}

000db398 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db398:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db39a:	4c10      	ldr	r4, [pc, #64]	; (db3dc <_Z16_fetch_usbserialv+0x44>)
{
   db39c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db39e:	a803      	add	r0, sp, #12
   db3a0:	f7ff fff2 	bl	db388 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db3a4:	7821      	ldrb	r1, [r4, #0]
   db3a6:	f3bf 8f5b 	dmb	ish
   db3aa:	f011 0101 	ands.w	r1, r1, #1
   db3ae:	d111      	bne.n	db3d4 <_Z16_fetch_usbserialv+0x3c>
   db3b0:	4620      	mov	r0, r4
   db3b2:	9101      	str	r1, [sp, #4]
   db3b4:	f7f8 fe80 	bl	d40b8 <__cxa_guard_acquire>
   db3b8:	9901      	ldr	r1, [sp, #4]
   db3ba:	b158      	cbz	r0, db3d4 <_Z16_fetch_usbserialv+0x3c>
   db3bc:	aa03      	add	r2, sp, #12
   db3be:	4808      	ldr	r0, [pc, #32]	; (db3e0 <_Z16_fetch_usbserialv+0x48>)
   db3c0:	f7ff ffca 	bl	db358 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db3c4:	4620      	mov	r0, r4
   db3c6:	f7f8 fe7c 	bl	d40c2 <__cxa_guard_release>
   db3ca:	4a06      	ldr	r2, [pc, #24]	; (db3e4 <_Z16_fetch_usbserialv+0x4c>)
   db3cc:	4906      	ldr	r1, [pc, #24]	; (db3e8 <_Z16_fetch_usbserialv+0x50>)
   db3ce:	4804      	ldr	r0, [pc, #16]	; (db3e0 <_Z16_fetch_usbserialv+0x48>)
   db3d0:	f000 fb58 	bl	dba84 <__aeabi_atexit>
	return _usbserial;
}
   db3d4:	4802      	ldr	r0, [pc, #8]	; (db3e0 <_Z16_fetch_usbserialv+0x48>)
   db3d6:	b008      	add	sp, #32
   db3d8:	bd10      	pop	{r4, pc}
   db3da:	bf00      	nop
   db3dc:	2003e648 	.word	0x2003e648
   db3e0:	2003e64c 	.word	0x2003e64c
   db3e4:	2003de20 	.word	0x2003de20
   db3e8:	000db2e1 	.word	0x000db2e1

000db3ec <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   db3ec:	2200      	movs	r2, #0
   db3ee:	6840      	ldr	r0, [r0, #4]
   db3f0:	4611      	mov	r1, r2
   db3f2:	f7fd becf 	b.w	d9194 <network_ready>

000db3f6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   db3f6:	2200      	movs	r2, #0
   db3f8:	6840      	ldr	r0, [r0, #4]
   db3fa:	4611      	mov	r1, r2
   db3fc:	f7fd beea 	b.w	d91d4 <network_listening>

000db400 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   db400:	2200      	movs	r2, #0
   db402:	6840      	ldr	r0, [r0, #4]
   db404:	4611      	mov	r1, r2
   db406:	f7fd bef5 	b.w	d91f4 <network_get_listen_timeout>

000db40a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   db40a:	6840      	ldr	r0, [r0, #4]
   db40c:	2200      	movs	r2, #0
   db40e:	f7fd bee9 	b.w	d91e4 <network_set_listen_timeout>

000db412 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   db412:	6840      	ldr	r0, [r0, #4]
   db414:	2200      	movs	r2, #0
   db416:	f081 0101 	eor.w	r1, r1, #1
   db41a:	f7fd bed3 	b.w	d91c4 <network_listen>

000db41e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   db41e:	2300      	movs	r3, #0
   db420:	6840      	ldr	r0, [r0, #4]
   db422:	461a      	mov	r2, r3
   db424:	4619      	mov	r1, r3
   db426:	f7fd bec5 	b.w	d91b4 <network_off>

000db42a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   db42a:	2300      	movs	r3, #0
   db42c:	6840      	ldr	r0, [r0, #4]
   db42e:	461a      	mov	r2, r3
   db430:	4619      	mov	r1, r3
   db432:	f7fd beb7 	b.w	d91a4 <network_on>

000db436 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   db436:	2200      	movs	r2, #0
   db438:	6840      	ldr	r0, [r0, #4]
   db43a:	4611      	mov	r1, r2
   db43c:	f7fd be9a 	b.w	d9174 <network_connecting>

000db440 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db440:	6840      	ldr	r0, [r0, #4]
   db442:	2200      	movs	r2, #0
   db444:	2102      	movs	r1, #2
   db446:	f7fd be9d 	b.w	d9184 <network_disconnect>

000db44a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   db44a:	2300      	movs	r3, #0
   db44c:	6840      	ldr	r0, [r0, #4]
   db44e:	461a      	mov	r2, r3
   db450:	f7fd be88 	b.w	d9164 <network_connect>

000db454 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   db454:	b570      	push	{r4, r5, r6, lr}
    CellularSignal() {}
   db456:	4b13      	ldr	r3, [pc, #76]	; (db4a4 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   db458:	6003      	str	r3, [r0, #0]
   db45a:	2518      	movs	r5, #24
   db45c:	3330      	adds	r3, #48	; 0x30
   db45e:	b086      	sub	sp, #24
   db460:	460e      	mov	r6, r1
   db462:	6043      	str	r3, [r0, #4]
   db464:	462a      	mov	r2, r5
   db466:	2100      	movs	r1, #0
   db468:	4604      	mov	r4, r0
   db46a:	3008      	adds	r0, #8
   db46c:	f002 fdd4 	bl	de018 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   db470:	2200      	movs	r2, #0
   db472:	6870      	ldr	r0, [r6, #4]
   db474:	4611      	mov	r1, r2
   db476:	f7fd fe8d 	bl	d9194 <network_ready>
   db47a:	b178      	cbz	r0, db49c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {0};
   db47c:	2100      	movs	r1, #0
   db47e:	462a      	mov	r2, r5
   db480:	4668      	mov	r0, sp
   db482:	f002 fdc9 	bl	de018 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   db486:	4669      	mov	r1, sp
   db488:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   db48a:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   db48e:	f7fd fdb7 	bl	d9000 <cellular_signal>
   db492:	b918      	cbnz	r0, db49c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   db494:	4669      	mov	r1, sp
   db496:	4620      	mov	r0, r4
   db498:	f7ff fdc0 	bl	db01c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   db49c:	4620      	mov	r0, r4
   db49e:	b006      	add	sp, #24
   db4a0:	bd70      	pop	{r4, r5, r6, pc}
   db4a2:	bf00      	nop
   db4a4:	000def2c 	.word	0x000def2c

000db4a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   db4a8:	4b08      	ldr	r3, [pc, #32]	; (db4cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   db4aa:	b510      	push	{r4, lr}
   db4ac:	2428      	movs	r4, #40	; 0x28
   db4ae:	4622      	mov	r2, r4
   db4b0:	4618      	mov	r0, r3
   db4b2:	2100      	movs	r1, #0
   db4b4:	f002 fdb0 	bl	de018 <memset>
   db4b8:	4b05      	ldr	r3, [pc, #20]	; (db4d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   db4ba:	8004      	strh	r4, [r0, #0]
        cid = -1;
   db4bc:	f04f 32ff 	mov.w	r2, #4294967295
   db4c0:	6042      	str	r2, [r0, #4]
   db4c2:	2204      	movs	r2, #4
   db4c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   db4c6:	4a03      	ldr	r2, [pc, #12]	; (db4d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   db4c8:	601a      	str	r2, [r3, #0]
   db4ca:	bd10      	pop	{r4, pc}
   db4cc:	2003e668 	.word	0x2003e668
   db4d0:	2003e660 	.word	0x2003e660
   db4d4:	000defac 	.word	0x000defac

000db4d8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   db4d8:	4770      	bx	lr

000db4da <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db4da:	7441      	strb	r1, [r0, #17]
}
   db4dc:	4770      	bx	lr

000db4de <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   db4de:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   db4e0:	7c00      	ldrb	r0, [r0, #16]
   db4e2:	f7fd fccd 	bl	d8e80 <hal_usart_available_data_for_write>
}
   db4e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db4ea:	bd08      	pop	{r3, pc}

000db4ec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db4ec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   db4ee:	7c00      	ldrb	r0, [r0, #16]
   db4f0:	f7fd fc9e 	bl	d8e30 <hal_usart_available>
}
   db4f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db4f8:	bd08      	pop	{r3, pc}

000db4fa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db4fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   db4fc:	7c00      	ldrb	r0, [r0, #16]
   db4fe:	f7fd fca7 	bl	d8e50 <hal_usart_peek>
}
   db502:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db506:	bd08      	pop	{r3, pc}

000db508 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db508:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   db50a:	7c00      	ldrb	r0, [r0, #16]
   db50c:	f7fd fc98 	bl	d8e40 <hal_usart_read>
}
   db510:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db514:	bd08      	pop	{r3, pc}

000db516 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   db516:	7c00      	ldrb	r0, [r0, #16]
   db518:	f7fd bca2 	b.w	d8e60 <hal_usart_flush>

000db51c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db51c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db51e:	7c45      	ldrb	r5, [r0, #17]
{
   db520:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db522:	b12d      	cbz	r5, db530 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   db524:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db526:	b003      	add	sp, #12
   db528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   db52c:	f7fd bc78 	b.w	d8e20 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db530:	7c00      	ldrb	r0, [r0, #16]
   db532:	9101      	str	r1, [sp, #4]
   db534:	f7fd fca4 	bl	d8e80 <hal_usart_available_data_for_write>
   db538:	2800      	cmp	r0, #0
   db53a:	9901      	ldr	r1, [sp, #4]
   db53c:	dcf2      	bgt.n	db524 <_ZN11USARTSerial5writeEh+0x8>
}
   db53e:	4628      	mov	r0, r5
   db540:	b003      	add	sp, #12
   db542:	bd30      	pop	{r4, r5, pc}

000db544 <_ZN11USARTSerialD0Ev>:
   db544:	b510      	push	{r4, lr}
   db546:	2114      	movs	r1, #20
   db548:	4604      	mov	r4, r0
   db54a:	f000 faa0 	bl	dba8e <_ZdlPvj>
   db54e:	4620      	mov	r0, r4
   db550:	bd10      	pop	{r4, pc}
	...

000db554 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db554:	b510      	push	{r4, lr}
   db556:	f04f 0c00 	mov.w	ip, #0
   db55a:	4604      	mov	r4, r0
   db55c:	4608      	mov	r0, r1
   db55e:	4611      	mov	r1, r2
   db560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db564:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db568:	4a04      	ldr	r2, [pc, #16]	; (db57c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db56a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db56c:	2201      	movs	r2, #1
  _serial = serial;
   db56e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db570:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db572:	461a      	mov	r2, r3
   db574:	f7fd fc4c 	bl	d8e10 <hal_usart_init>
}
   db578:	4620      	mov	r0, r4
   db57a:	bd10      	pop	{r4, pc}
   db57c:	000defe8 	.word	0x000defe8

000db580 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db580:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db582:	4c0e      	ldr	r4, [pc, #56]	; (db5bc <_Z22__fetch_global_Serial1v+0x3c>)
   db584:	7821      	ldrb	r1, [r4, #0]
   db586:	f3bf 8f5b 	dmb	ish
   db58a:	f011 0101 	ands.w	r1, r1, #1
   db58e:	d112      	bne.n	db5b6 <_Z22__fetch_global_Serial1v+0x36>
   db590:	4620      	mov	r0, r4
   db592:	9101      	str	r1, [sp, #4]
   db594:	f7f8 fd90 	bl	d40b8 <__cxa_guard_acquire>
   db598:	9901      	ldr	r1, [sp, #4]
   db59a:	b160      	cbz	r0, db5b6 <_Z22__fetch_global_Serial1v+0x36>
   db59c:	4a08      	ldr	r2, [pc, #32]	; (db5c0 <_Z22__fetch_global_Serial1v+0x40>)
   db59e:	4b09      	ldr	r3, [pc, #36]	; (db5c4 <_Z22__fetch_global_Serial1v+0x44>)
   db5a0:	4809      	ldr	r0, [pc, #36]	; (db5c8 <_Z22__fetch_global_Serial1v+0x48>)
   db5a2:	f7ff ffd7 	bl	db554 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db5a6:	4620      	mov	r0, r4
   db5a8:	f7f8 fd8b 	bl	d40c2 <__cxa_guard_release>
   db5ac:	4a07      	ldr	r2, [pc, #28]	; (db5cc <_Z22__fetch_global_Serial1v+0x4c>)
   db5ae:	4908      	ldr	r1, [pc, #32]	; (db5d0 <_Z22__fetch_global_Serial1v+0x50>)
   db5b0:	4805      	ldr	r0, [pc, #20]	; (db5c8 <_Z22__fetch_global_Serial1v+0x48>)
   db5b2:	f000 fa67 	bl	dba84 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db5b6:	4804      	ldr	r0, [pc, #16]	; (db5c8 <_Z22__fetch_global_Serial1v+0x48>)
   db5b8:	b002      	add	sp, #8
   db5ba:	bd10      	pop	{r4, pc}
   db5bc:	2003e690 	.word	0x2003e690
   db5c0:	2003e694 	.word	0x2003e694
   db5c4:	2003e718 	.word	0x2003e718
   db5c8:	2003e79c 	.word	0x2003e79c
   db5cc:	2003de20 	.word	0x2003de20
   db5d0:	000db4d9 	.word	0x000db4d9

000db5d4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   db5d4:	4770      	bx	lr

000db5d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   db5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db5d8:	4606      	mov	r6, r0
   db5da:	4615      	mov	r5, r2
   db5dc:	460c      	mov	r4, r1
   db5de:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db5e0:	42bc      	cmp	r4, r7
   db5e2:	d006      	beq.n	db5f2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db5e4:	6833      	ldr	r3, [r6, #0]
   db5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   db5ea:	689b      	ldr	r3, [r3, #8]
   db5ec:	4630      	mov	r0, r6
   db5ee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   db5f0:	e7f6      	b.n	db5e0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   db5f2:	4628      	mov	r0, r5
   db5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db5f6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   db5f6:	7c00      	ldrb	r0, [r0, #16]
   db5f8:	2200      	movs	r2, #0
   db5fa:	f7fd bc61 	b.w	d8ec0 <hal_i2c_write>

000db5fe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   db5fe:	7c00      	ldrb	r0, [r0, #16]
   db600:	2100      	movs	r1, #0
   db602:	f7fd bc65 	b.w	d8ed0 <hal_i2c_available>

000db606 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   db606:	7c00      	ldrb	r0, [r0, #16]
   db608:	2100      	movs	r1, #0
   db60a:	f7fd bc69 	b.w	d8ee0 <hal_i2c_read>

000db60e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   db60e:	7c00      	ldrb	r0, [r0, #16]
   db610:	2100      	movs	r1, #0
   db612:	f7fd bc6d 	b.w	d8ef0 <hal_i2c_peek>

000db616 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   db616:	7c00      	ldrb	r0, [r0, #16]
   db618:	2100      	movs	r1, #0
   db61a:	f7fd bc71 	b.w	d8f00 <hal_i2c_flush>

000db61e <_ZN7TwoWireD0Ev>:
   db61e:	b510      	push	{r4, lr}
   db620:	2114      	movs	r1, #20
   db622:	4604      	mov	r4, r0
   db624:	f000 fa33 	bl	dba8e <_ZdlPvj>
   db628:	4620      	mov	r0, r4
   db62a:	bd10      	pop	{r4, pc}

000db62c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   db62c:	b510      	push	{r4, lr}
   db62e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db632:	4604      	mov	r4, r0
   db634:	4608      	mov	r0, r1
   db636:	2100      	movs	r1, #0
   db638:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db63c:	4b03      	ldr	r3, [pc, #12]	; (db64c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   db63e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   db640:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   db642:	4611      	mov	r1, r2
   db644:	f7fd fc6c 	bl	d8f20 <hal_i2c_init>
}
   db648:	4620      	mov	r0, r4
   db64a:	bd10      	pop	{r4, pc}
   db64c:	000df018 	.word	0x000df018

000db650 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db650:	2300      	movs	r3, #0
   db652:	7c00      	ldrb	r0, [r0, #16]
   db654:	461a      	mov	r2, r3
   db656:	4619      	mov	r1, r3
   db658:	f7fd bc1a 	b.w	d8e90 <hal_i2c_begin>

000db65c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   db65c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   db65e:	2200      	movs	r2, #0
   db660:	2314      	movs	r3, #20
   db662:	e9cd 2201 	strd	r2, r2, [sp, #4]
   db666:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   db66a:	780b      	ldrb	r3, [r1, #0]
   db66c:	f88d 3008 	strb.w	r3, [sp, #8]
   db670:	684b      	ldr	r3, [r1, #4]
   db672:	9303      	str	r3, [sp, #12]
   db674:	68cb      	ldr	r3, [r1, #12]
   db676:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   db678:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   db67a:	7a0b      	ldrb	r3, [r1, #8]
   db67c:	9305      	str	r3, [sp, #20]
   db67e:	a901      	add	r1, sp, #4
   db680:	f7fd fc66 	bl	d8f50 <hal_i2c_request_ex>
}
   db684:	b007      	add	sp, #28
   db686:	f85d fb04 	ldr.w	pc, [sp], #4

000db68a <_ZN7TwoWire11requestFromEhjh>:
{
   db68a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   db68c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db68e:	f88d 1000 	strb.w	r1, [sp]
   db692:	f04f 0164 	mov.w	r1, #100	; 0x64
   db696:	9103      	str	r1, [sp, #12]
   db698:	bf18      	it	ne
   db69a:	2301      	movne	r3, #1
   db69c:	4669      	mov	r1, sp
    size_ = size;
   db69e:	9201      	str	r2, [sp, #4]
   db6a0:	f88d 3008 	strb.w	r3, [sp, #8]
   db6a4:	f7ff ffda 	bl	db65c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   db6a8:	b005      	add	sp, #20
   db6aa:	f85d fb04 	ldr.w	pc, [sp], #4

000db6ae <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   db6ae:	2301      	movs	r3, #1
   db6b0:	f7ff bfeb 	b.w	db68a <_ZN7TwoWire11requestFromEhjh>

000db6b4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   db6b4:	7c00      	ldrb	r0, [r0, #16]
   db6b6:	2200      	movs	r2, #0
   db6b8:	f7fd bbf2 	b.w	d8ea0 <hal_i2c_begin_transmission>

000db6bc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   db6bc:	b2c9      	uxtb	r1, r1
   db6be:	f7ff bff9 	b.w	db6b4 <_ZN7TwoWire17beginTransmissionEh>

000db6c2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   db6c2:	7c00      	ldrb	r0, [r0, #16]
   db6c4:	2200      	movs	r2, #0
   db6c6:	f7fd bbf3 	b.w	d8eb0 <hal_i2c_end_transmission>

000db6ca <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   db6ca:	2101      	movs	r1, #1
   db6cc:	f7ff bff9 	b.w	db6c2 <_ZN7TwoWire15endTransmissionEh>

000db6d0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   db6d0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   db6d2:	2100      	movs	r1, #0
   db6d4:	7c00      	ldrb	r0, [r0, #16]
   db6d6:	f7fd fc2b 	bl	d8f30 <hal_i2c_lock>
}
   db6da:	fab0 f080 	clz	r0, r0
   db6de:	0940      	lsrs	r0, r0, #5
   db6e0:	bd08      	pop	{r3, pc}

000db6e2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   db6e2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   db6e4:	2100      	movs	r1, #0
   db6e6:	7c00      	ldrb	r0, [r0, #16]
   db6e8:	f7fd fc2a 	bl	d8f40 <hal_i2c_unlock>
}
   db6ec:	fab0 f080 	clz	r0, r0
   db6f0:	0940      	lsrs	r0, r0, #5
   db6f2:	bd08      	pop	{r3, pc}

000db6f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   db6f4:	2300      	movs	r3, #0
   db6f6:	6840      	ldr	r0, [r0, #4]
   db6f8:	461a      	mov	r2, r3
   db6fa:	f7fd bd33 	b.w	d9164 <network_connect>

000db6fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   db6fe:	6840      	ldr	r0, [r0, #4]
   db700:	2200      	movs	r2, #0
   db702:	2102      	movs	r1, #2
   db704:	f7fd bd3e 	b.w	d9184 <network_disconnect>

000db708 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   db708:	2200      	movs	r2, #0
   db70a:	6840      	ldr	r0, [r0, #4]
   db70c:	4611      	mov	r1, r2
   db70e:	f7fd bd31 	b.w	d9174 <network_connecting>

000db712 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   db712:	2200      	movs	r2, #0
   db714:	6840      	ldr	r0, [r0, #4]
   db716:	4611      	mov	r1, r2
   db718:	f7fd bd3c 	b.w	d9194 <network_ready>

000db71c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   db71c:	2300      	movs	r3, #0
   db71e:	6840      	ldr	r0, [r0, #4]
   db720:	461a      	mov	r2, r3
   db722:	4619      	mov	r1, r3
   db724:	f7fd bd3e 	b.w	d91a4 <network_on>

000db728 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   db728:	2300      	movs	r3, #0
   db72a:	6840      	ldr	r0, [r0, #4]
   db72c:	461a      	mov	r2, r3
   db72e:	4619      	mov	r1, r3
   db730:	f7fd bd40 	b.w	d91b4 <network_off>

000db734 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   db734:	6840      	ldr	r0, [r0, #4]
   db736:	2100      	movs	r1, #0
   db738:	f7fd bd64 	b.w	d9204 <network_is_on>

000db73c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   db73c:	6840      	ldr	r0, [r0, #4]
   db73e:	2100      	movs	r1, #0
   db740:	f7fd bd68 	b.w	d9214 <network_is_off>

000db744 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   db744:	6840      	ldr	r0, [r0, #4]
   db746:	2200      	movs	r2, #0
   db748:	f081 0101 	eor.w	r1, r1, #1
   db74c:	f7fd bd3a 	b.w	d91c4 <network_listen>

000db750 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   db750:	6840      	ldr	r0, [r0, #4]
   db752:	2200      	movs	r2, #0
   db754:	f7fd bd46 	b.w	d91e4 <network_set_listen_timeout>

000db758 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   db758:	2200      	movs	r2, #0
   db75a:	6840      	ldr	r0, [r0, #4]
   db75c:	4611      	mov	r1, r2
   db75e:	f7fd bd49 	b.w	d91f4 <network_get_listen_timeout>

000db762 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   db762:	2200      	movs	r2, #0
   db764:	6840      	ldr	r0, [r0, #4]
   db766:	4611      	mov	r1, r2
   db768:	f7fd bd34 	b.w	d91d4 <network_listening>

000db76c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   db76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db770:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   db772:	b095      	sub	sp, #84	; 0x54
   db774:	4616      	mov	r6, r2
   db776:	460d      	mov	r5, r1
   db778:	4607      	mov	r7, r0
    IPAddress addr;
   db77a:	f7ff fd73 	bl	db264 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   db77e:	4621      	mov	r1, r4
   db780:	2218      	movs	r2, #24
   db782:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   db784:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   db786:	f002 fc47 	bl	de018 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   db78a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   db78c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   db790:	4621      	mov	r1, r4
   db792:	466b      	mov	r3, sp
   db794:	aa0c      	add	r2, sp, #48	; 0x30
   db796:	4630      	mov	r0, r6
   db798:	f7fd fa20 	bl	d8bdc <netdb_getaddrinfo>
    if (!r) {
   db79c:	4604      	mov	r4, r0
   db79e:	2800      	cmp	r0, #0
   db7a0:	d14c      	bne.n	db83c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db7a2:	4602      	mov	r2, r0
   db7a4:	2101      	movs	r1, #1
   db7a6:	6868      	ldr	r0, [r5, #4]
   db7a8:	f7fd fcf4 	bl	d9194 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db7ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db7ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db7b0:	4622      	mov	r2, r4
   db7b2:	6868      	ldr	r0, [r5, #4]
   db7b4:	f7fd fcee 	bl	d9194 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db7b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db7ba:	4681      	mov	r9, r0
        bool ok = false;
   db7bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db7be:	2e00      	cmp	r6, #0
   db7c0:	d03c      	beq.n	db83c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   db7c2:	2900      	cmp	r1, #0
   db7c4:	d13a      	bne.n	db83c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   db7c6:	6873      	ldr	r3, [r6, #4]
   db7c8:	2b02      	cmp	r3, #2
   db7ca:	d003      	beq.n	db7d4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   db7cc:	2b0a      	cmp	r3, #10
   db7ce:	d011      	beq.n	db7f4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db7d0:	69f6      	ldr	r6, [r6, #28]
   db7d2:	e7f4      	b.n	db7be <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   db7d4:	f1b8 0f00 	cmp.w	r8, #0
   db7d8:	d00a      	beq.n	db7f0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   db7da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   db7dc:	a806      	add	r0, sp, #24
   db7de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   db7e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   db7e2:	f7ff fd6d 	bl	db2c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   db7e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db7e8:	1d3c      	adds	r4, r7, #4
   db7ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db7ec:	682b      	ldr	r3, [r5, #0]
   db7ee:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   db7f0:	4641      	mov	r1, r8
   db7f2:	e7ed      	b.n	db7d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   db7f4:	f1b9 0f00 	cmp.w	r9, #0
   db7f8:	d101      	bne.n	db7fe <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   db7fa:	4649      	mov	r1, r9
   db7fc:	e7e8      	b.n	db7d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   db7fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   db800:	2210      	movs	r2, #16
   db802:	a801      	add	r0, sp, #4
   db804:	f002 fc08 	bl	de018 <memset>
                    a.v = 6;
   db808:	2306      	movs	r3, #6
   db80a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db80e:	ad01      	add	r5, sp, #4
   db810:	f104 0308 	add.w	r3, r4, #8
   db814:	3418      	adds	r4, #24
   db816:	6818      	ldr	r0, [r3, #0]
   db818:	6859      	ldr	r1, [r3, #4]
   db81a:	462a      	mov	r2, r5
   db81c:	c203      	stmia	r2!, {r0, r1}
   db81e:	3308      	adds	r3, #8
   db820:	42a3      	cmp	r3, r4
   db822:	4615      	mov	r5, r2
   db824:	d1f7      	bne.n	db816 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   db826:	a901      	add	r1, sp, #4
   db828:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   db82a:	ad07      	add	r5, sp, #28
   db82c:	f7ff fd28 	bl	db280 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db832:	1d3c      	adds	r4, r7, #4
   db834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db836:	682b      	ldr	r3, [r5, #0]
   db838:	7023      	strb	r3, [r4, #0]
   db83a:	e7de      	b.n	db7fa <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db83c:	9800      	ldr	r0, [sp, #0]
   db83e:	f7fd f9c5 	bl	d8bcc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db842:	4638      	mov	r0, r7
   db844:	b015      	add	sp, #84	; 0x54
   db846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000db84c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   db84c:	4b02      	ldr	r3, [pc, #8]	; (db858 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   db84e:	4a03      	ldr	r2, [pc, #12]	; (db85c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   db850:	601a      	str	r2, [r3, #0]
   db852:	2200      	movs	r2, #0
   db854:	605a      	str	r2, [r3, #4]

} // spark
   db856:	4770      	bx	lr
   db858:	2003e7b0 	.word	0x2003e7b0
   db85c:	000df040 	.word	0x000df040

000db860 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db860:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db862:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db864:	d902      	bls.n	db86c <pinAvailable+0xc>
    return false;
   db866:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db868:	b002      	add	sp, #8
   db86a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db86c:	f1a0 030b 	sub.w	r3, r0, #11
   db870:	2b02      	cmp	r3, #2
   db872:	d81a      	bhi.n	db8aa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db874:	4c17      	ldr	r4, [pc, #92]	; (db8d4 <pinAvailable+0x74>)
   db876:	7821      	ldrb	r1, [r4, #0]
   db878:	f3bf 8f5b 	dmb	ish
   db87c:	f011 0101 	ands.w	r1, r1, #1
   db880:	d10b      	bne.n	db89a <pinAvailable+0x3a>
   db882:	4620      	mov	r0, r4
   db884:	9101      	str	r1, [sp, #4]
   db886:	f7f8 fc17 	bl	d40b8 <__cxa_guard_acquire>
   db88a:	9901      	ldr	r1, [sp, #4]
   db88c:	b128      	cbz	r0, db89a <pinAvailable+0x3a>
   db88e:	4812      	ldr	r0, [pc, #72]	; (db8d8 <pinAvailable+0x78>)
   db890:	f7fd fd94 	bl	d93bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   db894:	4620      	mov	r0, r4
   db896:	f7f8 fc14 	bl	d40c2 <__cxa_guard_release>
   db89a:	4b0f      	ldr	r3, [pc, #60]	; (db8d8 <pinAvailable+0x78>)
   db89c:	7818      	ldrb	r0, [r3, #0]
   db89e:	f7fd fb77 	bl	d8f90 <hal_spi_is_enabled>
   db8a2:	2800      	cmp	r0, #0
   db8a4:	d1df      	bne.n	db866 <pinAvailable+0x6>
  return true; // 'pin' is available
   db8a6:	2001      	movs	r0, #1
   db8a8:	e7de      	b.n	db868 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db8aa:	2801      	cmp	r0, #1
   db8ac:	d809      	bhi.n	db8c2 <pinAvailable+0x62>
   db8ae:	f000 f899 	bl	db9e4 <_Z19__fetch_global_Wirev>
   db8b2:	2100      	movs	r1, #0
   db8b4:	7c00      	ldrb	r0, [r0, #16]
   db8b6:	f7fd fb2b 	bl	d8f10 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db8ba:	f080 0001 	eor.w	r0, r0, #1
   db8be:	b2c0      	uxtb	r0, r0
   db8c0:	e7d2      	b.n	db868 <pinAvailable+0x8>
   db8c2:	3809      	subs	r0, #9
   db8c4:	2801      	cmp	r0, #1
   db8c6:	d8ee      	bhi.n	db8a6 <pinAvailable+0x46>
   db8c8:	f7ff fe5a 	bl	db580 <_Z22__fetch_global_Serial1v>
   db8cc:	7c00      	ldrb	r0, [r0, #16]
   db8ce:	f7fd facf 	bl	d8e70 <hal_usart_is_enabled>
   db8d2:	e7f2      	b.n	db8ba <pinAvailable+0x5a>
   db8d4:	2003de24 	.word	0x2003de24
   db8d8:	2003de28 	.word	0x2003de28

000db8dc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db8dc:	2823      	cmp	r0, #35	; 0x23
{
   db8de:	b538      	push	{r3, r4, r5, lr}
   db8e0:	4604      	mov	r4, r0
   db8e2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db8e4:	d80a      	bhi.n	db8fc <pinMode+0x20>
   db8e6:	29ff      	cmp	r1, #255	; 0xff
   db8e8:	d008      	beq.n	db8fc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db8ea:	f7ff ffb9 	bl	db860 <pinAvailable>
   db8ee:	b128      	cbz	r0, db8fc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db8f0:	4629      	mov	r1, r5
   db8f2:	4620      	mov	r0, r4
}
   db8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db8f8:	f7fd b978 	b.w	d8bec <HAL_Pin_Mode>
}
   db8fc:	bd38      	pop	{r3, r4, r5, pc}

000db8fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db8fe:	b538      	push	{r3, r4, r5, lr}
   db900:	4604      	mov	r4, r0
   db902:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db904:	f7fd f97a 	bl	d8bfc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db908:	28ff      	cmp	r0, #255	; 0xff
   db90a:	d010      	beq.n	db92e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db90c:	2806      	cmp	r0, #6
   db90e:	d804      	bhi.n	db91a <digitalWrite+0x1c>
   db910:	234d      	movs	r3, #77	; 0x4d
   db912:	fa23 f000 	lsr.w	r0, r3, r0
   db916:	07c3      	lsls	r3, r0, #31
   db918:	d409      	bmi.n	db92e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db91a:	4620      	mov	r0, r4
   db91c:	f7ff ffa0 	bl	db860 <pinAvailable>
   db920:	b128      	cbz	r0, db92e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db922:	4629      	mov	r1, r5
   db924:	4620      	mov	r0, r4
}
   db926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db92a:	f7fd b96f 	b.w	d8c0c <HAL_GPIO_Write>
}
   db92e:	bd38      	pop	{r3, r4, r5, pc}

000db930 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   db930:	b510      	push	{r4, lr}
   db932:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db934:	f7fd f962 	bl	d8bfc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   db938:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   db93a:	b2db      	uxtb	r3, r3
   db93c:	2b01      	cmp	r3, #1
   db93e:	d908      	bls.n	db952 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   db940:	4620      	mov	r0, r4
   db942:	f7ff ff8d 	bl	db860 <pinAvailable>
   db946:	b120      	cbz	r0, db952 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   db948:	4620      	mov	r0, r4
}
   db94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   db94e:	f7fd b965 	b.w	d8c1c <HAL_GPIO_Read>
}
   db952:	2000      	movs	r0, #0
   db954:	bd10      	pop	{r4, pc}
	...

000db958 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   db958:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   db95a:	4c08      	ldr	r4, [pc, #32]	; (db97c <_Z21__fetch_global_EEPROMv+0x24>)
   db95c:	7823      	ldrb	r3, [r4, #0]
   db95e:	f3bf 8f5b 	dmb	ish
   db962:	07db      	lsls	r3, r3, #31
   db964:	d408      	bmi.n	db978 <_Z21__fetch_global_EEPROMv+0x20>
   db966:	4620      	mov	r0, r4
   db968:	f7f8 fba6 	bl	d40b8 <__cxa_guard_acquire>
   db96c:	b120      	cbz	r0, db978 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   db96e:	f7fd f97d 	bl	d8c6c <HAL_EEPROM_Init>
   db972:	4620      	mov	r0, r4
   db974:	f7f8 fba5 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   db978:	4801      	ldr	r0, [pc, #4]	; (db980 <_Z21__fetch_global_EEPROMv+0x28>)
   db97a:	bd10      	pop	{r4, pc}
   db97c:	2003e7bc 	.word	0x2003e7bc
   db980:	2003e7c0 	.word	0x2003e7c0

000db984 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   db984:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   db986:	2300      	movs	r3, #0
   db988:	2520      	movs	r5, #32
   db98a:	8043      	strh	r3, [r0, #2]
   db98c:	2314      	movs	r3, #20
{
   db98e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   db990:	8003      	strh	r3, [r0, #0]
   db992:	6085      	str	r5, [r0, #8]
   db994:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db996:	4906      	ldr	r1, [pc, #24]	; (db9b0 <_Z17acquireWireBufferv+0x2c>)
   db998:	4628      	mov	r0, r5
   db99a:	f000 f87a 	bl	dba92 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db99e:	4904      	ldr	r1, [pc, #16]	; (db9b0 <_Z17acquireWireBufferv+0x2c>)
	};
   db9a0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db9a2:	4628      	mov	r0, r5
   db9a4:	f000 f875 	bl	dba92 <_ZnajRKSt9nothrow_t>
	};
   db9a8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   db9aa:	4620      	mov	r0, r4
   db9ac:	bd38      	pop	{r3, r4, r5, pc}
   db9ae:	bf00      	nop
   db9b0:	000df074 	.word	0x000df074

000db9b4 <_Z18acquireWire1Bufferv>:
   db9b4:	b538      	push	{r3, r4, r5, lr}
   db9b6:	2300      	movs	r3, #0
   db9b8:	2520      	movs	r5, #32
   db9ba:	8043      	strh	r3, [r0, #2]
   db9bc:	2314      	movs	r3, #20
   db9be:	4604      	mov	r4, r0
   db9c0:	8003      	strh	r3, [r0, #0]
   db9c2:	6085      	str	r5, [r0, #8]
   db9c4:	6105      	str	r5, [r0, #16]
   db9c6:	4906      	ldr	r1, [pc, #24]	; (db9e0 <_Z18acquireWire1Bufferv+0x2c>)
   db9c8:	4628      	mov	r0, r5
   db9ca:	f000 f862 	bl	dba92 <_ZnajRKSt9nothrow_t>
   db9ce:	4904      	ldr	r1, [pc, #16]	; (db9e0 <_Z18acquireWire1Bufferv+0x2c>)
   db9d0:	6060      	str	r0, [r4, #4]
   db9d2:	4628      	mov	r0, r5
   db9d4:	f000 f85d 	bl	dba92 <_ZnajRKSt9nothrow_t>
   db9d8:	60e0      	str	r0, [r4, #12]
   db9da:	4620      	mov	r0, r4
   db9dc:	bd38      	pop	{r3, r4, r5, pc}
   db9de:	bf00      	nop
   db9e0:	000df074 	.word	0x000df074

000db9e4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db9e4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db9e6:	4d0f      	ldr	r5, [pc, #60]	; (dba24 <_Z19__fetch_global_Wirev+0x40>)
   db9e8:	7829      	ldrb	r1, [r5, #0]
   db9ea:	f3bf 8f5b 	dmb	ish
   db9ee:	f011 0401 	ands.w	r4, r1, #1
{
   db9f2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db9f4:	d113      	bne.n	dba1e <_Z19__fetch_global_Wirev+0x3a>
   db9f6:	4628      	mov	r0, r5
   db9f8:	f7f8 fb5e 	bl	d40b8 <__cxa_guard_acquire>
   db9fc:	b178      	cbz	r0, dba1e <_Z19__fetch_global_Wirev+0x3a>
   db9fe:	a801      	add	r0, sp, #4
   dba00:	f7ff ffc0 	bl	db984 <_Z17acquireWireBufferv>
   dba04:	aa01      	add	r2, sp, #4
   dba06:	4621      	mov	r1, r4
   dba08:	4807      	ldr	r0, [pc, #28]	; (dba28 <_Z19__fetch_global_Wirev+0x44>)
   dba0a:	f7ff fe0f 	bl	db62c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dba0e:	4628      	mov	r0, r5
   dba10:	f7f8 fb57 	bl	d40c2 <__cxa_guard_release>
   dba14:	4a05      	ldr	r2, [pc, #20]	; (dba2c <_Z19__fetch_global_Wirev+0x48>)
   dba16:	4906      	ldr	r1, [pc, #24]	; (dba30 <_Z19__fetch_global_Wirev+0x4c>)
   dba18:	4803      	ldr	r0, [pc, #12]	; (dba28 <_Z19__fetch_global_Wirev+0x44>)
   dba1a:	f000 f833 	bl	dba84 <__aeabi_atexit>
	return wire;
}
   dba1e:	4802      	ldr	r0, [pc, #8]	; (dba28 <_Z19__fetch_global_Wirev+0x44>)
   dba20:	b007      	add	sp, #28
   dba22:	bd30      	pop	{r4, r5, pc}
   dba24:	2003e7c4 	.word	0x2003e7c4
   dba28:	2003e7cc 	.word	0x2003e7cc
   dba2c:	2003de20 	.word	0x2003de20
   dba30:	000db5d5 	.word	0x000db5d5

000dba34 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dba34:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dba36:	4c0f      	ldr	r4, [pc, #60]	; (dba74 <_Z20__fetch_global_Wire1v+0x40>)
   dba38:	7823      	ldrb	r3, [r4, #0]
   dba3a:	f3bf 8f5b 	dmb	ish
   dba3e:	07db      	lsls	r3, r3, #31
{
   dba40:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dba42:	d413      	bmi.n	dba6c <_Z20__fetch_global_Wire1v+0x38>
   dba44:	4620      	mov	r0, r4
   dba46:	f7f8 fb37 	bl	d40b8 <__cxa_guard_acquire>
   dba4a:	b178      	cbz	r0, dba6c <_Z20__fetch_global_Wire1v+0x38>
   dba4c:	a801      	add	r0, sp, #4
   dba4e:	f7ff ffb1 	bl	db9b4 <_Z18acquireWire1Bufferv>
   dba52:	aa01      	add	r2, sp, #4
   dba54:	2101      	movs	r1, #1
   dba56:	4808      	ldr	r0, [pc, #32]	; (dba78 <_Z20__fetch_global_Wire1v+0x44>)
   dba58:	f7ff fde8 	bl	db62c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dba5c:	4620      	mov	r0, r4
   dba5e:	f7f8 fb30 	bl	d40c2 <__cxa_guard_release>
   dba62:	4a06      	ldr	r2, [pc, #24]	; (dba7c <_Z20__fetch_global_Wire1v+0x48>)
   dba64:	4906      	ldr	r1, [pc, #24]	; (dba80 <_Z20__fetch_global_Wire1v+0x4c>)
   dba66:	4804      	ldr	r0, [pc, #16]	; (dba78 <_Z20__fetch_global_Wire1v+0x44>)
   dba68:	f000 f80c 	bl	dba84 <__aeabi_atexit>
	return wire;
}
   dba6c:	4802      	ldr	r0, [pc, #8]	; (dba78 <_Z20__fetch_global_Wire1v+0x44>)
   dba6e:	b006      	add	sp, #24
   dba70:	bd10      	pop	{r4, pc}
   dba72:	bf00      	nop
   dba74:	2003e7c8 	.word	0x2003e7c8
   dba78:	2003e7e0 	.word	0x2003e7e0
   dba7c:	2003de20 	.word	0x2003de20
   dba80:	000db5d5 	.word	0x000db5d5

000dba84 <__aeabi_atexit>:
   dba84:	460b      	mov	r3, r1
   dba86:	4601      	mov	r1, r0
   dba88:	4618      	mov	r0, r3
   dba8a:	f002 ba81 	b.w	ddf90 <__cxa_atexit>

000dba8e <_ZdlPvj>:
   dba8e:	f7f8 bb06 	b.w	d409e <_ZdlPv>

000dba92 <_ZnajRKSt9nothrow_t>:
   dba92:	f7f8 bb02 	b.w	d409a <_Znaj>

000dba96 <_ZSt25__throw_bad_function_callv>:
   dba96:	b508      	push	{r3, lr}
   dba98:	f7fd fc2c 	bl	d92f4 <abort>

000dba9c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   dba9c:	4901      	ldr	r1, [pc, #4]	; (dbaa4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   dba9e:	f000 b8f9 	b.w	dbc94 <_ZNKSt9type_infoeqERKS_>
   dbaa2:	bf00      	nop
   dbaa4:	000df090 	.word	0x000df090

000dbaa8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   dbaa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   dbaaa:	2400      	movs	r4, #0
   dbaac:	2310      	movs	r3, #16
   dbaae:	e9cd 3402 	strd	r3, r4, [sp, #8]
   dbab2:	6803      	ldr	r3, [r0, #0]
   dbab4:	9400      	str	r4, [sp, #0]
   dbab6:	699e      	ldr	r6, [r3, #24]
   dbab8:	f88d 4004 	strb.w	r4, [sp, #4]
   dbabc:	4615      	mov	r5, r2
   dbabe:	466b      	mov	r3, sp
   dbac0:	6812      	ldr	r2, [r2, #0]
   dbac2:	47b0      	blx	r6
   dbac4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   dbac8:	f003 0306 	and.w	r3, r3, #6
   dbacc:	2b06      	cmp	r3, #6
   dbace:	bf03      	ittte	eq
   dbad0:	9b00      	ldreq	r3, [sp, #0]
   dbad2:	602b      	streq	r3, [r5, #0]
   dbad4:	2001      	moveq	r0, #1
   dbad6:	4620      	movne	r0, r4
   dbad8:	b004      	add	sp, #16
   dbada:	bd70      	pop	{r4, r5, r6, pc}

000dbadc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   dbadc:	9800      	ldr	r0, [sp, #0]
   dbade:	4290      	cmp	r0, r2
   dbae0:	bf14      	ite	ne
   dbae2:	2001      	movne	r0, #1
   dbae4:	2006      	moveq	r0, #6
   dbae6:	4770      	bx	lr

000dbae8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   dbae8:	b510      	push	{r4, lr}
   dbaea:	4b03      	ldr	r3, [pc, #12]	; (dbaf8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   dbaec:	6003      	str	r3, [r0, #0]
   dbaee:	4604      	mov	r4, r0
   dbaf0:	f000 f8cd 	bl	dbc8e <_ZNSt9type_infoD1Ev>
   dbaf4:	4620      	mov	r0, r4
   dbaf6:	bd10      	pop	{r4, pc}
   dbaf8:	000df0d0 	.word	0x000df0d0

000dbafc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   dbafc:	b510      	push	{r4, lr}
   dbafe:	4604      	mov	r4, r0
   dbb00:	f7ff fff2 	bl	dbae8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   dbb04:	4620      	mov	r0, r4
   dbb06:	2108      	movs	r1, #8
   dbb08:	f7ff ffc1 	bl	dba8e <_ZdlPvj>
   dbb0c:	4620      	mov	r0, r4
   dbb0e:	bd10      	pop	{r4, pc}

000dbb10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   dbb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbb14:	461f      	mov	r7, r3
   dbb16:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   dbb1a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   dbb1e:	4598      	cmp	r8, r3
   dbb20:	4606      	mov	r6, r0
   dbb22:	4615      	mov	r5, r2
   dbb24:	d107      	bne.n	dbb36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   dbb26:	9907      	ldr	r1, [sp, #28]
   dbb28:	f000 f8b4 	bl	dbc94 <_ZNKSt9type_infoeqERKS_>
   dbb2c:	b118      	cbz	r0, dbb36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   dbb2e:	7165      	strb	r5, [r4, #5]
   dbb30:	2000      	movs	r0, #0
   dbb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbb36:	4639      	mov	r1, r7
   dbb38:	4630      	mov	r0, r6
   dbb3a:	f000 f8ab 	bl	dbc94 <_ZNKSt9type_infoeqERKS_>
   dbb3e:	2800      	cmp	r0, #0
   dbb40:	d0f6      	beq.n	dbb30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   dbb42:	2301      	movs	r3, #1
   dbb44:	f8c4 8000 	str.w	r8, [r4]
   dbb48:	7125      	strb	r5, [r4, #4]
   dbb4a:	71a3      	strb	r3, [r4, #6]
   dbb4c:	e7f0      	b.n	dbb30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000dbb4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   dbb4e:	b538      	push	{r3, r4, r5, lr}
   dbb50:	4615      	mov	r5, r2
   dbb52:	461c      	mov	r4, r3
   dbb54:	f000 f89e 	bl	dbc94 <_ZNKSt9type_infoeqERKS_>
   dbb58:	b120      	cbz	r0, dbb64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   dbb5a:	2308      	movs	r3, #8
   dbb5c:	60e3      	str	r3, [r4, #12]
   dbb5e:	2306      	movs	r3, #6
   dbb60:	6025      	str	r5, [r4, #0]
   dbb62:	7123      	strb	r3, [r4, #4]
   dbb64:	bd38      	pop	{r3, r4, r5, pc}

000dbb66 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   dbb66:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dbb68:	4605      	mov	r5, r0
   dbb6a:	460c      	mov	r4, r1
   dbb6c:	9201      	str	r2, [sp, #4]
   dbb6e:	461e      	mov	r6, r3
   dbb70:	f000 f890 	bl	dbc94 <_ZNKSt9type_infoeqERKS_>
   dbb74:	b950      	cbnz	r0, dbb8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   dbb76:	2e03      	cmp	r6, #3
   dbb78:	d808      	bhi.n	dbb8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   dbb7a:	6823      	ldr	r3, [r4, #0]
   dbb7c:	9a01      	ldr	r2, [sp, #4]
   dbb7e:	695b      	ldr	r3, [r3, #20]
   dbb80:	4629      	mov	r1, r5
   dbb82:	4620      	mov	r0, r4
   dbb84:	b002      	add	sp, #8
   dbb86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dbb8a:	4718      	bx	r3
   dbb8c:	b002      	add	sp, #8
   dbb8e:	bd70      	pop	{r4, r5, r6, pc}

000dbb90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   dbb90:	b510      	push	{r4, lr}
   dbb92:	4b03      	ldr	r3, [pc, #12]	; (dbba0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   dbb94:	6003      	str	r3, [r0, #0]
   dbb96:	4604      	mov	r4, r0
   dbb98:	f7ff ffa6 	bl	dbae8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   dbb9c:	4620      	mov	r0, r4
   dbb9e:	bd10      	pop	{r4, pc}
   dbba0:	000df130 	.word	0x000df130

000dbba4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   dbba4:	b510      	push	{r4, lr}
   dbba6:	4604      	mov	r4, r0
   dbba8:	f7ff fff2 	bl	dbb90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   dbbac:	4620      	mov	r0, r4
   dbbae:	210c      	movs	r1, #12
   dbbb0:	f7ff ff6d 	bl	dba8e <_ZdlPvj>
   dbbb4:	4620      	mov	r0, r4
   dbbb6:	bd10      	pop	{r4, pc}

000dbbb8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   dbbb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   dbbba:	9f08      	ldr	r7, [sp, #32]
   dbbbc:	4297      	cmp	r7, r2
   dbbbe:	4605      	mov	r5, r0
   dbbc0:	460e      	mov	r6, r1
   dbbc2:	4614      	mov	r4, r2
   dbbc4:	d00a      	beq.n	dbbdc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   dbbc6:	68a8      	ldr	r0, [r5, #8]
   dbbc8:	6802      	ldr	r2, [r0, #0]
   dbbca:	9708      	str	r7, [sp, #32]
   dbbcc:	6a15      	ldr	r5, [r2, #32]
   dbbce:	4631      	mov	r1, r6
   dbbd0:	4622      	mov	r2, r4
   dbbd2:	46ac      	mov	ip, r5
   dbbd4:	b003      	add	sp, #12
   dbbd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dbbda:	4760      	bx	ip
   dbbdc:	4619      	mov	r1, r3
   dbbde:	9301      	str	r3, [sp, #4]
   dbbe0:	f000 f858 	bl	dbc94 <_ZNKSt9type_infoeqERKS_>
   dbbe4:	9b01      	ldr	r3, [sp, #4]
   dbbe6:	2800      	cmp	r0, #0
   dbbe8:	d0ed      	beq.n	dbbc6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   dbbea:	2006      	movs	r0, #6
   dbbec:	b003      	add	sp, #12
   dbbee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dbbf0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   dbbf0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbbf4:	460d      	mov	r5, r1
   dbbf6:	4619      	mov	r1, r3
   dbbf8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   dbbfc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   dbc00:	4681      	mov	r9, r0
   dbc02:	4617      	mov	r7, r2
   dbc04:	4698      	mov	r8, r3
   dbc06:	f000 f845 	bl	dbc94 <_ZNKSt9type_infoeqERKS_>
   dbc0a:	b190      	cbz	r0, dbc32 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   dbc0c:	2d00      	cmp	r5, #0
   dbc0e:	6034      	str	r4, [r6, #0]
   dbc10:	7137      	strb	r7, [r6, #4]
   dbc12:	db09      	blt.n	dbc28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   dbc14:	1961      	adds	r1, r4, r5
   dbc16:	458a      	cmp	sl, r1
   dbc18:	bf0c      	ite	eq
   dbc1a:	2106      	moveq	r1, #6
   dbc1c:	2101      	movne	r1, #1
   dbc1e:	71b1      	strb	r1, [r6, #6]
   dbc20:	2000      	movs	r0, #0
   dbc22:	b001      	add	sp, #4
   dbc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbc28:	3502      	adds	r5, #2
   dbc2a:	d1f9      	bne.n	dbc20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   dbc2c:	2301      	movs	r3, #1
   dbc2e:	71b3      	strb	r3, [r6, #6]
   dbc30:	e7f6      	b.n	dbc20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   dbc32:	4554      	cmp	r4, sl
   dbc34:	d106      	bne.n	dbc44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   dbc36:	4659      	mov	r1, fp
   dbc38:	4648      	mov	r0, r9
   dbc3a:	f000 f82b 	bl	dbc94 <_ZNKSt9type_infoeqERKS_>
   dbc3e:	b108      	cbz	r0, dbc44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   dbc40:	7177      	strb	r7, [r6, #5]
   dbc42:	e7ed      	b.n	dbc20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   dbc44:	f8d9 0008 	ldr.w	r0, [r9, #8]
   dbc48:	6803      	ldr	r3, [r0, #0]
   dbc4a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   dbc4e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   dbc52:	69dc      	ldr	r4, [r3, #28]
   dbc54:	463a      	mov	r2, r7
   dbc56:	4643      	mov	r3, r8
   dbc58:	4629      	mov	r1, r5
   dbc5a:	46a4      	mov	ip, r4
   dbc5c:	b001      	add	sp, #4
   dbc5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbc62:	4760      	bx	ip

000dbc64 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   dbc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbc68:	4607      	mov	r7, r0
   dbc6a:	460c      	mov	r4, r1
   dbc6c:	4615      	mov	r5, r2
   dbc6e:	461e      	mov	r6, r3
   dbc70:	f7ff ff6d 	bl	dbb4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   dbc74:	b948      	cbnz	r0, dbc8a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   dbc76:	68b8      	ldr	r0, [r7, #8]
   dbc78:	6803      	ldr	r3, [r0, #0]
   dbc7a:	699f      	ldr	r7, [r3, #24]
   dbc7c:	462a      	mov	r2, r5
   dbc7e:	4633      	mov	r3, r6
   dbc80:	4621      	mov	r1, r4
   dbc82:	46bc      	mov	ip, r7
   dbc84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   dbc88:	4760      	bx	ip
   dbc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dbc8e <_ZNSt9type_infoD1Ev>:
   dbc8e:	4770      	bx	lr

000dbc90 <_ZNKSt9type_info14__is_pointer_pEv>:
   dbc90:	2000      	movs	r0, #0
   dbc92:	4770      	bx	lr

000dbc94 <_ZNKSt9type_infoeqERKS_>:
   dbc94:	4281      	cmp	r1, r0
   dbc96:	b508      	push	{r3, lr}
   dbc98:	d00e      	beq.n	dbcb8 <_ZNKSt9type_infoeqERKS_+0x24>
   dbc9a:	6840      	ldr	r0, [r0, #4]
   dbc9c:	7803      	ldrb	r3, [r0, #0]
   dbc9e:	2b2a      	cmp	r3, #42	; 0x2a
   dbca0:	d00c      	beq.n	dbcbc <_ZNKSt9type_infoeqERKS_+0x28>
   dbca2:	6849      	ldr	r1, [r1, #4]
   dbca4:	780b      	ldrb	r3, [r1, #0]
   dbca6:	2b2a      	cmp	r3, #42	; 0x2a
   dbca8:	bf08      	it	eq
   dbcaa:	3101      	addeq	r1, #1
   dbcac:	f002 f9ed 	bl	de08a <strcmp>
   dbcb0:	fab0 f080 	clz	r0, r0
   dbcb4:	0940      	lsrs	r0, r0, #5
   dbcb6:	bd08      	pop	{r3, pc}
   dbcb8:	2001      	movs	r0, #1
   dbcba:	e7fc      	b.n	dbcb6 <_ZNKSt9type_infoeqERKS_+0x22>
   dbcbc:	2000      	movs	r0, #0
   dbcbe:	e7fa      	b.n	dbcb6 <_ZNKSt9type_infoeqERKS_+0x22>

000dbcc0 <pow>:
   dbcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbcc4:	ed2d 8b02 	vpush	{d8}
   dbcc8:	b08d      	sub	sp, #52	; 0x34
   dbcca:	ec57 6b10 	vmov	r6, r7, d0
   dbcce:	ec55 4b11 	vmov	r4, r5, d1
   dbcd2:	f000 f9ad 	bl	dc030 <__ieee754_pow>
   dbcd6:	4bae      	ldr	r3, [pc, #696]	; (dbf90 <pow+0x2d0>)
   dbcd8:	eeb0 8a40 	vmov.f32	s16, s0
   dbcdc:	eef0 8a60 	vmov.f32	s17, s1
   dbce0:	f993 9000 	ldrsb.w	r9, [r3]
   dbce4:	f1b9 3fff 	cmp.w	r9, #4294967295
   dbce8:	d037      	beq.n	dbd5a <pow+0x9a>
   dbcea:	4622      	mov	r2, r4
   dbcec:	462b      	mov	r3, r5
   dbcee:	4620      	mov	r0, r4
   dbcf0:	4629      	mov	r1, r5
   dbcf2:	f001 fdd9 	bl	dd8a8 <__aeabi_dcmpun>
   dbcf6:	4683      	mov	fp, r0
   dbcf8:	bb78      	cbnz	r0, dbd5a <pow+0x9a>
   dbcfa:	4632      	mov	r2, r6
   dbcfc:	463b      	mov	r3, r7
   dbcfe:	4630      	mov	r0, r6
   dbd00:	4639      	mov	r1, r7
   dbd02:	f001 fdd1 	bl	dd8a8 <__aeabi_dcmpun>
   dbd06:	4680      	mov	r8, r0
   dbd08:	2800      	cmp	r0, #0
   dbd0a:	f040 8093 	bne.w	dbe34 <pow+0x174>
   dbd0e:	f04f 0a00 	mov.w	sl, #0
   dbd12:	f04f 0b00 	mov.w	fp, #0
   dbd16:	4630      	mov	r0, r6
   dbd18:	4639      	mov	r1, r7
   dbd1a:	4652      	mov	r2, sl
   dbd1c:	465b      	mov	r3, fp
   dbd1e:	f001 fd91 	bl	dd844 <__aeabi_dcmpeq>
   dbd22:	b318      	cbz	r0, dbd6c <pow+0xac>
   dbd24:	4652      	mov	r2, sl
   dbd26:	465b      	mov	r3, fp
   dbd28:	4620      	mov	r0, r4
   dbd2a:	4629      	mov	r1, r5
   dbd2c:	f001 fd8a 	bl	dd844 <__aeabi_dcmpeq>
   dbd30:	9000      	str	r0, [sp, #0]
   dbd32:	2800      	cmp	r0, #0
   dbd34:	d057      	beq.n	dbde6 <pow+0x126>
   dbd36:	4b97      	ldr	r3, [pc, #604]	; (dbf94 <pow+0x2d4>)
   dbd38:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   dbd3c:	2201      	movs	r2, #1
   dbd3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dbd42:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dbd46:	e9cd ab08 	strd	sl, fp, [sp, #32]
   dbd4a:	9202      	str	r2, [sp, #8]
   dbd4c:	9303      	str	r3, [sp, #12]
   dbd4e:	f1b9 0f00 	cmp.w	r9, #0
   dbd52:	f000 8089 	beq.w	dbe68 <pow+0x1a8>
   dbd56:	ed9f 8b8a 	vldr	d8, [pc, #552]	; dbf80 <pow+0x2c0>
   dbd5a:	eeb0 0a48 	vmov.f32	s0, s16
   dbd5e:	eef0 0a68 	vmov.f32	s1, s17
   dbd62:	b00d      	add	sp, #52	; 0x34
   dbd64:	ecbd 8b02 	vpop	{d8}
   dbd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbd6c:	eeb0 0a48 	vmov.f32	s0, s16
   dbd70:	eef0 0a68 	vmov.f32	s1, s17
   dbd74:	f001 f804 	bl	dcd80 <finite>
   dbd78:	4680      	mov	r8, r0
   dbd7a:	2800      	cmp	r0, #0
   dbd7c:	f000 8082 	beq.w	dbe84 <pow+0x1c4>
   dbd80:	f04f 0800 	mov.w	r8, #0
   dbd84:	f04f 0900 	mov.w	r9, #0
   dbd88:	ec51 0b18 	vmov	r0, r1, d8
   dbd8c:	4642      	mov	r2, r8
   dbd8e:	464b      	mov	r3, r9
   dbd90:	f001 fd58 	bl	dd844 <__aeabi_dcmpeq>
   dbd94:	2800      	cmp	r0, #0
   dbd96:	d0e0      	beq.n	dbd5a <pow+0x9a>
   dbd98:	ec47 6b10 	vmov	d0, r6, r7
   dbd9c:	f000 fff0 	bl	dcd80 <finite>
   dbda0:	2800      	cmp	r0, #0
   dbda2:	d0da      	beq.n	dbd5a <pow+0x9a>
   dbda4:	ec45 4b10 	vmov	d0, r4, r5
   dbda8:	f000 ffea 	bl	dcd80 <finite>
   dbdac:	2800      	cmp	r0, #0
   dbdae:	d0d4      	beq.n	dbd5a <pow+0x9a>
   dbdb0:	4b77      	ldr	r3, [pc, #476]	; (dbf90 <pow+0x2d0>)
   dbdb2:	4a78      	ldr	r2, [pc, #480]	; (dbf94 <pow+0x2d4>)
   dbdb4:	f993 3000 	ldrsb.w	r3, [r3]
   dbdb8:	9203      	str	r2, [sp, #12]
   dbdba:	2104      	movs	r1, #4
   dbdbc:	2200      	movs	r2, #0
   dbdbe:	2b02      	cmp	r3, #2
   dbdc0:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dbdc4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dbdc8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dbdcc:	9102      	str	r1, [sp, #8]
   dbdce:	920a      	str	r2, [sp, #40]	; 0x28
   dbdd0:	d004      	beq.n	dbddc <pow+0x11c>
   dbdd2:	a802      	add	r0, sp, #8
   dbdd4:	f000 ffe0 	bl	dcd98 <matherr>
   dbdd8:	2800      	cmp	r0, #0
   dbdda:	d14a      	bne.n	dbe72 <pow+0x1b2>
   dbddc:	f7fd fa92 	bl	d9304 <__errno>
   dbde0:	2322      	movs	r3, #34	; 0x22
   dbde2:	6003      	str	r3, [r0, #0]
   dbde4:	e045      	b.n	dbe72 <pow+0x1b2>
   dbde6:	ec45 4b10 	vmov	d0, r4, r5
   dbdea:	f000 ffc9 	bl	dcd80 <finite>
   dbdee:	2800      	cmp	r0, #0
   dbdf0:	d0b3      	beq.n	dbd5a <pow+0x9a>
   dbdf2:	4652      	mov	r2, sl
   dbdf4:	465b      	mov	r3, fp
   dbdf6:	4620      	mov	r0, r4
   dbdf8:	4629      	mov	r1, r5
   dbdfa:	f001 fd2d 	bl	dd858 <__aeabi_dcmplt>
   dbdfe:	2800      	cmp	r0, #0
   dbe00:	d0ab      	beq.n	dbd5a <pow+0x9a>
   dbe02:	4b63      	ldr	r3, [pc, #396]	; (dbf90 <pow+0x2d0>)
   dbe04:	9900      	ldr	r1, [sp, #0]
   dbe06:	4a63      	ldr	r2, [pc, #396]	; (dbf94 <pow+0x2d4>)
   dbe08:	f993 3000 	ldrsb.w	r3, [r3]
   dbe0c:	910a      	str	r1, [sp, #40]	; 0x28
   dbe0e:	2101      	movs	r1, #1
   dbe10:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dbe14:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dbe18:	e9cd 1202 	strd	r1, r2, [sp, #8]
   dbe1c:	2b00      	cmp	r3, #0
   dbe1e:	d16f      	bne.n	dbf00 <pow+0x240>
   dbe20:	e9cd ab08 	strd	sl, fp, [sp, #32]
   dbe24:	a802      	add	r0, sp, #8
   dbe26:	f000 ffb7 	bl	dcd98 <matherr>
   dbe2a:	2800      	cmp	r0, #0
   dbe2c:	d06e      	beq.n	dbf0c <pow+0x24c>
   dbe2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe30:	b32b      	cbz	r3, dbe7e <pow+0x1be>
   dbe32:	e020      	b.n	dbe76 <pow+0x1b6>
   dbe34:	2200      	movs	r2, #0
   dbe36:	2300      	movs	r3, #0
   dbe38:	4620      	mov	r0, r4
   dbe3a:	4629      	mov	r1, r5
   dbe3c:	f001 fd02 	bl	dd844 <__aeabi_dcmpeq>
   dbe40:	2800      	cmp	r0, #0
   dbe42:	d08a      	beq.n	dbd5a <pow+0x9a>
   dbe44:	ed9f 8b4e 	vldr	d8, [pc, #312]	; dbf80 <pow+0x2c0>
   dbe48:	4b52      	ldr	r3, [pc, #328]	; (dbf94 <pow+0x2d4>)
   dbe4a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   dbe4e:	2201      	movs	r2, #1
   dbe50:	f1b9 0f02 	cmp.w	r9, #2
   dbe54:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dbe58:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dbe5c:	ed8d 8b08 	vstr	d8, [sp, #32]
   dbe60:	9202      	str	r2, [sp, #8]
   dbe62:	9303      	str	r3, [sp, #12]
   dbe64:	f43f af79 	beq.w	dbd5a <pow+0x9a>
   dbe68:	a802      	add	r0, sp, #8
   dbe6a:	f000 ff95 	bl	dcd98 <matherr>
   dbe6e:	2800      	cmp	r0, #0
   dbe70:	d051      	beq.n	dbf16 <pow+0x256>
   dbe72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe74:	b11b      	cbz	r3, dbe7e <pow+0x1be>
   dbe76:	f7fd fa45 	bl	d9304 <__errno>
   dbe7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe7c:	6003      	str	r3, [r0, #0]
   dbe7e:	ed9d 8b08 	vldr	d8, [sp, #32]
   dbe82:	e76a      	b.n	dbd5a <pow+0x9a>
   dbe84:	ec47 6b10 	vmov	d0, r6, r7
   dbe88:	f000 ff7a 	bl	dcd80 <finite>
   dbe8c:	2800      	cmp	r0, #0
   dbe8e:	f43f af77 	beq.w	dbd80 <pow+0xc0>
   dbe92:	ec45 4b10 	vmov	d0, r4, r5
   dbe96:	f000 ff73 	bl	dcd80 <finite>
   dbe9a:	2800      	cmp	r0, #0
   dbe9c:	f43f af70 	beq.w	dbd80 <pow+0xc0>
   dbea0:	ec53 2b18 	vmov	r2, r3, d8
   dbea4:	ee18 0a10 	vmov	r0, s16
   dbea8:	4619      	mov	r1, r3
   dbeaa:	f001 fcfd 	bl	dd8a8 <__aeabi_dcmpun>
   dbeae:	4b38      	ldr	r3, [pc, #224]	; (dbf90 <pow+0x2d0>)
   dbeb0:	2800      	cmp	r0, #0
   dbeb2:	f040 8096 	bne.w	dbfe2 <pow+0x322>
   dbeb6:	f993 8000 	ldrsb.w	r8, [r3]
   dbeba:	900a      	str	r0, [sp, #40]	; 0x28
   dbebc:	2303      	movs	r3, #3
   dbebe:	9302      	str	r3, [sp, #8]
   dbec0:	4b34      	ldr	r3, [pc, #208]	; (dbf94 <pow+0x2d4>)
   dbec2:	9303      	str	r3, [sp, #12]
   dbec4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dbec8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dbecc:	f1b8 0f00 	cmp.w	r8, #0
   dbed0:	d126      	bne.n	dbf20 <pow+0x260>
   dbed2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; dbfa4 <pow+0x2e4>
   dbed6:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   dbeda:	4652      	mov	r2, sl
   dbedc:	465b      	mov	r3, fp
   dbede:	4630      	mov	r0, r6
   dbee0:	4639      	mov	r1, r7
   dbee2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dbee6:	f001 fcb7 	bl	dd858 <__aeabi_dcmplt>
   dbeea:	bb48      	cbnz	r0, dbf40 <pow+0x280>
   dbeec:	a802      	add	r0, sp, #8
   dbeee:	f000 ff53 	bl	dcd98 <matherr>
   dbef2:	2800      	cmp	r0, #0
   dbef4:	d19b      	bne.n	dbe2e <pow+0x16e>
   dbef6:	f7fd fa05 	bl	d9304 <__errno>
   dbefa:	2322      	movs	r3, #34	; 0x22
   dbefc:	6003      	str	r3, [r0, #0]
   dbefe:	e796      	b.n	dbe2e <pow+0x16e>
   dbf00:	4925      	ldr	r1, [pc, #148]	; (dbf98 <pow+0x2d8>)
   dbf02:	2000      	movs	r0, #0
   dbf04:	2b02      	cmp	r3, #2
   dbf06:	e9cd 0108 	strd	r0, r1, [sp, #32]
   dbf0a:	d18b      	bne.n	dbe24 <pow+0x164>
   dbf0c:	f7fd f9fa 	bl	d9304 <__errno>
   dbf10:	2321      	movs	r3, #33	; 0x21
   dbf12:	6003      	str	r3, [r0, #0]
   dbf14:	e78b      	b.n	dbe2e <pow+0x16e>
   dbf16:	f7fd f9f5 	bl	d9304 <__errno>
   dbf1a:	2321      	movs	r3, #33	; 0x21
   dbf1c:	6003      	str	r3, [r0, #0]
   dbf1e:	e7a8      	b.n	dbe72 <pow+0x1b2>
   dbf20:	ed9f 7b19 	vldr	d7, [pc, #100]	; dbf88 <pow+0x2c8>
   dbf24:	4652      	mov	r2, sl
   dbf26:	465b      	mov	r3, fp
   dbf28:	4630      	mov	r0, r6
   dbf2a:	4639      	mov	r1, r7
   dbf2c:	ed8d 7b08 	vstr	d7, [sp, #32]
   dbf30:	f001 fc92 	bl	dd858 <__aeabi_dcmplt>
   dbf34:	2800      	cmp	r0, #0
   dbf36:	d137      	bne.n	dbfa8 <pow+0x2e8>
   dbf38:	f1b8 0f02 	cmp.w	r8, #2
   dbf3c:	d0db      	beq.n	dbef6 <pow+0x236>
   dbf3e:	e7d5      	b.n	dbeec <pow+0x22c>
   dbf40:	4b16      	ldr	r3, [pc, #88]	; (dbf9c <pow+0x2dc>)
   dbf42:	2200      	movs	r2, #0
   dbf44:	4620      	mov	r0, r4
   dbf46:	4629      	mov	r1, r5
   dbf48:	f001 fa14 	bl	dd374 <__aeabi_dmul>
   dbf4c:	4602      	mov	r2, r0
   dbf4e:	460b      	mov	r3, r1
   dbf50:	ec43 2b10 	vmov	d0, r2, r3
   dbf54:	e9cd 2300 	strd	r2, r3, [sp]
   dbf58:	f000 ff2a 	bl	dcdb0 <rint>
   dbf5c:	e9dd 2300 	ldrd	r2, r3, [sp]
   dbf60:	ec51 0b10 	vmov	r0, r1, d0
   dbf64:	f001 fc6e 	bl	dd844 <__aeabi_dcmpeq>
   dbf68:	2800      	cmp	r0, #0
   dbf6a:	d136      	bne.n	dbfda <pow+0x31a>
   dbf6c:	4b0c      	ldr	r3, [pc, #48]	; (dbfa0 <pow+0x2e0>)
   dbf6e:	4908      	ldr	r1, [pc, #32]	; (dbf90 <pow+0x2d0>)
   dbf70:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dbf74:	e9cd 2308 	strd	r2, r3, [sp, #32]
   dbf78:	f991 8000 	ldrsb.w	r8, [r1]
   dbf7c:	e7dc      	b.n	dbf38 <pow+0x278>
   dbf7e:	bf00      	nop
   dbf80:	00000000 	.word	0x00000000
   dbf84:	3ff00000 	.word	0x3ff00000
   dbf88:	00000000 	.word	0x00000000
   dbf8c:	7ff00000 	.word	0x7ff00000
   dbf90:	2003ddb4 	.word	0x2003ddb4
   dbf94:	000df16c 	.word	0x000df16c
   dbf98:	fff00000 	.word	0xfff00000
   dbf9c:	3fe00000 	.word	0x3fe00000
   dbfa0:	c7efffff 	.word	0xc7efffff
   dbfa4:	47efffff 	.word	0x47efffff
   dbfa8:	4b1c      	ldr	r3, [pc, #112]	; (dc01c <pow+0x35c>)
   dbfaa:	2200      	movs	r2, #0
   dbfac:	4620      	mov	r0, r4
   dbfae:	4629      	mov	r1, r5
   dbfb0:	f001 f9e0 	bl	dd374 <__aeabi_dmul>
   dbfb4:	4602      	mov	r2, r0
   dbfb6:	460b      	mov	r3, r1
   dbfb8:	ec43 2b10 	vmov	d0, r2, r3
   dbfbc:	e9cd 2300 	strd	r2, r3, [sp]
   dbfc0:	f000 fef6 	bl	dcdb0 <rint>
   dbfc4:	e9dd 2300 	ldrd	r2, r3, [sp]
   dbfc8:	ec51 0b10 	vmov	r0, r1, d0
   dbfcc:	f001 fc3a 	bl	dd844 <__aeabi_dcmpeq>
   dbfd0:	b918      	cbnz	r0, dbfda <pow+0x31a>
   dbfd2:	4b13      	ldr	r3, [pc, #76]	; (dc020 <pow+0x360>)
   dbfd4:	2200      	movs	r2, #0
   dbfd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   dbfda:	4b12      	ldr	r3, [pc, #72]	; (dc024 <pow+0x364>)
   dbfdc:	f993 8000 	ldrsb.w	r8, [r3]
   dbfe0:	e7aa      	b.n	dbf38 <pow+0x278>
   dbfe2:	f993 9000 	ldrsb.w	r9, [r3]
   dbfe6:	4b10      	ldr	r3, [pc, #64]	; (dc028 <pow+0x368>)
   dbfe8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   dbfec:	2201      	movs	r2, #1
   dbfee:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dbff2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dbff6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   dbffa:	f1b9 0f00 	cmp.w	r9, #0
   dbffe:	f43f af0f 	beq.w	dbe20 <pow+0x160>
   dc002:	4652      	mov	r2, sl
   dc004:	465b      	mov	r3, fp
   dc006:	4650      	mov	r0, sl
   dc008:	4659      	mov	r1, fp
   dc00a:	f001 fadd 	bl	dd5c8 <__aeabi_ddiv>
   dc00e:	f1b9 0f02 	cmp.w	r9, #2
   dc012:	e9cd 0108 	strd	r0, r1, [sp, #32]
   dc016:	f43f af79 	beq.w	dbf0c <pow+0x24c>
   dc01a:	e703      	b.n	dbe24 <pow+0x164>
   dc01c:	3fe00000 	.word	0x3fe00000
   dc020:	fff00000 	.word	0xfff00000
   dc024:	2003ddb4 	.word	0x2003ddb4
   dc028:	000df16c 	.word	0x000df16c
   dc02c:	00000000 	.word	0x00000000

000dc030 <__ieee754_pow>:
   dc030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc034:	ec57 6b11 	vmov	r6, r7, d1
   dc038:	ed2d 8b0a 	vpush	{d8-d12}
   dc03c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   dc040:	ea5a 0206 	orrs.w	r2, sl, r6
   dc044:	b089      	sub	sp, #36	; 0x24
   dc046:	d03d      	beq.n	dc0c4 <__ieee754_pow+0x94>
   dc048:	ec55 4b10 	vmov	r4, r5, d0
   dc04c:	4976      	ldr	r1, [pc, #472]	; (dc228 <__ieee754_pow+0x1f8>)
   dc04e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   dc052:	4588      	cmp	r8, r1
   dc054:	ee10 2a10 	vmov	r2, s0
   dc058:	46a9      	mov	r9, r5
   dc05a:	dc2c      	bgt.n	dc0b6 <__ieee754_pow+0x86>
   dc05c:	ee11 3a10 	vmov	r3, s2
   dc060:	46bb      	mov	fp, r7
   dc062:	d03a      	beq.n	dc0da <__ieee754_pow+0xaa>
   dc064:	458a      	cmp	sl, r1
   dc066:	dc26      	bgt.n	dc0b6 <__ieee754_pow+0x86>
   dc068:	496f      	ldr	r1, [pc, #444]	; (dc228 <__ieee754_pow+0x1f8>)
   dc06a:	458a      	cmp	sl, r1
   dc06c:	d021      	beq.n	dc0b2 <__ieee754_pow+0x82>
   dc06e:	f1b9 0f00 	cmp.w	r9, #0
   dc072:	db3d      	blt.n	dc0f0 <__ieee754_pow+0xc0>
   dc074:	2100      	movs	r1, #0
   dc076:	9103      	str	r1, [sp, #12]
   dc078:	2b00      	cmp	r3, #0
   dc07a:	d155      	bne.n	dc128 <__ieee754_pow+0xf8>
   dc07c:	4b6a      	ldr	r3, [pc, #424]	; (dc228 <__ieee754_pow+0x1f8>)
   dc07e:	459a      	cmp	sl, r3
   dc080:	f000 80a8 	beq.w	dc1d4 <__ieee754_pow+0x1a4>
   dc084:	4b69      	ldr	r3, [pc, #420]	; (dc22c <__ieee754_pow+0x1fc>)
   dc086:	459a      	cmp	sl, r3
   dc088:	f000 80b6 	beq.w	dc1f8 <__ieee754_pow+0x1c8>
   dc08c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   dc090:	f000 8501 	beq.w	dca96 <__ieee754_pow+0xa66>
   dc094:	4b66      	ldr	r3, [pc, #408]	; (dc230 <__ieee754_pow+0x200>)
   dc096:	459b      	cmp	fp, r3
   dc098:	d146      	bne.n	dc128 <__ieee754_pow+0xf8>
   dc09a:	f1b9 0f00 	cmp.w	r9, #0
   dc09e:	db43      	blt.n	dc128 <__ieee754_pow+0xf8>
   dc0a0:	ec45 4b10 	vmov	d0, r4, r5
   dc0a4:	b009      	add	sp, #36	; 0x24
   dc0a6:	ecbd 8b0a 	vpop	{d8-d12}
   dc0aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc0ae:	f000 bd99 	b.w	dcbe4 <__ieee754_sqrt>
   dc0b2:	2b00      	cmp	r3, #0
   dc0b4:	d0db      	beq.n	dc06e <__ieee754_pow+0x3e>
   dc0b6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   dc0ba:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   dc0be:	ea58 0302 	orrs.w	r3, r8, r2
   dc0c2:	d10d      	bne.n	dc0e0 <__ieee754_pow+0xb0>
   dc0c4:	ed9f 7b54 	vldr	d7, [pc, #336]	; dc218 <__ieee754_pow+0x1e8>
   dc0c8:	ed8d 7b00 	vstr	d7, [sp]
   dc0cc:	ed9d 0b00 	vldr	d0, [sp]
   dc0d0:	b009      	add	sp, #36	; 0x24
   dc0d2:	ecbd 8b0a 	vpop	{d8-d12}
   dc0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc0da:	b90c      	cbnz	r4, dc0e0 <__ieee754_pow+0xb0>
   dc0dc:	45c2      	cmp	sl, r8
   dc0de:	ddc3      	ble.n	dc068 <__ieee754_pow+0x38>
   dc0e0:	4854      	ldr	r0, [pc, #336]	; (dc234 <__ieee754_pow+0x204>)
   dc0e2:	b009      	add	sp, #36	; 0x24
   dc0e4:	ecbd 8b0a 	vpop	{d8-d12}
   dc0e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc0ec:	f000 be58 	b.w	dcda0 <nan>
   dc0f0:	4951      	ldr	r1, [pc, #324]	; (dc238 <__ieee754_pow+0x208>)
   dc0f2:	458a      	cmp	sl, r1
   dc0f4:	f300 8087 	bgt.w	dc206 <__ieee754_pow+0x1d6>
   dc0f8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   dc0fc:	458a      	cmp	sl, r1
   dc0fe:	dd0f      	ble.n	dc120 <__ieee754_pow+0xf0>
   dc100:	ea4f 512a 	mov.w	r1, sl, asr #20
   dc104:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   dc108:	2914      	cmp	r1, #20
   dc10a:	f340 84ce 	ble.w	dcaaa <__ieee754_pow+0xa7a>
   dc10e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   dc112:	fa23 f001 	lsr.w	r0, r3, r1
   dc116:	fa00 f101 	lsl.w	r1, r0, r1
   dc11a:	4299      	cmp	r1, r3
   dc11c:	f000 8520 	beq.w	dcb60 <__ieee754_pow+0xb30>
   dc120:	2100      	movs	r1, #0
   dc122:	9103      	str	r1, [sp, #12]
   dc124:	2b00      	cmp	r3, #0
   dc126:	d0ad      	beq.n	dc084 <__ieee754_pow+0x54>
   dc128:	ec45 4b10 	vmov	d0, r4, r5
   dc12c:	9206      	str	r2, [sp, #24]
   dc12e:	f000 fe1d 	bl	dcd6c <fabs>
   dc132:	9a06      	ldr	r2, [sp, #24]
   dc134:	ed8d 0b00 	vstr	d0, [sp]
   dc138:	bb5a      	cbnz	r2, dc192 <__ieee754_pow+0x162>
   dc13a:	f1b8 0f00 	cmp.w	r8, #0
   dc13e:	d004      	beq.n	dc14a <__ieee754_pow+0x11a>
   dc140:	4b3a      	ldr	r3, [pc, #232]	; (dc22c <__ieee754_pow+0x1fc>)
   dc142:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   dc146:	429a      	cmp	r2, r3
   dc148:	d123      	bne.n	dc192 <__ieee754_pow+0x162>
   dc14a:	f1bb 0f00 	cmp.w	fp, #0
   dc14e:	da07      	bge.n	dc160 <__ieee754_pow+0x130>
   dc150:	e9dd 2300 	ldrd	r2, r3, [sp]
   dc154:	4935      	ldr	r1, [pc, #212]	; (dc22c <__ieee754_pow+0x1fc>)
   dc156:	2000      	movs	r0, #0
   dc158:	f001 fa36 	bl	dd5c8 <__aeabi_ddiv>
   dc15c:	e9cd 0100 	strd	r0, r1, [sp]
   dc160:	f1b9 0f00 	cmp.w	r9, #0
   dc164:	dab2      	bge.n	dc0cc <__ieee754_pow+0x9c>
   dc166:	9b03      	ldr	r3, [sp, #12]
   dc168:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   dc16c:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   dc170:	ea58 0303 	orrs.w	r3, r8, r3
   dc174:	f040 84be 	bne.w	dcaf4 <__ieee754_pow+0xac4>
   dc178:	e9dd 2300 	ldrd	r2, r3, [sp]
   dc17c:	4610      	mov	r0, r2
   dc17e:	4619      	mov	r1, r3
   dc180:	f000 ff40 	bl	dd004 <__aeabi_dsub>
   dc184:	4602      	mov	r2, r0
   dc186:	460b      	mov	r3, r1
   dc188:	f001 fa1e 	bl	dd5c8 <__aeabi_ddiv>
   dc18c:	e9cd 0100 	strd	r0, r1, [sp]
   dc190:	e79c      	b.n	dc0cc <__ieee754_pow+0x9c>
   dc192:	9a03      	ldr	r2, [sp, #12]
   dc194:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   dc198:	3b01      	subs	r3, #1
   dc19a:	9306      	str	r3, [sp, #24]
   dc19c:	4313      	orrs	r3, r2
   dc19e:	d035      	beq.n	dc20c <__ieee754_pow+0x1dc>
   dc1a0:	4b26      	ldr	r3, [pc, #152]	; (dc23c <__ieee754_pow+0x20c>)
   dc1a2:	459a      	cmp	sl, r3
   dc1a4:	dd4e      	ble.n	dc244 <__ieee754_pow+0x214>
   dc1a6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   dc1aa:	459a      	cmp	sl, r3
   dc1ac:	4b24      	ldr	r3, [pc, #144]	; (dc240 <__ieee754_pow+0x210>)
   dc1ae:	f340 83ed 	ble.w	dc98c <__ieee754_pow+0x95c>
   dc1b2:	4598      	cmp	r8, r3
   dc1b4:	f340 836b 	ble.w	dc88e <__ieee754_pow+0x85e>
   dc1b8:	f1bb 0f00 	cmp.w	fp, #0
   dc1bc:	f340 836b 	ble.w	dc896 <__ieee754_pow+0x866>
   dc1c0:	a317      	add	r3, pc, #92	; (adr r3, dc220 <__ieee754_pow+0x1f0>)
   dc1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1c6:	4610      	mov	r0, r2
   dc1c8:	4619      	mov	r1, r3
   dc1ca:	f001 f8d3 	bl	dd374 <__aeabi_dmul>
   dc1ce:	e9cd 0100 	strd	r0, r1, [sp]
   dc1d2:	e77b      	b.n	dc0cc <__ieee754_pow+0x9c>
   dc1d4:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   dc1d8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   dc1dc:	4313      	orrs	r3, r2
   dc1de:	f43f af71 	beq.w	dc0c4 <__ieee754_pow+0x94>
   dc1e2:	4b17      	ldr	r3, [pc, #92]	; (dc240 <__ieee754_pow+0x210>)
   dc1e4:	4598      	cmp	r8, r3
   dc1e6:	f340 8388 	ble.w	dc8fa <__ieee754_pow+0x8ca>
   dc1ea:	f1bb 0f00 	cmp.w	fp, #0
   dc1ee:	f2c0 8352 	blt.w	dc896 <__ieee754_pow+0x866>
   dc1f2:	e9cd 6700 	strd	r6, r7, [sp]
   dc1f6:	e769      	b.n	dc0cc <__ieee754_pow+0x9c>
   dc1f8:	f1bb 0f00 	cmp.w	fp, #0
   dc1fc:	f2c0 8441 	blt.w	dca82 <__ieee754_pow+0xa52>
   dc200:	e9cd 4500 	strd	r4, r5, [sp]
   dc204:	e762      	b.n	dc0cc <__ieee754_pow+0x9c>
   dc206:	2102      	movs	r1, #2
   dc208:	9103      	str	r1, [sp, #12]
   dc20a:	e735      	b.n	dc078 <__ieee754_pow+0x48>
   dc20c:	4622      	mov	r2, r4
   dc20e:	462b      	mov	r3, r5
   dc210:	e7b4      	b.n	dc17c <__ieee754_pow+0x14c>
   dc212:	bf00      	nop
   dc214:	f3af 8000 	nop.w
   dc218:	00000000 	.word	0x00000000
   dc21c:	3ff00000 	.word	0x3ff00000
   dc220:	8800759c 	.word	0x8800759c
   dc224:	7e37e43c 	.word	0x7e37e43c
   dc228:	7ff00000 	.word	0x7ff00000
   dc22c:	3ff00000 	.word	0x3ff00000
   dc230:	3fe00000 	.word	0x3fe00000
   dc234:	000df170 	.word	0x000df170
   dc238:	433fffff 	.word	0x433fffff
   dc23c:	41e00000 	.word	0x41e00000
   dc240:	3fefffff 	.word	0x3fefffff
   dc244:	4be4      	ldr	r3, [pc, #912]	; (dc5d8 <__ieee754_pow+0x5a8>)
   dc246:	ea09 0303 	and.w	r3, r9, r3
   dc24a:	2b00      	cmp	r3, #0
   dc24c:	f040 8416 	bne.w	dca7c <__ieee754_pow+0xa4c>
   dc250:	e9dd 0100 	ldrd	r0, r1, [sp]
   dc254:	4be1      	ldr	r3, [pc, #900]	; (dc5dc <__ieee754_pow+0x5ac>)
   dc256:	2200      	movs	r2, #0
   dc258:	f001 f88c 	bl	dd374 <__aeabi_dmul>
   dc25c:	e9cd 0100 	strd	r0, r1, [sp]
   dc260:	f8dd 8004 	ldr.w	r8, [sp, #4]
   dc264:	f06f 0034 	mvn.w	r0, #52	; 0x34
   dc268:	ea4f 5328 	mov.w	r3, r8, asr #20
   dc26c:	49dc      	ldr	r1, [pc, #880]	; (dc5e0 <__ieee754_pow+0x5b0>)
   dc26e:	f3c8 0213 	ubfx	r2, r8, #0, #20
   dc272:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   dc276:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   dc27a:	1818      	adds	r0, r3, r0
   dc27c:	428a      	cmp	r2, r1
   dc27e:	9007      	str	r0, [sp, #28]
   dc280:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   dc284:	f340 83e9 	ble.w	dca5a <__ieee754_pow+0xa2a>
   dc288:	4bd6      	ldr	r3, [pc, #856]	; (dc5e4 <__ieee754_pow+0x5b4>)
   dc28a:	429a      	cmp	r2, r3
   dc28c:	f340 843e 	ble.w	dcb0c <__ieee754_pow+0xadc>
   dc290:	ed9f 7bbb 	vldr	d7, [pc, #748]	; dc580 <__ieee754_pow+0x550>
   dc294:	eeb0 ba47 	vmov.f32	s22, s14
   dc298:	eef0 ba67 	vmov.f32	s23, s15
   dc29c:	eeb0 ca47 	vmov.f32	s24, s14
   dc2a0:	eef0 ca67 	vmov.f32	s25, s15
   dc2a4:	ed9f 7bb8 	vldr	d7, [pc, #736]	; dc588 <__ieee754_pow+0x558>
   dc2a8:	3001      	adds	r0, #1
   dc2aa:	ec54 3b17 	vmov	r3, r4, d7
   dc2ae:	9007      	str	r0, [sp, #28]
   dc2b0:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   dc2b4:	f04f 0900 	mov.w	r9, #0
   dc2b8:	e9dd ab00 	ldrd	sl, fp, [sp]
   dc2bc:	ec44 3b18 	vmov	d8, r3, r4
   dc2c0:	461a      	mov	r2, r3
   dc2c2:	4650      	mov	r0, sl
   dc2c4:	4623      	mov	r3, r4
   dc2c6:	4641      	mov	r1, r8
   dc2c8:	f000 fe9c 	bl	dd004 <__aeabi_dsub>
   dc2cc:	ec53 2b18 	vmov	r2, r3, d8
   dc2d0:	4604      	mov	r4, r0
   dc2d2:	460d      	mov	r5, r1
   dc2d4:	4650      	mov	r0, sl
   dc2d6:	4641      	mov	r1, r8
   dc2d8:	f000 fe96 	bl	dd008 <__adddf3>
   dc2dc:	4602      	mov	r2, r0
   dc2de:	460b      	mov	r3, r1
   dc2e0:	2000      	movs	r0, #0
   dc2e2:	49c1      	ldr	r1, [pc, #772]	; (dc5e8 <__ieee754_pow+0x5b8>)
   dc2e4:	f001 f970 	bl	dd5c8 <__aeabi_ddiv>
   dc2e8:	ec45 4b1a 	vmov	d10, r4, r5
   dc2ec:	ec41 0b19 	vmov	d9, r0, r1
   dc2f0:	ec51 0b1a 	vmov	r0, r1, d10
   dc2f4:	ec53 2b19 	vmov	r2, r3, d9
   dc2f8:	f001 f83c 	bl	dd374 <__aeabi_dmul>
   dc2fc:	46c3      	mov	fp, r8
   dc2fe:	ea4f 0868 	mov.w	r8, r8, asr #1
   dc302:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   dc306:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   dc30a:	eb03 0509 	add.w	r5, r3, r9
   dc30e:	460a      	mov	r2, r1
   dc310:	2300      	movs	r3, #0
   dc312:	4601      	mov	r1, r0
   dc314:	e9cd 1200 	strd	r1, r2, [sp]
   dc318:	9300      	str	r3, [sp, #0]
   dc31a:	e9dd 8900 	ldrd	r8, r9, [sp]
   dc31e:	2400      	movs	r4, #0
   dc320:	e9cd 1204 	strd	r1, r2, [sp, #16]
   dc324:	462b      	mov	r3, r5
   dc326:	4622      	mov	r2, r4
   dc328:	4640      	mov	r0, r8
   dc32a:	4649      	mov	r1, r9
   dc32c:	f001 f822 	bl	dd374 <__aeabi_dmul>
   dc330:	4602      	mov	r2, r0
   dc332:	460b      	mov	r3, r1
   dc334:	ec51 0b1a 	vmov	r0, r1, d10
   dc338:	f000 fe64 	bl	dd004 <__aeabi_dsub>
   dc33c:	ec41 0b17 	vmov	d7, r0, r1
   dc340:	ec53 2b18 	vmov	r2, r3, d8
   dc344:	4620      	mov	r0, r4
   dc346:	4629      	mov	r1, r5
   dc348:	ec55 4b17 	vmov	r4, r5, d7
   dc34c:	f000 fe5a 	bl	dd004 <__aeabi_dsub>
   dc350:	4602      	mov	r2, r0
   dc352:	460b      	mov	r3, r1
   dc354:	4650      	mov	r0, sl
   dc356:	4659      	mov	r1, fp
   dc358:	f000 fe54 	bl	dd004 <__aeabi_dsub>
   dc35c:	4642      	mov	r2, r8
   dc35e:	464b      	mov	r3, r9
   dc360:	f001 f808 	bl	dd374 <__aeabi_dmul>
   dc364:	4602      	mov	r2, r0
   dc366:	460b      	mov	r3, r1
   dc368:	4620      	mov	r0, r4
   dc36a:	4629      	mov	r1, r5
   dc36c:	f000 fe4a 	bl	dd004 <__aeabi_dsub>
   dc370:	ec53 2b19 	vmov	r2, r3, d9
   dc374:	f000 fffe 	bl	dd374 <__aeabi_dmul>
   dc378:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dc37c:	4604      	mov	r4, r0
   dc37e:	460d      	mov	r5, r1
   dc380:	4652      	mov	r2, sl
   dc382:	465b      	mov	r3, fp
   dc384:	4650      	mov	r0, sl
   dc386:	4659      	mov	r1, fp
   dc388:	f000 fff4 	bl	dd374 <__aeabi_dmul>
   dc38c:	a380      	add	r3, pc, #512	; (adr r3, dc590 <__ieee754_pow+0x560>)
   dc38e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc392:	ec45 4b1a 	vmov	d10, r4, r5
   dc396:	4604      	mov	r4, r0
   dc398:	460d      	mov	r5, r1
   dc39a:	f000 ffeb 	bl	dd374 <__aeabi_dmul>
   dc39e:	a37e      	add	r3, pc, #504	; (adr r3, dc598 <__ieee754_pow+0x568>)
   dc3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3a4:	f000 fe30 	bl	dd008 <__adddf3>
   dc3a8:	4622      	mov	r2, r4
   dc3aa:	462b      	mov	r3, r5
   dc3ac:	f000 ffe2 	bl	dd374 <__aeabi_dmul>
   dc3b0:	a37b      	add	r3, pc, #492	; (adr r3, dc5a0 <__ieee754_pow+0x570>)
   dc3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3b6:	f000 fe27 	bl	dd008 <__adddf3>
   dc3ba:	4622      	mov	r2, r4
   dc3bc:	462b      	mov	r3, r5
   dc3be:	f000 ffd9 	bl	dd374 <__aeabi_dmul>
   dc3c2:	a379      	add	r3, pc, #484	; (adr r3, dc5a8 <__ieee754_pow+0x578>)
   dc3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3c8:	f000 fe1e 	bl	dd008 <__adddf3>
   dc3cc:	4622      	mov	r2, r4
   dc3ce:	462b      	mov	r3, r5
   dc3d0:	f000 ffd0 	bl	dd374 <__aeabi_dmul>
   dc3d4:	a376      	add	r3, pc, #472	; (adr r3, dc5b0 <__ieee754_pow+0x580>)
   dc3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3da:	f000 fe15 	bl	dd008 <__adddf3>
   dc3de:	4622      	mov	r2, r4
   dc3e0:	462b      	mov	r3, r5
   dc3e2:	f000 ffc7 	bl	dd374 <__aeabi_dmul>
   dc3e6:	a374      	add	r3, pc, #464	; (adr r3, dc5b8 <__ieee754_pow+0x588>)
   dc3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3ec:	f000 fe0c 	bl	dd008 <__adddf3>
   dc3f0:	4622      	mov	r2, r4
   dc3f2:	462b      	mov	r3, r5
   dc3f4:	4604      	mov	r4, r0
   dc3f6:	460d      	mov	r5, r1
   dc3f8:	4610      	mov	r0, r2
   dc3fa:	4619      	mov	r1, r3
   dc3fc:	f000 ffba 	bl	dd374 <__aeabi_dmul>
   dc400:	4602      	mov	r2, r0
   dc402:	460b      	mov	r3, r1
   dc404:	4620      	mov	r0, r4
   dc406:	4629      	mov	r1, r5
   dc408:	f000 ffb4 	bl	dd374 <__aeabi_dmul>
   dc40c:	4642      	mov	r2, r8
   dc40e:	4604      	mov	r4, r0
   dc410:	460d      	mov	r5, r1
   dc412:	464b      	mov	r3, r9
   dc414:	4650      	mov	r0, sl
   dc416:	4659      	mov	r1, fp
   dc418:	e9cd ab04 	strd	sl, fp, [sp, #16]
   dc41c:	f000 fdf4 	bl	dd008 <__adddf3>
   dc420:	ec53 2b1a 	vmov	r2, r3, d10
   dc424:	f000 ffa6 	bl	dd374 <__aeabi_dmul>
   dc428:	4622      	mov	r2, r4
   dc42a:	462b      	mov	r3, r5
   dc42c:	f000 fdec 	bl	dd008 <__adddf3>
   dc430:	4642      	mov	r2, r8
   dc432:	4604      	mov	r4, r0
   dc434:	460d      	mov	r5, r1
   dc436:	464b      	mov	r3, r9
   dc438:	4640      	mov	r0, r8
   dc43a:	4649      	mov	r1, r9
   dc43c:	f000 ff9a 	bl	dd374 <__aeabi_dmul>
   dc440:	ec45 4b19 	vmov	d9, r4, r5
   dc444:	4b69      	ldr	r3, [pc, #420]	; (dc5ec <__ieee754_pow+0x5bc>)
   dc446:	2200      	movs	r2, #0
   dc448:	4682      	mov	sl, r0
   dc44a:	468b      	mov	fp, r1
   dc44c:	f000 fddc 	bl	dd008 <__adddf3>
   dc450:	ec53 2b19 	vmov	r2, r3, d9
   dc454:	f000 fdd8 	bl	dd008 <__adddf3>
   dc458:	9c00      	ldr	r4, [sp, #0]
   dc45a:	460d      	mov	r5, r1
   dc45c:	4622      	mov	r2, r4
   dc45e:	462b      	mov	r3, r5
   dc460:	4640      	mov	r0, r8
   dc462:	4649      	mov	r1, r9
   dc464:	f000 ff86 	bl	dd374 <__aeabi_dmul>
   dc468:	4b60      	ldr	r3, [pc, #384]	; (dc5ec <__ieee754_pow+0x5bc>)
   dc46a:	4680      	mov	r8, r0
   dc46c:	4689      	mov	r9, r1
   dc46e:	2200      	movs	r2, #0
   dc470:	4620      	mov	r0, r4
   dc472:	4629      	mov	r1, r5
   dc474:	f000 fdc6 	bl	dd004 <__aeabi_dsub>
   dc478:	4652      	mov	r2, sl
   dc47a:	465b      	mov	r3, fp
   dc47c:	f000 fdc2 	bl	dd004 <__aeabi_dsub>
   dc480:	4602      	mov	r2, r0
   dc482:	460b      	mov	r3, r1
   dc484:	ec51 0b19 	vmov	r0, r1, d9
   dc488:	f000 fdbc 	bl	dd004 <__aeabi_dsub>
   dc48c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dc490:	f000 ff70 	bl	dd374 <__aeabi_dmul>
   dc494:	ec49 8b18 	vmov	d8, r8, r9
   dc498:	4622      	mov	r2, r4
   dc49a:	4680      	mov	r8, r0
   dc49c:	4689      	mov	r9, r1
   dc49e:	462b      	mov	r3, r5
   dc4a0:	ec51 0b1a 	vmov	r0, r1, d10
   dc4a4:	f000 ff66 	bl	dd374 <__aeabi_dmul>
   dc4a8:	4602      	mov	r2, r0
   dc4aa:	460b      	mov	r3, r1
   dc4ac:	4640      	mov	r0, r8
   dc4ae:	4649      	mov	r1, r9
   dc4b0:	f000 fdaa 	bl	dd008 <__adddf3>
   dc4b4:	4682      	mov	sl, r0
   dc4b6:	468b      	mov	fp, r1
   dc4b8:	4652      	mov	r2, sl
   dc4ba:	465b      	mov	r3, fp
   dc4bc:	ec51 0b18 	vmov	r0, r1, d8
   dc4c0:	f000 fda2 	bl	dd008 <__adddf3>
   dc4c4:	9c00      	ldr	r4, [sp, #0]
   dc4c6:	a33e      	add	r3, pc, #248	; (adr r3, dc5c0 <__ieee754_pow+0x590>)
   dc4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4cc:	4620      	mov	r0, r4
   dc4ce:	460d      	mov	r5, r1
   dc4d0:	f000 ff50 	bl	dd374 <__aeabi_dmul>
   dc4d4:	ec53 2b18 	vmov	r2, r3, d8
   dc4d8:	4680      	mov	r8, r0
   dc4da:	4689      	mov	r9, r1
   dc4dc:	4620      	mov	r0, r4
   dc4de:	4629      	mov	r1, r5
   dc4e0:	f000 fd90 	bl	dd004 <__aeabi_dsub>
   dc4e4:	4602      	mov	r2, r0
   dc4e6:	460b      	mov	r3, r1
   dc4e8:	4650      	mov	r0, sl
   dc4ea:	4659      	mov	r1, fp
   dc4ec:	f000 fd8a 	bl	dd004 <__aeabi_dsub>
   dc4f0:	a335      	add	r3, pc, #212	; (adr r3, dc5c8 <__ieee754_pow+0x598>)
   dc4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4f6:	f000 ff3d 	bl	dd374 <__aeabi_dmul>
   dc4fa:	ec49 8b19 	vmov	d9, r8, r9
   dc4fe:	a334      	add	r3, pc, #208	; (adr r3, dc5d0 <__ieee754_pow+0x5a0>)
   dc500:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc504:	4680      	mov	r8, r0
   dc506:	4689      	mov	r9, r1
   dc508:	4620      	mov	r0, r4
   dc50a:	4629      	mov	r1, r5
   dc50c:	f000 ff32 	bl	dd374 <__aeabi_dmul>
   dc510:	4602      	mov	r2, r0
   dc512:	460b      	mov	r3, r1
   dc514:	4640      	mov	r0, r8
   dc516:	4649      	mov	r1, r9
   dc518:	f000 fd76 	bl	dd008 <__adddf3>
   dc51c:	ec53 2b1c 	vmov	r2, r3, d12
   dc520:	f000 fd72 	bl	dd008 <__adddf3>
   dc524:	4682      	mov	sl, r0
   dc526:	9807      	ldr	r0, [sp, #28]
   dc528:	468b      	mov	fp, r1
   dc52a:	f000 feb9 	bl	dd2a0 <__aeabi_i2d>
   dc52e:	4652      	mov	r2, sl
   dc530:	4680      	mov	r8, r0
   dc532:	4689      	mov	r9, r1
   dc534:	465b      	mov	r3, fp
   dc536:	ec51 0b19 	vmov	r0, r1, d9
   dc53a:	f000 fd65 	bl	dd008 <__adddf3>
   dc53e:	ec53 2b1b 	vmov	r2, r3, d11
   dc542:	f000 fd61 	bl	dd008 <__adddf3>
   dc546:	4642      	mov	r2, r8
   dc548:	464b      	mov	r3, r9
   dc54a:	f000 fd5d 	bl	dd008 <__adddf3>
   dc54e:	9c00      	ldr	r4, [sp, #0]
   dc550:	4642      	mov	r2, r8
   dc552:	464b      	mov	r3, r9
   dc554:	4620      	mov	r0, r4
   dc556:	460d      	mov	r5, r1
   dc558:	f000 fd54 	bl	dd004 <__aeabi_dsub>
   dc55c:	ec53 2b1b 	vmov	r2, r3, d11
   dc560:	f000 fd50 	bl	dd004 <__aeabi_dsub>
   dc564:	ec53 2b19 	vmov	r2, r3, d9
   dc568:	f000 fd4c 	bl	dd004 <__aeabi_dsub>
   dc56c:	4602      	mov	r2, r0
   dc56e:	460b      	mov	r3, r1
   dc570:	4650      	mov	r0, sl
   dc572:	4659      	mov	r1, fp
   dc574:	f000 fd46 	bl	dd004 <__aeabi_dsub>
   dc578:	4682      	mov	sl, r0
   dc57a:	468b      	mov	fp, r1
   dc57c:	e038      	b.n	dc5f0 <__ieee754_pow+0x5c0>
   dc57e:	bf00      	nop
	...
   dc58c:	3ff00000 	.word	0x3ff00000
   dc590:	4a454eef 	.word	0x4a454eef
   dc594:	3fca7e28 	.word	0x3fca7e28
   dc598:	93c9db65 	.word	0x93c9db65
   dc59c:	3fcd864a 	.word	0x3fcd864a
   dc5a0:	a91d4101 	.word	0xa91d4101
   dc5a4:	3fd17460 	.word	0x3fd17460
   dc5a8:	518f264d 	.word	0x518f264d
   dc5ac:	3fd55555 	.word	0x3fd55555
   dc5b0:	db6fabff 	.word	0xdb6fabff
   dc5b4:	3fdb6db6 	.word	0x3fdb6db6
   dc5b8:	33333303 	.word	0x33333303
   dc5bc:	3fe33333 	.word	0x3fe33333
   dc5c0:	e0000000 	.word	0xe0000000
   dc5c4:	3feec709 	.word	0x3feec709
   dc5c8:	dc3a03fd 	.word	0xdc3a03fd
   dc5cc:	3feec709 	.word	0x3feec709
   dc5d0:	145b01f5 	.word	0x145b01f5
   dc5d4:	be3e2fe0 	.word	0xbe3e2fe0
   dc5d8:	7ff00000 	.word	0x7ff00000
   dc5dc:	43400000 	.word	0x43400000
   dc5e0:	0003988e 	.word	0x0003988e
   dc5e4:	000bb679 	.word	0x000bb679
   dc5e8:	3ff00000 	.word	0x3ff00000
   dc5ec:	40080000 	.word	0x40080000
   dc5f0:	9b03      	ldr	r3, [sp, #12]
   dc5f2:	9a06      	ldr	r2, [sp, #24]
   dc5f4:	3b01      	subs	r3, #1
   dc5f6:	4313      	orrs	r3, r2
   dc5f8:	f040 8178 	bne.w	dc8ec <__ieee754_pow+0x8bc>
   dc5fc:	ed9f 7bc4 	vldr	d7, [pc, #784]	; dc910 <__ieee754_pow+0x8e0>
   dc600:	eeb0 9a47 	vmov.f32	s18, s14
   dc604:	eef0 9a67 	vmov.f32	s19, s15
   dc608:	2300      	movs	r3, #0
   dc60a:	e9cd 6700 	strd	r6, r7, [sp]
   dc60e:	9300      	str	r3, [sp, #0]
   dc610:	e9dd 8900 	ldrd	r8, r9, [sp]
   dc614:	4630      	mov	r0, r6
   dc616:	4642      	mov	r2, r8
   dc618:	4639      	mov	r1, r7
   dc61a:	464b      	mov	r3, r9
   dc61c:	f000 fcf2 	bl	dd004 <__aeabi_dsub>
   dc620:	4622      	mov	r2, r4
   dc622:	462b      	mov	r3, r5
   dc624:	f000 fea6 	bl	dd374 <__aeabi_dmul>
   dc628:	4632      	mov	r2, r6
   dc62a:	463b      	mov	r3, r7
   dc62c:	4606      	mov	r6, r0
   dc62e:	460f      	mov	r7, r1
   dc630:	4650      	mov	r0, sl
   dc632:	4659      	mov	r1, fp
   dc634:	f000 fe9e 	bl	dd374 <__aeabi_dmul>
   dc638:	4602      	mov	r2, r0
   dc63a:	460b      	mov	r3, r1
   dc63c:	4630      	mov	r0, r6
   dc63e:	4639      	mov	r1, r7
   dc640:	f000 fce2 	bl	dd008 <__adddf3>
   dc644:	4642      	mov	r2, r8
   dc646:	4682      	mov	sl, r0
   dc648:	468b      	mov	fp, r1
   dc64a:	464b      	mov	r3, r9
   dc64c:	4620      	mov	r0, r4
   dc64e:	4629      	mov	r1, r5
   dc650:	f000 fe90 	bl	dd374 <__aeabi_dmul>
   dc654:	4606      	mov	r6, r0
   dc656:	460f      	mov	r7, r1
   dc658:	463b      	mov	r3, r7
   dc65a:	4650      	mov	r0, sl
   dc65c:	4659      	mov	r1, fp
   dc65e:	4632      	mov	r2, r6
   dc660:	f000 fcd2 	bl	dd008 <__adddf3>
   dc664:	4bc4      	ldr	r3, [pc, #784]	; (dc978 <__ieee754_pow+0x948>)
   dc666:	4299      	cmp	r1, r3
   dc668:	4604      	mov	r4, r0
   dc66a:	460d      	mov	r5, r1
   dc66c:	4688      	mov	r8, r1
   dc66e:	f340 8117 	ble.w	dc8a0 <__ieee754_pow+0x870>
   dc672:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   dc676:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   dc67a:	4303      	orrs	r3, r0
   dc67c:	f040 822a 	bne.w	dcad4 <__ieee754_pow+0xaa4>
   dc680:	a3a5      	add	r3, pc, #660	; (adr r3, dc918 <__ieee754_pow+0x8e8>)
   dc682:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc686:	4650      	mov	r0, sl
   dc688:	4659      	mov	r1, fp
   dc68a:	f000 fcbd 	bl	dd008 <__adddf3>
   dc68e:	4632      	mov	r2, r6
   dc690:	ec41 0b18 	vmov	d8, r0, r1
   dc694:	463b      	mov	r3, r7
   dc696:	4620      	mov	r0, r4
   dc698:	4629      	mov	r1, r5
   dc69a:	f000 fcb3 	bl	dd004 <__aeabi_dsub>
   dc69e:	4602      	mov	r2, r0
   dc6a0:	460b      	mov	r3, r1
   dc6a2:	ec51 0b18 	vmov	r0, r1, d8
   dc6a6:	f001 f8f5 	bl	dd894 <__aeabi_dcmpgt>
   dc6aa:	2800      	cmp	r0, #0
   dc6ac:	f040 8212 	bne.w	dcad4 <__ieee754_pow+0xaa4>
   dc6b0:	f3c8 530a 	ubfx	r3, r8, #20, #11
   dc6b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   dc6b8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   dc6bc:	fa42 f303 	asr.w	r3, r2, r3
   dc6c0:	4443      	add	r3, r8
   dc6c2:	49ae      	ldr	r1, [pc, #696]	; (dc97c <__ieee754_pow+0x94c>)
   dc6c4:	f3c3 520a 	ubfx	r2, r3, #20, #11
   dc6c8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   dc6cc:	fa41 fc02 	asr.w	ip, r1, r2
   dc6d0:	f3c3 0513 	ubfx	r5, r3, #0, #20
   dc6d4:	ea23 010c 	bic.w	r1, r3, ip
   dc6d8:	f1c2 0414 	rsb	r4, r2, #20
   dc6dc:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   dc6e0:	f1b8 0f00 	cmp.w	r8, #0
   dc6e4:	460b      	mov	r3, r1
   dc6e6:	fa45 f104 	asr.w	r1, r5, r4
   dc6ea:	9103      	str	r1, [sp, #12]
   dc6ec:	f04f 0000 	mov.w	r0, #0
   dc6f0:	bfb8      	it	lt
   dc6f2:	4249      	neglt	r1, r1
   dc6f4:	4602      	mov	r2, r0
   dc6f6:	bfb8      	it	lt
   dc6f8:	9103      	strlt	r1, [sp, #12]
   dc6fa:	4630      	mov	r0, r6
   dc6fc:	4639      	mov	r1, r7
   dc6fe:	f000 fc81 	bl	dd004 <__aeabi_dsub>
   dc702:	4606      	mov	r6, r0
   dc704:	460f      	mov	r7, r1
   dc706:	463b      	mov	r3, r7
   dc708:	4650      	mov	r0, sl
   dc70a:	4659      	mov	r1, fp
   dc70c:	4632      	mov	r2, r6
   dc70e:	f000 fc7b 	bl	dd008 <__adddf3>
   dc712:	9b03      	ldr	r3, [sp, #12]
   dc714:	051b      	lsls	r3, r3, #20
   dc716:	9300      	str	r3, [sp, #0]
   dc718:	460d      	mov	r5, r1
   dc71a:	2400      	movs	r4, #0
   dc71c:	a380      	add	r3, pc, #512	; (adr r3, dc920 <__ieee754_pow+0x8f0>)
   dc71e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc722:	4620      	mov	r0, r4
   dc724:	4629      	mov	r1, r5
   dc726:	f000 fe25 	bl	dd374 <__aeabi_dmul>
   dc72a:	4632      	mov	r2, r6
   dc72c:	4680      	mov	r8, r0
   dc72e:	4689      	mov	r9, r1
   dc730:	463b      	mov	r3, r7
   dc732:	4620      	mov	r0, r4
   dc734:	4629      	mov	r1, r5
   dc736:	f000 fc65 	bl	dd004 <__aeabi_dsub>
   dc73a:	4602      	mov	r2, r0
   dc73c:	460b      	mov	r3, r1
   dc73e:	4650      	mov	r0, sl
   dc740:	4659      	mov	r1, fp
   dc742:	f000 fc5f 	bl	dd004 <__aeabi_dsub>
   dc746:	a378      	add	r3, pc, #480	; (adr r3, dc928 <__ieee754_pow+0x8f8>)
   dc748:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc74c:	f000 fe12 	bl	dd374 <__aeabi_dmul>
   dc750:	a377      	add	r3, pc, #476	; (adr r3, dc930 <__ieee754_pow+0x900>)
   dc752:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc756:	4606      	mov	r6, r0
   dc758:	460f      	mov	r7, r1
   dc75a:	4620      	mov	r0, r4
   dc75c:	4629      	mov	r1, r5
   dc75e:	f000 fe09 	bl	dd374 <__aeabi_dmul>
   dc762:	4602      	mov	r2, r0
   dc764:	460b      	mov	r3, r1
   dc766:	4630      	mov	r0, r6
   dc768:	4639      	mov	r1, r7
   dc76a:	f000 fc4d 	bl	dd008 <__adddf3>
   dc76e:	4606      	mov	r6, r0
   dc770:	460f      	mov	r7, r1
   dc772:	4632      	mov	r2, r6
   dc774:	463b      	mov	r3, r7
   dc776:	4640      	mov	r0, r8
   dc778:	4649      	mov	r1, r9
   dc77a:	f000 fc45 	bl	dd008 <__adddf3>
   dc77e:	4642      	mov	r2, r8
   dc780:	464b      	mov	r3, r9
   dc782:	4604      	mov	r4, r0
   dc784:	460d      	mov	r5, r1
   dc786:	f000 fc3d 	bl	dd004 <__aeabi_dsub>
   dc78a:	4602      	mov	r2, r0
   dc78c:	460b      	mov	r3, r1
   dc78e:	4630      	mov	r0, r6
   dc790:	4639      	mov	r1, r7
   dc792:	f000 fc37 	bl	dd004 <__aeabi_dsub>
   dc796:	4622      	mov	r2, r4
   dc798:	4682      	mov	sl, r0
   dc79a:	468b      	mov	fp, r1
   dc79c:	462b      	mov	r3, r5
   dc79e:	4620      	mov	r0, r4
   dc7a0:	4629      	mov	r1, r5
   dc7a2:	f000 fde7 	bl	dd374 <__aeabi_dmul>
   dc7a6:	a364      	add	r3, pc, #400	; (adr r3, dc938 <__ieee754_pow+0x908>)
   dc7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc7ac:	4606      	mov	r6, r0
   dc7ae:	460f      	mov	r7, r1
   dc7b0:	f000 fde0 	bl	dd374 <__aeabi_dmul>
   dc7b4:	a362      	add	r3, pc, #392	; (adr r3, dc940 <__ieee754_pow+0x910>)
   dc7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc7ba:	f000 fc23 	bl	dd004 <__aeabi_dsub>
   dc7be:	4632      	mov	r2, r6
   dc7c0:	463b      	mov	r3, r7
   dc7c2:	f000 fdd7 	bl	dd374 <__aeabi_dmul>
   dc7c6:	a360      	add	r3, pc, #384	; (adr r3, dc948 <__ieee754_pow+0x918>)
   dc7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc7cc:	f000 fc1c 	bl	dd008 <__adddf3>
   dc7d0:	4632      	mov	r2, r6
   dc7d2:	463b      	mov	r3, r7
   dc7d4:	f000 fdce 	bl	dd374 <__aeabi_dmul>
   dc7d8:	a35d      	add	r3, pc, #372	; (adr r3, dc950 <__ieee754_pow+0x920>)
   dc7da:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc7de:	f000 fc11 	bl	dd004 <__aeabi_dsub>
   dc7e2:	4632      	mov	r2, r6
   dc7e4:	463b      	mov	r3, r7
   dc7e6:	f000 fdc5 	bl	dd374 <__aeabi_dmul>
   dc7ea:	a35b      	add	r3, pc, #364	; (adr r3, dc958 <__ieee754_pow+0x928>)
   dc7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc7f0:	f000 fc0a 	bl	dd008 <__adddf3>
   dc7f4:	4632      	mov	r2, r6
   dc7f6:	463b      	mov	r3, r7
   dc7f8:	f000 fdbc 	bl	dd374 <__aeabi_dmul>
   dc7fc:	4602      	mov	r2, r0
   dc7fe:	460b      	mov	r3, r1
   dc800:	4620      	mov	r0, r4
   dc802:	4629      	mov	r1, r5
   dc804:	f000 fbfe 	bl	dd004 <__aeabi_dsub>
   dc808:	4606      	mov	r6, r0
   dc80a:	460f      	mov	r7, r1
   dc80c:	4632      	mov	r2, r6
   dc80e:	463b      	mov	r3, r7
   dc810:	4620      	mov	r0, r4
   dc812:	4629      	mov	r1, r5
   dc814:	f000 fdae 	bl	dd374 <__aeabi_dmul>
   dc818:	2200      	movs	r2, #0
   dc81a:	4680      	mov	r8, r0
   dc81c:	4689      	mov	r9, r1
   dc81e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc822:	4630      	mov	r0, r6
   dc824:	4639      	mov	r1, r7
   dc826:	f000 fbed 	bl	dd004 <__aeabi_dsub>
   dc82a:	4602      	mov	r2, r0
   dc82c:	460b      	mov	r3, r1
   dc82e:	4640      	mov	r0, r8
   dc830:	4649      	mov	r1, r9
   dc832:	f000 fec9 	bl	dd5c8 <__aeabi_ddiv>
   dc836:	4652      	mov	r2, sl
   dc838:	4606      	mov	r6, r0
   dc83a:	460f      	mov	r7, r1
   dc83c:	465b      	mov	r3, fp
   dc83e:	4620      	mov	r0, r4
   dc840:	4629      	mov	r1, r5
   dc842:	f000 fd97 	bl	dd374 <__aeabi_dmul>
   dc846:	4652      	mov	r2, sl
   dc848:	465b      	mov	r3, fp
   dc84a:	f000 fbdd 	bl	dd008 <__adddf3>
   dc84e:	4602      	mov	r2, r0
   dc850:	460b      	mov	r3, r1
   dc852:	4630      	mov	r0, r6
   dc854:	4639      	mov	r1, r7
   dc856:	f000 fbd5 	bl	dd004 <__aeabi_dsub>
   dc85a:	4622      	mov	r2, r4
   dc85c:	462b      	mov	r3, r5
   dc85e:	f000 fbd1 	bl	dd004 <__aeabi_dsub>
   dc862:	4602      	mov	r2, r0
   dc864:	460b      	mov	r3, r1
   dc866:	2000      	movs	r0, #0
   dc868:	4945      	ldr	r1, [pc, #276]	; (dc980 <__ieee754_pow+0x950>)
   dc86a:	f000 fbcb 	bl	dd004 <__aeabi_dsub>
   dc86e:	460b      	mov	r3, r1
   dc870:	9900      	ldr	r1, [sp, #0]
   dc872:	4419      	add	r1, r3
   dc874:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc878:	4602      	mov	r2, r0
   dc87a:	f2c0 8169 	blt.w	dcb50 <__ieee754_pow+0xb20>
   dc87e:	4610      	mov	r0, r2
   dc880:	ec53 2b19 	vmov	r2, r3, d9
   dc884:	f000 fd76 	bl	dd374 <__aeabi_dmul>
   dc888:	e9cd 0100 	strd	r0, r1, [sp]
   dc88c:	e41e      	b.n	dc0cc <__ieee754_pow+0x9c>
   dc88e:	f1bb 0f00 	cmp.w	fp, #0
   dc892:	f6ff ac95 	blt.w	dc1c0 <__ieee754_pow+0x190>
   dc896:	ed9f 7b32 	vldr	d7, [pc, #200]	; dc960 <__ieee754_pow+0x930>
   dc89a:	ed8d 7b00 	vstr	d7, [sp]
   dc89e:	e415      	b.n	dc0cc <__ieee754_pow+0x9c>
   dc8a0:	f8df c0e4 	ldr.w	ip, [pc, #228]	; dc988 <__ieee754_pow+0x958>
   dc8a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc8a8:	4563      	cmp	r3, ip
   dc8aa:	f340 810b 	ble.w	dcac4 <__ieee754_pow+0xa94>
   dc8ae:	4b35      	ldr	r3, [pc, #212]	; (dc984 <__ieee754_pow+0x954>)
   dc8b0:	440b      	add	r3, r1
   dc8b2:	4303      	orrs	r3, r0
   dc8b4:	d10a      	bne.n	dc8cc <__ieee754_pow+0x89c>
   dc8b6:	4632      	mov	r2, r6
   dc8b8:	463b      	mov	r3, r7
   dc8ba:	f000 fba3 	bl	dd004 <__aeabi_dsub>
   dc8be:	4652      	mov	r2, sl
   dc8c0:	465b      	mov	r3, fp
   dc8c2:	f000 ffdd 	bl	dd880 <__aeabi_dcmpge>
   dc8c6:	2800      	cmp	r0, #0
   dc8c8:	f43f aef2 	beq.w	dc6b0 <__ieee754_pow+0x680>
   dc8cc:	a326      	add	r3, pc, #152	; (adr r3, dc968 <__ieee754_pow+0x938>)
   dc8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc8d2:	ec51 0b19 	vmov	r0, r1, d9
   dc8d6:	f000 fd4d 	bl	dd374 <__aeabi_dmul>
   dc8da:	a323      	add	r3, pc, #140	; (adr r3, dc968 <__ieee754_pow+0x938>)
   dc8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc8e0:	f000 fd48 	bl	dd374 <__aeabi_dmul>
   dc8e4:	e9cd 0100 	strd	r0, r1, [sp]
   dc8e8:	f7ff bbf0 	b.w	dc0cc <__ieee754_pow+0x9c>
   dc8ec:	ed9f 7b20 	vldr	d7, [pc, #128]	; dc970 <__ieee754_pow+0x940>
   dc8f0:	eeb0 9a47 	vmov.f32	s18, s14
   dc8f4:	eef0 9a67 	vmov.f32	s19, s15
   dc8f8:	e686      	b.n	dc608 <__ieee754_pow+0x5d8>
   dc8fa:	f1bb 0f00 	cmp.w	fp, #0
   dc8fe:	daca      	bge.n	dc896 <__ieee754_pow+0x866>
   dc900:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   dc904:	9600      	str	r6, [sp, #0]
   dc906:	9301      	str	r3, [sp, #4]
   dc908:	f7ff bbe0 	b.w	dc0cc <__ieee754_pow+0x9c>
   dc90c:	f3af 8000 	nop.w
   dc910:	00000000 	.word	0x00000000
   dc914:	bff00000 	.word	0xbff00000
   dc918:	652b82fe 	.word	0x652b82fe
   dc91c:	3c971547 	.word	0x3c971547
   dc920:	00000000 	.word	0x00000000
   dc924:	3fe62e43 	.word	0x3fe62e43
   dc928:	fefa39ef 	.word	0xfefa39ef
   dc92c:	3fe62e42 	.word	0x3fe62e42
   dc930:	0ca86c39 	.word	0x0ca86c39
   dc934:	be205c61 	.word	0xbe205c61
   dc938:	72bea4d0 	.word	0x72bea4d0
   dc93c:	3e663769 	.word	0x3e663769
   dc940:	c5d26bf1 	.word	0xc5d26bf1
   dc944:	3ebbbd41 	.word	0x3ebbbd41
   dc948:	af25de2c 	.word	0xaf25de2c
   dc94c:	3f11566a 	.word	0x3f11566a
   dc950:	16bebd93 	.word	0x16bebd93
   dc954:	3f66c16c 	.word	0x3f66c16c
   dc958:	5555553e 	.word	0x5555553e
   dc95c:	3fc55555 	.word	0x3fc55555
	...
   dc968:	c2f8f359 	.word	0xc2f8f359
   dc96c:	01a56e1f 	.word	0x01a56e1f
   dc970:	00000000 	.word	0x00000000
   dc974:	3ff00000 	.word	0x3ff00000
   dc978:	408fffff 	.word	0x408fffff
   dc97c:	000fffff 	.word	0x000fffff
   dc980:	3ff00000 	.word	0x3ff00000
   dc984:	3f6f3400 	.word	0x3f6f3400
   dc988:	4090cbff 	.word	0x4090cbff
   dc98c:	4598      	cmp	r8, r3
   dc98e:	f6ff af7e 	blt.w	dc88e <__ieee754_pow+0x85e>
   dc992:	4b91      	ldr	r3, [pc, #580]	; (dcbd8 <__ieee754_pow+0xba8>)
   dc994:	4598      	cmp	r8, r3
   dc996:	f73f ac0f 	bgt.w	dc1b8 <__ieee754_pow+0x188>
   dc99a:	4b8f      	ldr	r3, [pc, #572]	; (dcbd8 <__ieee754_pow+0xba8>)
   dc99c:	2200      	movs	r2, #0
   dc99e:	e9dd 0100 	ldrd	r0, r1, [sp]
   dc9a2:	f000 fb2f 	bl	dd004 <__aeabi_dsub>
   dc9a6:	a378      	add	r3, pc, #480	; (adr r3, dcb88 <__ieee754_pow+0xb58>)
   dc9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc9ac:	4604      	mov	r4, r0
   dc9ae:	460d      	mov	r5, r1
   dc9b0:	f000 fce0 	bl	dd374 <__aeabi_dmul>
   dc9b4:	a376      	add	r3, pc, #472	; (adr r3, dcb90 <__ieee754_pow+0xb60>)
   dc9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc9ba:	4682      	mov	sl, r0
   dc9bc:	468b      	mov	fp, r1
   dc9be:	4620      	mov	r0, r4
   dc9c0:	4629      	mov	r1, r5
   dc9c2:	f000 fcd7 	bl	dd374 <__aeabi_dmul>
   dc9c6:	4b85      	ldr	r3, [pc, #532]	; (dcbdc <__ieee754_pow+0xbac>)
   dc9c8:	4680      	mov	r8, r0
   dc9ca:	4689      	mov	r9, r1
   dc9cc:	2200      	movs	r2, #0
   dc9ce:	4620      	mov	r0, r4
   dc9d0:	4629      	mov	r1, r5
   dc9d2:	f000 fccf 	bl	dd374 <__aeabi_dmul>
   dc9d6:	4602      	mov	r2, r0
   dc9d8:	460b      	mov	r3, r1
   dc9da:	a16f      	add	r1, pc, #444	; (adr r1, dcb98 <__ieee754_pow+0xb68>)
   dc9dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc9e0:	f000 fb10 	bl	dd004 <__aeabi_dsub>
   dc9e4:	4622      	mov	r2, r4
   dc9e6:	462b      	mov	r3, r5
   dc9e8:	f000 fcc4 	bl	dd374 <__aeabi_dmul>
   dc9ec:	4602      	mov	r2, r0
   dc9ee:	460b      	mov	r3, r1
   dc9f0:	2000      	movs	r0, #0
   dc9f2:	497b      	ldr	r1, [pc, #492]	; (dcbe0 <__ieee754_pow+0xbb0>)
   dc9f4:	f000 fb06 	bl	dd004 <__aeabi_dsub>
   dc9f8:	4622      	mov	r2, r4
   dc9fa:	462b      	mov	r3, r5
   dc9fc:	4604      	mov	r4, r0
   dc9fe:	460d      	mov	r5, r1
   dca00:	4610      	mov	r0, r2
   dca02:	4619      	mov	r1, r3
   dca04:	f000 fcb6 	bl	dd374 <__aeabi_dmul>
   dca08:	4602      	mov	r2, r0
   dca0a:	460b      	mov	r3, r1
   dca0c:	4620      	mov	r0, r4
   dca0e:	4629      	mov	r1, r5
   dca10:	f000 fcb0 	bl	dd374 <__aeabi_dmul>
   dca14:	a362      	add	r3, pc, #392	; (adr r3, dcba0 <__ieee754_pow+0xb70>)
   dca16:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca1a:	f000 fcab 	bl	dd374 <__aeabi_dmul>
   dca1e:	4602      	mov	r2, r0
   dca20:	460b      	mov	r3, r1
   dca22:	4640      	mov	r0, r8
   dca24:	4649      	mov	r1, r9
   dca26:	f000 faed 	bl	dd004 <__aeabi_dsub>
   dca2a:	4680      	mov	r8, r0
   dca2c:	4689      	mov	r9, r1
   dca2e:	4650      	mov	r0, sl
   dca30:	4659      	mov	r1, fp
   dca32:	4642      	mov	r2, r8
   dca34:	464b      	mov	r3, r9
   dca36:	f000 fae7 	bl	dd008 <__adddf3>
   dca3a:	2400      	movs	r4, #0
   dca3c:	4652      	mov	r2, sl
   dca3e:	465b      	mov	r3, fp
   dca40:	4620      	mov	r0, r4
   dca42:	460d      	mov	r5, r1
   dca44:	f000 fade 	bl	dd004 <__aeabi_dsub>
   dca48:	4602      	mov	r2, r0
   dca4a:	460b      	mov	r3, r1
   dca4c:	4640      	mov	r0, r8
   dca4e:	4649      	mov	r1, r9
   dca50:	f000 fad8 	bl	dd004 <__aeabi_dsub>
   dca54:	4682      	mov	sl, r0
   dca56:	468b      	mov	fp, r1
   dca58:	e5ca      	b.n	dc5f0 <__ieee754_pow+0x5c0>
   dca5a:	ed9f 7b53 	vldr	d7, [pc, #332]	; dcba8 <__ieee754_pow+0xb78>
   dca5e:	eeb0 ba47 	vmov.f32	s22, s14
   dca62:	eef0 ba67 	vmov.f32	s23, s15
   dca66:	eeb0 ca47 	vmov.f32	s24, s14
   dca6a:	eef0 ca67 	vmov.f32	s25, s15
   dca6e:	ed9f 7b50 	vldr	d7, [pc, #320]	; dcbb0 <__ieee754_pow+0xb80>
   dca72:	f04f 0900 	mov.w	r9, #0
   dca76:	ec54 3b17 	vmov	r3, r4, d7
   dca7a:	e41d      	b.n	dc2b8 <__ieee754_pow+0x288>
   dca7c:	2000      	movs	r0, #0
   dca7e:	f7ff bbf3 	b.w	dc268 <__ieee754_pow+0x238>
   dca82:	4955      	ldr	r1, [pc, #340]	; (dcbd8 <__ieee754_pow+0xba8>)
   dca84:	4622      	mov	r2, r4
   dca86:	462b      	mov	r3, r5
   dca88:	2000      	movs	r0, #0
   dca8a:	f000 fd9d 	bl	dd5c8 <__aeabi_ddiv>
   dca8e:	e9cd 0100 	strd	r0, r1, [sp]
   dca92:	f7ff bb1b 	b.w	dc0cc <__ieee754_pow+0x9c>
   dca96:	4622      	mov	r2, r4
   dca98:	462b      	mov	r3, r5
   dca9a:	4620      	mov	r0, r4
   dca9c:	4629      	mov	r1, r5
   dca9e:	f000 fc69 	bl	dd374 <__aeabi_dmul>
   dcaa2:	e9cd 0100 	strd	r0, r1, [sp]
   dcaa6:	f7ff bb11 	b.w	dc0cc <__ieee754_pow+0x9c>
   dcaaa:	2b00      	cmp	r3, #0
   dcaac:	d142      	bne.n	dcb34 <__ieee754_pow+0xb04>
   dcaae:	f1c1 0114 	rsb	r1, r1, #20
   dcab2:	fa4a f001 	asr.w	r0, sl, r1
   dcab6:	fa00 f101 	lsl.w	r1, r0, r1
   dcaba:	4551      	cmp	r1, sl
   dcabc:	d05a      	beq.n	dcb74 <__ieee754_pow+0xb44>
   dcabe:	9303      	str	r3, [sp, #12]
   dcac0:	f7ff bae0 	b.w	dc084 <__ieee754_pow+0x54>
   dcac4:	4a46      	ldr	r2, [pc, #280]	; (dcbe0 <__ieee754_pow+0xbb0>)
   dcac6:	4293      	cmp	r3, r2
   dcac8:	dc5b      	bgt.n	dcb82 <__ieee754_pow+0xb52>
   dcaca:	e9dd 1200 	ldrd	r1, r2, [sp]
   dcace:	9100      	str	r1, [sp, #0]
   dcad0:	9103      	str	r1, [sp, #12]
   dcad2:	e622      	b.n	dc71a <__ieee754_pow+0x6ea>
   dcad4:	a338      	add	r3, pc, #224	; (adr r3, dcbb8 <__ieee754_pow+0xb88>)
   dcad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcada:	ec51 0b19 	vmov	r0, r1, d9
   dcade:	f000 fc49 	bl	dd374 <__aeabi_dmul>
   dcae2:	a335      	add	r3, pc, #212	; (adr r3, dcbb8 <__ieee754_pow+0xb88>)
   dcae4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcae8:	f000 fc44 	bl	dd374 <__aeabi_dmul>
   dcaec:	e9cd 0100 	strd	r0, r1, [sp]
   dcaf0:	f7ff baec 	b.w	dc0cc <__ieee754_pow+0x9c>
   dcaf4:	9b03      	ldr	r3, [sp, #12]
   dcaf6:	2b01      	cmp	r3, #1
   dcaf8:	f47f aae8 	bne.w	dc0cc <__ieee754_pow+0x9c>
   dcafc:	e9dd 2100 	ldrd	r2, r1, [sp]
   dcb00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dcb04:	e9cd 2300 	strd	r2, r3, [sp]
   dcb08:	f7ff bae0 	b.w	dc0cc <__ieee754_pow+0x9c>
   dcb0c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; dcbc0 <__ieee754_pow+0xb90>
   dcb10:	eeb0 ba47 	vmov.f32	s22, s14
   dcb14:	eef0 ba67 	vmov.f32	s23, s15
   dcb18:	ed9f 7b2b 	vldr	d7, [pc, #172]	; dcbc8 <__ieee754_pow+0xb98>
   dcb1c:	eeb0 ca47 	vmov.f32	s24, s14
   dcb20:	eef0 ca67 	vmov.f32	s25, s15
   dcb24:	ed9f 7b2a 	vldr	d7, [pc, #168]	; dcbd0 <__ieee754_pow+0xba0>
   dcb28:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   dcb2c:	ec54 3b17 	vmov	r3, r4, d7
   dcb30:	f7ff bbc2 	b.w	dc2b8 <__ieee754_pow+0x288>
   dcb34:	ec45 4b10 	vmov	d0, r4, r5
   dcb38:	9203      	str	r2, [sp, #12]
   dcb3a:	f000 f917 	bl	dcd6c <fabs>
   dcb3e:	9a03      	ldr	r2, [sp, #12]
   dcb40:	ed8d 0b00 	vstr	d0, [sp]
   dcb44:	2a00      	cmp	r2, #0
   dcb46:	f47f ab61 	bne.w	dc20c <__ieee754_pow+0x1dc>
   dcb4a:	9203      	str	r2, [sp, #12]
   dcb4c:	f7ff baf5 	b.w	dc13a <__ieee754_pow+0x10a>
   dcb50:	9803      	ldr	r0, [sp, #12]
   dcb52:	ec43 2b10 	vmov	d0, r2, r3
   dcb56:	f000 f9bf 	bl	dced8 <scalbn>
   dcb5a:	ec51 0b10 	vmov	r0, r1, d0
   dcb5e:	e68f      	b.n	dc880 <__ieee754_pow+0x850>
   dcb60:	f000 0001 	and.w	r0, r0, #1
   dcb64:	f1c0 0102 	rsb	r1, r0, #2
   dcb68:	9103      	str	r1, [sp, #12]
   dcb6a:	2b00      	cmp	r3, #0
   dcb6c:	f43f aa8a 	beq.w	dc084 <__ieee754_pow+0x54>
   dcb70:	f7ff bada 	b.w	dc128 <__ieee754_pow+0xf8>
   dcb74:	f000 0001 	and.w	r0, r0, #1
   dcb78:	f1c0 0302 	rsb	r3, r0, #2
   dcb7c:	9303      	str	r3, [sp, #12]
   dcb7e:	f7ff ba81 	b.w	dc084 <__ieee754_pow+0x54>
   dcb82:	151b      	asrs	r3, r3, #20
   dcb84:	e596      	b.n	dc6b4 <__ieee754_pow+0x684>
   dcb86:	bf00      	nop
   dcb88:	60000000 	.word	0x60000000
   dcb8c:	3ff71547 	.word	0x3ff71547
   dcb90:	f85ddf44 	.word	0xf85ddf44
   dcb94:	3e54ae0b 	.word	0x3e54ae0b
   dcb98:	55555555 	.word	0x55555555
   dcb9c:	3fd55555 	.word	0x3fd55555
   dcba0:	652b82fe 	.word	0x652b82fe
   dcba4:	3ff71547 	.word	0x3ff71547
	...
   dcbb4:	3ff00000 	.word	0x3ff00000
   dcbb8:	8800759c 	.word	0x8800759c
   dcbbc:	7e37e43c 	.word	0x7e37e43c
   dcbc0:	40000000 	.word	0x40000000
   dcbc4:	3fe2b803 	.word	0x3fe2b803
   dcbc8:	43cfd006 	.word	0x43cfd006
   dcbcc:	3e4cfdeb 	.word	0x3e4cfdeb
   dcbd0:	00000000 	.word	0x00000000
   dcbd4:	3ff80000 	.word	0x3ff80000
   dcbd8:	3ff00000 	.word	0x3ff00000
   dcbdc:	3fd00000 	.word	0x3fd00000
   dcbe0:	3fe00000 	.word	0x3fe00000

000dcbe4 <__ieee754_sqrt>:
   dcbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcbe8:	4a5f      	ldr	r2, [pc, #380]	; (dcd68 <__ieee754_sqrt+0x184>)
   dcbea:	ec57 6b10 	vmov	r6, r7, d0
   dcbee:	43ba      	bics	r2, r7
   dcbf0:	f000 8098 	beq.w	dcd24 <__ieee754_sqrt+0x140>
   dcbf4:	2f00      	cmp	r7, #0
   dcbf6:	ee10 4a10 	vmov	r4, s0
   dcbfa:	463b      	mov	r3, r7
   dcbfc:	dd4e      	ble.n	dcc9c <__ieee754_sqrt+0xb8>
   dcbfe:	1539      	asrs	r1, r7, #20
   dcc00:	d05b      	beq.n	dccba <__ieee754_sqrt+0xd6>
   dcc02:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dcc06:	07ca      	lsls	r2, r1, #31
   dcc08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dcc0c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   dcc10:	d403      	bmi.n	dcc1a <__ieee754_sqrt+0x36>
   dcc12:	005b      	lsls	r3, r3, #1
   dcc14:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dcc18:	0064      	lsls	r4, r4, #1
   dcc1a:	0fe2      	lsrs	r2, r4, #31
   dcc1c:	f04f 0c00 	mov.w	ip, #0
   dcc20:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   dcc24:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   dcc28:	0064      	lsls	r4, r4, #1
   dcc2a:	4666      	mov	r6, ip
   dcc2c:	2516      	movs	r5, #22
   dcc2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   dcc32:	18b1      	adds	r1, r6, r2
   dcc34:	4299      	cmp	r1, r3
   dcc36:	dc02      	bgt.n	dcc3e <__ieee754_sqrt+0x5a>
   dcc38:	1a5b      	subs	r3, r3, r1
   dcc3a:	188e      	adds	r6, r1, r2
   dcc3c:	4494      	add	ip, r2
   dcc3e:	005b      	lsls	r3, r3, #1
   dcc40:	3d01      	subs	r5, #1
   dcc42:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dcc46:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dcc4a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dcc4e:	d1f0      	bne.n	dcc32 <__ieee754_sqrt+0x4e>
   dcc50:	462f      	mov	r7, r5
   dcc52:	2020      	movs	r0, #32
   dcc54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   dcc58:	e009      	b.n	dcc6e <__ieee754_sqrt+0x8a>
   dcc5a:	d03e      	beq.n	dccda <__ieee754_sqrt+0xf6>
   dcc5c:	0fe1      	lsrs	r1, r4, #31
   dcc5e:	3801      	subs	r0, #1
   dcc60:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dcc64:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   dcc68:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dcc6c:	d03e      	beq.n	dccec <__ieee754_sqrt+0x108>
   dcc6e:	42b3      	cmp	r3, r6
   dcc70:	eb02 0105 	add.w	r1, r2, r5
   dcc74:	ddf1      	ble.n	dcc5a <__ieee754_sqrt+0x76>
   dcc76:	2900      	cmp	r1, #0
   dcc78:	eb01 0502 	add.w	r5, r1, r2
   dcc7c:	db09      	blt.n	dcc92 <__ieee754_sqrt+0xae>
   dcc7e:	46b0      	mov	r8, r6
   dcc80:	1b9b      	subs	r3, r3, r6
   dcc82:	42a1      	cmp	r1, r4
   dcc84:	bf88      	it	hi
   dcc86:	f103 33ff 	addhi.w	r3, r3, #4294967295
   dcc8a:	1a64      	subs	r4, r4, r1
   dcc8c:	4417      	add	r7, r2
   dcc8e:	4646      	mov	r6, r8
   dcc90:	e7e4      	b.n	dcc5c <__ieee754_sqrt+0x78>
   dcc92:	2d00      	cmp	r5, #0
   dcc94:	dbf3      	blt.n	dcc7e <__ieee754_sqrt+0x9a>
   dcc96:	f106 0801 	add.w	r8, r6, #1
   dcc9a:	e7f1      	b.n	dcc80 <__ieee754_sqrt+0x9c>
   dcc9c:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   dcca0:	4332      	orrs	r2, r6
   dcca2:	d036      	beq.n	dcd12 <__ieee754_sqrt+0x12e>
   dcca4:	2f00      	cmp	r7, #0
   dcca6:	d14d      	bne.n	dcd44 <__ieee754_sqrt+0x160>
   dcca8:	4639      	mov	r1, r7
   dccaa:	0ae2      	lsrs	r2, r4, #11
   dccac:	3915      	subs	r1, #21
   dccae:	0564      	lsls	r4, r4, #21
   dccb0:	4613      	mov	r3, r2
   dccb2:	2a00      	cmp	r2, #0
   dccb4:	d0f9      	beq.n	dccaa <__ieee754_sqrt+0xc6>
   dccb6:	02d7      	lsls	r7, r2, #11
   dccb8:	d451      	bmi.n	dcd5e <__ieee754_sqrt+0x17a>
   dccba:	2000      	movs	r0, #0
   dccbc:	005b      	lsls	r3, r3, #1
   dccbe:	02de      	lsls	r6, r3, #11
   dccc0:	4605      	mov	r5, r0
   dccc2:	f100 0001 	add.w	r0, r0, #1
   dccc6:	d5f9      	bpl.n	dccbc <__ieee754_sqrt+0xd8>
   dccc8:	461a      	mov	r2, r3
   dccca:	4623      	mov	r3, r4
   dcccc:	4084      	lsls	r4, r0
   dccce:	f1c0 0020 	rsb	r0, r0, #32
   dccd2:	40c3      	lsrs	r3, r0
   dccd4:	4313      	orrs	r3, r2
   dccd6:	1b49      	subs	r1, r1, r5
   dccd8:	e793      	b.n	dcc02 <__ieee754_sqrt+0x1e>
   dccda:	42a1      	cmp	r1, r4
   dccdc:	d8be      	bhi.n	dcc5c <__ieee754_sqrt+0x78>
   dccde:	2900      	cmp	r1, #0
   dcce0:	eb01 0502 	add.w	r5, r1, r2
   dcce4:	dbd5      	blt.n	dcc92 <__ieee754_sqrt+0xae>
   dcce6:	4698      	mov	r8, r3
   dcce8:	2300      	movs	r3, #0
   dccea:	e7ce      	b.n	dcc8a <__ieee754_sqrt+0xa6>
   dccec:	4323      	orrs	r3, r4
   dccee:	d112      	bne.n	dcd16 <__ieee754_sqrt+0x132>
   dccf0:	0878      	lsrs	r0, r7, #1
   dccf2:	ea4f 016c 	mov.w	r1, ip, asr #1
   dccf6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   dccfa:	f01c 0f01 	tst.w	ip, #1
   dccfe:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   dcd02:	bf18      	it	ne
   dcd04:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   dcd08:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   dcd0c:	4602      	mov	r2, r0
   dcd0e:	ec43 2b10 	vmov	d0, r2, r3
   dcd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dcd16:	1c7b      	adds	r3, r7, #1
   dcd18:	bf16      	itet	ne
   dcd1a:	1c78      	addne	r0, r7, #1
   dcd1c:	f10c 0c01 	addeq.w	ip, ip, #1
   dcd20:	0840      	lsrne	r0, r0, #1
   dcd22:	e7e6      	b.n	dccf2 <__ieee754_sqrt+0x10e>
   dcd24:	ee10 2a10 	vmov	r2, s0
   dcd28:	ee10 0a10 	vmov	r0, s0
   dcd2c:	463b      	mov	r3, r7
   dcd2e:	4639      	mov	r1, r7
   dcd30:	f000 fb20 	bl	dd374 <__aeabi_dmul>
   dcd34:	4632      	mov	r2, r6
   dcd36:	463b      	mov	r3, r7
   dcd38:	f000 f966 	bl	dd008 <__adddf3>
   dcd3c:	ec41 0b10 	vmov	d0, r0, r1
   dcd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dcd44:	ee10 2a10 	vmov	r2, s0
   dcd48:	4630      	mov	r0, r6
   dcd4a:	4639      	mov	r1, r7
   dcd4c:	f000 f95a 	bl	dd004 <__aeabi_dsub>
   dcd50:	4602      	mov	r2, r0
   dcd52:	460b      	mov	r3, r1
   dcd54:	f000 fc38 	bl	dd5c8 <__aeabi_ddiv>
   dcd58:	ec41 0b10 	vmov	d0, r0, r1
   dcd5c:	e7d9      	b.n	dcd12 <__ieee754_sqrt+0x12e>
   dcd5e:	4623      	mov	r3, r4
   dcd60:	2020      	movs	r0, #32
   dcd62:	f04f 35ff 	mov.w	r5, #4294967295
   dcd66:	e7b4      	b.n	dccd2 <__ieee754_sqrt+0xee>
   dcd68:	7ff00000 	.word	0x7ff00000

000dcd6c <fabs>:
   dcd6c:	ec51 0b10 	vmov	r0, r1, d0
   dcd70:	ee10 2a10 	vmov	r2, s0
   dcd74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dcd78:	ec43 2b10 	vmov	d0, r2, r3
   dcd7c:	4770      	bx	lr
   dcd7e:	bf00      	nop

000dcd80 <finite>:
   dcd80:	b082      	sub	sp, #8
   dcd82:	ed8d 0b00 	vstr	d0, [sp]
   dcd86:	9801      	ldr	r0, [sp, #4]
   dcd88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   dcd8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   dcd90:	0fc0      	lsrs	r0, r0, #31
   dcd92:	b002      	add	sp, #8
   dcd94:	4770      	bx	lr
   dcd96:	bf00      	nop

000dcd98 <matherr>:
   dcd98:	2000      	movs	r0, #0
   dcd9a:	4770      	bx	lr
   dcd9c:	0000      	movs	r0, r0
	...

000dcda0 <nan>:
   dcda0:	ed9f 0b01 	vldr	d0, [pc, #4]	; dcda8 <nan+0x8>
   dcda4:	4770      	bx	lr
   dcda6:	bf00      	nop
   dcda8:	00000000 	.word	0x00000000
   dcdac:	7ff80000 	.word	0x7ff80000

000dcdb0 <rint>:
   dcdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcdb2:	ec53 2b10 	vmov	r2, r3, d0
   dcdb6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   dcdba:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   dcdbe:	2813      	cmp	r0, #19
   dcdc0:	ee10 5a10 	vmov	r5, s0
   dcdc4:	b083      	sub	sp, #12
   dcdc6:	4619      	mov	r1, r3
   dcdc8:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   dcdcc:	dc31      	bgt.n	dce32 <rint+0x82>
   dcdce:	2800      	cmp	r0, #0
   dcdd0:	db4c      	blt.n	dce6c <rint+0xbc>
   dcdd2:	4e3e      	ldr	r6, [pc, #248]	; (dcecc <rint+0x11c>)
   dcdd4:	4106      	asrs	r6, r0
   dcdd6:	ea03 0706 	and.w	r7, r3, r6
   dcdda:	4317      	orrs	r7, r2
   dcddc:	d02e      	beq.n	dce3c <rint+0x8c>
   dcdde:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   dcde2:	431d      	orrs	r5, r3
   dcde4:	ea4f 0656 	mov.w	r6, r6, lsr #1
   dcde8:	d00c      	beq.n	dce04 <rint+0x54>
   dcdea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   dcdee:	2813      	cmp	r0, #19
   dcdf0:	ea21 0606 	bic.w	r6, r1, r6
   dcdf4:	fa43 f100 	asr.w	r1, r3, r0
   dcdf8:	ea41 0106 	orr.w	r1, r1, r6
   dcdfc:	bf0c      	ite	eq
   dcdfe:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   dce02:	2500      	movne	r5, #0
   dce04:	4832      	ldr	r0, [pc, #200]	; (dced0 <rint+0x120>)
   dce06:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   dce0a:	462a      	mov	r2, r5
   dce0c:	e9d4 4500 	ldrd	r4, r5, [r4]
   dce10:	460b      	mov	r3, r1
   dce12:	4620      	mov	r0, r4
   dce14:	4629      	mov	r1, r5
   dce16:	f000 f8f7 	bl	dd008 <__adddf3>
   dce1a:	e9cd 0100 	strd	r0, r1, [sp]
   dce1e:	e9dd 0100 	ldrd	r0, r1, [sp]
   dce22:	4622      	mov	r2, r4
   dce24:	462b      	mov	r3, r5
   dce26:	f000 f8ed 	bl	dd004 <__aeabi_dsub>
   dce2a:	ec41 0b10 	vmov	d0, r0, r1
   dce2e:	b003      	add	sp, #12
   dce30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dce32:	2833      	cmp	r0, #51	; 0x33
   dce34:	dd06      	ble.n	dce44 <rint+0x94>
   dce36:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   dce3a:	d040      	beq.n	dcebe <rint+0x10e>
   dce3c:	ec43 2b10 	vmov	d0, r2, r3
   dce40:	b003      	add	sp, #12
   dce42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dce44:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   dce48:	f04f 30ff 	mov.w	r0, #4294967295
   dce4c:	40f0      	lsrs	r0, r6
   dce4e:	4202      	tst	r2, r0
   dce50:	d0f4      	beq.n	dce3c <rint+0x8c>
   dce52:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   dce56:	ea4f 0350 	mov.w	r3, r0, lsr #1
   dce5a:	d0d3      	beq.n	dce04 <rint+0x54>
   dce5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   dce60:	ea25 0503 	bic.w	r5, r5, r3
   dce64:	fa42 f606 	asr.w	r6, r2, r6
   dce68:	4335      	orrs	r5, r6
   dce6a:	e7cb      	b.n	dce04 <rint+0x54>
   dce6c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   dce70:	4310      	orrs	r0, r2
   dce72:	d0e3      	beq.n	dce3c <rint+0x8c>
   dce74:	f3c3 0013 	ubfx	r0, r3, #0, #20
   dce78:	4310      	orrs	r0, r2
   dce7a:	4245      	negs	r5, r0
   dce7c:	4305      	orrs	r5, r0
   dce7e:	4814      	ldr	r0, [pc, #80]	; (dced0 <rint+0x120>)
   dce80:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   dce84:	e9d0 6700 	ldrd	r6, r7, [r0]
   dce88:	0c59      	lsrs	r1, r3, #17
   dce8a:	0b2d      	lsrs	r5, r5, #12
   dce8c:	0449      	lsls	r1, r1, #17
   dce8e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   dce92:	ea45 0301 	orr.w	r3, r5, r1
   dce96:	4630      	mov	r0, r6
   dce98:	4639      	mov	r1, r7
   dce9a:	f000 f8b5 	bl	dd008 <__adddf3>
   dce9e:	e9cd 0100 	strd	r0, r1, [sp]
   dcea2:	463b      	mov	r3, r7
   dcea4:	e9dd 0100 	ldrd	r0, r1, [sp]
   dcea8:	4632      	mov	r2, r6
   dceaa:	f000 f8ab 	bl	dd004 <__aeabi_dsub>
   dceae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dceb2:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   dceb6:	ec41 0b10 	vmov	d0, r0, r1
   dceba:	b003      	add	sp, #12
   dcebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcebe:	ee10 0a10 	vmov	r0, s0
   dcec2:	f000 f8a1 	bl	dd008 <__adddf3>
   dcec6:	ec41 0b10 	vmov	d0, r0, r1
   dceca:	e7b9      	b.n	dce40 <rint+0x90>
   dcecc:	000fffff 	.word	0x000fffff
   dced0:	000df178 	.word	0x000df178
   dced4:	00000000 	.word	0x00000000

000dced8 <scalbn>:
   dced8:	b538      	push	{r3, r4, r5, lr}
   dceda:	ec53 2b10 	vmov	r2, r3, d0
   dcede:	f3c3 510a 	ubfx	r1, r3, #20, #11
   dcee2:	461c      	mov	r4, r3
   dcee4:	4605      	mov	r5, r0
   dcee6:	bb81      	cbnz	r1, dcf4a <scalbn+0x72>
   dcee8:	ee10 1a10 	vmov	r1, s0
   dceec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dcef0:	4321      	orrs	r1, r4
   dcef2:	d029      	beq.n	dcf48 <scalbn+0x70>
   dcef4:	4619      	mov	r1, r3
   dcef6:	2200      	movs	r2, #0
   dcef8:	4b3d      	ldr	r3, [pc, #244]	; (dcff0 <scalbn+0x118>)
   dcefa:	4c3e      	ldr	r4, [pc, #248]	; (dcff4 <scalbn+0x11c>)
   dcefc:	ee10 0a10 	vmov	r0, s0
   dcf00:	f000 fa38 	bl	dd374 <__aeabi_dmul>
   dcf04:	42a5      	cmp	r5, r4
   dcf06:	4602      	mov	r2, r0
   dcf08:	460b      	mov	r3, r1
   dcf0a:	db16      	blt.n	dcf3a <scalbn+0x62>
   dcf0c:	460c      	mov	r4, r1
   dcf0e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   dcf12:	3936      	subs	r1, #54	; 0x36
   dcf14:	4429      	add	r1, r5
   dcf16:	f240 70fe 	movw	r0, #2046	; 0x7fe
   dcf1a:	4281      	cmp	r1, r0
   dcf1c:	dc21      	bgt.n	dcf62 <scalbn+0x8a>
   dcf1e:	2900      	cmp	r1, #0
   dcf20:	dc47      	bgt.n	dcfb2 <scalbn+0xda>
   dcf22:	f111 0f35 	cmn.w	r1, #53	; 0x35
   dcf26:	da34      	bge.n	dcf92 <scalbn+0xba>
   dcf28:	f24c 3150 	movw	r1, #50000	; 0xc350
   dcf2c:	428d      	cmp	r5, r1
   dcf2e:	dc18      	bgt.n	dcf62 <scalbn+0x8a>
   dcf30:	2b00      	cmp	r3, #0
   dcf32:	a127      	add	r1, pc, #156	; (adr r1, dcfd0 <scalbn+0xf8>)
   dcf34:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcf38:	db44      	blt.n	dcfc4 <scalbn+0xec>
   dcf3a:	a325      	add	r3, pc, #148	; (adr r3, dcfd0 <scalbn+0xf8>)
   dcf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf40:	f000 fa18 	bl	dd374 <__aeabi_dmul>
   dcf44:	ec41 0b10 	vmov	d0, r0, r1
   dcf48:	bd38      	pop	{r3, r4, r5, pc}
   dcf4a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   dcf4e:	4281      	cmp	r1, r0
   dcf50:	d1e0      	bne.n	dcf14 <scalbn+0x3c>
   dcf52:	ee10 0a10 	vmov	r0, s0
   dcf56:	4619      	mov	r1, r3
   dcf58:	f000 f856 	bl	dd008 <__adddf3>
   dcf5c:	ec41 0b10 	vmov	d0, r0, r1
   dcf60:	bd38      	pop	{r3, r4, r5, pc}
   dcf62:	2b00      	cmp	r3, #0
   dcf64:	a11c      	add	r1, pc, #112	; (adr r1, dcfd8 <scalbn+0x100>)
   dcf66:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcf6a:	db07      	blt.n	dcf7c <scalbn+0xa4>
   dcf6c:	a31a      	add	r3, pc, #104	; (adr r3, dcfd8 <scalbn+0x100>)
   dcf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf72:	f000 f9ff 	bl	dd374 <__aeabi_dmul>
   dcf76:	ec41 0b10 	vmov	d0, r0, r1
   dcf7a:	bd38      	pop	{r3, r4, r5, pc}
   dcf7c:	a118      	add	r1, pc, #96	; (adr r1, dcfe0 <scalbn+0x108>)
   dcf7e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcf82:	a315      	add	r3, pc, #84	; (adr r3, dcfd8 <scalbn+0x100>)
   dcf84:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf88:	f000 f9f4 	bl	dd374 <__aeabi_dmul>
   dcf8c:	ec41 0b10 	vmov	d0, r0, r1
   dcf90:	e7f3      	b.n	dcf7a <scalbn+0xa2>
   dcf92:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dcf96:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dcf9a:	3136      	adds	r1, #54	; 0x36
   dcf9c:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dcfa0:	4610      	mov	r0, r2
   dcfa2:	4619      	mov	r1, r3
   dcfa4:	2200      	movs	r2, #0
   dcfa6:	4b14      	ldr	r3, [pc, #80]	; (dcff8 <scalbn+0x120>)
   dcfa8:	f000 f9e4 	bl	dd374 <__aeabi_dmul>
   dcfac:	ec41 0b10 	vmov	d0, r0, r1
   dcfb0:	bd38      	pop	{r3, r4, r5, pc}
   dcfb2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dcfb6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dcfba:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dcfbe:	ec43 2b10 	vmov	d0, r2, r3
   dcfc2:	bd38      	pop	{r3, r4, r5, pc}
   dcfc4:	a108      	add	r1, pc, #32	; (adr r1, dcfe8 <scalbn+0x110>)
   dcfc6:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcfca:	e7b6      	b.n	dcf3a <scalbn+0x62>
   dcfcc:	f3af 8000 	nop.w
   dcfd0:	c2f8f359 	.word	0xc2f8f359
   dcfd4:	01a56e1f 	.word	0x01a56e1f
   dcfd8:	8800759c 	.word	0x8800759c
   dcfdc:	7e37e43c 	.word	0x7e37e43c
   dcfe0:	8800759c 	.word	0x8800759c
   dcfe4:	fe37e43c 	.word	0xfe37e43c
   dcfe8:	c2f8f359 	.word	0xc2f8f359
   dcfec:	81a56e1f 	.word	0x81a56e1f
   dcff0:	43500000 	.word	0x43500000
   dcff4:	ffff3cb0 	.word	0xffff3cb0
   dcff8:	3c900000 	.word	0x3c900000

000dcffc <__aeabi_drsub>:
   dcffc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dd000:	e002      	b.n	dd008 <__adddf3>
   dd002:	bf00      	nop

000dd004 <__aeabi_dsub>:
   dd004:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dd008 <__adddf3>:
   dd008:	b530      	push	{r4, r5, lr}
   dd00a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dd00e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dd012:	ea94 0f05 	teq	r4, r5
   dd016:	bf08      	it	eq
   dd018:	ea90 0f02 	teqeq	r0, r2
   dd01c:	bf1f      	itttt	ne
   dd01e:	ea54 0c00 	orrsne.w	ip, r4, r0
   dd022:	ea55 0c02 	orrsne.w	ip, r5, r2
   dd026:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dd02a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dd02e:	f000 80e2 	beq.w	dd1f6 <__adddf3+0x1ee>
   dd032:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dd036:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dd03a:	bfb8      	it	lt
   dd03c:	426d      	neglt	r5, r5
   dd03e:	dd0c      	ble.n	dd05a <__adddf3+0x52>
   dd040:	442c      	add	r4, r5
   dd042:	ea80 0202 	eor.w	r2, r0, r2
   dd046:	ea81 0303 	eor.w	r3, r1, r3
   dd04a:	ea82 0000 	eor.w	r0, r2, r0
   dd04e:	ea83 0101 	eor.w	r1, r3, r1
   dd052:	ea80 0202 	eor.w	r2, r0, r2
   dd056:	ea81 0303 	eor.w	r3, r1, r3
   dd05a:	2d36      	cmp	r5, #54	; 0x36
   dd05c:	bf88      	it	hi
   dd05e:	bd30      	pophi	{r4, r5, pc}
   dd060:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dd064:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dd068:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dd06c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dd070:	d002      	beq.n	dd078 <__adddf3+0x70>
   dd072:	4240      	negs	r0, r0
   dd074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd078:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dd07c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dd080:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dd084:	d002      	beq.n	dd08c <__adddf3+0x84>
   dd086:	4252      	negs	r2, r2
   dd088:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd08c:	ea94 0f05 	teq	r4, r5
   dd090:	f000 80a7 	beq.w	dd1e2 <__adddf3+0x1da>
   dd094:	f1a4 0401 	sub.w	r4, r4, #1
   dd098:	f1d5 0e20 	rsbs	lr, r5, #32
   dd09c:	db0d      	blt.n	dd0ba <__adddf3+0xb2>
   dd09e:	fa02 fc0e 	lsl.w	ip, r2, lr
   dd0a2:	fa22 f205 	lsr.w	r2, r2, r5
   dd0a6:	1880      	adds	r0, r0, r2
   dd0a8:	f141 0100 	adc.w	r1, r1, #0
   dd0ac:	fa03 f20e 	lsl.w	r2, r3, lr
   dd0b0:	1880      	adds	r0, r0, r2
   dd0b2:	fa43 f305 	asr.w	r3, r3, r5
   dd0b6:	4159      	adcs	r1, r3
   dd0b8:	e00e      	b.n	dd0d8 <__adddf3+0xd0>
   dd0ba:	f1a5 0520 	sub.w	r5, r5, #32
   dd0be:	f10e 0e20 	add.w	lr, lr, #32
   dd0c2:	2a01      	cmp	r2, #1
   dd0c4:	fa03 fc0e 	lsl.w	ip, r3, lr
   dd0c8:	bf28      	it	cs
   dd0ca:	f04c 0c02 	orrcs.w	ip, ip, #2
   dd0ce:	fa43 f305 	asr.w	r3, r3, r5
   dd0d2:	18c0      	adds	r0, r0, r3
   dd0d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dd0d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd0dc:	d507      	bpl.n	dd0ee <__adddf3+0xe6>
   dd0de:	f04f 0e00 	mov.w	lr, #0
   dd0e2:	f1dc 0c00 	rsbs	ip, ip, #0
   dd0e6:	eb7e 0000 	sbcs.w	r0, lr, r0
   dd0ea:	eb6e 0101 	sbc.w	r1, lr, r1
   dd0ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dd0f2:	d31b      	bcc.n	dd12c <__adddf3+0x124>
   dd0f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dd0f8:	d30c      	bcc.n	dd114 <__adddf3+0x10c>
   dd0fa:	0849      	lsrs	r1, r1, #1
   dd0fc:	ea5f 0030 	movs.w	r0, r0, rrx
   dd100:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dd104:	f104 0401 	add.w	r4, r4, #1
   dd108:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dd10c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dd110:	f080 809a 	bcs.w	dd248 <__adddf3+0x240>
   dd114:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dd118:	bf08      	it	eq
   dd11a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dd11e:	f150 0000 	adcs.w	r0, r0, #0
   dd122:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd126:	ea41 0105 	orr.w	r1, r1, r5
   dd12a:	bd30      	pop	{r4, r5, pc}
   dd12c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dd130:	4140      	adcs	r0, r0
   dd132:	eb41 0101 	adc.w	r1, r1, r1
   dd136:	3c01      	subs	r4, #1
   dd138:	bf28      	it	cs
   dd13a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dd13e:	d2e9      	bcs.n	dd114 <__adddf3+0x10c>
   dd140:	f091 0f00 	teq	r1, #0
   dd144:	bf04      	itt	eq
   dd146:	4601      	moveq	r1, r0
   dd148:	2000      	moveq	r0, #0
   dd14a:	fab1 f381 	clz	r3, r1
   dd14e:	bf08      	it	eq
   dd150:	3320      	addeq	r3, #32
   dd152:	f1a3 030b 	sub.w	r3, r3, #11
   dd156:	f1b3 0220 	subs.w	r2, r3, #32
   dd15a:	da0c      	bge.n	dd176 <__adddf3+0x16e>
   dd15c:	320c      	adds	r2, #12
   dd15e:	dd08      	ble.n	dd172 <__adddf3+0x16a>
   dd160:	f102 0c14 	add.w	ip, r2, #20
   dd164:	f1c2 020c 	rsb	r2, r2, #12
   dd168:	fa01 f00c 	lsl.w	r0, r1, ip
   dd16c:	fa21 f102 	lsr.w	r1, r1, r2
   dd170:	e00c      	b.n	dd18c <__adddf3+0x184>
   dd172:	f102 0214 	add.w	r2, r2, #20
   dd176:	bfd8      	it	le
   dd178:	f1c2 0c20 	rsble	ip, r2, #32
   dd17c:	fa01 f102 	lsl.w	r1, r1, r2
   dd180:	fa20 fc0c 	lsr.w	ip, r0, ip
   dd184:	bfdc      	itt	le
   dd186:	ea41 010c 	orrle.w	r1, r1, ip
   dd18a:	4090      	lslle	r0, r2
   dd18c:	1ae4      	subs	r4, r4, r3
   dd18e:	bfa2      	ittt	ge
   dd190:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dd194:	4329      	orrge	r1, r5
   dd196:	bd30      	popge	{r4, r5, pc}
   dd198:	ea6f 0404 	mvn.w	r4, r4
   dd19c:	3c1f      	subs	r4, #31
   dd19e:	da1c      	bge.n	dd1da <__adddf3+0x1d2>
   dd1a0:	340c      	adds	r4, #12
   dd1a2:	dc0e      	bgt.n	dd1c2 <__adddf3+0x1ba>
   dd1a4:	f104 0414 	add.w	r4, r4, #20
   dd1a8:	f1c4 0220 	rsb	r2, r4, #32
   dd1ac:	fa20 f004 	lsr.w	r0, r0, r4
   dd1b0:	fa01 f302 	lsl.w	r3, r1, r2
   dd1b4:	ea40 0003 	orr.w	r0, r0, r3
   dd1b8:	fa21 f304 	lsr.w	r3, r1, r4
   dd1bc:	ea45 0103 	orr.w	r1, r5, r3
   dd1c0:	bd30      	pop	{r4, r5, pc}
   dd1c2:	f1c4 040c 	rsb	r4, r4, #12
   dd1c6:	f1c4 0220 	rsb	r2, r4, #32
   dd1ca:	fa20 f002 	lsr.w	r0, r0, r2
   dd1ce:	fa01 f304 	lsl.w	r3, r1, r4
   dd1d2:	ea40 0003 	orr.w	r0, r0, r3
   dd1d6:	4629      	mov	r1, r5
   dd1d8:	bd30      	pop	{r4, r5, pc}
   dd1da:	fa21 f004 	lsr.w	r0, r1, r4
   dd1de:	4629      	mov	r1, r5
   dd1e0:	bd30      	pop	{r4, r5, pc}
   dd1e2:	f094 0f00 	teq	r4, #0
   dd1e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dd1ea:	bf06      	itte	eq
   dd1ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dd1f0:	3401      	addeq	r4, #1
   dd1f2:	3d01      	subne	r5, #1
   dd1f4:	e74e      	b.n	dd094 <__adddf3+0x8c>
   dd1f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dd1fa:	bf18      	it	ne
   dd1fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dd200:	d029      	beq.n	dd256 <__adddf3+0x24e>
   dd202:	ea94 0f05 	teq	r4, r5
   dd206:	bf08      	it	eq
   dd208:	ea90 0f02 	teqeq	r0, r2
   dd20c:	d005      	beq.n	dd21a <__adddf3+0x212>
   dd20e:	ea54 0c00 	orrs.w	ip, r4, r0
   dd212:	bf04      	itt	eq
   dd214:	4619      	moveq	r1, r3
   dd216:	4610      	moveq	r0, r2
   dd218:	bd30      	pop	{r4, r5, pc}
   dd21a:	ea91 0f03 	teq	r1, r3
   dd21e:	bf1e      	ittt	ne
   dd220:	2100      	movne	r1, #0
   dd222:	2000      	movne	r0, #0
   dd224:	bd30      	popne	{r4, r5, pc}
   dd226:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dd22a:	d105      	bne.n	dd238 <__adddf3+0x230>
   dd22c:	0040      	lsls	r0, r0, #1
   dd22e:	4149      	adcs	r1, r1
   dd230:	bf28      	it	cs
   dd232:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dd236:	bd30      	pop	{r4, r5, pc}
   dd238:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dd23c:	bf3c      	itt	cc
   dd23e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dd242:	bd30      	popcc	{r4, r5, pc}
   dd244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd248:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dd24c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dd250:	f04f 0000 	mov.w	r0, #0
   dd254:	bd30      	pop	{r4, r5, pc}
   dd256:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dd25a:	bf1a      	itte	ne
   dd25c:	4619      	movne	r1, r3
   dd25e:	4610      	movne	r0, r2
   dd260:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dd264:	bf1c      	itt	ne
   dd266:	460b      	movne	r3, r1
   dd268:	4602      	movne	r2, r0
   dd26a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dd26e:	bf06      	itte	eq
   dd270:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dd274:	ea91 0f03 	teqeq	r1, r3
   dd278:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dd27c:	bd30      	pop	{r4, r5, pc}
   dd27e:	bf00      	nop

000dd280 <__aeabi_ui2d>:
   dd280:	f090 0f00 	teq	r0, #0
   dd284:	bf04      	itt	eq
   dd286:	2100      	moveq	r1, #0
   dd288:	4770      	bxeq	lr
   dd28a:	b530      	push	{r4, r5, lr}
   dd28c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dd290:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dd294:	f04f 0500 	mov.w	r5, #0
   dd298:	f04f 0100 	mov.w	r1, #0
   dd29c:	e750      	b.n	dd140 <__adddf3+0x138>
   dd29e:	bf00      	nop

000dd2a0 <__aeabi_i2d>:
   dd2a0:	f090 0f00 	teq	r0, #0
   dd2a4:	bf04      	itt	eq
   dd2a6:	2100      	moveq	r1, #0
   dd2a8:	4770      	bxeq	lr
   dd2aa:	b530      	push	{r4, r5, lr}
   dd2ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dd2b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dd2b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dd2b8:	bf48      	it	mi
   dd2ba:	4240      	negmi	r0, r0
   dd2bc:	f04f 0100 	mov.w	r1, #0
   dd2c0:	e73e      	b.n	dd140 <__adddf3+0x138>
   dd2c2:	bf00      	nop

000dd2c4 <__aeabi_f2d>:
   dd2c4:	0042      	lsls	r2, r0, #1
   dd2c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dd2ca:	ea4f 0131 	mov.w	r1, r1, rrx
   dd2ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dd2d2:	bf1f      	itttt	ne
   dd2d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dd2d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dd2dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dd2e0:	4770      	bxne	lr
   dd2e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dd2e6:	bf08      	it	eq
   dd2e8:	4770      	bxeq	lr
   dd2ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dd2ee:	bf04      	itt	eq
   dd2f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dd2f4:	4770      	bxeq	lr
   dd2f6:	b530      	push	{r4, r5, lr}
   dd2f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   dd2fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dd304:	e71c      	b.n	dd140 <__adddf3+0x138>
   dd306:	bf00      	nop

000dd308 <__aeabi_ul2d>:
   dd308:	ea50 0201 	orrs.w	r2, r0, r1
   dd30c:	bf08      	it	eq
   dd30e:	4770      	bxeq	lr
   dd310:	b530      	push	{r4, r5, lr}
   dd312:	f04f 0500 	mov.w	r5, #0
   dd316:	e00a      	b.n	dd32e <__aeabi_l2d+0x16>

000dd318 <__aeabi_l2d>:
   dd318:	ea50 0201 	orrs.w	r2, r0, r1
   dd31c:	bf08      	it	eq
   dd31e:	4770      	bxeq	lr
   dd320:	b530      	push	{r4, r5, lr}
   dd322:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dd326:	d502      	bpl.n	dd32e <__aeabi_l2d+0x16>
   dd328:	4240      	negs	r0, r0
   dd32a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd32e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dd332:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dd336:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dd33a:	f43f aed8 	beq.w	dd0ee <__adddf3+0xe6>
   dd33e:	f04f 0203 	mov.w	r2, #3
   dd342:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dd346:	bf18      	it	ne
   dd348:	3203      	addne	r2, #3
   dd34a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dd34e:	bf18      	it	ne
   dd350:	3203      	addne	r2, #3
   dd352:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dd356:	f1c2 0320 	rsb	r3, r2, #32
   dd35a:	fa00 fc03 	lsl.w	ip, r0, r3
   dd35e:	fa20 f002 	lsr.w	r0, r0, r2
   dd362:	fa01 fe03 	lsl.w	lr, r1, r3
   dd366:	ea40 000e 	orr.w	r0, r0, lr
   dd36a:	fa21 f102 	lsr.w	r1, r1, r2
   dd36e:	4414      	add	r4, r2
   dd370:	e6bd      	b.n	dd0ee <__adddf3+0xe6>
   dd372:	bf00      	nop

000dd374 <__aeabi_dmul>:
   dd374:	b570      	push	{r4, r5, r6, lr}
   dd376:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dd37a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dd37e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dd382:	bf1d      	ittte	ne
   dd384:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dd388:	ea94 0f0c 	teqne	r4, ip
   dd38c:	ea95 0f0c 	teqne	r5, ip
   dd390:	f000 f8de 	bleq	dd550 <__aeabi_dmul+0x1dc>
   dd394:	442c      	add	r4, r5
   dd396:	ea81 0603 	eor.w	r6, r1, r3
   dd39a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dd39e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dd3a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dd3a6:	bf18      	it	ne
   dd3a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dd3ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd3b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd3b4:	d038      	beq.n	dd428 <__aeabi_dmul+0xb4>
   dd3b6:	fba0 ce02 	umull	ip, lr, r0, r2
   dd3ba:	f04f 0500 	mov.w	r5, #0
   dd3be:	fbe1 e502 	umlal	lr, r5, r1, r2
   dd3c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dd3c6:	fbe0 e503 	umlal	lr, r5, r0, r3
   dd3ca:	f04f 0600 	mov.w	r6, #0
   dd3ce:	fbe1 5603 	umlal	r5, r6, r1, r3
   dd3d2:	f09c 0f00 	teq	ip, #0
   dd3d6:	bf18      	it	ne
   dd3d8:	f04e 0e01 	orrne.w	lr, lr, #1
   dd3dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dd3e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dd3e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dd3e8:	d204      	bcs.n	dd3f4 <__aeabi_dmul+0x80>
   dd3ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dd3ee:	416d      	adcs	r5, r5
   dd3f0:	eb46 0606 	adc.w	r6, r6, r6
   dd3f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dd3f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dd3fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dd400:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dd404:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dd408:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dd40c:	bf88      	it	hi
   dd40e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dd412:	d81e      	bhi.n	dd452 <__aeabi_dmul+0xde>
   dd414:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dd418:	bf08      	it	eq
   dd41a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dd41e:	f150 0000 	adcs.w	r0, r0, #0
   dd422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd426:	bd70      	pop	{r4, r5, r6, pc}
   dd428:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dd42c:	ea46 0101 	orr.w	r1, r6, r1
   dd430:	ea40 0002 	orr.w	r0, r0, r2
   dd434:	ea81 0103 	eor.w	r1, r1, r3
   dd438:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dd43c:	bfc2      	ittt	gt
   dd43e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dd442:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dd446:	bd70      	popgt	{r4, r5, r6, pc}
   dd448:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd44c:	f04f 0e00 	mov.w	lr, #0
   dd450:	3c01      	subs	r4, #1
   dd452:	f300 80ab 	bgt.w	dd5ac <__aeabi_dmul+0x238>
   dd456:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dd45a:	bfde      	ittt	le
   dd45c:	2000      	movle	r0, #0
   dd45e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dd462:	bd70      	pople	{r4, r5, r6, pc}
   dd464:	f1c4 0400 	rsb	r4, r4, #0
   dd468:	3c20      	subs	r4, #32
   dd46a:	da35      	bge.n	dd4d8 <__aeabi_dmul+0x164>
   dd46c:	340c      	adds	r4, #12
   dd46e:	dc1b      	bgt.n	dd4a8 <__aeabi_dmul+0x134>
   dd470:	f104 0414 	add.w	r4, r4, #20
   dd474:	f1c4 0520 	rsb	r5, r4, #32
   dd478:	fa00 f305 	lsl.w	r3, r0, r5
   dd47c:	fa20 f004 	lsr.w	r0, r0, r4
   dd480:	fa01 f205 	lsl.w	r2, r1, r5
   dd484:	ea40 0002 	orr.w	r0, r0, r2
   dd488:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dd48c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dd490:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dd494:	fa21 f604 	lsr.w	r6, r1, r4
   dd498:	eb42 0106 	adc.w	r1, r2, r6
   dd49c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dd4a0:	bf08      	it	eq
   dd4a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dd4a6:	bd70      	pop	{r4, r5, r6, pc}
   dd4a8:	f1c4 040c 	rsb	r4, r4, #12
   dd4ac:	f1c4 0520 	rsb	r5, r4, #32
   dd4b0:	fa00 f304 	lsl.w	r3, r0, r4
   dd4b4:	fa20 f005 	lsr.w	r0, r0, r5
   dd4b8:	fa01 f204 	lsl.w	r2, r1, r4
   dd4bc:	ea40 0002 	orr.w	r0, r0, r2
   dd4c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dd4c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dd4c8:	f141 0100 	adc.w	r1, r1, #0
   dd4cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dd4d0:	bf08      	it	eq
   dd4d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dd4d6:	bd70      	pop	{r4, r5, r6, pc}
   dd4d8:	f1c4 0520 	rsb	r5, r4, #32
   dd4dc:	fa00 f205 	lsl.w	r2, r0, r5
   dd4e0:	ea4e 0e02 	orr.w	lr, lr, r2
   dd4e4:	fa20 f304 	lsr.w	r3, r0, r4
   dd4e8:	fa01 f205 	lsl.w	r2, r1, r5
   dd4ec:	ea43 0302 	orr.w	r3, r3, r2
   dd4f0:	fa21 f004 	lsr.w	r0, r1, r4
   dd4f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dd4f8:	fa21 f204 	lsr.w	r2, r1, r4
   dd4fc:	ea20 0002 	bic.w	r0, r0, r2
   dd500:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dd504:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dd508:	bf08      	it	eq
   dd50a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dd50e:	bd70      	pop	{r4, r5, r6, pc}
   dd510:	f094 0f00 	teq	r4, #0
   dd514:	d10f      	bne.n	dd536 <__aeabi_dmul+0x1c2>
   dd516:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dd51a:	0040      	lsls	r0, r0, #1
   dd51c:	eb41 0101 	adc.w	r1, r1, r1
   dd520:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd524:	bf08      	it	eq
   dd526:	3c01      	subeq	r4, #1
   dd528:	d0f7      	beq.n	dd51a <__aeabi_dmul+0x1a6>
   dd52a:	ea41 0106 	orr.w	r1, r1, r6
   dd52e:	f095 0f00 	teq	r5, #0
   dd532:	bf18      	it	ne
   dd534:	4770      	bxne	lr
   dd536:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dd53a:	0052      	lsls	r2, r2, #1
   dd53c:	eb43 0303 	adc.w	r3, r3, r3
   dd540:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dd544:	bf08      	it	eq
   dd546:	3d01      	subeq	r5, #1
   dd548:	d0f7      	beq.n	dd53a <__aeabi_dmul+0x1c6>
   dd54a:	ea43 0306 	orr.w	r3, r3, r6
   dd54e:	4770      	bx	lr
   dd550:	ea94 0f0c 	teq	r4, ip
   dd554:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dd558:	bf18      	it	ne
   dd55a:	ea95 0f0c 	teqne	r5, ip
   dd55e:	d00c      	beq.n	dd57a <__aeabi_dmul+0x206>
   dd560:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dd564:	bf18      	it	ne
   dd566:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dd56a:	d1d1      	bne.n	dd510 <__aeabi_dmul+0x19c>
   dd56c:	ea81 0103 	eor.w	r1, r1, r3
   dd570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dd574:	f04f 0000 	mov.w	r0, #0
   dd578:	bd70      	pop	{r4, r5, r6, pc}
   dd57a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dd57e:	bf06      	itte	eq
   dd580:	4610      	moveq	r0, r2
   dd582:	4619      	moveq	r1, r3
   dd584:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dd588:	d019      	beq.n	dd5be <__aeabi_dmul+0x24a>
   dd58a:	ea94 0f0c 	teq	r4, ip
   dd58e:	d102      	bne.n	dd596 <__aeabi_dmul+0x222>
   dd590:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dd594:	d113      	bne.n	dd5be <__aeabi_dmul+0x24a>
   dd596:	ea95 0f0c 	teq	r5, ip
   dd59a:	d105      	bne.n	dd5a8 <__aeabi_dmul+0x234>
   dd59c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dd5a0:	bf1c      	itt	ne
   dd5a2:	4610      	movne	r0, r2
   dd5a4:	4619      	movne	r1, r3
   dd5a6:	d10a      	bne.n	dd5be <__aeabi_dmul+0x24a>
   dd5a8:	ea81 0103 	eor.w	r1, r1, r3
   dd5ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dd5b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dd5b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dd5b8:	f04f 0000 	mov.w	r0, #0
   dd5bc:	bd70      	pop	{r4, r5, r6, pc}
   dd5be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dd5c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dd5c6:	bd70      	pop	{r4, r5, r6, pc}

000dd5c8 <__aeabi_ddiv>:
   dd5c8:	b570      	push	{r4, r5, r6, lr}
   dd5ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dd5ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dd5d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dd5d6:	bf1d      	ittte	ne
   dd5d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dd5dc:	ea94 0f0c 	teqne	r4, ip
   dd5e0:	ea95 0f0c 	teqne	r5, ip
   dd5e4:	f000 f8a7 	bleq	dd736 <__aeabi_ddiv+0x16e>
   dd5e8:	eba4 0405 	sub.w	r4, r4, r5
   dd5ec:	ea81 0e03 	eor.w	lr, r1, r3
   dd5f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dd5f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dd5f8:	f000 8088 	beq.w	dd70c <__aeabi_ddiv+0x144>
   dd5fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dd600:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dd604:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dd608:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dd60c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dd610:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dd614:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dd618:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dd61c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dd620:	429d      	cmp	r5, r3
   dd622:	bf08      	it	eq
   dd624:	4296      	cmpeq	r6, r2
   dd626:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dd62a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dd62e:	d202      	bcs.n	dd636 <__aeabi_ddiv+0x6e>
   dd630:	085b      	lsrs	r3, r3, #1
   dd632:	ea4f 0232 	mov.w	r2, r2, rrx
   dd636:	1ab6      	subs	r6, r6, r2
   dd638:	eb65 0503 	sbc.w	r5, r5, r3
   dd63c:	085b      	lsrs	r3, r3, #1
   dd63e:	ea4f 0232 	mov.w	r2, r2, rrx
   dd642:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dd646:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dd64a:	ebb6 0e02 	subs.w	lr, r6, r2
   dd64e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd652:	bf22      	ittt	cs
   dd654:	1ab6      	subcs	r6, r6, r2
   dd656:	4675      	movcs	r5, lr
   dd658:	ea40 000c 	orrcs.w	r0, r0, ip
   dd65c:	085b      	lsrs	r3, r3, #1
   dd65e:	ea4f 0232 	mov.w	r2, r2, rrx
   dd662:	ebb6 0e02 	subs.w	lr, r6, r2
   dd666:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd66a:	bf22      	ittt	cs
   dd66c:	1ab6      	subcs	r6, r6, r2
   dd66e:	4675      	movcs	r5, lr
   dd670:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dd674:	085b      	lsrs	r3, r3, #1
   dd676:	ea4f 0232 	mov.w	r2, r2, rrx
   dd67a:	ebb6 0e02 	subs.w	lr, r6, r2
   dd67e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd682:	bf22      	ittt	cs
   dd684:	1ab6      	subcs	r6, r6, r2
   dd686:	4675      	movcs	r5, lr
   dd688:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dd68c:	085b      	lsrs	r3, r3, #1
   dd68e:	ea4f 0232 	mov.w	r2, r2, rrx
   dd692:	ebb6 0e02 	subs.w	lr, r6, r2
   dd696:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd69a:	bf22      	ittt	cs
   dd69c:	1ab6      	subcs	r6, r6, r2
   dd69e:	4675      	movcs	r5, lr
   dd6a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dd6a4:	ea55 0e06 	orrs.w	lr, r5, r6
   dd6a8:	d018      	beq.n	dd6dc <__aeabi_ddiv+0x114>
   dd6aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dd6ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dd6b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dd6b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dd6ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dd6be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dd6c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dd6c6:	d1c0      	bne.n	dd64a <__aeabi_ddiv+0x82>
   dd6c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd6cc:	d10b      	bne.n	dd6e6 <__aeabi_ddiv+0x11e>
   dd6ce:	ea41 0100 	orr.w	r1, r1, r0
   dd6d2:	f04f 0000 	mov.w	r0, #0
   dd6d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dd6da:	e7b6      	b.n	dd64a <__aeabi_ddiv+0x82>
   dd6dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd6e0:	bf04      	itt	eq
   dd6e2:	4301      	orreq	r1, r0
   dd6e4:	2000      	moveq	r0, #0
   dd6e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dd6ea:	bf88      	it	hi
   dd6ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dd6f0:	f63f aeaf 	bhi.w	dd452 <__aeabi_dmul+0xde>
   dd6f4:	ebb5 0c03 	subs.w	ip, r5, r3
   dd6f8:	bf04      	itt	eq
   dd6fa:	ebb6 0c02 	subseq.w	ip, r6, r2
   dd6fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dd702:	f150 0000 	adcs.w	r0, r0, #0
   dd706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd70a:	bd70      	pop	{r4, r5, r6, pc}
   dd70c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dd710:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dd714:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dd718:	bfc2      	ittt	gt
   dd71a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dd71e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dd722:	bd70      	popgt	{r4, r5, r6, pc}
   dd724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd728:	f04f 0e00 	mov.w	lr, #0
   dd72c:	3c01      	subs	r4, #1
   dd72e:	e690      	b.n	dd452 <__aeabi_dmul+0xde>
   dd730:	ea45 0e06 	orr.w	lr, r5, r6
   dd734:	e68d      	b.n	dd452 <__aeabi_dmul+0xde>
   dd736:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dd73a:	ea94 0f0c 	teq	r4, ip
   dd73e:	bf08      	it	eq
   dd740:	ea95 0f0c 	teqeq	r5, ip
   dd744:	f43f af3b 	beq.w	dd5be <__aeabi_dmul+0x24a>
   dd748:	ea94 0f0c 	teq	r4, ip
   dd74c:	d10a      	bne.n	dd764 <__aeabi_ddiv+0x19c>
   dd74e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dd752:	f47f af34 	bne.w	dd5be <__aeabi_dmul+0x24a>
   dd756:	ea95 0f0c 	teq	r5, ip
   dd75a:	f47f af25 	bne.w	dd5a8 <__aeabi_dmul+0x234>
   dd75e:	4610      	mov	r0, r2
   dd760:	4619      	mov	r1, r3
   dd762:	e72c      	b.n	dd5be <__aeabi_dmul+0x24a>
   dd764:	ea95 0f0c 	teq	r5, ip
   dd768:	d106      	bne.n	dd778 <__aeabi_ddiv+0x1b0>
   dd76a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dd76e:	f43f aefd 	beq.w	dd56c <__aeabi_dmul+0x1f8>
   dd772:	4610      	mov	r0, r2
   dd774:	4619      	mov	r1, r3
   dd776:	e722      	b.n	dd5be <__aeabi_dmul+0x24a>
   dd778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dd77c:	bf18      	it	ne
   dd77e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dd782:	f47f aec5 	bne.w	dd510 <__aeabi_dmul+0x19c>
   dd786:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dd78a:	f47f af0d 	bne.w	dd5a8 <__aeabi_dmul+0x234>
   dd78e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dd792:	f47f aeeb 	bne.w	dd56c <__aeabi_dmul+0x1f8>
   dd796:	e712      	b.n	dd5be <__aeabi_dmul+0x24a>

000dd798 <__gedf2>:
   dd798:	f04f 3cff 	mov.w	ip, #4294967295
   dd79c:	e006      	b.n	dd7ac <__cmpdf2+0x4>
   dd79e:	bf00      	nop

000dd7a0 <__ledf2>:
   dd7a0:	f04f 0c01 	mov.w	ip, #1
   dd7a4:	e002      	b.n	dd7ac <__cmpdf2+0x4>
   dd7a6:	bf00      	nop

000dd7a8 <__cmpdf2>:
   dd7a8:	f04f 0c01 	mov.w	ip, #1
   dd7ac:	f84d cd04 	str.w	ip, [sp, #-4]!
   dd7b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dd7b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd7b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dd7bc:	bf18      	it	ne
   dd7be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dd7c2:	d01b      	beq.n	dd7fc <__cmpdf2+0x54>
   dd7c4:	b001      	add	sp, #4
   dd7c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dd7ca:	bf0c      	ite	eq
   dd7cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dd7d0:	ea91 0f03 	teqne	r1, r3
   dd7d4:	bf02      	ittt	eq
   dd7d6:	ea90 0f02 	teqeq	r0, r2
   dd7da:	2000      	moveq	r0, #0
   dd7dc:	4770      	bxeq	lr
   dd7de:	f110 0f00 	cmn.w	r0, #0
   dd7e2:	ea91 0f03 	teq	r1, r3
   dd7e6:	bf58      	it	pl
   dd7e8:	4299      	cmppl	r1, r3
   dd7ea:	bf08      	it	eq
   dd7ec:	4290      	cmpeq	r0, r2
   dd7ee:	bf2c      	ite	cs
   dd7f0:	17d8      	asrcs	r0, r3, #31
   dd7f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dd7f6:	f040 0001 	orr.w	r0, r0, #1
   dd7fa:	4770      	bx	lr
   dd7fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dd800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd804:	d102      	bne.n	dd80c <__cmpdf2+0x64>
   dd806:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dd80a:	d107      	bne.n	dd81c <__cmpdf2+0x74>
   dd80c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dd810:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd814:	d1d6      	bne.n	dd7c4 <__cmpdf2+0x1c>
   dd816:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dd81a:	d0d3      	beq.n	dd7c4 <__cmpdf2+0x1c>
   dd81c:	f85d 0b04 	ldr.w	r0, [sp], #4
   dd820:	4770      	bx	lr
   dd822:	bf00      	nop

000dd824 <__aeabi_cdrcmple>:
   dd824:	4684      	mov	ip, r0
   dd826:	4610      	mov	r0, r2
   dd828:	4662      	mov	r2, ip
   dd82a:	468c      	mov	ip, r1
   dd82c:	4619      	mov	r1, r3
   dd82e:	4663      	mov	r3, ip
   dd830:	e000      	b.n	dd834 <__aeabi_cdcmpeq>
   dd832:	bf00      	nop

000dd834 <__aeabi_cdcmpeq>:
   dd834:	b501      	push	{r0, lr}
   dd836:	f7ff ffb7 	bl	dd7a8 <__cmpdf2>
   dd83a:	2800      	cmp	r0, #0
   dd83c:	bf48      	it	mi
   dd83e:	f110 0f00 	cmnmi.w	r0, #0
   dd842:	bd01      	pop	{r0, pc}

000dd844 <__aeabi_dcmpeq>:
   dd844:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd848:	f7ff fff4 	bl	dd834 <__aeabi_cdcmpeq>
   dd84c:	bf0c      	ite	eq
   dd84e:	2001      	moveq	r0, #1
   dd850:	2000      	movne	r0, #0
   dd852:	f85d fb08 	ldr.w	pc, [sp], #8
   dd856:	bf00      	nop

000dd858 <__aeabi_dcmplt>:
   dd858:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd85c:	f7ff ffea 	bl	dd834 <__aeabi_cdcmpeq>
   dd860:	bf34      	ite	cc
   dd862:	2001      	movcc	r0, #1
   dd864:	2000      	movcs	r0, #0
   dd866:	f85d fb08 	ldr.w	pc, [sp], #8
   dd86a:	bf00      	nop

000dd86c <__aeabi_dcmple>:
   dd86c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd870:	f7ff ffe0 	bl	dd834 <__aeabi_cdcmpeq>
   dd874:	bf94      	ite	ls
   dd876:	2001      	movls	r0, #1
   dd878:	2000      	movhi	r0, #0
   dd87a:	f85d fb08 	ldr.w	pc, [sp], #8
   dd87e:	bf00      	nop

000dd880 <__aeabi_dcmpge>:
   dd880:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd884:	f7ff ffce 	bl	dd824 <__aeabi_cdrcmple>
   dd888:	bf94      	ite	ls
   dd88a:	2001      	movls	r0, #1
   dd88c:	2000      	movhi	r0, #0
   dd88e:	f85d fb08 	ldr.w	pc, [sp], #8
   dd892:	bf00      	nop

000dd894 <__aeabi_dcmpgt>:
   dd894:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd898:	f7ff ffc4 	bl	dd824 <__aeabi_cdrcmple>
   dd89c:	bf34      	ite	cc
   dd89e:	2001      	movcc	r0, #1
   dd8a0:	2000      	movcs	r0, #0
   dd8a2:	f85d fb08 	ldr.w	pc, [sp], #8
   dd8a6:	bf00      	nop

000dd8a8 <__aeabi_dcmpun>:
   dd8a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dd8ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd8b0:	d102      	bne.n	dd8b8 <__aeabi_dcmpun+0x10>
   dd8b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dd8b6:	d10a      	bne.n	dd8ce <__aeabi_dcmpun+0x26>
   dd8b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dd8bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd8c0:	d102      	bne.n	dd8c8 <__aeabi_dcmpun+0x20>
   dd8c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dd8c6:	d102      	bne.n	dd8ce <__aeabi_dcmpun+0x26>
   dd8c8:	f04f 0000 	mov.w	r0, #0
   dd8cc:	4770      	bx	lr
   dd8ce:	f04f 0001 	mov.w	r0, #1
   dd8d2:	4770      	bx	lr

000dd8d4 <__aeabi_d2iz>:
   dd8d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dd8d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dd8dc:	d215      	bcs.n	dd90a <__aeabi_d2iz+0x36>
   dd8de:	d511      	bpl.n	dd904 <__aeabi_d2iz+0x30>
   dd8e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dd8e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dd8e8:	d912      	bls.n	dd910 <__aeabi_d2iz+0x3c>
   dd8ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd8ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dd8f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dd8f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dd8fa:	fa23 f002 	lsr.w	r0, r3, r2
   dd8fe:	bf18      	it	ne
   dd900:	4240      	negne	r0, r0
   dd902:	4770      	bx	lr
   dd904:	f04f 0000 	mov.w	r0, #0
   dd908:	4770      	bx	lr
   dd90a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dd90e:	d105      	bne.n	dd91c <__aeabi_d2iz+0x48>
   dd910:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dd914:	bf08      	it	eq
   dd916:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dd91a:	4770      	bx	lr
   dd91c:	f04f 0000 	mov.w	r0, #0
   dd920:	4770      	bx	lr
   dd922:	bf00      	nop

000dd924 <__aeabi_d2uiz>:
   dd924:	004a      	lsls	r2, r1, #1
   dd926:	d211      	bcs.n	dd94c <__aeabi_d2uiz+0x28>
   dd928:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dd92c:	d211      	bcs.n	dd952 <__aeabi_d2uiz+0x2e>
   dd92e:	d50d      	bpl.n	dd94c <__aeabi_d2uiz+0x28>
   dd930:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dd934:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dd938:	d40e      	bmi.n	dd958 <__aeabi_d2uiz+0x34>
   dd93a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd93e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dd942:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dd946:	fa23 f002 	lsr.w	r0, r3, r2
   dd94a:	4770      	bx	lr
   dd94c:	f04f 0000 	mov.w	r0, #0
   dd950:	4770      	bx	lr
   dd952:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dd956:	d102      	bne.n	dd95e <__aeabi_d2uiz+0x3a>
   dd958:	f04f 30ff 	mov.w	r0, #4294967295
   dd95c:	4770      	bx	lr
   dd95e:	f04f 0000 	mov.w	r0, #0
   dd962:	4770      	bx	lr

000dd964 <__aeabi_d2f>:
   dd964:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dd968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dd96c:	bf24      	itt	cs
   dd96e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dd972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dd976:	d90d      	bls.n	dd994 <__aeabi_d2f+0x30>
   dd978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dd97c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dd980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dd984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dd988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dd98c:	bf08      	it	eq
   dd98e:	f020 0001 	biceq.w	r0, r0, #1
   dd992:	4770      	bx	lr
   dd994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dd998:	d121      	bne.n	dd9de <__aeabi_d2f+0x7a>
   dd99a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dd99e:	bfbc      	itt	lt
   dd9a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dd9a4:	4770      	bxlt	lr
   dd9a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd9aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dd9ae:	f1c2 0218 	rsb	r2, r2, #24
   dd9b2:	f1c2 0c20 	rsb	ip, r2, #32
   dd9b6:	fa10 f30c 	lsls.w	r3, r0, ip
   dd9ba:	fa20 f002 	lsr.w	r0, r0, r2
   dd9be:	bf18      	it	ne
   dd9c0:	f040 0001 	orrne.w	r0, r0, #1
   dd9c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd9c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dd9cc:	fa03 fc0c 	lsl.w	ip, r3, ip
   dd9d0:	ea40 000c 	orr.w	r0, r0, ip
   dd9d4:	fa23 f302 	lsr.w	r3, r3, r2
   dd9d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dd9dc:	e7cc      	b.n	dd978 <__aeabi_d2f+0x14>
   dd9de:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dd9e2:	d107      	bne.n	dd9f4 <__aeabi_d2f+0x90>
   dd9e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dd9e8:	bf1e      	ittt	ne
   dd9ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dd9ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dd9f2:	4770      	bxne	lr
   dd9f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dd9f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dd9fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dda00:	4770      	bx	lr
   dda02:	bf00      	nop

000dda04 <__aeabi_frsub>:
   dda04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   dda08:	e002      	b.n	dda10 <__addsf3>
   dda0a:	bf00      	nop

000dda0c <__aeabi_fsub>:
   dda0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000dda10 <__addsf3>:
   dda10:	0042      	lsls	r2, r0, #1
   dda12:	bf1f      	itttt	ne
   dda14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   dda18:	ea92 0f03 	teqne	r2, r3
   dda1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   dda20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dda24:	d06a      	beq.n	ddafc <__addsf3+0xec>
   dda26:	ea4f 6212 	mov.w	r2, r2, lsr #24
   dda2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   dda2e:	bfc1      	itttt	gt
   dda30:	18d2      	addgt	r2, r2, r3
   dda32:	4041      	eorgt	r1, r0
   dda34:	4048      	eorgt	r0, r1
   dda36:	4041      	eorgt	r1, r0
   dda38:	bfb8      	it	lt
   dda3a:	425b      	neglt	r3, r3
   dda3c:	2b19      	cmp	r3, #25
   dda3e:	bf88      	it	hi
   dda40:	4770      	bxhi	lr
   dda42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   dda46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dda4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   dda4e:	bf18      	it	ne
   dda50:	4240      	negne	r0, r0
   dda52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dda56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   dda5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   dda5e:	bf18      	it	ne
   dda60:	4249      	negne	r1, r1
   dda62:	ea92 0f03 	teq	r2, r3
   dda66:	d03f      	beq.n	ddae8 <__addsf3+0xd8>
   dda68:	f1a2 0201 	sub.w	r2, r2, #1
   dda6c:	fa41 fc03 	asr.w	ip, r1, r3
   dda70:	eb10 000c 	adds.w	r0, r0, ip
   dda74:	f1c3 0320 	rsb	r3, r3, #32
   dda78:	fa01 f103 	lsl.w	r1, r1, r3
   dda7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   dda80:	d502      	bpl.n	dda88 <__addsf3+0x78>
   dda82:	4249      	negs	r1, r1
   dda84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   dda88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   dda8c:	d313      	bcc.n	ddab6 <__addsf3+0xa6>
   dda8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   dda92:	d306      	bcc.n	ddaa2 <__addsf3+0x92>
   dda94:	0840      	lsrs	r0, r0, #1
   dda96:	ea4f 0131 	mov.w	r1, r1, rrx
   dda9a:	f102 0201 	add.w	r2, r2, #1
   dda9e:	2afe      	cmp	r2, #254	; 0xfe
   ddaa0:	d251      	bcs.n	ddb46 <__addsf3+0x136>
   ddaa2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   ddaa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   ddaaa:	bf08      	it	eq
   ddaac:	f020 0001 	biceq.w	r0, r0, #1
   ddab0:	ea40 0003 	orr.w	r0, r0, r3
   ddab4:	4770      	bx	lr
   ddab6:	0049      	lsls	r1, r1, #1
   ddab8:	eb40 0000 	adc.w	r0, r0, r0
   ddabc:	3a01      	subs	r2, #1
   ddabe:	bf28      	it	cs
   ddac0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   ddac4:	d2ed      	bcs.n	ddaa2 <__addsf3+0x92>
   ddac6:	fab0 fc80 	clz	ip, r0
   ddaca:	f1ac 0c08 	sub.w	ip, ip, #8
   ddace:	ebb2 020c 	subs.w	r2, r2, ip
   ddad2:	fa00 f00c 	lsl.w	r0, r0, ip
   ddad6:	bfaa      	itet	ge
   ddad8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   ddadc:	4252      	neglt	r2, r2
   ddade:	4318      	orrge	r0, r3
   ddae0:	bfbc      	itt	lt
   ddae2:	40d0      	lsrlt	r0, r2
   ddae4:	4318      	orrlt	r0, r3
   ddae6:	4770      	bx	lr
   ddae8:	f092 0f00 	teq	r2, #0
   ddaec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   ddaf0:	bf06      	itte	eq
   ddaf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   ddaf6:	3201      	addeq	r2, #1
   ddaf8:	3b01      	subne	r3, #1
   ddafa:	e7b5      	b.n	dda68 <__addsf3+0x58>
   ddafc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   ddb00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   ddb04:	bf18      	it	ne
   ddb06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   ddb0a:	d021      	beq.n	ddb50 <__addsf3+0x140>
   ddb0c:	ea92 0f03 	teq	r2, r3
   ddb10:	d004      	beq.n	ddb1c <__addsf3+0x10c>
   ddb12:	f092 0f00 	teq	r2, #0
   ddb16:	bf08      	it	eq
   ddb18:	4608      	moveq	r0, r1
   ddb1a:	4770      	bx	lr
   ddb1c:	ea90 0f01 	teq	r0, r1
   ddb20:	bf1c      	itt	ne
   ddb22:	2000      	movne	r0, #0
   ddb24:	4770      	bxne	lr
   ddb26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   ddb2a:	d104      	bne.n	ddb36 <__addsf3+0x126>
   ddb2c:	0040      	lsls	r0, r0, #1
   ddb2e:	bf28      	it	cs
   ddb30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   ddb34:	4770      	bx	lr
   ddb36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   ddb3a:	bf3c      	itt	cc
   ddb3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   ddb40:	4770      	bxcc	lr
   ddb42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   ddb46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   ddb4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   ddb4e:	4770      	bx	lr
   ddb50:	ea7f 6222 	mvns.w	r2, r2, asr #24
   ddb54:	bf16      	itet	ne
   ddb56:	4608      	movne	r0, r1
   ddb58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   ddb5c:	4601      	movne	r1, r0
   ddb5e:	0242      	lsls	r2, r0, #9
   ddb60:	bf06      	itte	eq
   ddb62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   ddb66:	ea90 0f01 	teqeq	r0, r1
   ddb6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   ddb6e:	4770      	bx	lr

000ddb70 <__aeabi_ui2f>:
   ddb70:	f04f 0300 	mov.w	r3, #0
   ddb74:	e004      	b.n	ddb80 <__aeabi_i2f+0x8>
   ddb76:	bf00      	nop

000ddb78 <__aeabi_i2f>:
   ddb78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   ddb7c:	bf48      	it	mi
   ddb7e:	4240      	negmi	r0, r0
   ddb80:	ea5f 0c00 	movs.w	ip, r0
   ddb84:	bf08      	it	eq
   ddb86:	4770      	bxeq	lr
   ddb88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   ddb8c:	4601      	mov	r1, r0
   ddb8e:	f04f 0000 	mov.w	r0, #0
   ddb92:	e01c      	b.n	ddbce <__aeabi_l2f+0x2a>

000ddb94 <__aeabi_ul2f>:
   ddb94:	ea50 0201 	orrs.w	r2, r0, r1
   ddb98:	bf08      	it	eq
   ddb9a:	4770      	bxeq	lr
   ddb9c:	f04f 0300 	mov.w	r3, #0
   ddba0:	e00a      	b.n	ddbb8 <__aeabi_l2f+0x14>
   ddba2:	bf00      	nop

000ddba4 <__aeabi_l2f>:
   ddba4:	ea50 0201 	orrs.w	r2, r0, r1
   ddba8:	bf08      	it	eq
   ddbaa:	4770      	bxeq	lr
   ddbac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   ddbb0:	d502      	bpl.n	ddbb8 <__aeabi_l2f+0x14>
   ddbb2:	4240      	negs	r0, r0
   ddbb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddbb8:	ea5f 0c01 	movs.w	ip, r1
   ddbbc:	bf02      	ittt	eq
   ddbbe:	4684      	moveq	ip, r0
   ddbc0:	4601      	moveq	r1, r0
   ddbc2:	2000      	moveq	r0, #0
   ddbc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   ddbc8:	bf08      	it	eq
   ddbca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   ddbce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   ddbd2:	fabc f28c 	clz	r2, ip
   ddbd6:	3a08      	subs	r2, #8
   ddbd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   ddbdc:	db10      	blt.n	ddc00 <__aeabi_l2f+0x5c>
   ddbde:	fa01 fc02 	lsl.w	ip, r1, r2
   ddbe2:	4463      	add	r3, ip
   ddbe4:	fa00 fc02 	lsl.w	ip, r0, r2
   ddbe8:	f1c2 0220 	rsb	r2, r2, #32
   ddbec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ddbf0:	fa20 f202 	lsr.w	r2, r0, r2
   ddbf4:	eb43 0002 	adc.w	r0, r3, r2
   ddbf8:	bf08      	it	eq
   ddbfa:	f020 0001 	biceq.w	r0, r0, #1
   ddbfe:	4770      	bx	lr
   ddc00:	f102 0220 	add.w	r2, r2, #32
   ddc04:	fa01 fc02 	lsl.w	ip, r1, r2
   ddc08:	f1c2 0220 	rsb	r2, r2, #32
   ddc0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   ddc10:	fa21 f202 	lsr.w	r2, r1, r2
   ddc14:	eb43 0002 	adc.w	r0, r3, r2
   ddc18:	bf08      	it	eq
   ddc1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   ddc1e:	4770      	bx	lr

000ddc20 <__aeabi_ldivmod>:
   ddc20:	b97b      	cbnz	r3, ddc42 <__aeabi_ldivmod+0x22>
   ddc22:	b972      	cbnz	r2, ddc42 <__aeabi_ldivmod+0x22>
   ddc24:	2900      	cmp	r1, #0
   ddc26:	bfbe      	ittt	lt
   ddc28:	2000      	movlt	r0, #0
   ddc2a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   ddc2e:	e006      	blt.n	ddc3e <__aeabi_ldivmod+0x1e>
   ddc30:	bf08      	it	eq
   ddc32:	2800      	cmpeq	r0, #0
   ddc34:	bf1c      	itt	ne
   ddc36:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   ddc3a:	f04f 30ff 	movne.w	r0, #4294967295
   ddc3e:	f000 b9a1 	b.w	ddf84 <__aeabi_idiv0>
   ddc42:	f1ad 0c08 	sub.w	ip, sp, #8
   ddc46:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   ddc4a:	2900      	cmp	r1, #0
   ddc4c:	db09      	blt.n	ddc62 <__aeabi_ldivmod+0x42>
   ddc4e:	2b00      	cmp	r3, #0
   ddc50:	db1a      	blt.n	ddc88 <__aeabi_ldivmod+0x68>
   ddc52:	f000 f835 	bl	ddcc0 <__udivmoddi4>
   ddc56:	f8dd e004 	ldr.w	lr, [sp, #4]
   ddc5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   ddc5e:	b004      	add	sp, #16
   ddc60:	4770      	bx	lr
   ddc62:	4240      	negs	r0, r0
   ddc64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddc68:	2b00      	cmp	r3, #0
   ddc6a:	db1b      	blt.n	ddca4 <__aeabi_ldivmod+0x84>
   ddc6c:	f000 f828 	bl	ddcc0 <__udivmoddi4>
   ddc70:	f8dd e004 	ldr.w	lr, [sp, #4]
   ddc74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   ddc78:	b004      	add	sp, #16
   ddc7a:	4240      	negs	r0, r0
   ddc7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddc80:	4252      	negs	r2, r2
   ddc82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ddc86:	4770      	bx	lr
   ddc88:	4252      	negs	r2, r2
   ddc8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ddc8e:	f000 f817 	bl	ddcc0 <__udivmoddi4>
   ddc92:	f8dd e004 	ldr.w	lr, [sp, #4]
   ddc96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   ddc9a:	b004      	add	sp, #16
   ddc9c:	4240      	negs	r0, r0
   ddc9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddca2:	4770      	bx	lr
   ddca4:	4252      	negs	r2, r2
   ddca6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ddcaa:	f000 f809 	bl	ddcc0 <__udivmoddi4>
   ddcae:	f8dd e004 	ldr.w	lr, [sp, #4]
   ddcb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   ddcb6:	b004      	add	sp, #16
   ddcb8:	4252      	negs	r2, r2
   ddcba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ddcbe:	4770      	bx	lr

000ddcc0 <__udivmoddi4>:
   ddcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddcc4:	9d08      	ldr	r5, [sp, #32]
   ddcc6:	4604      	mov	r4, r0
   ddcc8:	468c      	mov	ip, r1
   ddcca:	2b00      	cmp	r3, #0
   ddccc:	f040 8083 	bne.w	dddd6 <__udivmoddi4+0x116>
   ddcd0:	428a      	cmp	r2, r1
   ddcd2:	4617      	mov	r7, r2
   ddcd4:	d947      	bls.n	ddd66 <__udivmoddi4+0xa6>
   ddcd6:	fab2 f282 	clz	r2, r2
   ddcda:	b142      	cbz	r2, ddcee <__udivmoddi4+0x2e>
   ddcdc:	f1c2 0020 	rsb	r0, r2, #32
   ddce0:	fa24 f000 	lsr.w	r0, r4, r0
   ddce4:	4091      	lsls	r1, r2
   ddce6:	4097      	lsls	r7, r2
   ddce8:	ea40 0c01 	orr.w	ip, r0, r1
   ddcec:	4094      	lsls	r4, r2
   ddcee:	ea4f 4817 	mov.w	r8, r7, lsr #16
   ddcf2:	0c23      	lsrs	r3, r4, #16
   ddcf4:	fbbc f6f8 	udiv	r6, ip, r8
   ddcf8:	fa1f fe87 	uxth.w	lr, r7
   ddcfc:	fb08 c116 	mls	r1, r8, r6, ip
   ddd00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   ddd04:	fb06 f10e 	mul.w	r1, r6, lr
   ddd08:	4299      	cmp	r1, r3
   ddd0a:	d909      	bls.n	ddd20 <__udivmoddi4+0x60>
   ddd0c:	18fb      	adds	r3, r7, r3
   ddd0e:	f106 30ff 	add.w	r0, r6, #4294967295
   ddd12:	f080 8119 	bcs.w	ddf48 <__udivmoddi4+0x288>
   ddd16:	4299      	cmp	r1, r3
   ddd18:	f240 8116 	bls.w	ddf48 <__udivmoddi4+0x288>
   ddd1c:	3e02      	subs	r6, #2
   ddd1e:	443b      	add	r3, r7
   ddd20:	1a5b      	subs	r3, r3, r1
   ddd22:	b2a4      	uxth	r4, r4
   ddd24:	fbb3 f0f8 	udiv	r0, r3, r8
   ddd28:	fb08 3310 	mls	r3, r8, r0, r3
   ddd2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   ddd30:	fb00 fe0e 	mul.w	lr, r0, lr
   ddd34:	45a6      	cmp	lr, r4
   ddd36:	d909      	bls.n	ddd4c <__udivmoddi4+0x8c>
   ddd38:	193c      	adds	r4, r7, r4
   ddd3a:	f100 33ff 	add.w	r3, r0, #4294967295
   ddd3e:	f080 8105 	bcs.w	ddf4c <__udivmoddi4+0x28c>
   ddd42:	45a6      	cmp	lr, r4
   ddd44:	f240 8102 	bls.w	ddf4c <__udivmoddi4+0x28c>
   ddd48:	3802      	subs	r0, #2
   ddd4a:	443c      	add	r4, r7
   ddd4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   ddd50:	eba4 040e 	sub.w	r4, r4, lr
   ddd54:	2600      	movs	r6, #0
   ddd56:	b11d      	cbz	r5, ddd60 <__udivmoddi4+0xa0>
   ddd58:	40d4      	lsrs	r4, r2
   ddd5a:	2300      	movs	r3, #0
   ddd5c:	e9c5 4300 	strd	r4, r3, [r5]
   ddd60:	4631      	mov	r1, r6
   ddd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddd66:	b902      	cbnz	r2, ddd6a <__udivmoddi4+0xaa>
   ddd68:	deff      	udf	#255	; 0xff
   ddd6a:	fab2 f282 	clz	r2, r2
   ddd6e:	2a00      	cmp	r2, #0
   ddd70:	d150      	bne.n	dde14 <__udivmoddi4+0x154>
   ddd72:	1bcb      	subs	r3, r1, r7
   ddd74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   ddd78:	fa1f f887 	uxth.w	r8, r7
   ddd7c:	2601      	movs	r6, #1
   ddd7e:	fbb3 fcfe 	udiv	ip, r3, lr
   ddd82:	0c21      	lsrs	r1, r4, #16
   ddd84:	fb0e 331c 	mls	r3, lr, ip, r3
   ddd88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   ddd8c:	fb08 f30c 	mul.w	r3, r8, ip
   ddd90:	428b      	cmp	r3, r1
   ddd92:	d907      	bls.n	ddda4 <__udivmoddi4+0xe4>
   ddd94:	1879      	adds	r1, r7, r1
   ddd96:	f10c 30ff 	add.w	r0, ip, #4294967295
   ddd9a:	d202      	bcs.n	ddda2 <__udivmoddi4+0xe2>
   ddd9c:	428b      	cmp	r3, r1
   ddd9e:	f200 80e9 	bhi.w	ddf74 <__udivmoddi4+0x2b4>
   ddda2:	4684      	mov	ip, r0
   ddda4:	1ac9      	subs	r1, r1, r3
   ddda6:	b2a3      	uxth	r3, r4
   ddda8:	fbb1 f0fe 	udiv	r0, r1, lr
   dddac:	fb0e 1110 	mls	r1, lr, r0, r1
   dddb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dddb4:	fb08 f800 	mul.w	r8, r8, r0
   dddb8:	45a0      	cmp	r8, r4
   dddba:	d907      	bls.n	dddcc <__udivmoddi4+0x10c>
   dddbc:	193c      	adds	r4, r7, r4
   dddbe:	f100 33ff 	add.w	r3, r0, #4294967295
   dddc2:	d202      	bcs.n	dddca <__udivmoddi4+0x10a>
   dddc4:	45a0      	cmp	r8, r4
   dddc6:	f200 80d9 	bhi.w	ddf7c <__udivmoddi4+0x2bc>
   dddca:	4618      	mov	r0, r3
   dddcc:	eba4 0408 	sub.w	r4, r4, r8
   dddd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dddd4:	e7bf      	b.n	ddd56 <__udivmoddi4+0x96>
   dddd6:	428b      	cmp	r3, r1
   dddd8:	d909      	bls.n	dddee <__udivmoddi4+0x12e>
   dddda:	2d00      	cmp	r5, #0
   ddddc:	f000 80b1 	beq.w	ddf42 <__udivmoddi4+0x282>
   ddde0:	2600      	movs	r6, #0
   ddde2:	e9c5 0100 	strd	r0, r1, [r5]
   ddde6:	4630      	mov	r0, r6
   ddde8:	4631      	mov	r1, r6
   dddea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dddee:	fab3 f683 	clz	r6, r3
   dddf2:	2e00      	cmp	r6, #0
   dddf4:	d14a      	bne.n	dde8c <__udivmoddi4+0x1cc>
   dddf6:	428b      	cmp	r3, r1
   dddf8:	d302      	bcc.n	dde00 <__udivmoddi4+0x140>
   dddfa:	4282      	cmp	r2, r0
   dddfc:	f200 80b8 	bhi.w	ddf70 <__udivmoddi4+0x2b0>
   dde00:	1a84      	subs	r4, r0, r2
   dde02:	eb61 0103 	sbc.w	r1, r1, r3
   dde06:	2001      	movs	r0, #1
   dde08:	468c      	mov	ip, r1
   dde0a:	2d00      	cmp	r5, #0
   dde0c:	d0a8      	beq.n	ddd60 <__udivmoddi4+0xa0>
   dde0e:	e9c5 4c00 	strd	r4, ip, [r5]
   dde12:	e7a5      	b.n	ddd60 <__udivmoddi4+0xa0>
   dde14:	f1c2 0320 	rsb	r3, r2, #32
   dde18:	fa20 f603 	lsr.w	r6, r0, r3
   dde1c:	4097      	lsls	r7, r2
   dde1e:	fa01 f002 	lsl.w	r0, r1, r2
   dde22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dde26:	40d9      	lsrs	r1, r3
   dde28:	4330      	orrs	r0, r6
   dde2a:	0c03      	lsrs	r3, r0, #16
   dde2c:	fbb1 f6fe 	udiv	r6, r1, lr
   dde30:	fa1f f887 	uxth.w	r8, r7
   dde34:	fb0e 1116 	mls	r1, lr, r6, r1
   dde38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dde3c:	fb06 f108 	mul.w	r1, r6, r8
   dde40:	4299      	cmp	r1, r3
   dde42:	fa04 f402 	lsl.w	r4, r4, r2
   dde46:	d909      	bls.n	dde5c <__udivmoddi4+0x19c>
   dde48:	18fb      	adds	r3, r7, r3
   dde4a:	f106 3cff 	add.w	ip, r6, #4294967295
   dde4e:	f080 808d 	bcs.w	ddf6c <__udivmoddi4+0x2ac>
   dde52:	4299      	cmp	r1, r3
   dde54:	f240 808a 	bls.w	ddf6c <__udivmoddi4+0x2ac>
   dde58:	3e02      	subs	r6, #2
   dde5a:	443b      	add	r3, r7
   dde5c:	1a5b      	subs	r3, r3, r1
   dde5e:	b281      	uxth	r1, r0
   dde60:	fbb3 f0fe 	udiv	r0, r3, lr
   dde64:	fb0e 3310 	mls	r3, lr, r0, r3
   dde68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dde6c:	fb00 f308 	mul.w	r3, r0, r8
   dde70:	428b      	cmp	r3, r1
   dde72:	d907      	bls.n	dde84 <__udivmoddi4+0x1c4>
   dde74:	1879      	adds	r1, r7, r1
   dde76:	f100 3cff 	add.w	ip, r0, #4294967295
   dde7a:	d273      	bcs.n	ddf64 <__udivmoddi4+0x2a4>
   dde7c:	428b      	cmp	r3, r1
   dde7e:	d971      	bls.n	ddf64 <__udivmoddi4+0x2a4>
   dde80:	3802      	subs	r0, #2
   dde82:	4439      	add	r1, r7
   dde84:	1acb      	subs	r3, r1, r3
   dde86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dde8a:	e778      	b.n	ddd7e <__udivmoddi4+0xbe>
   dde8c:	f1c6 0c20 	rsb	ip, r6, #32
   dde90:	fa03 f406 	lsl.w	r4, r3, r6
   dde94:	fa22 f30c 	lsr.w	r3, r2, ip
   dde98:	431c      	orrs	r4, r3
   dde9a:	fa20 f70c 	lsr.w	r7, r0, ip
   dde9e:	fa01 f306 	lsl.w	r3, r1, r6
   ddea2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   ddea6:	fa21 f10c 	lsr.w	r1, r1, ip
   ddeaa:	431f      	orrs	r7, r3
   ddeac:	0c3b      	lsrs	r3, r7, #16
   ddeae:	fbb1 f9fe 	udiv	r9, r1, lr
   ddeb2:	fa1f f884 	uxth.w	r8, r4
   ddeb6:	fb0e 1119 	mls	r1, lr, r9, r1
   ddeba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   ddebe:	fb09 fa08 	mul.w	sl, r9, r8
   ddec2:	458a      	cmp	sl, r1
   ddec4:	fa02 f206 	lsl.w	r2, r2, r6
   ddec8:	fa00 f306 	lsl.w	r3, r0, r6
   ddecc:	d908      	bls.n	ddee0 <__udivmoddi4+0x220>
   ddece:	1861      	adds	r1, r4, r1
   dded0:	f109 30ff 	add.w	r0, r9, #4294967295
   dded4:	d248      	bcs.n	ddf68 <__udivmoddi4+0x2a8>
   dded6:	458a      	cmp	sl, r1
   dded8:	d946      	bls.n	ddf68 <__udivmoddi4+0x2a8>
   ddeda:	f1a9 0902 	sub.w	r9, r9, #2
   ddede:	4421      	add	r1, r4
   ddee0:	eba1 010a 	sub.w	r1, r1, sl
   ddee4:	b2bf      	uxth	r7, r7
   ddee6:	fbb1 f0fe 	udiv	r0, r1, lr
   ddeea:	fb0e 1110 	mls	r1, lr, r0, r1
   ddeee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   ddef2:	fb00 f808 	mul.w	r8, r0, r8
   ddef6:	45b8      	cmp	r8, r7
   ddef8:	d907      	bls.n	ddf0a <__udivmoddi4+0x24a>
   ddefa:	19e7      	adds	r7, r4, r7
   ddefc:	f100 31ff 	add.w	r1, r0, #4294967295
   ddf00:	d22e      	bcs.n	ddf60 <__udivmoddi4+0x2a0>
   ddf02:	45b8      	cmp	r8, r7
   ddf04:	d92c      	bls.n	ddf60 <__udivmoddi4+0x2a0>
   ddf06:	3802      	subs	r0, #2
   ddf08:	4427      	add	r7, r4
   ddf0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   ddf0e:	eba7 0708 	sub.w	r7, r7, r8
   ddf12:	fba0 8902 	umull	r8, r9, r0, r2
   ddf16:	454f      	cmp	r7, r9
   ddf18:	46c6      	mov	lr, r8
   ddf1a:	4649      	mov	r1, r9
   ddf1c:	d31a      	bcc.n	ddf54 <__udivmoddi4+0x294>
   ddf1e:	d017      	beq.n	ddf50 <__udivmoddi4+0x290>
   ddf20:	b15d      	cbz	r5, ddf3a <__udivmoddi4+0x27a>
   ddf22:	ebb3 020e 	subs.w	r2, r3, lr
   ddf26:	eb67 0701 	sbc.w	r7, r7, r1
   ddf2a:	fa07 fc0c 	lsl.w	ip, r7, ip
   ddf2e:	40f2      	lsrs	r2, r6
   ddf30:	ea4c 0202 	orr.w	r2, ip, r2
   ddf34:	40f7      	lsrs	r7, r6
   ddf36:	e9c5 2700 	strd	r2, r7, [r5]
   ddf3a:	2600      	movs	r6, #0
   ddf3c:	4631      	mov	r1, r6
   ddf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddf42:	462e      	mov	r6, r5
   ddf44:	4628      	mov	r0, r5
   ddf46:	e70b      	b.n	ddd60 <__udivmoddi4+0xa0>
   ddf48:	4606      	mov	r6, r0
   ddf4a:	e6e9      	b.n	ddd20 <__udivmoddi4+0x60>
   ddf4c:	4618      	mov	r0, r3
   ddf4e:	e6fd      	b.n	ddd4c <__udivmoddi4+0x8c>
   ddf50:	4543      	cmp	r3, r8
   ddf52:	d2e5      	bcs.n	ddf20 <__udivmoddi4+0x260>
   ddf54:	ebb8 0e02 	subs.w	lr, r8, r2
   ddf58:	eb69 0104 	sbc.w	r1, r9, r4
   ddf5c:	3801      	subs	r0, #1
   ddf5e:	e7df      	b.n	ddf20 <__udivmoddi4+0x260>
   ddf60:	4608      	mov	r0, r1
   ddf62:	e7d2      	b.n	ddf0a <__udivmoddi4+0x24a>
   ddf64:	4660      	mov	r0, ip
   ddf66:	e78d      	b.n	dde84 <__udivmoddi4+0x1c4>
   ddf68:	4681      	mov	r9, r0
   ddf6a:	e7b9      	b.n	ddee0 <__udivmoddi4+0x220>
   ddf6c:	4666      	mov	r6, ip
   ddf6e:	e775      	b.n	dde5c <__udivmoddi4+0x19c>
   ddf70:	4630      	mov	r0, r6
   ddf72:	e74a      	b.n	dde0a <__udivmoddi4+0x14a>
   ddf74:	f1ac 0c02 	sub.w	ip, ip, #2
   ddf78:	4439      	add	r1, r7
   ddf7a:	e713      	b.n	ddda4 <__udivmoddi4+0xe4>
   ddf7c:	3802      	subs	r0, #2
   ddf7e:	443c      	add	r4, r7
   ddf80:	e724      	b.n	dddcc <__udivmoddi4+0x10c>
   ddf82:	bf00      	nop

000ddf84 <__aeabi_idiv0>:
   ddf84:	4770      	bx	lr
   ddf86:	bf00      	nop

000ddf88 <atol>:
   ddf88:	220a      	movs	r2, #10
   ddf8a:	2100      	movs	r1, #0
   ddf8c:	f000 b932 	b.w	de1f4 <strtol>

000ddf90 <__cxa_atexit>:
   ddf90:	b510      	push	{r4, lr}
   ddf92:	4c05      	ldr	r4, [pc, #20]	; (ddfa8 <__cxa_atexit+0x18>)
   ddf94:	4613      	mov	r3, r2
   ddf96:	b12c      	cbz	r4, ddfa4 <__cxa_atexit+0x14>
   ddf98:	460a      	mov	r2, r1
   ddf9a:	4601      	mov	r1, r0
   ddf9c:	2002      	movs	r0, #2
   ddf9e:	f3af 8000 	nop.w
   ddfa2:	bd10      	pop	{r4, pc}
   ddfa4:	4620      	mov	r0, r4
   ddfa6:	e7fc      	b.n	ddfa2 <__cxa_atexit+0x12>
   ddfa8:	00000000 	.word	0x00000000

000ddfac <memcmp>:
   ddfac:	b530      	push	{r4, r5, lr}
   ddfae:	3901      	subs	r1, #1
   ddfb0:	2400      	movs	r4, #0
   ddfb2:	42a2      	cmp	r2, r4
   ddfb4:	d101      	bne.n	ddfba <memcmp+0xe>
   ddfb6:	2000      	movs	r0, #0
   ddfb8:	e005      	b.n	ddfc6 <memcmp+0x1a>
   ddfba:	5d03      	ldrb	r3, [r0, r4]
   ddfbc:	3401      	adds	r4, #1
   ddfbe:	5d0d      	ldrb	r5, [r1, r4]
   ddfc0:	42ab      	cmp	r3, r5
   ddfc2:	d0f6      	beq.n	ddfb2 <memcmp+0x6>
   ddfc4:	1b58      	subs	r0, r3, r5
   ddfc6:	bd30      	pop	{r4, r5, pc}

000ddfc8 <memcpy>:
   ddfc8:	440a      	add	r2, r1
   ddfca:	4291      	cmp	r1, r2
   ddfcc:	f100 33ff 	add.w	r3, r0, #4294967295
   ddfd0:	d100      	bne.n	ddfd4 <memcpy+0xc>
   ddfd2:	4770      	bx	lr
   ddfd4:	b510      	push	{r4, lr}
   ddfd6:	f811 4b01 	ldrb.w	r4, [r1], #1
   ddfda:	f803 4f01 	strb.w	r4, [r3, #1]!
   ddfde:	4291      	cmp	r1, r2
   ddfe0:	d1f9      	bne.n	ddfd6 <memcpy+0xe>
   ddfe2:	bd10      	pop	{r4, pc}

000ddfe4 <memmove>:
   ddfe4:	4288      	cmp	r0, r1
   ddfe6:	b510      	push	{r4, lr}
   ddfe8:	eb01 0402 	add.w	r4, r1, r2
   ddfec:	d902      	bls.n	ddff4 <memmove+0x10>
   ddfee:	4284      	cmp	r4, r0
   ddff0:	4623      	mov	r3, r4
   ddff2:	d807      	bhi.n	de004 <memmove+0x20>
   ddff4:	1e43      	subs	r3, r0, #1
   ddff6:	42a1      	cmp	r1, r4
   ddff8:	d008      	beq.n	de00c <memmove+0x28>
   ddffa:	f811 2b01 	ldrb.w	r2, [r1], #1
   ddffe:	f803 2f01 	strb.w	r2, [r3, #1]!
   de002:	e7f8      	b.n	ddff6 <memmove+0x12>
   de004:	4402      	add	r2, r0
   de006:	4601      	mov	r1, r0
   de008:	428a      	cmp	r2, r1
   de00a:	d100      	bne.n	de00e <memmove+0x2a>
   de00c:	bd10      	pop	{r4, pc}
   de00e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   de012:	f802 4d01 	strb.w	r4, [r2, #-1]!
   de016:	e7f7      	b.n	de008 <memmove+0x24>

000de018 <memset>:
   de018:	4402      	add	r2, r0
   de01a:	4603      	mov	r3, r0
   de01c:	4293      	cmp	r3, r2
   de01e:	d100      	bne.n	de022 <memset+0xa>
   de020:	4770      	bx	lr
   de022:	f803 1b01 	strb.w	r1, [r3], #1
   de026:	e7f9      	b.n	de01c <memset+0x4>

000de028 <srand>:
   de028:	b538      	push	{r3, r4, r5, lr}
   de02a:	4b0d      	ldr	r3, [pc, #52]	; (de060 <srand+0x38>)
   de02c:	681d      	ldr	r5, [r3, #0]
   de02e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   de030:	4604      	mov	r4, r0
   de032:	b97b      	cbnz	r3, de054 <srand+0x2c>
   de034:	2018      	movs	r0, #24
   de036:	f7fb f93d 	bl	d92b4 <malloc>
   de03a:	4a0a      	ldr	r2, [pc, #40]	; (de064 <srand+0x3c>)
   de03c:	4b0a      	ldr	r3, [pc, #40]	; (de068 <srand+0x40>)
   de03e:	63a8      	str	r0, [r5, #56]	; 0x38
   de040:	e9c0 2300 	strd	r2, r3, [r0]
   de044:	4b09      	ldr	r3, [pc, #36]	; (de06c <srand+0x44>)
   de046:	6083      	str	r3, [r0, #8]
   de048:	230b      	movs	r3, #11
   de04a:	8183      	strh	r3, [r0, #12]
   de04c:	2201      	movs	r2, #1
   de04e:	2300      	movs	r3, #0
   de050:	e9c0 2304 	strd	r2, r3, [r0, #16]
   de054:	6bab      	ldr	r3, [r5, #56]	; 0x38
   de056:	2200      	movs	r2, #0
   de058:	611c      	str	r4, [r3, #16]
   de05a:	615a      	str	r2, [r3, #20]
   de05c:	bd38      	pop	{r3, r4, r5, pc}
   de05e:	bf00      	nop
   de060:	2003ddb8 	.word	0x2003ddb8
   de064:	abcd330e 	.word	0xabcd330e
   de068:	e66d1234 	.word	0xe66d1234
   de06c:	0005deec 	.word	0x0005deec

000de070 <strchr>:
   de070:	b2c9      	uxtb	r1, r1
   de072:	4603      	mov	r3, r0
   de074:	f810 2b01 	ldrb.w	r2, [r0], #1
   de078:	b11a      	cbz	r2, de082 <strchr+0x12>
   de07a:	428a      	cmp	r2, r1
   de07c:	d1f9      	bne.n	de072 <strchr+0x2>
   de07e:	4618      	mov	r0, r3
   de080:	4770      	bx	lr
   de082:	2900      	cmp	r1, #0
   de084:	bf18      	it	ne
   de086:	2300      	movne	r3, #0
   de088:	e7f9      	b.n	de07e <strchr+0xe>

000de08a <strcmp>:
   de08a:	f810 2b01 	ldrb.w	r2, [r0], #1
   de08e:	f811 3b01 	ldrb.w	r3, [r1], #1
   de092:	2a01      	cmp	r2, #1
   de094:	bf28      	it	cs
   de096:	429a      	cmpcs	r2, r3
   de098:	d0f7      	beq.n	de08a <strcmp>
   de09a:	1ad0      	subs	r0, r2, r3
   de09c:	4770      	bx	lr

000de09e <strcpy>:
   de09e:	4603      	mov	r3, r0
   de0a0:	f811 2b01 	ldrb.w	r2, [r1], #1
   de0a4:	f803 2b01 	strb.w	r2, [r3], #1
   de0a8:	2a00      	cmp	r2, #0
   de0aa:	d1f9      	bne.n	de0a0 <strcpy+0x2>
   de0ac:	4770      	bx	lr

000de0ae <strlen>:
   de0ae:	4603      	mov	r3, r0
   de0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
   de0b4:	2a00      	cmp	r2, #0
   de0b6:	d1fb      	bne.n	de0b0 <strlen+0x2>
   de0b8:	1a18      	subs	r0, r3, r0
   de0ba:	3801      	subs	r0, #1
   de0bc:	4770      	bx	lr

000de0be <strncpy>:
   de0be:	b510      	push	{r4, lr}
   de0c0:	3901      	subs	r1, #1
   de0c2:	4603      	mov	r3, r0
   de0c4:	b132      	cbz	r2, de0d4 <strncpy+0x16>
   de0c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   de0ca:	f803 4b01 	strb.w	r4, [r3], #1
   de0ce:	3a01      	subs	r2, #1
   de0d0:	2c00      	cmp	r4, #0
   de0d2:	d1f7      	bne.n	de0c4 <strncpy+0x6>
   de0d4:	441a      	add	r2, r3
   de0d6:	2100      	movs	r1, #0
   de0d8:	4293      	cmp	r3, r2
   de0da:	d100      	bne.n	de0de <strncpy+0x20>
   de0dc:	bd10      	pop	{r4, pc}
   de0de:	f803 1b01 	strb.w	r1, [r3], #1
   de0e2:	e7f9      	b.n	de0d8 <strncpy+0x1a>

000de0e4 <strnlen>:
   de0e4:	b510      	push	{r4, lr}
   de0e6:	4602      	mov	r2, r0
   de0e8:	4401      	add	r1, r0
   de0ea:	428a      	cmp	r2, r1
   de0ec:	4613      	mov	r3, r2
   de0ee:	d101      	bne.n	de0f4 <strnlen+0x10>
   de0f0:	1a18      	subs	r0, r3, r0
   de0f2:	bd10      	pop	{r4, pc}
   de0f4:	781c      	ldrb	r4, [r3, #0]
   de0f6:	3201      	adds	r2, #1
   de0f8:	2c00      	cmp	r4, #0
   de0fa:	d1f6      	bne.n	de0ea <strnlen+0x6>
   de0fc:	e7f8      	b.n	de0f0 <strnlen+0xc>
	...

000de100 <_strtol_l.isra.0>:
   de100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de104:	4e3a      	ldr	r6, [pc, #232]	; (de1f0 <_strtol_l.isra.0+0xf0>)
   de106:	4686      	mov	lr, r0
   de108:	468c      	mov	ip, r1
   de10a:	4660      	mov	r0, ip
   de10c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   de110:	5da5      	ldrb	r5, [r4, r6]
   de112:	f015 0508 	ands.w	r5, r5, #8
   de116:	d1f8      	bne.n	de10a <_strtol_l.isra.0+0xa>
   de118:	2c2d      	cmp	r4, #45	; 0x2d
   de11a:	d133      	bne.n	de184 <_strtol_l.isra.0+0x84>
   de11c:	f89c 4000 	ldrb.w	r4, [ip]
   de120:	f04f 0801 	mov.w	r8, #1
   de124:	f100 0c02 	add.w	ip, r0, #2
   de128:	2b00      	cmp	r3, #0
   de12a:	d05c      	beq.n	de1e6 <_strtol_l.isra.0+0xe6>
   de12c:	2b10      	cmp	r3, #16
   de12e:	d10c      	bne.n	de14a <_strtol_l.isra.0+0x4a>
   de130:	2c30      	cmp	r4, #48	; 0x30
   de132:	d10a      	bne.n	de14a <_strtol_l.isra.0+0x4a>
   de134:	f89c 0000 	ldrb.w	r0, [ip]
   de138:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   de13c:	2858      	cmp	r0, #88	; 0x58
   de13e:	d14d      	bne.n	de1dc <_strtol_l.isra.0+0xdc>
   de140:	f89c 4001 	ldrb.w	r4, [ip, #1]
   de144:	2310      	movs	r3, #16
   de146:	f10c 0c02 	add.w	ip, ip, #2
   de14a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   de14e:	3f01      	subs	r7, #1
   de150:	2600      	movs	r6, #0
   de152:	fbb7 f9f3 	udiv	r9, r7, r3
   de156:	4630      	mov	r0, r6
   de158:	fb03 7a19 	mls	sl, r3, r9, r7
   de15c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   de160:	2d09      	cmp	r5, #9
   de162:	d818      	bhi.n	de196 <_strtol_l.isra.0+0x96>
   de164:	462c      	mov	r4, r5
   de166:	42a3      	cmp	r3, r4
   de168:	dd24      	ble.n	de1b4 <_strtol_l.isra.0+0xb4>
   de16a:	1c75      	adds	r5, r6, #1
   de16c:	d007      	beq.n	de17e <_strtol_l.isra.0+0x7e>
   de16e:	4581      	cmp	r9, r0
   de170:	d31d      	bcc.n	de1ae <_strtol_l.isra.0+0xae>
   de172:	d101      	bne.n	de178 <_strtol_l.isra.0+0x78>
   de174:	45a2      	cmp	sl, r4
   de176:	db1a      	blt.n	de1ae <_strtol_l.isra.0+0xae>
   de178:	fb00 4003 	mla	r0, r0, r3, r4
   de17c:	2601      	movs	r6, #1
   de17e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   de182:	e7eb      	b.n	de15c <_strtol_l.isra.0+0x5c>
   de184:	2c2b      	cmp	r4, #43	; 0x2b
   de186:	bf08      	it	eq
   de188:	f89c 4000 	ldrbeq.w	r4, [ip]
   de18c:	46a8      	mov	r8, r5
   de18e:	bf08      	it	eq
   de190:	f100 0c02 	addeq.w	ip, r0, #2
   de194:	e7c8      	b.n	de128 <_strtol_l.isra.0+0x28>
   de196:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   de19a:	2d19      	cmp	r5, #25
   de19c:	d801      	bhi.n	de1a2 <_strtol_l.isra.0+0xa2>
   de19e:	3c37      	subs	r4, #55	; 0x37
   de1a0:	e7e1      	b.n	de166 <_strtol_l.isra.0+0x66>
   de1a2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   de1a6:	2d19      	cmp	r5, #25
   de1a8:	d804      	bhi.n	de1b4 <_strtol_l.isra.0+0xb4>
   de1aa:	3c57      	subs	r4, #87	; 0x57
   de1ac:	e7db      	b.n	de166 <_strtol_l.isra.0+0x66>
   de1ae:	f04f 36ff 	mov.w	r6, #4294967295
   de1b2:	e7e4      	b.n	de17e <_strtol_l.isra.0+0x7e>
   de1b4:	1c73      	adds	r3, r6, #1
   de1b6:	d106      	bne.n	de1c6 <_strtol_l.isra.0+0xc6>
   de1b8:	2322      	movs	r3, #34	; 0x22
   de1ba:	f8ce 3000 	str.w	r3, [lr]
   de1be:	4638      	mov	r0, r7
   de1c0:	b942      	cbnz	r2, de1d4 <_strtol_l.isra.0+0xd4>
   de1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de1c6:	f1b8 0f00 	cmp.w	r8, #0
   de1ca:	d000      	beq.n	de1ce <_strtol_l.isra.0+0xce>
   de1cc:	4240      	negs	r0, r0
   de1ce:	2a00      	cmp	r2, #0
   de1d0:	d0f7      	beq.n	de1c2 <_strtol_l.isra.0+0xc2>
   de1d2:	b10e      	cbz	r6, de1d8 <_strtol_l.isra.0+0xd8>
   de1d4:	f10c 31ff 	add.w	r1, ip, #4294967295
   de1d8:	6011      	str	r1, [r2, #0]
   de1da:	e7f2      	b.n	de1c2 <_strtol_l.isra.0+0xc2>
   de1dc:	2430      	movs	r4, #48	; 0x30
   de1de:	2b00      	cmp	r3, #0
   de1e0:	d1b3      	bne.n	de14a <_strtol_l.isra.0+0x4a>
   de1e2:	2308      	movs	r3, #8
   de1e4:	e7b1      	b.n	de14a <_strtol_l.isra.0+0x4a>
   de1e6:	2c30      	cmp	r4, #48	; 0x30
   de1e8:	d0a4      	beq.n	de134 <_strtol_l.isra.0+0x34>
   de1ea:	230a      	movs	r3, #10
   de1ec:	e7ad      	b.n	de14a <_strtol_l.isra.0+0x4a>
   de1ee:	bf00      	nop
   de1f0:	000df189 	.word	0x000df189

000de1f4 <strtol>:
   de1f4:	4613      	mov	r3, r2
   de1f6:	460a      	mov	r2, r1
   de1f8:	4601      	mov	r1, r0
   de1fa:	4802      	ldr	r0, [pc, #8]	; (de204 <strtol+0x10>)
   de1fc:	6800      	ldr	r0, [r0, #0]
   de1fe:	f7ff bf7f 	b.w	de100 <_strtol_l.isra.0>
   de202:	bf00      	nop
   de204:	2003ddb8 	.word	0x2003ddb8

000de208 <dynalib_user>:
   de208:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   de218:	00000000 61666564 20746c75 42534d00     ....default .MSB
   de228:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   de238:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   de248:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   de258:	45444f4d 003e7525 20656854 61446e6f     MODE%u>.The onDa
   de268:	65526174 65766963 73692064 726f7720     taRecived is wor
   de278:	676e696b 000a202e 68206557 72206461     king. ..We had r
   de288:	69656365 20646576 206c6c61 61746164     eceived all data
   de298:	54000a73 65726568 65726120 6d6f7320     s..There are som
   de2a8:	72652065 73726f72 206e6920 20656874     e errors in the 
   de2b8:	61746164 646e6120 20657720 6465656e     data and we need
   de2c8:	206f7420 6e617274 74696d73 74616420      to transmit dat
   de2d8:	67612061 206e6961 6854000a 61442065     a again ..The Da
   de2e8:	69206174 64252073 56000a20 2e322e32     ta is %d ..V2.2.
   de2f8:	65440032 65636976 4100203a 36306520     2.Device: .A e06
   de308:	3a333200 343a3531 634f0038 31312074     .23:15:48.Oct 11
   de318:	32303220 65520032 656d616e 76654420      2022.Rename Dev
   de328:	00656369 20746553 70736944 2079616c     ice.Set Display 
   de338:	65746152 2d312820 53002933 50207465     Rate (1-3).Set P
   de348:	696c6275 52206873 20657461 332d3128     ublish Rate (1-3
   de358:	65530029 61532074 656c706d 74615220     ).Set Sample Rat
   de368:	31282065 0029332d 70736944 2079616c     e (1-3).Display 
   de378:	72666552 20687365 65746152 6e655300     Refresh Rate.Sen
   de388:	20726f73 706d6153 5220656c 00657461     sor Sample Rate.
   de398:	6c627550 20687369 65746152 76654400     Publish Rate.Dev
   de3a8:	20656369 49004449 6d616320 65682065     ice ID.I came he
   de3b8:	202c6572 61656c70 66206573 20646e69     re, please find 
   de3c8:	000a656d 6b636142 742e7075 46007478     me..Backup.txt.F
   de3d8:	20656c69 73697865 45000a74 7275736e     ile exist..Ensur
   de3e8:	6f792065 6d207275 6f726361 6c696620     e your macro fil
   de3f8:	706f2065 000a6e65 6e6e6f63 69746365     e open..connecti
   de408:	6c206e6f 0074736f 6d6d6f43 63696e75     on lost.Communic
   de418:	6f697461 7242206e 6364616f 00747361     ation Broadcast.
   de428:	4b434142 54535055 00545241 4b434142     BACKUPSTART.BACK
   de438:	4e455055 20490044 68206d61 0a657265     UPEND.I am here.
   de448:	61204900 6568206d 0a326572 20202000     .I am here2..   
   de458:	20002b2b 2d2d2020 42002f00 72657461     ++.   --./.Bater
   de468:	00203a79 00202025 6c6c6543 2020003a     y: .%  .Cell:.  
   de478:	3a684320 70440020 332e3020 4500203a      Ch: .Dp 0.3: .E
   de488:	204d5020 3a302e31 70440020 352e3020      PM 1.0: .Dp 0.5
   de498:	4500203a 204d5020 3a352e32 70440020     : .E PM 2.5: .Dp
   de4a8:	302e3120 4500203a 204d5020 3a203031      1.0: .E PM 10 :
   de4b8:	70440020 352e3220 5300203a 204d5020      .Dp 2.5: .S PM 
   de4c8:	3a302e31 70440020 302e3520 5300203a     1.0: .Dp 5.0: .S
   de4d8:	204d5020 3a352e32 70440020 302e3031      PM 2.5: .Dp10.0
   de4e8:	5300203a 204d5020 3a203031 65540020     : .S PM 10 : .Te
   de4f8:	203a706d 20204300 203a4852 20202500     mp: .C  RH: .%  
   de508:	00203a50 0061506b 706d6153 7300203a     P: .kPa.Samp: .s
   de518:	20202020 70736944 7300203a 20202020         Disp: .s    
   de528:	3a627550 00680020 73696854 20736920     Pub: .h.This is 
   de538:	69726170 656c6374 54000a33 20736968     paritcle3..This 
   de548:	70207369 74697261 32656c63 4536000a     is paritcle2..6E
   de558:	30303034 422d3130 2d334135 33393346     400001-B5A3-F393
   de568:	4130452d 35452d39 34324530 41434344     -E0A9-E50E24DCCA
   de578:	36004539 30303445 2d323030 33413542     9E.6E400002-B5A3
   de588:	3933462d 30452d33 452d3941 32453035     -F393-E0A9-E50E2
   de598:	43434434 00453941 30344536 33303030     4DCCA9E.6E400003
   de5a8:	4135422d 33462d33 452d3339 2d394130     -B5A3-F393-E0A9-
   de5b8:	45303545 43443432 45394143 00787400     E50E24DCCA9E.tx.
   de5c8:	00007872                                rx..

000de5cc <_ZTVN8particle11SPISettingsE>:
	...
   de5d4:	000d42e5 000d40cd 000d40ed              .B...@...@..

000de5e0 <_ZTV4File>:
	...
   de5e8:	000d40e9 000d40fb 000d413b 000d4135     .@...@..;A..5A..
   de5f8:	000d40cf 000d4115 000d410f 000d4109     .@...A...A...A..
   de608:	00080000 18000000 00000000 00000018     ................
   de618:	00003800 00300000 70000000 00000000     .8....0....p....
   de628:	000000e3 0000c300 80c70100 86010000     ................
   de638:	03000080 0000c08c 00600803 60180700     ..........`....`
   de648:	300e0000 0c000030 00001020 0018611c     ...00... ....a..
   de658:	08431800 c3380000 3100008c 00008687     ..C...8....1....
   de668:	00c68f71 c30ce300 00c30000 c60100e1     q...............
   de678:	01807100 80300086 38fe8f03 000003c0     .q....0....8....
   de688:	00076018 0e601c00 300c0000 feffff0f     .`....`....0....
   de698:	ffff1f10 001018ff 000c0000 0c000000     ................
   de6a8:	00000000 00000006 ff7f0600               ...............

000de6b7 <_ZL4font>:
   de6b7:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   de6c7:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   de6d7:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   de6e7:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   de6f7:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   de707:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   de717:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   de727:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   de737:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   de747:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   de757:	00000000 5f000000 07000000 14000700     ......._........
   de767:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   de777:	00502056 00030708 41221c00 22410000     V P......."A..A"
   de787:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   de797:	08080800 00000808 20006060 02040810     ........``. ....
   de7a7:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   de7b7:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   de7c7:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   de7d7:	00001e29 00000014 00003440 22140800     ).......@4....."
   de7e7:	14141441 41001414 02081422 06095901     A......A"....Y..
   de7f7:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   de807:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   de817:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   de827:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   de837:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   de847:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   de857:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   de867:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   de877:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   de887:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   de897:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   de8a7:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   de8b7:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   de8c7:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   de8d7:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   de8e7:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   de8f7:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   de907:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   de917:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   de927:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   de937:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   de947:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   de957:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   de967:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   de977:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   de987:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   de997:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   de9a7:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   de9b7:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   de9c7:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   de9d7:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   de9e7:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   de9f7:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   dea07:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   dea17:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   dea27:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   dea37:	00ff0000 ff101010 14141400 101000ff     ................
   dea47:	10ff00ff f010f010 fc141414 f7141400     ................
   dea57:	0000ff00 14ff00ff fc04f414 10171414     ................
   dea67:	1f10101f 14141f10 10001f14 00f01010     ................
   dea77:	1f000000 10101010 1010101f 0010f010     ................
   dea87:	10ff0000 10101010 10101010 000010ff     ................
   dea97:	0014ff00 ff00ff00 101f0000 fc000017     ................
   deaa7:	1414f404 14171017 f404f414 00ff0000     ................
   deab7:	141414f7 14141414 14f700f7 14171414     ................
   deac7:	101f1010 1414141f 101014f4 00f010f0     ................
   dead7:	1f101f00 1f000000 00000014 000014fc     ................
   deae7:	10f010f0 ff10ff10 ff141414 10101014     ................
   deaf7:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   deb07:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   deb17:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   deb27:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   deb37:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   deb47:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   deb57:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   deb67:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   deb77:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   deb87:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   deb97:	00000018 30001010 0101ff40 01011f00     .......0@.......
   deba7:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000debb8 <_ZTV12Adafruit_GFX>:
	...
   debc8:	000d5b4d 000daa61 000d40a5 000d557d     M[..a....@..}U..
   debd8:	000d557f 000d55b1 000d558d 000d559f     .U...U...U...U..
   debe8:	000d54c1 000d557d 000d57a9 000d5723     .T..}U...W..#W..
   debf8:	000d55c9 000d5607 000d5641 000d5687     .U...V..AV...V..
   dec08:	000d5725 000d56a3                       %W...V..

000dec10 <_ZL8LUT_DATA>:
   dec10:	00406080 10000000 00002060 60800000     .`@.....` .....`
   dec20:	00000040 20601000 00000000 00000000     @.....` ........
   dec30:	03000000 02000003 00000909 00030302     ................
   dec40:	00000200 00000000 00000000 00000000     ................
   dec50:	00000000 41150000 0a3032a8              .......A.20.

000dec5c <_ZTV16Adafruit_SSD1675>:
	...
   dec64:	000d4155 000d51c1 000d5b4d 000daa61     UA...Q..M[..a...
   dec74:	000d8239 000d557d 000d557f 000d55b1     9...}U...U...U..
   dec84:	000d558d 000d559f 000d54c1 000d557d     .U...U...T..}U..
   dec94:	000d57a9 000d5723 000d55c9 000d5607     .W..#W...U...V..
   deca4:	000d5641 000d5687 000d5725 000d56a3     AV...V..%W...V..
   decb4:	000d7bff 000d7bd5 000d7d0d 000d7cd3     .{...{...}...|..
   decc4:	000d7e5d                                ]~..

000decc8 <_ZTV12Adafruit_EPD>:
	...
   decd8:	000d5b4d 000daa61 000d8239 000d557d     M[..a...9...}U..
   dece8:	000d557f 000d55b1 000d558d 000d559f     .U...U...U...U..
   decf8:	000d54c1 000d557d 000d57a9 000d5723     .T..}U...W..#W..
   ded08:	000d55c9 000d5607 000d5641 000d5687     .U...V..AV...V..
   ded18:	000d5725 000d56a3 000d40a5 000d40a5     %W...V...@...@..
   ded28:	000d40a5 000d40a5 000d40a5              .@...@...@..

000ded34 <_ZTVN5spark13EthernetClassE>:
	...
   ded3c:	000d9393 000d9389 000d937f 000d9375     ............u...
   ded4c:	000d9369 000d935d 000db735 000db73d     i...]...5...=...
   ded5c:	000d9351 000d9349 000d933f 000d9335     Q...I...?...5...
   ded6c:	000db76d                                m...

000ded70 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ded70:	18100800 38302820 69726977 622e676e     .... (08wiring.b
   ded80:	5300656c 74726174 73696420 65766f63     le.Start discove
   ded90:	676e6972 72657320 65636976 50002e73     ring services..P
   deda0:	20726565 69766564 69206563 696d2073     eer device is mi
   dedb0:	6e697373 46002167 656c6961 6f742064     ssing!.Failed to
   dedc0:	70706120 20646e65 72656570 6e654320      append peer Cen
   dedd0:	6c617274 76656420 2e656369 6e6f4300     tral device..Con
   dede0:	7463656e 62206465 65432079 6172746e     nected by Centra
   dedf0:	6564206c 65636976 6944002e 6e6f6373     l device..Discon
   dee00:	7463656e 62206465 65722079 65746f6d     nected by remote
   dee10:	76656420 2e656369 70754400 6163696c      device..Duplica
   dee20:	20646574 72616863 65746361 74736972     ted characterist
   dee30:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   dee40:	002e6465 6c696146 74206465 7061206f     ed..Failed to ap
   dee50:	646e6570 636f6c20 63206c61 61726168     pend local chara
   dee60:	72657463 69747369 00002e63              cteristic...

000dee6c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dee74:	000d9781 000d97e5 000d99ad 000d980f     ................
   dee84:	000d9785                                ....

000dee88 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dee90:	000d977d 000d97f3 000d977f 000d9813     }...............
   deea0:	000d97a5                                ....

000deea4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   deeac:	000d977b 000d9801 000da1a1 000d9817     {...............
   deebc:	000d97c5                                ....

000deec0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   deec8:	5f9b34fb 80000080 00001000 00000000     .4._............

000deed8 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   deed8:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000deee8 <_ZN8particle7BleUuid9BASE_UUIDE>:
   deee8:	5f9b34fb 80000080 00001000 00000000     .4._............
   deef8:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   def08:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   def18:	007a2553 74637361 00656d69              S%z.asctime.

000def24 <_ZTV14CellularSignal>:
	...
   def2c:	000daee9 000daf4d 000daeeb 000daf5d     ....M.......]...
   def3c:	000daf91 000dafbd 000daff1 000daf11     ................
   def4c:	000daeef 000daf0b fffffffc 00000000     ................
   def5c:	000daf45                                E...

000def60 <_ZTV9IPAddress>:
	...
   def68:	000db1ff 000db1ef 000db1f1              ............

000def74 <_ZTV9USBSerial>:
	...
   def7c:	000db2e1 000db349 000db31f 000daa61     ....I.......a...
   def8c:	000db311 000db2e3 000db2f3 000db343     ............C...
   def9c:	000db303 000db2dd                       ........

000defa4 <_ZTVN5spark13CellularClassE>:
	...
   defac:	000db44b 000db441 000db437 000db3ed     K...A...7.......
   defbc:	000db42b 000db41f 000db735 000db73d     +.......5...=...
   defcc:	000db413 000db40b 000db401 000db3f7     ................
   defdc:	000db76d                                m...

000defe0 <_ZTV11USARTSerial>:
	...
   defe8:	000db4d9 000db545 000db51d 000daa61     ....E.......a...
   deff8:	000db4ed 000db509 000db4fb 000db517     ................
   df008:	000db4db 000db4df                       ........

000df010 <_ZTV7TwoWire>:
	...
   df018:	000db5d5 000db61f 000db5f7 000db5d7     ................
   df028:	000db5ff 000db607 000db60f 000db617     ................

000df038 <_ZTVN5spark12NetworkClassE>:
	...
   df040:	000db6f5 000db6ff 000db709 000db713     ................
   df050:	000db71d 000db729 000db735 000db73d     ....)...5...=...
   df060:	000db745 000db751 000db759 000db763     E...Q...Y...c...
   df070:	000db76d                                m...

000df074 <_ZSt7nothrow>:
	...

000df075 <_ZTSSt19_Sp_make_shared_tag>:
   df075:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   df085:	5f646572 00676174                        red_tag....

000df090 <_ZTISt19_Sp_make_shared_tag>:
   df090:	000df0d0 000df075                       ....u...

000df098 <_ZTIN10__cxxabiv117__class_type_infoE>:
   df098:	000df130 000df0a4 000df154              0.......T...

000df0a4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   df0a4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   df0b4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   df0c4:	00000045                                E...

000df0c8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   df0c8:	00000000 000df098 000dbae9 000dbafd     ................
   df0d8:	000dbc91 000dbc91 000dbb67 000dbaa9     ........g.......
   df0e8:	000dbb4f 000dbb11 000dbadd              O...........

000df0f4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   df0f4:	000df130 000df100 000df098              0...........

000df100 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   df100:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   df110:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   df120:	456f666e 00000000                       nfoE....

000df128 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   df128:	00000000 000df0f4 000dbb91 000dbba5     ................
   df138:	000dbc91 000dbc91 000dbb67 000dbaa9     ........g.......
   df148:	000dbc65 000dbbf1 000dbbb9              e...........

000df154 <_ZTISt9type_info>:
   df154:	000df0d0 000df15c                       ....\...

000df15c <_ZTSSt9type_info>:
   df15c:	74397453 5f657079 6f666e69 00000000     St9type_info....
   df16c:	00776f70 00000000 00000000              pow.........

000df178 <TWO52>:
   df178:	00000000 43300000 00000000 c3300000     ......0C......0.

000df188 <_ctype_>:
   df188:	20202000 20202020 28282020 20282828     .         ((((( 
   df198:	20202020 20202020 20202020 20202020                     
   df1a8:	10108820 10101010 10101010 10101010      ...............
   df1b8:	04040410 04040404 10040404 10101010     ................
   df1c8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   df1d8:	01010101 01010101 01010101 10101010     ................
   df1e8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   df1f8:	02020202 02020202 02020202 10101010     ................
   df208:	00000020 00000000 00000000 00000000      ...............
	...

000df289 <link_const_variable_data_end>:
   df289:	00          	.byte	0x00
	...

000df28c <link_constructors_location>:
   df28c:	000d51d5 	.word	0x000d51d5
   df290:	000d939d 	.word	0x000d939d
   df294:	000d9535 	.word	0x000d9535
   df298:	000daa39 	.word	0x000daa39
   df29c:	000dad15 	.word	0x000dad15
   df2a0:	000daea5 	.word	0x000daea5
   df2a4:	000daecd 	.word	0x000daecd
   df2a8:	000db4a9 	.word	0x000db4a9
   df2ac:	000db84d 	.word	0x000db84d
