
d:/AeroSpec/firmware-beta/mvp-beta/target/2.0.1/boron/mvp-beta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bb00  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dfb20  000dfb20  0000fb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dfb28  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003ddac  000dfb2c  0002ddac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009d4  2003de20  2003de20  0003de20  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dfb9c  000dfb9c  0002fb9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dfbc4  000dfbc4  0002fbc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0027a970  00000000  00000000  0002fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00025189  00000000  00000000  002aa538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00042431  00000000  00000000  002cf6c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003778  00000000  00000000  00311af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000a440  00000000  00000000  0031526a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004b285  00000000  00000000  0031f6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000617c7  00000000  00000000  0036a92f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0011a3e6  00000000  00000000  003cc0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000a5a8  00000000  00000000  004e64dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00a fbd1 	bl	de7d8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00a fbf3 	bl	de828 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ddac 	.word	0x2003ddac
   d404c:	000dfb2c 	.word	0x000dfb2c
   d4050:	2003de1c 	.word	0x2003de1c
   d4054:	2003de20 	.word	0x2003de20
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 f9cd 	bl	db400 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dfafc 	.word	0x000dfafc
   d4080:	000dfb20 	.word	0x000dfb20

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bd9a 	b.w	d4bbc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fa95 	bl	d55b8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 b977 	b.w	db384 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f005 bb0d 	b.w	d96b4 <malloc>

000d409a <_Znaj>:
   d409a:	f005 bb0b 	b.w	d96b4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f005 bb11 	b.w	d96c4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f005 f9f4 	bl	d9498 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d902d 	.word	0x000d902d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40c8:	6810      	ldr	r0, [r2, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40cc:	4770      	bx	lr

000d40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ce:	7c03      	ldrb	r3, [r0, #16]
   d40d0:	f013 0308 	ands.w	r3, r3, #8
   d40d4:	bf1e      	ittt	ne
   d40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40dc:	2b00      	cmp	r3, #0
  }
   d40de:	bfac      	ite	ge
   d40e0:	4618      	movge	r0, r3
   d40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40e6:	4770      	bx	lr

000d40e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
  return 0;
}


void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
   d40e8:	b510      	push	{r4, lr}
   d40ea:	4401      	add	r1, r0
  // for (size_t ii = 0; ii < len; ii++)
  // {
  //   Serial.write(data[ii]);
  // }

  int val = 0;
   d40ec:	2300      	movs	r3, #0
  for (size_t j = 0; j < len; j++)
  {
    val = val * 10 + data[j] - '0';
   d40ee:	240a      	movs	r4, #10
  for (size_t j = 0; j < len; j++)
   d40f0:	4288      	cmp	r0, r1
   d40f2:	d005      	beq.n	d4100 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>
    val = val * 10 + data[j] - '0';
   d40f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d40f8:	fb04 2303 	mla	r3, r4, r3, r2
   d40fc:	3b30      	subs	r3, #48	; 0x30
  for (size_t j = 0; j < len; j++)
   d40fe:	e7f7      	b.n	d40f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8>
  }

  if (val > 29)
   d4100:	2b1d      	cmp	r3, #29
  {
    //txCharacteristic.setValue(txBuf, txLen);
    PUBLISH_RATE = val;
   d4102:	bfc4      	itt	gt
   d4104:	4a01      	ldrgt	r2, [pc, #4]	; (d410c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24>)
   d4106:	6013      	strgt	r3, [r2, #0]
    // Serial.write(val);
  }
}
   d4108:	bd10      	pop	{r4, pc}
   d410a:	bf00      	nop
   d410c:	2003de38 	.word	0x2003de38

000d4110 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d4110:	4770      	bx	lr

000d4112 <_ZN5SdFatD1Ev>:
//==============================================================================
/**
 * \class SdFat
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
   d4112:	4770      	bx	lr

000d4114 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4114:	b510      	push	{r4, lr}
  }
   d4116:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4118:	4604      	mov	r4, r0
  }
   d411a:	f008 f8be 	bl	dc29a <_ZdlPvj>
   d411e:	4620      	mov	r0, r4
   d4120:	bd10      	pop	{r4, pc}

000d4122 <_ZN4FileD0Ev>:
   d4122:	b510      	push	{r4, lr}
   d4124:	2134      	movs	r1, #52	; 0x34
   d4126:	4604      	mov	r4, r0
   d4128:	f008 f8b7 	bl	dc29a <_ZdlPvj>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4130:	3010      	adds	r0, #16
   d4132:	f003 baef 	b.w	d7714 <_ZN7FatFile4syncEv>

000d4136 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4136:	3010      	adds	r0, #16
   d4138:	f003 ba09 	b.w	d754e <_ZN7FatFile4peekEv>

000d413c <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d413c:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d413e:	2201      	movs	r2, #1
   d4140:	f10d 0107 	add.w	r1, sp, #7
   d4144:	3010      	adds	r0, #16
   d4146:	f003 f91f 	bl	d7388 <_ZN7FatFile4readEPvj>
   d414a:	2801      	cmp	r0, #1
   d414c:	bf0c      	ite	eq
   d414e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4152:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d4156:	b003      	add	sp, #12
   d4158:	f85d fb04 	ldr.w	pc, [sp], #4

000d415c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d415c:	3010      	adds	r0, #16
   d415e:	f003 bb75 	b.w	d784c <_ZN7FatFile5writeEPKvj>

000d4162 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d4162:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4164:	2201      	movs	r2, #1
   d4166:	f88d 1007 	strb.w	r1, [sp, #7]
   d416a:	3010      	adds	r0, #16
   d416c:	f10d 0107 	add.w	r1, sp, #7
   d4170:	f003 fb6c 	bl	d784c <_ZN7FatFile5writeEPKvj>
  }
   d4174:	b003      	add	sp, #12
   d4176:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d417c <_ZN16Adafruit_SSD1675D1Ev>:
/**************************************************************************/
/*!
    @brief  Class for interfacing with SSD1675 EPD drivers
*/
/**************************************************************************/
class Adafruit_SSD1675 : public Adafruit_EPD {
   d417c:	b510      	push	{r4, lr}
   d417e:	4b03      	ldr	r3, [pc, #12]	; (d418c <_ZN16Adafruit_SSD1675D1Ev+0x10>)
   d4180:	6003      	str	r3, [r0, #0]
   d4182:	4604      	mov	r4, r0
   d4184:	f004 fcc4 	bl	d8b10 <_ZN12Adafruit_EPDD1Ev>
   d4188:	4620      	mov	r0, r4
   d418a:	bd10      	pop	{r4, pc}
   d418c:	000df4d8 	.word	0x000df4d8

000d4190 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4194:	6800      	ldr	r0, [r0, #0]
   d4196:	b108      	cbz	r0, d419c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4198:	f005 fa94 	bl	d96c4 <free>
class SystemClass {
   d419c:	4620      	mov	r0, r4
   d419e:	bd10      	pop	{r4, pc}

000d41a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d41a0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41a2:	2000      	movs	r0, #0
   d41a4:	f005 fa6e 	bl	d9684 <spark_sync_time_pending>
   d41a8:	b128      	cbz	r0, d41b6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41aa:	f005 fa4b 	bl	d9644 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41ae:	f080 0001 	eor.w	r0, r0, #1
   d41b2:	b2c0      	uxtb	r0, r0
    }
   d41b4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41b6:	2001      	movs	r0, #1
   d41b8:	e7fc      	b.n	d41b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d41bc <_Z8renameID6String>:
int renameID(String name) {
   d41bc:	b510      	push	{r4, lr}
   d41be:	b086      	sub	sp, #24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d41c0:	2300      	movs	r3, #0
   d41c2:	a901      	add	r1, sp, #4
   d41c4:	2214      	movs	r2, #20
   d41c6:	4604      	mov	r4, r0
   d41c8:	f005 fd2f 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
    EEPROM.put(NAME_ADDR,ID);
   d41cc:	f007 ffca 	bl	dc164 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d41d0:	2214      	movs	r2, #20
   d41d2:	a901      	add	r1, sp, #4
   d41d4:	200a      	movs	r0, #10
   d41d6:	f004 ff51 	bl	d907c <HAL_EEPROM_Put>
    deviceID = name;
   d41da:	4621      	mov	r1, r4
   d41dc:	4802      	ldr	r0, [pc, #8]	; (d41e8 <_Z8renameID6String+0x2c>)
   d41de:	f005 fca5 	bl	d9b2c <_ZN6StringaSERKS_>
}
   d41e2:	2000      	movs	r0, #0
   d41e4:	b006      	add	sp, #24
   d41e6:	bd10      	pop	{r4, pc}
   d41e8:	2003e3c4 	.word	0x2003e3c4

000d41ec <_Z13setSampleRate6String>:
int setSampleRate(String usr_input){
   d41ec:	b507      	push	{r0, r1, r2, lr}
  int num_input = usr_input.toInt();
   d41ee:	f005 fd34 	bl	d9c5a <_ZNK6String5toIntEv>
  switch(enum_input)
   d41f2:	b2c0      	uxtb	r0, r0
   d41f4:	2802      	cmp	r0, #2
   d41f6:	d017      	beq.n	d4228 <_Z13setSampleRate6String+0x3c>
   d41f8:	2803      	cmp	r0, #3
   d41fa:	d005      	beq.n	d4208 <_Z13setSampleRate6String+0x1c>
   d41fc:	2801      	cmp	r0, #1
   d41fe:	d015      	beq.n	d422c <_Z13setSampleRate6String+0x40>
   d4200:	2001      	movs	r0, #1
}
   d4202:	b003      	add	sp, #12
   d4204:	f85d fb04 	ldr.w	pc, [sp], #4
      senDuty = 5;
   d4208:	2305      	movs	r3, #5
      senDuty = 20;
   d420a:	9301      	str	r3, [sp, #4]
  EEPROM.put(DUTY_SEN_ADDR,senDuty);
   d420c:	f007 ffaa 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d4210:	2204      	movs	r2, #4
   d4212:	eb0d 0102 	add.w	r1, sp, r2
   d4216:	f44f 7082 	mov.w	r0, #260	; 0x104
   d421a:	f004 ff2f 	bl	d907c <HAL_EEPROM_Put>
  SENSOR_CYCLE = senDuty;
   d421e:	4b04      	ldr	r3, [pc, #16]	; (d4230 <_Z13setSampleRate6String+0x44>)
   d4220:	9a01      	ldr	r2, [sp, #4]
   d4222:	601a      	str	r2, [r3, #0]
  return 0;
   d4224:	2000      	movs	r0, #0
   d4226:	e7ec      	b.n	d4202 <_Z13setSampleRate6String+0x16>
      senDuty = 10;
   d4228:	230a      	movs	r3, #10
   d422a:	e7ee      	b.n	d420a <_Z13setSampleRate6String+0x1e>
      senDuty = 20;
   d422c:	2314      	movs	r3, #20
   d422e:	e7ec      	b.n	d420a <_Z13setSampleRate6String+0x1e>
   d4230:	2003e2c4 	.word	0x2003e2c4

000d4234 <_Z14setDisplayRate6String>:
int setDisplayRate(String usr_input){
   d4234:	b507      	push	{r0, r1, r2, lr}
  int num_input = usr_input.toInt();
   d4236:	f005 fd10 	bl	d9c5a <_ZNK6String5toIntEv>
  switch(enum_input)
   d423a:	b2c0      	uxtb	r0, r0
   d423c:	2802      	cmp	r0, #2
   d423e:	d017      	beq.n	d4270 <_Z14setDisplayRate6String+0x3c>
   d4240:	2803      	cmp	r0, #3
   d4242:	d005      	beq.n	d4250 <_Z14setDisplayRate6String+0x1c>
   d4244:	2801      	cmp	r0, #1
   d4246:	d015      	beq.n	d4274 <_Z14setDisplayRate6String+0x40>
   d4248:	2001      	movs	r0, #1
}
   d424a:	b003      	add	sp, #12
   d424c:	f85d fb04 	ldr.w	pc, [sp], #4
      scrDuty = 5;
   d4250:	2305      	movs	r3, #5
      scrDuty = 20;
   d4252:	9301      	str	r3, [sp, #4]
  EEPROM.put(DUTY_SEN_ADDR,scrDuty);
   d4254:	f007 ff86 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d4258:	2204      	movs	r2, #4
   d425a:	eb0d 0102 	add.w	r1, sp, r2
   d425e:	f44f 7082 	mov.w	r0, #260	; 0x104
   d4262:	f004 ff0b 	bl	d907c <HAL_EEPROM_Put>
  DISPLAY_REFRESH = scrDuty;
   d4266:	4b04      	ldr	r3, [pc, #16]	; (d4278 <_Z14setDisplayRate6String+0x44>)
   d4268:	9a01      	ldr	r2, [sp, #4]
   d426a:	601a      	str	r2, [r3, #0]
  return 0;
   d426c:	2000      	movs	r0, #0
   d426e:	e7ec      	b.n	d424a <_Z14setDisplayRate6String+0x16>
      scrDuty = 10;
   d4270:	230a      	movs	r3, #10
   d4272:	e7ee      	b.n	d4252 <_Z14setDisplayRate6String+0x1e>
      scrDuty = 20;
   d4274:	2314      	movs	r3, #20
   d4276:	e7ec      	b.n	d4252 <_Z14setDisplayRate6String+0x1e>
   d4278:	2003de30 	.word	0x2003de30

000d427c <_Z14setPublishRate6String>:
int setPublishRate(String usr_input){
   d427c:	b507      	push	{r0, r1, r2, lr}
  int num_input = usr_input.toInt();
   d427e:	f005 fcec 	bl	d9c5a <_ZNK6String5toIntEv>
  switch(enum_input)
   d4282:	b2c0      	uxtb	r0, r0
   d4284:	2802      	cmp	r0, #2
   d4286:	d017      	beq.n	d42b8 <_Z14setPublishRate6String+0x3c>
   d4288:	2803      	cmp	r0, #3
   d428a:	d005      	beq.n	d4298 <_Z14setPublishRate6String+0x1c>
   d428c:	2801      	cmp	r0, #1
   d428e:	d016      	beq.n	d42be <_Z14setPublishRate6String+0x42>
   d4290:	2001      	movs	r0, #1
}
   d4292:	b003      	add	sp, #12
   d4294:	f85d fb04 	ldr.w	pc, [sp], #4
      pubDuty = 60;
   d4298:	233c      	movs	r3, #60	; 0x3c
      pubDuty = 600;
   d429a:	9301      	str	r3, [sp, #4]
  EEPROM.put(DUTY_PUB_ADDR,pubDuty);
   d429c:	f007 ff62 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d42a0:	2204      	movs	r2, #4
   d42a2:	eb0d 0102 	add.w	r1, sp, r2
   d42a6:	f240 1009 	movw	r0, #265	; 0x109
   d42aa:	f004 fee7 	bl	d907c <HAL_EEPROM_Put>
  PUBLISH_RATE = pubDuty;
   d42ae:	4b05      	ldr	r3, [pc, #20]	; (d42c4 <_Z14setPublishRate6String+0x48>)
   d42b0:	9a01      	ldr	r2, [sp, #4]
   d42b2:	601a      	str	r2, [r3, #0]
  return 0;
   d42b4:	2000      	movs	r0, #0
   d42b6:	e7ec      	b.n	d4292 <_Z14setPublishRate6String+0x16>
      pubDuty = 300;
   d42b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d42bc:	e7ed      	b.n	d429a <_Z14setPublishRate6String+0x1e>
      pubDuty = 600;
   d42be:	f44f 7316 	mov.w	r3, #600	; 0x258
   d42c2:	e7ea      	b.n	d429a <_Z14setPublishRate6String+0x1e>
   d42c4:	2003de38 	.word	0x2003de38

000d42c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42c8:	b40e      	push	{r1, r2, r3}
   d42ca:	b503      	push	{r0, r1, lr}
   d42cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d42ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d42d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d42d6:	f006 fe3a 	bl	daf4e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d42da:	b002      	add	sp, #8
   d42dc:	f85d eb04 	ldr.w	lr, [sp], #4
   d42e0:	b003      	add	sp, #12
   d42e2:	4770      	bx	lr

000d42e4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d42e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42e6:	4604      	mov	r4, r0
   d42e8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d42ea:	7922      	ldrb	r2, [r4, #4]
   d42ec:	68a3      	ldr	r3, [r4, #8]
   d42ee:	b132      	cbz	r2, d42fe <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d42f0:	b9a3      	cbnz	r3, d431c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d42f2:	490b      	ldr	r1, [pc, #44]	; (d4320 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d42f4:	b002      	add	sp, #8
   d42f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d42fa:	f006 bd15 	b.w	dad28 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42fe:	4a09      	ldr	r2, [pc, #36]	; (d4324 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4300:	7b26      	ldrb	r6, [r4, #12]
   d4302:	4d09      	ldr	r5, [pc, #36]	; (d4328 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4304:	4909      	ldr	r1, [pc, #36]	; (d432c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4306:	7b64      	ldrb	r4, [r4, #13]
   d4308:	2e01      	cmp	r6, #1
   d430a:	bf18      	it	ne
   d430c:	4629      	movne	r1, r5
   d430e:	e9cd 1400 	strd	r1, r4, [sp]
   d4312:	4907      	ldr	r1, [pc, #28]	; (d4330 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4314:	f7ff ffd8 	bl	d42c8 <_ZN5Print6printfEPKcz>
  }
   d4318:	b002      	add	sp, #8
   d431a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d431c:	4a05      	ldr	r2, [pc, #20]	; (d4334 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d431e:	e7ef      	b.n	d4300 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4320:	000dea79 	.word	0x000dea79
   d4324:	000ded09 	.word	0x000ded09
   d4328:	000dea75 	.word	0x000dea75
   d432c:	000dea71 	.word	0x000dea71
   d4330:	000dea8f 	.word	0x000dea8f
   d4334:	000dea68 	.word	0x000dea68

000d4338 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4338:	b530      	push	{r4, r5, lr}
   d433a:	b085      	sub	sp, #20
class SPISettings : public Printable {
   d433c:	4b1b      	ldr	r3, [pc, #108]	; (d43ac <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   d433e:	9300      	str	r3, [sp, #0]
   d4340:	7913      	ldrb	r3, [r2, #4]
   d4342:	f88d 3004 	strb.w	r3, [sp, #4]
   d4346:	6893      	ldr	r3, [r2, #8]
   d4348:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d434a:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d434e:	8993      	ldrh	r3, [r2, #12]
   d4350:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4354:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4356:	460a      	mov	r2, r1
   d4358:	466b      	mov	r3, sp
   d435a:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d435e:	4628      	mov	r0, r5
   d4360:	f003 fdac 	bl	d7ebc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d4364:	b910      	cbnz	r0, d436c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   d4366:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4368:	b005      	add	sp, #20
   d436a:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d436c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d436e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   d4372:	4628      	mov	r0, r5
   d4374:	f003 fa04 	bl	d7780 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4378:	2101      	movs	r1, #1
   d437a:	4620      	mov	r0, r4
   d437c:	f003 fc4c 	bl	d7c18 <_ZN9FatVolume4initEh>
   d4380:	4601      	mov	r1, r0
   d4382:	b168      	cbz	r0, d43a0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4384:	4621      	mov	r1, r4
   d4386:	4628      	mov	r0, r5
   d4388:	f002 ffe5 	bl	d7356 <_ZN7FatFile8openRootEP9FatVolume>
   d438c:	2800      	cmp	r0, #0
   d438e:	d0ea      	beq.n	d4366 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   d4390:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4394:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4398:	d0e5      	beq.n	d4366 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   d439a:	4b05      	ldr	r3, [pc, #20]	; (d43b0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   d439c:	601d      	str	r5, [r3, #0]
    return true;
   d439e:	e7e3      	b.n	d4368 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   d43a0:	4620      	mov	r0, r4
   d43a2:	f003 fc39 	bl	d7c18 <_ZN9FatVolume4initEh>
   d43a6:	2800      	cmp	r0, #0
   d43a8:	d1ec      	bne.n	d4384 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   d43aa:	e7dc      	b.n	d4366 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   d43ac:	000dee48 	.word	0x000dee48
   d43b0:	2003e5b8 	.word	0x2003e5b8

000d43b4 <_Z7writePMP6SamplePc>:
void writePM(Sample* sample, char* pmData) {
   d43b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43b8:	ed2d 8b02 	vpush	{d8}
   d43bc:	b0a7      	sub	sp, #156	; 0x9c
   d43be:	4604      	mov	r4, r0
   d43c0:	ee08 1a10 	vmov	s16, r1
  String(sample->pt_03).toCharArray(p03, 6);
   d43c4:	220a      	movs	r2, #10
   d43c6:	8841      	ldrh	r1, [r0, #2]
   d43c8:	a822      	add	r0, sp, #136	; 0x88
   d43ca:	f005 fbe3 	bl	d9b94 <_ZN6StringC1Eih>
   d43ce:	2300      	movs	r3, #0
   d43d0:	a90a      	add	r1, sp, #40	; 0x28
   d43d2:	2206      	movs	r2, #6
   d43d4:	a822      	add	r0, sp, #136	; 0x88
   d43d6:	f005 fc28 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d43da:	a822      	add	r0, sp, #136	; 0x88
   d43dc:	f005 fb2a 	bl	d9a34 <_ZN6StringD1Ev>
  String(sample->pt_05).toCharArray(p05, 6);
   d43e0:	88a1      	ldrh	r1, [r4, #4]
   d43e2:	220a      	movs	r2, #10
   d43e4:	a822      	add	r0, sp, #136	; 0x88
   d43e6:	f005 fbd5 	bl	d9b94 <_ZN6StringC1Eih>
   d43ea:	2300      	movs	r3, #0
   d43ec:	a90c      	add	r1, sp, #48	; 0x30
   d43ee:	2206      	movs	r2, #6
   d43f0:	a822      	add	r0, sp, #136	; 0x88
   d43f2:	f005 fc1a 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d43f6:	a822      	add	r0, sp, #136	; 0x88
   d43f8:	f005 fb1c 	bl	d9a34 <_ZN6StringD1Ev>
   d43fc:	ad0e      	add	r5, sp, #56	; 0x38
  String(sample->pt_10).toCharArray(p10, 6);
   d43fe:	88e1      	ldrh	r1, [r4, #6]
   d4400:	220a      	movs	r2, #10
   d4402:	a822      	add	r0, sp, #136	; 0x88
   d4404:	f005 fbc6 	bl	d9b94 <_ZN6StringC1Eih>
   d4408:	2300      	movs	r3, #0
   d440a:	4629      	mov	r1, r5
   d440c:	2206      	movs	r2, #6
   d440e:	a822      	add	r0, sp, #136	; 0x88
   d4410:	f005 fc0b 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d4414:	a822      	add	r0, sp, #136	; 0x88
   d4416:	f005 fb0d 	bl	d9a34 <_ZN6StringD1Ev>
  String(sample->pt_25).toCharArray(p25, 6);
   d441a:	8921      	ldrh	r1, [r4, #8]
   d441c:	220a      	movs	r2, #10
   d441e:	a822      	add	r0, sp, #136	; 0x88
   d4420:	f005 fbb8 	bl	d9b94 <_ZN6StringC1Eih>
   d4424:	2300      	movs	r3, #0
   d4426:	a910      	add	r1, sp, #64	; 0x40
   d4428:	2206      	movs	r2, #6
   d442a:	a822      	add	r0, sp, #136	; 0x88
   d442c:	f005 fbfd 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d4430:	a822      	add	r0, sp, #136	; 0x88
   d4432:	f005 faff 	bl	d9a34 <_ZN6StringD1Ev>
  String(sample->pt_50).toCharArray(p50, 6);
   d4436:	8961      	ldrh	r1, [r4, #10]
   d4438:	220a      	movs	r2, #10
   d443a:	a822      	add	r0, sp, #136	; 0x88
   d443c:	f005 fbaa 	bl	d9b94 <_ZN6StringC1Eih>
   d4440:	2300      	movs	r3, #0
   d4442:	a912      	add	r1, sp, #72	; 0x48
   d4444:	2206      	movs	r2, #6
   d4446:	a822      	add	r0, sp, #136	; 0x88
   d4448:	f005 fbef 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d444c:	a822      	add	r0, sp, #136	; 0x88
   d444e:	f005 faf1 	bl	d9a34 <_ZN6StringD1Ev>
   d4452:	ae14      	add	r6, sp, #80	; 0x50
  String(sample->pt_100).toCharArray(p100, 6);
   d4454:	89a1      	ldrh	r1, [r4, #12]
   d4456:	220a      	movs	r2, #10
   d4458:	a822      	add	r0, sp, #136	; 0x88
   d445a:	f005 fb9b 	bl	d9b94 <_ZN6StringC1Eih>
   d445e:	2300      	movs	r3, #0
   d4460:	4631      	mov	r1, r6
   d4462:	2206      	movs	r2, #6
   d4464:	a822      	add	r0, sp, #136	; 0x88
   d4466:	f005 fbe0 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d446a:	a822      	add	r0, sp, #136	; 0x88
   d446c:	f005 fae2 	bl	d9a34 <_ZN6StringD1Ev>
   d4470:	af16      	add	r7, sp, #88	; 0x58
  String(sample->pm10_st).toCharArray(pm10_std, 6);
   d4472:	8aa1      	ldrh	r1, [r4, #20]
   d4474:	220a      	movs	r2, #10
   d4476:	a822      	add	r0, sp, #136	; 0x88
   d4478:	f005 fb8c 	bl	d9b94 <_ZN6StringC1Eih>
   d447c:	2300      	movs	r3, #0
   d447e:	4639      	mov	r1, r7
   d4480:	2206      	movs	r2, #6
   d4482:	a822      	add	r0, sp, #136	; 0x88
   d4484:	f005 fbd1 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d4488:	a822      	add	r0, sp, #136	; 0x88
   d448a:	f005 fad3 	bl	d9a34 <_ZN6StringD1Ev>
   d448e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  String(sample->pm25_st).toCharArray(pm25_std, 6);
   d4492:	8ae1      	ldrh	r1, [r4, #22]
   d4494:	220a      	movs	r2, #10
   d4496:	a822      	add	r0, sp, #136	; 0x88
   d4498:	f005 fb7c 	bl	d9b94 <_ZN6StringC1Eih>
   d449c:	2300      	movs	r3, #0
   d449e:	4641      	mov	r1, r8
   d44a0:	2206      	movs	r2, #6
   d44a2:	a822      	add	r0, sp, #136	; 0x88
   d44a4:	f005 fbc1 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d44a8:	a822      	add	r0, sp, #136	; 0x88
   d44aa:	f005 fac3 	bl	d9a34 <_ZN6StringD1Ev>
   d44ae:	f10d 0968 	add.w	r9, sp, #104	; 0x68
  String(sample->pm100_st).toCharArray(pm100_std, 6);
   d44b2:	8b21      	ldrh	r1, [r4, #24]
   d44b4:	220a      	movs	r2, #10
   d44b6:	a822      	add	r0, sp, #136	; 0x88
   d44b8:	f005 fb6c 	bl	d9b94 <_ZN6StringC1Eih>
   d44bc:	2300      	movs	r3, #0
   d44be:	4649      	mov	r1, r9
   d44c0:	2206      	movs	r2, #6
   d44c2:	a822      	add	r0, sp, #136	; 0x88
   d44c4:	f005 fbb1 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d44c8:	a822      	add	r0, sp, #136	; 0x88
   d44ca:	f005 fab3 	bl	d9a34 <_ZN6StringD1Ev>
   d44ce:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
  String(sample->pm10_env).toCharArray(pm10_env, 6);
   d44d2:	89e1      	ldrh	r1, [r4, #14]
   d44d4:	220a      	movs	r2, #10
   d44d6:	a822      	add	r0, sp, #136	; 0x88
   d44d8:	f005 fb5c 	bl	d9b94 <_ZN6StringC1Eih>
   d44dc:	2300      	movs	r3, #0
   d44de:	4651      	mov	r1, sl
   d44e0:	2206      	movs	r2, #6
   d44e2:	a822      	add	r0, sp, #136	; 0x88
   d44e4:	f005 fba1 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d44e8:	a822      	add	r0, sp, #136	; 0x88
   d44ea:	f005 faa3 	bl	d9a34 <_ZN6StringD1Ev>
   d44ee:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
  String(sample->pm25_env).toCharArray(pm25_env, 6);
   d44f2:	8a21      	ldrh	r1, [r4, #16]
   d44f4:	220a      	movs	r2, #10
   d44f6:	a822      	add	r0, sp, #136	; 0x88
   d44f8:	f005 fb4c 	bl	d9b94 <_ZN6StringC1Eih>
   d44fc:	2300      	movs	r3, #0
   d44fe:	4659      	mov	r1, fp
   d4500:	2206      	movs	r2, #6
   d4502:	a822      	add	r0, sp, #136	; 0x88
   d4504:	f005 fb91 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d4508:	a822      	add	r0, sp, #136	; 0x88
   d450a:	f005 fa93 	bl	d9a34 <_ZN6StringD1Ev>
  String(sample->pm100_env).toCharArray(pm100_env, 6);
   d450e:	8a61      	ldrh	r1, [r4, #18]
   d4510:	220a      	movs	r2, #10
   d4512:	ac20      	add	r4, sp, #128	; 0x80
   d4514:	a822      	add	r0, sp, #136	; 0x88
   d4516:	f005 fb3d 	bl	d9b94 <_ZN6StringC1Eih>
   d451a:	4621      	mov	r1, r4
   d451c:	2300      	movs	r3, #0
   d451e:	2206      	movs	r2, #6
   d4520:	a822      	add	r0, sp, #136	; 0x88
   d4522:	f005 fb82 	bl	d9c2a <_ZNK6String8getBytesEPhjj>
   d4526:	a822      	add	r0, sp, #136	; 0x88
   d4528:	f005 fa84 	bl	d9a34 <_ZN6StringD1Ev>
  sprintf(pmData, "%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s", p03, p05, p10, p25, p50, p100, pm10_std, pm25_std, pm100_std, pm10_env, pm25_env, pm100_env);
   d452c:	ab12      	add	r3, sp, #72	; 0x48
   d452e:	9302      	str	r3, [sp, #8]
   d4530:	ab10      	add	r3, sp, #64	; 0x40
   d4532:	e9cd 5300 	strd	r5, r3, [sp]
   d4536:	e9cd b408 	strd	fp, r4, [sp, #32]
   d453a:	e9cd 9a06 	strd	r9, sl, [sp, #24]
   d453e:	e9cd 7804 	strd	r7, r8, [sp, #16]
   d4542:	4906      	ldr	r1, [pc, #24]	; (d455c <_Z7writePMP6SamplePc+0x1a8>)
   d4544:	9603      	str	r6, [sp, #12]
   d4546:	ee18 0a10 	vmov	r0, s16
   d454a:	ab0c      	add	r3, sp, #48	; 0x30
   d454c:	aa0a      	add	r2, sp, #40	; 0x28
   d454e:	f005 f8c9 	bl	d96e4 <sprintf>
}
   d4552:	b027      	add	sp, #156	; 0x9c
   d4554:	ecbd 8b02 	vpop	{d8}
   d4558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d455c:	000deb31 	.word	0x000deb31

000d4560 <_Z12sample_writeP6SamplePc>:
void sample_write(Sample* sample, char *output){
   d4560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4564:	ed2d 8b02 	vpush	{d8}
   d4568:	4604      	mov	r4, r0
   d456a:	b0cd      	sub	sp, #308	; 0x134
   d456c:	ee08 1a10 	vmov	s16, r1
  writePM(sample,pmData);
   d4570:	a926      	add	r1, sp, #152	; 0x98
   d4572:	f7ff ff1f 	bl	d43b4 <_Z7writePMP6SamplePc>
  sprintf(tempData, "%.2f",sample->temp);
   d4576:	69e0      	ldr	r0, [r4, #28]
   d4578:	4d39      	ldr	r5, [pc, #228]	; (d4660 <_Z12sample_writeP6SamplePc+0x100>)
   d457a:	f009 faab 	bl	ddad4 <__aeabi_f2d>
   d457e:	4602      	mov	r2, r0
   d4580:	460b      	mov	r3, r1
   d4582:	a810      	add	r0, sp, #64	; 0x40
   d4584:	4629      	mov	r1, r5
   d4586:	f005 f8ad 	bl	d96e4 <sprintf>
  sprintf(rhData, "%.2f",sample->humidity);
   d458a:	6a20      	ldr	r0, [r4, #32]
   d458c:	f009 faa2 	bl	ddad4 <__aeabi_f2d>
   d4590:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   d4594:	4602      	mov	r2, r0
   d4596:	460b      	mov	r3, r1
   d4598:	4648      	mov	r0, r9
   d459a:	4629      	mov	r1, r5
   d459c:	f005 f8a2 	bl	d96e4 <sprintf>
  sprintf(pressData,"%.2f",sample->pressure);
   d45a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d45a2:	f009 fa97 	bl	ddad4 <__aeabi_f2d>
   d45a6:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
   d45aa:	4602      	mov	r2, r0
   d45ac:	460b      	mov	r3, r1
   d45ae:	4650      	mov	r0, sl
   d45b0:	4629      	mov	r1, r5
   d45b2:	f005 f897 	bl	d96e4 <sprintf>
  sprintf(altData,"%.2f",sample->altitude);
   d45b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d45b8:	f009 fa8c 	bl	ddad4 <__aeabi_f2d>
   d45bc:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
   d45c0:	4602      	mov	r2, r0
   d45c2:	460b      	mov	r3, r1
   d45c4:	4658      	mov	r0, fp
   d45c6:	4629      	mov	r1, r5
   d45c8:	f005 f88c 	bl	d96e4 <sprintf>
  sprintf(timeData, "%u:%u:%u", sample->hour, sample->minute, sample->seconds); // String for Time
   d45cc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d45d0:	9300      	str	r3, [sp, #0]
   d45d2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   d45d6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   d45da:	4922      	ldr	r1, [pc, #136]	; (d4664 <_Z12sample_writeP6SamplePc+0x104>)
   d45dc:	a81c      	add	r0, sp, #112	; 0x70
   d45de:	f005 f881 	bl	d96e4 <sprintf>
  sprintf(dateData, "%u/%u/%u", sample->year, sample->month, sample->day);     // String for date
   d45e2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   d45e6:	9300      	str	r3, [sp, #0]
   d45e8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d45ec:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   d45ee:	491e      	ldr	r1, [pc, #120]	; (d4668 <_Z12sample_writeP6SamplePc+0x108>)
  sprintf(posLatData,"%u",0); // no GPS set to default 0
   d45f0:	ae0a      	add	r6, sp, #40	; 0x28
  sprintf(dateData, "%u/%u/%u", sample->year, sample->month, sample->day);     // String for date
   d45f2:	a821      	add	r0, sp, #132	; 0x84
   d45f4:	f005 f876 	bl	d96e4 <sprintf>
  sprintf(posLonData,"%u",0);  // no GPS set to default 0
   d45f8:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
  sprintf(posLatData,"%u",0); // no GPS set to default 0
   d45fc:	491b      	ldr	r1, [pc, #108]	; (d466c <_Z12sample_writeP6SamplePc+0x10c>)
   d45fe:	2200      	movs	r2, #0
   d4600:	4630      	mov	r0, r6
   d4602:	f005 f86f 	bl	d96e4 <sprintf>
  sprintf(fixData,"%u",0);  // no GPS set to default 0
   d4606:	af0c      	add	r7, sp, #48	; 0x30
  sprintf(posLonData,"%u",0);  // no GPS set to default 0
   d4608:	4918      	ldr	r1, [pc, #96]	; (d466c <_Z12sample_writeP6SamplePc+0x10c>)
   d460a:	2200      	movs	r2, #0
   d460c:	4640      	mov	r0, r8
   d460e:	f005 f869 	bl	d96e4 <sprintf>
  sprintf(fixData,"%u",0);  // no GPS set to default 0
   d4612:	2200      	movs	r2, #0
   d4614:	4915      	ldr	r1, [pc, #84]	; (d466c <_Z12sample_writeP6SamplePc+0x10c>)
   d4616:	4638      	mov	r0, r7
   d4618:	f005 f864 	bl	d96e4 <sprintf>
  sprintf(batData,"%.2f", sample->battery);
   d461c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d461e:	f009 fa59 	bl	ddad4 <__aeabi_f2d>
   d4622:	ac0d      	add	r4, sp, #52	; 0x34
   d4624:	4602      	mov	r2, r0
   d4626:	460b      	mov	r3, r1
   d4628:	4620      	mov	r0, r4
   d462a:	4629      	mov	r1, r5
   d462c:	f005 f85a 	bl	d96e4 <sprintf>
  sprintf(output, "%10s,%10s,%10s,%5s,%15s,%15s,%10s,%10s,%5s,%5s,%5s", dateData, timeData, batData, fixData, posLatData, posLonData, pmData, tempData, rhData, pressData, altData);
   d4630:	ab10      	add	r3, sp, #64	; 0x40
   d4632:	9305      	str	r3, [sp, #20]
   d4634:	ab26      	add	r3, sp, #152	; 0x98
   d4636:	e9cd 8303 	strd	r8, r3, [sp, #12]
   d463a:	e9cd ab07 	strd	sl, fp, [sp, #28]
   d463e:	e9cd 7601 	strd	r7, r6, [sp, #4]
   d4642:	490b      	ldr	r1, [pc, #44]	; (d4670 <_Z12sample_writeP6SamplePc+0x110>)
   d4644:	f8cd 9018 	str.w	r9, [sp, #24]
   d4648:	ee18 0a10 	vmov	r0, s16
   d464c:	9400      	str	r4, [sp, #0]
   d464e:	ab1c      	add	r3, sp, #112	; 0x70
   d4650:	aa21      	add	r2, sp, #132	; 0x84
   d4652:	f005 f847 	bl	d96e4 <sprintf>
}
   d4656:	b04d      	add	sp, #308	; 0x134
   d4658:	ecbd 8b02 	vpop	{d8}
   d465c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4660:	000deaac 	.word	0x000deaac
   d4664:	000deab1 	.word	0x000deab1
   d4668:	000deaba 	.word	0x000deaba
   d466c:	000deac0 	.word	0x000deac0
   d4670:	000deac3 	.word	0x000deac3

000d4674 <_Z11writeToFile6StringS_>:
void writeToFile(String path, String content) {
   d4674:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4676:	2400      	movs	r4, #0
   d4678:	b0d7      	sub	sp, #348	; 0x15c
    return file.open(this, path, O_RDONLY);
   d467a:	6802      	ldr	r2, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d467c:	f8ad 4054 	strh.w	r4, [sp, #84]	; 0x54
   d4680:	4605      	mov	r5, r0
    return file.open(this, path, O_RDONLY);
   d4682:	4623      	mov	r3, r4
   d4684:	460f      	mov	r7, r1
   d4686:	a815      	add	r0, sp, #84	; 0x54
   d4688:	4941      	ldr	r1, [pc, #260]	; (d4790 <_Z11writeToFile6StringS_+0x11c>)
   d468a:	4e42      	ldr	r6, [pc, #264]	; (d4794 <_Z11writeToFile6StringS_+0x120>)
   d468c:	f003 f87f 	bl	d778e <_ZN7FatFile4openEPS_PKci>
   d4690:	682a      	ldr	r2, [r5, #0]
   d4692:	4b41      	ldr	r3, [pc, #260]	; (d4798 <_Z11writeToFile6StringS_+0x124>)
   d4694:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  if (!SD.exists(path)) {
   d4698:	2800      	cmp	r0, #0
   d469a:	d15e      	bne.n	d475a <_Z11writeToFile6StringS_+0xe6>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d469c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d46a0:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
    tmpFile.open(vwd(), path, oflag);
   d46a4:	493a      	ldr	r1, [pc, #232]	; (d4790 <_Z11writeToFile6StringS_+0x11c>)
  File() {}
   d46a6:	9315      	str	r3, [sp, #84]	; 0x54
   d46a8:	a819      	add	r0, sp, #100	; 0x64
   d46aa:	f244 2302 	movw	r3, #16898	; 0x4202
class File : public FatFile, public Stream {
   d46ae:	ad19      	add	r5, sp, #100	; 0x64
   d46b0:	f003 f86d 	bl	d778e <_ZN7FatFile4openEPS_PKci>
   d46b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46b6:	f106 0410 	add.w	r4, r6, #16
   d46ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46c0:	682b      	ldr	r3, [r5, #0]
   d46c2:	6023      	str	r3, [r4, #0]
class Print
   d46c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d46c6:	6073      	str	r3, [r6, #4]
class Stream : public Print
   d46c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d46ca:	60b3      	str	r3, [r6, #8]
   d46cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d46ce:	60f3      	str	r3, [r6, #12]
    sprintf(label, "%10s,%10s,%10s,%5s,%15s,%15s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s,%10s",
   d46d0:	4b32      	ldr	r3, [pc, #200]	; (d479c <_Z11writeToFile6StringS_+0x128>)
   d46d2:	9313      	str	r3, [sp, #76]	; 0x4c
   d46d4:	4b32      	ldr	r3, [pc, #200]	; (d47a0 <_Z11writeToFile6StringS_+0x12c>)
   d46d6:	9312      	str	r3, [sp, #72]	; 0x48
   d46d8:	4b32      	ldr	r3, [pc, #200]	; (d47a4 <_Z11writeToFile6StringS_+0x130>)
   d46da:	9311      	str	r3, [sp, #68]	; 0x44
   d46dc:	4b32      	ldr	r3, [pc, #200]	; (d47a8 <_Z11writeToFile6StringS_+0x134>)
   d46de:	9310      	str	r3, [sp, #64]	; 0x40
   d46e0:	4b32      	ldr	r3, [pc, #200]	; (d47ac <_Z11writeToFile6StringS_+0x138>)
   d46e2:	930f      	str	r3, [sp, #60]	; 0x3c
   d46e4:	4b32      	ldr	r3, [pc, #200]	; (d47b0 <_Z11writeToFile6StringS_+0x13c>)
   d46e6:	930e      	str	r3, [sp, #56]	; 0x38
   d46e8:	4b32      	ldr	r3, [pc, #200]	; (d47b4 <_Z11writeToFile6StringS_+0x140>)
   d46ea:	930d      	str	r3, [sp, #52]	; 0x34
   d46ec:	4b32      	ldr	r3, [pc, #200]	; (d47b8 <_Z11writeToFile6StringS_+0x144>)
   d46ee:	930c      	str	r3, [sp, #48]	; 0x30
   d46f0:	4b32      	ldr	r3, [pc, #200]	; (d47bc <_Z11writeToFile6StringS_+0x148>)
   d46f2:	930b      	str	r3, [sp, #44]	; 0x2c
   d46f4:	4b32      	ldr	r3, [pc, #200]	; (d47c0 <_Z11writeToFile6StringS_+0x14c>)
   d46f6:	930a      	str	r3, [sp, #40]	; 0x28
   d46f8:	4b32      	ldr	r3, [pc, #200]	; (d47c4 <_Z11writeToFile6StringS_+0x150>)
   d46fa:	9309      	str	r3, [sp, #36]	; 0x24
   d46fc:	4b32      	ldr	r3, [pc, #200]	; (d47c8 <_Z11writeToFile6StringS_+0x154>)
   d46fe:	9308      	str	r3, [sp, #32]
   d4700:	4b32      	ldr	r3, [pc, #200]	; (d47cc <_Z11writeToFile6StringS_+0x158>)
   d4702:	9307      	str	r3, [sp, #28]
   d4704:	4b32      	ldr	r3, [pc, #200]	; (d47d0 <_Z11writeToFile6StringS_+0x15c>)
   d4706:	9306      	str	r3, [sp, #24]
   d4708:	4b32      	ldr	r3, [pc, #200]	; (d47d4 <_Z11writeToFile6StringS_+0x160>)
   d470a:	9305      	str	r3, [sp, #20]
   d470c:	4b32      	ldr	r3, [pc, #200]	; (d47d8 <_Z11writeToFile6StringS_+0x164>)
   d470e:	9304      	str	r3, [sp, #16]
   d4710:	4b32      	ldr	r3, [pc, #200]	; (d47dc <_Z11writeToFile6StringS_+0x168>)
   d4712:	9303      	str	r3, [sp, #12]
   d4714:	4b32      	ldr	r3, [pc, #200]	; (d47e0 <_Z11writeToFile6StringS_+0x16c>)
   d4716:	9302      	str	r3, [sp, #8]
   d4718:	4b32      	ldr	r3, [pc, #200]	; (d47e4 <_Z11writeToFile6StringS_+0x170>)
   d471a:	9301      	str	r3, [sp, #4]
   d471c:	4b32      	ldr	r3, [pc, #200]	; (d47e8 <_Z11writeToFile6StringS_+0x174>)
   d471e:	4a33      	ldr	r2, [pc, #204]	; (d47ec <_Z11writeToFile6StringS_+0x178>)
   d4720:	4933      	ldr	r1, [pc, #204]	; (d47f0 <_Z11writeToFile6StringS_+0x17c>)
   d4722:	9300      	str	r3, [sp, #0]
   d4724:	a815      	add	r0, sp, #84	; 0x54
   d4726:	4b33      	ldr	r3, [pc, #204]	; (d47f4 <_Z11writeToFile6StringS_+0x180>)
   d4728:	f004 ffdc 	bl	d96e4 <sprintf>
        operator const char*() const { return c_str(); }
   d472c:	4b32      	ldr	r3, [pc, #200]	; (d47f8 <_Z11writeToFile6StringS_+0x184>)
    myFile.println(deviceID);
   d472e:	4630      	mov	r0, r6
   d4730:	6819      	ldr	r1, [r3, #0]
   d4732:	f006 fb0c 	bl	dad4e <_ZN5Print7printlnEPKc>
    myFile.println(label);
   d4736:	a915      	add	r1, sp, #84	; 0x54
   d4738:	4630      	mov	r0, r6
   d473a:	f006 fb08 	bl	dad4e <_ZN5Print7printlnEPKc>
  if (myFile) {
   d473e:	7c33      	ldrb	r3, [r6, #16]
   d4740:	4c2e      	ldr	r4, [pc, #184]	; (d47fc <_Z11writeToFile6StringS_+0x188>)
   d4742:	b13b      	cbz	r3, d4754 <_Z11writeToFile6StringS_+0xe0>
    myFile.println(content);
   d4744:	6839      	ldr	r1, [r7, #0]
   d4746:	4813      	ldr	r0, [pc, #76]	; (d4794 <_Z11writeToFile6StringS_+0x120>)
   d4748:	f006 fb01 	bl	dad4e <_ZN5Print7printlnEPKc>
    myFile.close();
   d474c:	482c      	ldr	r0, [pc, #176]	; (d4800 <_Z11writeToFile6StringS_+0x18c>)
   d474e:	f003 f817 	bl	d7780 <_ZN7FatFile5closeEv>
    SD_WRITE_SUCCESSFUL = true;
   d4752:	2301      	movs	r3, #1
    SD_WRITE_SUCCESSFUL = false;
   d4754:	7023      	strb	r3, [r4, #0]
}
   d4756:	b057      	add	sp, #348	; 0x15c
   d4758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Stream() {_timeout=1000;}
   d475a:	e9cd 4116 	strd	r4, r1, [sp, #88]	; 0x58
   d475e:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
   d4762:	490b      	ldr	r1, [pc, #44]	; (d4790 <_Z11writeToFile6StringS_+0x11c>)
  File() {}
   d4764:	9315      	str	r3, [sp, #84]	; 0x54
   d4766:	a819      	add	r0, sp, #100	; 0x64
   d4768:	f244 2302 	movw	r3, #16898	; 0x4202
class File : public FatFile, public Stream {
   d476c:	ac19      	add	r4, sp, #100	; 0x64
   d476e:	f003 f80e 	bl	d778e <_ZN7FatFile4openEPS_PKci>
   d4772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4774:	f106 0510 	add.w	r5, r6, #16
   d4778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d477a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d477c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d477e:	6823      	ldr	r3, [r4, #0]
   d4780:	602b      	str	r3, [r5, #0]
   d4782:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d4784:	6073      	str	r3, [r6, #4]
class Stream : public Print
   d4786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4788:	60b3      	str	r3, [r6, #8]
   d478a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d478c:	60f3      	str	r3, [r6, #12]
    virtual ~Print() {}
   d478e:	e7d6      	b.n	d473e <_Z11writeToFile6StringS_+0xca>
   d4790:	2003e278 	.word	0x2003e278
   d4794:	2003e464 	.word	0x2003e464
   d4798:	000dee5c 	.word	0x000dee5c
   d479c:	000deb6d 	.word	0x000deb6d
   d47a0:	000deb75 	.word	0x000deb75
   d47a4:	000deb7c 	.word	0x000deb7c
   d47a8:	000deb82 	.word	0x000deb82
   d47ac:	000deb8a 	.word	0x000deb8a
   d47b0:	000deb93 	.word	0x000deb93
   d47b4:	000deb9d 	.word	0x000deb9d
   d47b8:	000deba5 	.word	0x000deba5
   d47bc:	000debae 	.word	0x000debae
   d47c0:	000debb8 	.word	0x000debb8
   d47c4:	000debc0 	.word	0x000debc0
   d47c8:	000debc8 	.word	0x000debc8
   d47cc:	000debcf 	.word	0x000debcf
   d47d0:	000debd6 	.word	0x000debd6
   d47d4:	000debdd 	.word	0x000debdd
   d47d8:	000debe4 	.word	0x000debe4
   d47dc:	000debeb 	.word	0x000debeb
   d47e0:	000debf5 	.word	0x000debf5
   d47e4:	000debfe 	.word	0x000debfe
   d47e8:	000dec02 	.word	0x000dec02
   d47ec:	000deafb 	.word	0x000deafb
   d47f0:	000deb00 	.word	0x000deb00
   d47f4:	000deaf6 	.word	0x000deaf6
   d47f8:	2003e3c4 	.word	0x2003e3c4
   d47fc:	2003e2c0 	.word	0x2003e2c0
   d4800:	2003e474 	.word	0x2003e474

000d4804 <_Z14update_averageP6SampleP12Data_average>:
  average->pt_03 = average->pt_03 + latest->pt_03;
   d4804:	8842      	ldrh	r2, [r0, #2]
   d4806:	684b      	ldr	r3, [r1, #4]
   d4808:	4413      	add	r3, r2
   d480a:	604b      	str	r3, [r1, #4]
  average->pt_05 = average->pt_05 + latest->pt_05;
   d480c:	8882      	ldrh	r2, [r0, #4]
   d480e:	688b      	ldr	r3, [r1, #8]
   d4810:	4413      	add	r3, r2
   d4812:	608b      	str	r3, [r1, #8]
  average->pt_10 = average->pt_10 + latest->pt_10;
   d4814:	88c2      	ldrh	r2, [r0, #6]
   d4816:	68cb      	ldr	r3, [r1, #12]
   d4818:	4413      	add	r3, r2
   d481a:	60cb      	str	r3, [r1, #12]
  average->pt_25 = average->pt_25 + latest->pt_25;
   d481c:	8902      	ldrh	r2, [r0, #8]
   d481e:	690b      	ldr	r3, [r1, #16]
   d4820:	4413      	add	r3, r2
   d4822:	610b      	str	r3, [r1, #16]
  average->pt_50 = average->pt_50 + latest->pt_50;
   d4824:	8942      	ldrh	r2, [r0, #10]
   d4826:	694b      	ldr	r3, [r1, #20]
   d4828:	4413      	add	r3, r2
   d482a:	614b      	str	r3, [r1, #20]
  average->pt_100 = average->pt_100 + latest->pt_100;
   d482c:	8982      	ldrh	r2, [r0, #12]
   d482e:	698b      	ldr	r3, [r1, #24]
   d4830:	4413      	add	r3, r2
   d4832:	618b      	str	r3, [r1, #24]
  average->pm10_env = average->pm10_env + latest->pm10_env;
   d4834:	89c2      	ldrh	r2, [r0, #14]
   d4836:	69cb      	ldr	r3, [r1, #28]
   d4838:	4413      	add	r3, r2
   d483a:	61cb      	str	r3, [r1, #28]
  average->pm25_env = average->pm25_env + latest->pm25_env;
   d483c:	8a02      	ldrh	r2, [r0, #16]
   d483e:	6a0b      	ldr	r3, [r1, #32]
   d4840:	4413      	add	r3, r2
   d4842:	620b      	str	r3, [r1, #32]
  average->pm100_env = average->pm100_env + latest->pm100_env;
   d4844:	8a42      	ldrh	r2, [r0, #18]
   d4846:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   d4848:	4413      	add	r3, r2
   d484a:	624b      	str	r3, [r1, #36]	; 0x24
  average->pm10_st = average->pm10_st + latest->pm10_st;
   d484c:	8a82      	ldrh	r2, [r0, #20]
   d484e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   d4850:	4413      	add	r3, r2
   d4852:	628b      	str	r3, [r1, #40]	; 0x28
  average->pm25_st = average->pm25_st + latest->pm25_st;
   d4854:	8ac2      	ldrh	r2, [r0, #22]
   d4856:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   d4858:	4413      	add	r3, r2
   d485a:	62cb      	str	r3, [r1, #44]	; 0x2c
  average->pm100_st = average->pm100_st + latest->pm100_st;
   d485c:	8b02      	ldrh	r2, [r0, #24]
   d485e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  average->temp = average->temp + latest->temp;
   d4860:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
  average->pm100_st = average->pm100_st + latest->pm100_st;
   d4864:	4413      	add	r3, r2
   d4866:	630b      	str	r3, [r1, #48]	; 0x30
  average->temp = average->temp + latest->temp;
   d4868:	ed90 7a07 	vldr	s14, [r0, #28]
  average->N++;
   d486c:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
  average->temp = average->temp + latest->temp;
   d4870:	ee77 7a87 	vadd.f32	s15, s15, s14
  average->N++;
   d4874:	3301      	adds	r3, #1
  average->temp = average->temp + latest->temp;
   d4876:	edc1 7a0d 	vstr	s15, [r1, #52]	; 0x34
  average->humidity = average->humidity + latest->humidity;
   d487a:	ed90 7a08 	vldr	s14, [r0, #32]
   d487e:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
   d4882:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4886:	edc1 7a0e 	vstr	s15, [r1, #56]	; 0x38
  average->pressure = average->pressure + latest->pressure;
   d488a:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
   d488e:	edd1 7a0f 	vldr	s15, [r1, #60]	; 0x3c
   d4892:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4896:	edc1 7a0f 	vstr	s15, [r1, #60]	; 0x3c
  average->altitude = average->altitude + latest->altitude;
   d489a:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
   d489e:	edd1 7a10 	vldr	s15, [r1, #64]	; 0x40
  average->N++;
   d48a2:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
  average->altitude = average->altitude + latest->altitude;
   d48a6:	ee77 7a87 	vadd.f32	s15, s15, s14
   d48aa:	edc1 7a10 	vstr	s15, [r1, #64]	; 0x40
}
   d48ae:	4770      	bx	lr

000d48b0 <_Z12take_averageP6SampleS0_P12Data_average>:
  av_sample->pt_03 = average->pt_03/average->N;
   d48b0:	6853      	ldr	r3, [r2, #4]
void take_average(Sample *latest, Sample *av_sample, Data_average* average){
   d48b2:	b510      	push	{r4, lr}
  av_sample->pt_03 = average->pt_03/average->N;
   d48b4:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d48b8:	fbb3 f3f4 	udiv	r3, r3, r4
   d48bc:	804b      	strh	r3, [r1, #2]
  av_sample->pt_05 = average->pt_05/average->N;
   d48be:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d48c2:	6893      	ldr	r3, [r2, #8]
   d48c4:	fbb3 f3f4 	udiv	r3, r3, r4
   d48c8:	808b      	strh	r3, [r1, #4]
  av_sample->pt_10 = average->pt_10/average->N;
   d48ca:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d48ce:	68d3      	ldr	r3, [r2, #12]
   d48d0:	fbb3 f3f4 	udiv	r3, r3, r4
   d48d4:	80cb      	strh	r3, [r1, #6]
  av_sample->pt_25 = average->pt_25/average->N;
   d48d6:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d48da:	6913      	ldr	r3, [r2, #16]
   d48dc:	fbb3 f3f4 	udiv	r3, r3, r4
   d48e0:	810b      	strh	r3, [r1, #8]
  av_sample->pt_50 = average->pt_50/average->N;
   d48e2:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d48e6:	6953      	ldr	r3, [r2, #20]
   d48e8:	fbb3 f3f4 	udiv	r3, r3, r4
   d48ec:	814b      	strh	r3, [r1, #10]
  av_sample->pt_100 = average->pt_100/average->N;
   d48ee:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d48f2:	6993      	ldr	r3, [r2, #24]
   d48f4:	fbb3 f3f4 	udiv	r3, r3, r4
   d48f8:	818b      	strh	r3, [r1, #12]
  av_sample->pm10_env = average->pm10_env/average->N;
   d48fa:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d48fe:	69d3      	ldr	r3, [r2, #28]
   d4900:	fbb3 f3f4 	udiv	r3, r3, r4
   d4904:	81cb      	strh	r3, [r1, #14]
  av_sample->pm25_env = average->pm25_env/average->N;
   d4906:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d490a:	6a13      	ldr	r3, [r2, #32]
   d490c:	fbb3 f3f4 	udiv	r3, r3, r4
   d4910:	820b      	strh	r3, [r1, #16]
  av_sample->pm100_env = average->pm100_env/average->N;
   d4912:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d4916:	6a53      	ldr	r3, [r2, #36]	; 0x24
   d4918:	fbb3 f3f4 	udiv	r3, r3, r4
   d491c:	824b      	strh	r3, [r1, #18]
  av_sample->pm10_st = average->pm10_st/average->N;
   d491e:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d4922:	6a93      	ldr	r3, [r2, #40]	; 0x28
   d4924:	fbb3 f3f4 	udiv	r3, r3, r4
   d4928:	828b      	strh	r3, [r1, #20]
  av_sample->pm25_st = average->pm25_st/average->N;
   d492a:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d492e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d4930:	fbb3 f3f4 	udiv	r3, r3, r4
   d4934:	82cb      	strh	r3, [r1, #22]
  av_sample->pm100_st = average->pm100_st/average->N;
   d4936:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
   d493a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   d493c:	fbb3 f3f4 	udiv	r3, r3, r4
   d4940:	830b      	strh	r3, [r1, #24]
  av_sample->temp = average->temp /average->N;
   d4942:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   d4946:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
   d494a:	ee07 3a90 	vmov	s15, r3
   d494e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d4956:	ed81 7a07 	vstr	s14, [r1, #28]
  av_sample->humidity = average->humidity/average->N;
   d495a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   d495e:	edd2 6a0e 	vldr	s13, [r2, #56]	; 0x38
   d4962:	ee07 3a90 	vmov	s15, r3
   d4966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d496a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d496e:	ed81 7a08 	vstr	s14, [r1, #32]
  av_sample->pressure = average->pressure/average->N;
   d4972:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   d4976:	edd2 6a0f 	vldr	s13, [r2, #60]	; 0x3c
   d497a:	ee07 3a90 	vmov	s15, r3
   d497e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d4986:	ed81 7a09 	vstr	s14, [r1, #36]	; 0x24
  av_sample->altitude = average->altitude/average->N;
   d498a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   d498e:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
   d4992:	ee07 3a90 	vmov	s15, r3
   d4996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d499e:	ed81 7a0a 	vstr	s14, [r1, #40]	; 0x28
  av_sample->seconds = latest->seconds;
   d49a2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d49a6:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
  av_sample->minute = latest->minute;
   d49aa:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   d49ae:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
  av_sample->hour = latest->hour;
   d49b2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   d49b6:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
  av_sample->day = latest->day;
   d49ba:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   d49be:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
  av_sample->month = latest->month;
   d49c2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   d49c6:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
  av_sample->year = latest->year;
   d49ca:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   d49cc:	864b      	strh	r3, [r1, #50]	; 0x32
}
   d49ce:	bd10      	pop	{r4, pc}

000d49d0 <_Z13reset_averageP12Data_average>:
  average->normalized = false;
   d49d0:	2300      	movs	r3, #0
  average->temp = 0;
   d49d2:	2200      	movs	r2, #0
  average->pt_05 = 0;
   d49d4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  average->pt_25 = 0;
   d49d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
  average->pt_100 = 0;
   d49dc:	e9c0 3305 	strd	r3, r3, [r0, #20]
  average->pm25_env = 0;
   d49e0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  average->pm10_st = 0;
   d49e4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  average->pm100_st = 0;
   d49e8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  average->normalized = false;
   d49ec:	7003      	strb	r3, [r0, #0]
  average->temp = 0;
   d49ee:	6342      	str	r2, [r0, #52]	; 0x34
  average->humidity = 0;
   d49f0:	6382      	str	r2, [r0, #56]	; 0x38
  average->pressure = 0;
   d49f2:	63c2      	str	r2, [r0, #60]	; 0x3c
  average->altitude = 0;
   d49f4:	6402      	str	r2, [r0, #64]	; 0x40
  average->N = 0;
   d49f6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
}
   d49fa:	4770      	bx	lr

000d49fc <_Z11displayInitv>:
void displayInit(){
   d49fc:	b530      	push	{r4, r5, lr}
  epd.clearBuffer();
   d49fe:	4c26      	ldr	r4, [pc, #152]	; (d4a98 <_Z11displayInitv+0x9c>)
void displayInit(){
   d4a00:	b0b7      	sub	sp, #220	; 0xdc
  epd.clearBuffer();
   d4a02:	4620      	mov	r0, r4
   d4a04:	f004 f8ee 	bl	d8be4 <_ZN12Adafruit_EPD11clearBufferEv>
  epd.fillScreen(EPD_WHITE);
   d4a08:	4620      	mov	r0, r4
   d4a0a:	2101      	movs	r1, #1
   d4a0c:	f001 f937 	bl	d5c7e <_ZN12Adafruit_GFX10fillScreenEt>
  const unsigned char myBitmapBitmap [] PROGMEM = {
   d4a10:	4922      	ldr	r1, [pc, #136]	; (d4a9c <_Z11displayInitv+0xa0>)
   d4a12:	22af      	movs	r2, #175	; 0xaf
   d4a14:	a80a      	add	r0, sp, #40	; 0x28
   d4a16:	f009 fedf 	bl	de7d8 <memcpy>
  epd.drawBitmap(95, 40, myBitmapBitmap, 40, 35, EPD_BLACK);
   d4a1a:	2500      	movs	r5, #0
   d4a1c:	2228      	movs	r2, #40	; 0x28
   d4a1e:	2323      	movs	r3, #35	; 0x23
   d4a20:	e9cd 3501 	strd	r3, r5, [sp, #4]
   d4a24:	9200      	str	r2, [sp, #0]
   d4a26:	eb0d 0302 	add.w	r3, sp, r2
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	215f      	movs	r1, #95	; 0x5f
   d4a2e:	f001 f9d9 	bl	d5de4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  char ID[20] = "-";
   d4a32:	232d      	movs	r3, #45	; 0x2d
   d4a34:	4629      	mov	r1, r5
   d4a36:	2210      	movs	r2, #16
   d4a38:	a806      	add	r0, sp, #24
   d4a3a:	9305      	str	r3, [sp, #20]
   d4a3c:	f009 fef4 	bl	de828 <memset>
  EEPROM.get(NAME_ADDR,ID);
   d4a40:	f007 fb90 	bl	dc164 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4a44:	2214      	movs	r2, #20
   d4a46:	eb0d 0102 	add.w	r1, sp, r2
   d4a4a:	200a      	movs	r0, #10
   d4a4c:	f004 fb0e 	bl	d906c <HAL_EEPROM_Get>
  epd.setTextSize(1);
   d4a50:	4620      	mov	r0, r4
   d4a52:	2101      	movs	r1, #1
   d4a54:	f001 fbf4 	bl	d6240 <_ZN12Adafruit_GFX11setTextSizeEh>
  epd.setCursor(97, 80);
   d4a58:	2250      	movs	r2, #80	; 0x50
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	2161      	movs	r1, #97	; 0x61
   d4a5e:	f001 fbec 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.setTextColor(EPD_BLACK);
   d4a62:	4629      	mov	r1, r5
   d4a64:	4620      	mov	r0, r4
   d4a66:	f001 fbf0 	bl	d624a <_ZN12Adafruit_GFX12setTextColorEt>
  epd.print(VERSION_R);
   d4a6a:	490d      	ldr	r1, [pc, #52]	; (d4aa0 <_Z11displayInitv+0xa4>)
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	f006 f95b 	bl	dad28 <_ZN5Print5printEPKc>
  epd.setCursor(73, 90);
   d4a72:	225a      	movs	r2, #90	; 0x5a
   d4a74:	4620      	mov	r0, r4
   d4a76:	2149      	movs	r1, #73	; 0x49
   d4a78:	f001 fbdf 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Device: ");
   d4a7c:	4909      	ldr	r1, [pc, #36]	; (d4aa4 <_Z11displayInitv+0xa8>)
   d4a7e:	4620      	mov	r0, r4
   d4a80:	f006 f952 	bl	dad28 <_ZN5Print5printEPKc>
  epd.print(ID);
   d4a84:	a905      	add	r1, sp, #20
   d4a86:	4620      	mov	r0, r4
   d4a88:	f006 f94e 	bl	dad28 <_ZN5Print5printEPKc>
  epd.display();
   d4a8c:	4620      	mov	r0, r4
   d4a8e:	f004 f9a4 	bl	d8dda <_ZN12Adafruit_EPD7displayEv>
}
   d4a92:	b037      	add	sp, #220	; 0xdc
   d4a94:	bd30      	pop	{r4, r5, pc}
   d4a96:	bf00      	nop
   d4a98:	2003e3d4 	.word	0x2003e3d4
   d4a9c:	000dee7c 	.word	0x000dee7c
   d4aa0:	000dec0a 	.word	0x000dec0a
   d4aa4:	000dec11 	.word	0x000dec11

000d4aa8 <_Z8ble_initv>:


void ble_init(){
   d4aa8:	b510      	push	{r4, lr}
   d4aaa:	b0a0      	sub	sp, #128	; 0x80

  BLE.on();
   d4aac:	f005 fc88 	bl	da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4ab0:	f005 fcd0 	bl	da454 <_ZNK8particle14BleLocalDevice2onEv>

  BLE.addCharacteristic(txCharacteristic);
   d4ab4:	f005 fc84 	bl	da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4ab8:	4a39      	ldr	r2, [pc, #228]	; (d4ba0 <_Z8ble_initv+0xf8>)
   d4aba:	4601      	mov	r1, r0
   d4abc:	a817      	add	r0, sp, #92	; 0x5c
   d4abe:	f006 f80d 	bl	daadc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4ac2:	a817      	add	r0, sp, #92	; 0x5c
   d4ac4:	f005 fd4b 	bl	da55e <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4ac8:	f005 fc7a 	bl	da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4acc:	4a35      	ldr	r2, [pc, #212]	; (d4ba4 <_Z8ble_initv+0xfc>)
   d4ace:	4601      	mov	r1, r0
   d4ad0:	a817      	add	r0, sp, #92	; 0x5c
   d4ad2:	f006 f803 	bl	daadc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4ad6:	a817      	add	r0, sp, #92	; 0x5c
   d4ad8:	f005 fd41 	bl	da55e <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   d4adc:	a817      	add	r0, sp, #92	; 0x5c
   d4ade:	f005 faf3 	bl	da0c8 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d4ae2:	4931      	ldr	r1, [pc, #196]	; (d4ba8 <_Z8ble_initv+0x100>)
   d4ae4:	a80a      	add	r0, sp, #40	; 0x28
   d4ae6:	f005 f99b 	bl	d9e20 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4aea:	a90a      	add	r1, sp, #40	; 0x28
   d4aec:	a80f      	add	r0, sp, #60	; 0x3c
   d4aee:	f005 f997 	bl	d9e20 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4af2:	a80f      	add	r0, sp, #60	; 0x3c
   d4af4:	f005 f9da 	bl	d9eac <_ZNK8particle7BleUuid4typeEv>
   d4af8:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4afa:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4afc:	2c00      	cmp	r4, #0
   d4afe:	d147      	bne.n	d4b90 <_Z8ble_initv+0xe8>
            uint16_t uuid16 = tempUUID.shorted();
   d4b00:	f005 f9f3 	bl	d9eea <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4b04:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4b06:	f8ad 0018 	strh.w	r0, [sp, #24]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4b0a:	2302      	movs	r3, #2
   d4b0c:	aa06      	add	r2, sp, #24
   d4b0e:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4b10:	a817      	add	r0, sp, #92	; 0x5c
   d4b12:	f005 fa91 	bl	da038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4b16:	a802      	add	r0, sp, #8
   d4b18:	f004 fd9c 	bl	d9654 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4b1c:	4923      	ldr	r1, [pc, #140]	; (d4bac <_Z8ble_initv+0x104>)
   d4b1e:	a80f      	add	r0, sp, #60	; 0x3c
   d4b20:	f005 f813 	bl	d9b4a <_ZN6StringC1ERKS_>

  String myID = System.deviceID();
  String LocalName = deviceID + " " + myID;
   d4b24:	4922      	ldr	r1, [pc, #136]	; (d4bb0 <_Z8ble_initv+0x108>)
   d4b26:	a80f      	add	r0, sp, #60	; 0x3c
   d4b28:	f005 f86a 	bl	d9c00 <_ZplRK15StringSumHelperPKc>
   d4b2c:	a902      	add	r1, sp, #8
   d4b2e:	f005 f85b 	bl	d9be8 <_ZplRK15StringSumHelperRK6String>
   d4b32:	4601      	mov	r1, r0
   d4b34:	a806      	add	r0, sp, #24
   d4b36:	f005 f808 	bl	d9b4a <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d4b3a:	a80f      	add	r0, sp, #60	; 0x3c
   d4b3c:	f004 ff7a 	bl	d9a34 <_ZN6StringD1Ev>
  String LocalName2 = "A e06";
   d4b40:	491c      	ldr	r1, [pc, #112]	; (d4bb4 <_Z8ble_initv+0x10c>)
   d4b42:	a80a      	add	r0, sp, #40	; 0x28
   d4b44:	f004 ffc1 	bl	d9aca <_ZN6StringC1EPKc>
  
  data.appendLocalName(deviceID);
   d4b48:	4918      	ldr	r1, [pc, #96]	; (d4bac <_Z8ble_initv+0x104>)
   d4b4a:	a817      	add	r0, sp, #92	; 0x5c
   d4b4c:	f005 fae7 	bl	da11e <_ZN8particle18BleAdvertisingData15appendLocalNameERK6String>
  // 16-bit: Company ID (0xffff)
  // Byte: Internal packet identifier (0x55)
  // 32-bit: Color code

  // Company ID (0xffff internal use/testing)
  buf[offset++] = 0xff;
   d4b50:	4b19      	ldr	r3, [pc, #100]	; (d4bb8 <_Z8ble_initv+0x110>)
   d4b52:	930f      	str	r3, [sp, #60]	; 0x3c
  // Internal packet type. This is arbitrary, but provides an extra
  // check to make sure the data is my data, since we use the 0xffff company
  // code.
  buf[offset++] = 0x55;
  const uint32_t myColor = 0xff0000;
  memcpy(&buf[offset], &myColor, 4);
   d4b54:	2400      	movs	r4, #0
   d4b56:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  // Our specific data, color code
  
  offset += 4;

  data.appendCustomData(buf,offset );
   d4b5a:	a90f      	add	r1, sp, #60	; 0x3c
  memcpy(&buf[offset], &myColor, 4);
   d4b5c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  data.appendCustomData(buf,offset );
   d4b60:	2207      	movs	r2, #7
   d4b62:	4623      	mov	r3, r4
   d4b64:	a817      	add	r0, sp, #92	; 0x5c
  memcpy(&buf[offset], &myColor, 4);
   d4b66:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
  data.appendCustomData(buf,offset );
   d4b6a:	f005 fadb 	bl	da124 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
  BLE.advertise(&data);
   d4b6e:	f005 fc27 	bl	da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4b72:	4622      	mov	r2, r4
   d4b74:	a917      	add	r1, sp, #92	; 0x5c
   d4b76:	f005 fca3 	bl	da4c0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  String LocalName2 = "A e06";
   d4b7a:	a80a      	add	r0, sp, #40	; 0x28
   d4b7c:	f004 ff5a 	bl	d9a34 <_ZN6StringD1Ev>
  String LocalName = deviceID + " " + myID;
   d4b80:	a806      	add	r0, sp, #24
   d4b82:	f004 ff57 	bl	d9a34 <_ZN6StringD1Ev>
  String myID = System.deviceID();
   d4b86:	a802      	add	r0, sp, #8
   d4b88:	f004 ff54 	bl	d9a34 <_ZN6StringD1Ev>
}
   d4b8c:	b020      	add	sp, #128	; 0x80
   d4b8e:	bd10      	pop	{r4, pc}
   d4b90:	f005 f9b0 	bl	d9ef4 <_ZNK8particle7BleUuid8rawBytesEv>
   d4b94:	2300      	movs	r3, #0
   d4b96:	9300      	str	r3, [sp, #0]
   d4b98:	4602      	mov	r2, r0
   d4b9a:	2310      	movs	r3, #16
   d4b9c:	2107      	movs	r1, #7
   d4b9e:	e7b7      	b.n	d4b10 <_Z8ble_initv+0x68>
   d4ba0:	2003e5ac 	.word	0x2003e5ac
   d4ba4:	2003e5a4 	.word	0x2003e5a4
   d4ba8:	2003e2d4 	.word	0x2003e2d4
   d4bac:	2003e3c4 	.word	0x2003e3c4
   d4bb0:	000ded08 	.word	0x000ded08
   d4bb4:	000dec1a 	.word	0x000dec1a
   d4bb8:	0055ffff 	.word	0x0055ffff

000d4bbc <setup>:
{ 
   d4bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pinMode(PM_RST,OUTPUT);
   d4bc0:	2101      	movs	r1, #1
{ 
   d4bc2:	b08a      	sub	sp, #40	; 0x28
  pinMode(PM_RST,OUTPUT);
   d4bc4:	2013      	movs	r0, #19
   d4bc6:	f007 fa8f 	bl	dc0e8 <pinMode>
  pinMode(PP5V0_EN,OUTPUT);
   d4bca:	2101      	movs	r1, #1
   d4bcc:	2008      	movs	r0, #8
   d4bce:	f007 fa8b 	bl	dc0e8 <pinMode>
  digitalWrite(PM_RST,HIGH);
   d4bd2:	2101      	movs	r1, #1
   d4bd4:	2013      	movs	r0, #19
   d4bd6:	f007 fa98 	bl	dc10a <digitalWrite>
  digitalWrite(PP5V0_EN,HIGH);
   d4bda:	2101      	movs	r1, #1
   d4bdc:	2008      	movs	r0, #8
   d4bde:	f007 fa94 	bl	dc10a <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4be2:	4a6e      	ldr	r2, [pc, #440]	; (d4d9c <setup+0x1e0>)
   d4be4:	496e      	ldr	r1, [pc, #440]	; (d4da0 <setup+0x1e4>)
   d4be6:	486f      	ldr	r0, [pc, #444]	; (d4da4 <setup+0x1e8>)
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
   d4be8:	4f6f      	ldr	r7, [pc, #444]	; (d4da8 <setup+0x1ec>)
   d4bea:	4e70      	ldr	r6, [pc, #448]	; (d4dac <setup+0x1f0>)
   d4bec:	4d70      	ldr	r5, [pc, #448]	; (d4db0 <setup+0x1f4>)
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4bee:	f006 fc94 	bl	db51a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4bf2:	4a70      	ldr	r2, [pc, #448]	; (d4db4 <setup+0x1f8>)
   d4bf4:	4970      	ldr	r1, [pc, #448]	; (d4db8 <setup+0x1fc>)
   d4bf6:	486b      	ldr	r0, [pc, #428]	; (d4da4 <setup+0x1e8>)
   d4bf8:	f006 fc8f 	bl	db51a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4bfc:	4a6f      	ldr	r2, [pc, #444]	; (d4dbc <setup+0x200>)
   d4bfe:	4970      	ldr	r1, [pc, #448]	; (d4dc0 <setup+0x204>)
   d4c00:	4868      	ldr	r0, [pc, #416]	; (d4da4 <setup+0x1e8>)
   d4c02:	f006 fc8a 	bl	db51a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4c06:	4a6f      	ldr	r2, [pc, #444]	; (d4dc4 <setup+0x208>)
   d4c08:	496f      	ldr	r1, [pc, #444]	; (d4dc8 <setup+0x20c>)
   d4c0a:	4866      	ldr	r0, [pc, #408]	; (d4da4 <setup+0x1e8>)
   d4c0c:	f006 fc85 	bl	db51a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
   d4c10:	2300      	movs	r3, #0
   d4c12:	2202      	movs	r2, #2
   d4c14:	4639      	mov	r1, r7
   d4c16:	486d      	ldr	r0, [pc, #436]	; (d4dcc <setup+0x210>)
   d4c18:	f004 fcf4 	bl	d9604 <spark_variable>
   d4c1c:	2300      	movs	r3, #0
   d4c1e:	2202      	movs	r2, #2
   d4c20:	4631      	mov	r1, r6
   d4c22:	486b      	ldr	r0, [pc, #428]	; (d4dd0 <setup+0x214>)
   d4c24:	f004 fcee 	bl	d9604 <spark_variable>
   d4c28:	2300      	movs	r3, #0
   d4c2a:	2202      	movs	r2, #2
   d4c2c:	4629      	mov	r1, r5
   d4c2e:	4869      	ldr	r0, [pc, #420]	; (d4dd4 <setup+0x218>)
   d4c30:	f004 fce8 	bl	d9604 <spark_variable>
        spark_variable_t extra = {};
   d4c34:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
   d4c36:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d4c38:	9405      	str	r4, [sp, #20]
        extra.size = sizeof(extra);
   d4c3a:	f8ad 3014 	strh.w	r3, [sp, #20]
        extra.update = update_string_variable;
   d4c3e:	4b66      	ldr	r3, [pc, #408]	; (d4dd8 <setup+0x21c>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4c40:	4966      	ldr	r1, [pc, #408]	; (d4ddc <setup+0x220>)
        extra.update = update_string_variable;
   d4c42:	9306      	str	r3, [sp, #24]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4c44:	2204      	movs	r2, #4
   d4c46:	ab05      	add	r3, sp, #20
   d4c48:	4865      	ldr	r0, [pc, #404]	; (d4de0 <setup+0x224>)
        spark_variable_t extra = {};
   d4c4a:	9407      	str	r4, [sp, #28]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4c4c:	f004 fcda 	bl	d9604 <spark_variable>

#if HAL_PLATFORM_NCP && HAL_PLATFORM_CELLULAR
// FIXME: there should be a separate macro to indicate that this functionality
// is available
    int setActiveSim(SimType sim) {
        return cellular_set_active_sim(sim, nullptr);
   d4c50:	4621      	mov	r1, r4
   d4c52:	2001      	movs	r0, #1
   d4c54:	f004 fbd4 	bl	d9400 <cellular_set_active_sim>
  const uint8_t val = 0x01;
   d4c58:	f04f 0801 	mov.w	r8, #1
        cellular_credentials_clear(nullptr);
   d4c5c:	4620      	mov	r0, r4
   d4c5e:	f004 fbd9 	bl	d9414 <cellular_credentials_clear>
  dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d4c62:	4642      	mov	r2, r8
   d4c64:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d4c68:	f10d 0003 	add.w	r0, sp, #3
  const uint8_t val = 0x01;
   d4c6c:	f88d 8003 	strb.w	r8, [sp, #3]
  dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d4c70:	f004 fbda 	bl	d9428 <dct_write_app_data>
        network_on(*this, 0, 0, NULL);
   d4c74:	485b      	ldr	r0, [pc, #364]	; (d4de4 <setup+0x228>)
   d4c76:	4623      	mov	r3, r4
   d4c78:	4622      	mov	r2, r4
   d4c7a:	4621      	mov	r1, r4
   d4c7c:	6840      	ldr	r0, [r0, #4]
   d4c7e:	f004 fc91 	bl	d95a4 <network_on>
        spark_cloud_flag_connect();
   d4c82:	f004 fcd7 	bl	d9634 <spark_cloud_flag_connect>
  delay(1000);
   d4c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4c8a:	f006 fa63 	bl	db154 <delay>
      dataMode_{dataMode}
   d4c8e:	4b56      	ldr	r3, [pc, #344]	; (d4de8 <setup+0x22c>)
   d4c90:	9305      	str	r3, [sp, #20]
  SD.begin(SD_CS);
   d4c92:	aa05      	add	r2, sp, #20
   d4c94:	4b55      	ldr	r3, [pc, #340]	; (d4dec <setup+0x230>)
   d4c96:	4856      	ldr	r0, [pc, #344]	; (d4df0 <setup+0x234>)
   d4c98:	9307      	str	r3, [sp, #28]
   d4c9a:	2102      	movs	r1, #2
   d4c9c:	f88d 4018 	strb.w	r4, [sp, #24]
   d4ca0:	f8ad 8020 	strh.w	r8, [sp, #32]
   d4ca4:	f7ff fb48 	bl	d4338 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
  delay(1000);
   d4ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4cac:	f006 fa52 	bl	db154 <delay>
  bme.begin();
   d4cb0:	2176      	movs	r1, #118	; 0x76
   d4cb2:	4850      	ldr	r0, [pc, #320]	; (d4df4 <setup+0x238>)
   d4cb4:	f001 ff10 	bl	d6ad8 <_ZN15Adafruit_BME2805beginEh>
  pm.begin();
   d4cb8:	484f      	ldr	r0, [pc, #316]	; (d4df8 <setup+0x23c>)
   d4cba:	f000 feae 	bl	d5a1a <_ZN7PMSA0035beginEv>
  epd.begin();
   d4cbe:	4641      	mov	r1, r8
   d4cc0:	484e      	ldr	r0, [pc, #312]	; (d4dfc <setup+0x240>)
   d4cc2:	f003 fc6b 	bl	d859c <_ZN16Adafruit_SSD16755beginEb>
  delay(5000);
   d4cc6:	f241 3088 	movw	r0, #5000	; 0x1388
   d4cca:	f006 fa43 	bl	db154 <delay>
  EEPROM.get(NAME_ADDR,ID);
   d4cce:	f007 fa49 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d4cd2:	2214      	movs	r2, #20
   d4cd4:	eb0d 0102 	add.w	r1, sp, r2
   d4cd8:	200a      	movs	r0, #10
   d4cda:	f004 f9c7 	bl	d906c <HAL_EEPROM_Get>
  deviceID = String(ID);
   d4cde:	a905      	add	r1, sp, #20
   d4ce0:	a801      	add	r0, sp, #4
   d4ce2:	f004 fef2 	bl	d9aca <_ZN6StringC1EPKc>
   d4ce6:	a901      	add	r1, sp, #4
   d4ce8:	483c      	ldr	r0, [pc, #240]	; (d4ddc <setup+0x220>)
   d4cea:	f004 ff39 	bl	d9b60 <_ZN6StringaSEOS_>
   d4cee:	a801      	add	r0, sp, #4
   d4cf0:	f004 fea0 	bl	d9a34 <_ZN6StringD1Ev>
  EEPROM.get(DUTY_PUB_ADDR,duty_check);
   d4cf4:	f007 fa36 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d4cf8:	2202      	movs	r2, #2
   d4cfa:	a901      	add	r1, sp, #4
   d4cfc:	f240 1009 	movw	r0, #265	; 0x109
   d4d00:	f004 f9b4 	bl	d906c <HAL_EEPROM_Get>
  if(duty_check != 0xFFFF){
   d4d04:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   d4d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4d0c:	429a      	cmp	r2, r3
   d4d0e:	d024      	beq.n	d4d5a <setup+0x19e>
    EEPROM.get(DUTY_SCR_ADDR,DISPLAY_REFRESH);
   d4d10:	f007 fa28 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d4d14:	2204      	movs	r2, #4
   d4d16:	4639      	mov	r1, r7
   d4d18:	20ff      	movs	r0, #255	; 0xff
   d4d1a:	f004 f9a7 	bl	d906c <HAL_EEPROM_Get>
    EEPROM.get(DUTY_SEN_ADDR,SENSOR_CYCLE);
   d4d1e:	f007 fa21 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d4d22:	2204      	movs	r2, #4
   d4d24:	4631      	mov	r1, r6
   d4d26:	f44f 7082 	mov.w	r0, #260	; 0x104
   d4d2a:	f004 f99f 	bl	d906c <HAL_EEPROM_Get>
    EEPROM.get(DUTY_PUB_ADDR,PUBLISH_RATE);
   d4d2e:	f007 fa19 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d4d32:	2204      	movs	r2, #4
   d4d34:	4629      	mov	r1, r5
   d4d36:	f240 1009 	movw	r0, #265	; 0x109
   d4d3a:	f004 f997 	bl	d906c <HAL_EEPROM_Get>
  ble_init();
   d4d3e:	f7ff feb3 	bl	d4aa8 <_Z8ble_initv>
  PHONE_BACKUP_REQUEST = true;
   d4d42:	4b2f      	ldr	r3, [pc, #188]	; (d4e00 <setup+0x244>)
   d4d44:	2201      	movs	r2, #1
   d4d46:	701a      	strb	r2, [r3, #0]
  displayInit();  
   d4d48:	f7ff fe58 	bl	d49fc <_Z11displayInitv>
  delay(5000);
   d4d4c:	f241 3088 	movw	r0, #5000	; 0x1388
   d4d50:	f006 fa00 	bl	db154 <delay>
}
   d4d54:	b00a      	add	sp, #40	; 0x28
   d4d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DISPLAY_REFRESH = 60*15;
   d4d5a:	f44f 7361 	mov.w	r3, #900	; 0x384
   d4d5e:	603b      	str	r3, [r7, #0]
    SENSOR_CYCLE = 30;
   d4d60:	231e      	movs	r3, #30
   d4d62:	6033      	str	r3, [r6, #0]
    PUBLISH_RATE = 36000;
   d4d64:	f648 43a0 	movw	r3, #36000	; 0x8ca0
   d4d68:	602b      	str	r3, [r5, #0]
    EEPROM.put(DUTY_SCR_ADDR,DISPLAY_REFRESH);
   d4d6a:	f007 f9fb 	bl	dc164 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4d6e:	4639      	mov	r1, r7
   d4d70:	2204      	movs	r2, #4
   d4d72:	20ff      	movs	r0, #255	; 0xff
   d4d74:	f004 f982 	bl	d907c <HAL_EEPROM_Put>
    EEPROM.put(DUTY_SEN_ADDR,SENSOR_CYCLE);
   d4d78:	f007 f9f4 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d4d7c:	4631      	mov	r1, r6
   d4d7e:	2204      	movs	r2, #4
   d4d80:	f44f 7082 	mov.w	r0, #260	; 0x104
   d4d84:	f004 f97a 	bl	d907c <HAL_EEPROM_Put>
    EEPROM.put(DUTY_PUB_ADDR,PUBLISH_RATE);
   d4d88:	f007 f9ec 	bl	dc164 <_Z21__fetch_global_EEPROMv>
   d4d8c:	2204      	movs	r2, #4
   d4d8e:	4629      	mov	r1, r5
   d4d90:	f240 1009 	movw	r0, #265	; 0x109
   d4d94:	f004 f972 	bl	d907c <HAL_EEPROM_Put>
        return t;
   d4d98:	e7d1      	b.n	d4d3e <setup+0x182>
   d4d9a:	bf00      	nop
   d4d9c:	000dec20 	.word	0x000dec20
   d4da0:	000d41bd 	.word	0x000d41bd
   d4da4:	000db4ef 	.word	0x000db4ef
   d4da8:	2003de30 	.word	0x2003de30
   d4dac:	2003e2c4 	.word	0x2003e2c4
   d4db0:	2003de38 	.word	0x2003de38
   d4db4:	000dec2e 	.word	0x000dec2e
   d4db8:	000d4235 	.word	0x000d4235
   d4dbc:	000dec45 	.word	0x000dec45
   d4dc0:	000d427d 	.word	0x000d427d
   d4dc4:	000dec5c 	.word	0x000dec5c
   d4dc8:	000d41ed 	.word	0x000d41ed
   d4dcc:	000dec72 	.word	0x000dec72
   d4dd0:	000dec87 	.word	0x000dec87
   d4dd4:	000dec9a 	.word	0x000dec9a
   d4dd8:	000d40c9 	.word	0x000d40c9
   d4ddc:	2003e3c4 	.word	0x2003e3c4
   d4de0:	000deca7 	.word	0x000deca7
   d4de4:	2003e660 	.word	0x2003e660
   d4de8:	000dee48 	.word	0x000dee48
   d4dec:	02faf080 	.word	0x02faf080
   d4df0:	2003de3c 	.word	0x2003de3c
   d4df4:	2003e384 	.word	0x2003e384
   d4df8:	2003e498 	.word	0x2003e498
   d4dfc:	2003e3d4 	.word	0x2003e3d4
   d4e00:	2003de34 	.word	0x2003de34

000d4e04 <_Z12write_to_blePc>:


void write_to_ble(char *packet){
   d4e04:	b570      	push	{r4, r5, r6, lr}
   d4e06:	b0c4      	sub	sp, #272	; 0x110
   d4e08:	4605      	mov	r5, r0
   d4e0a:	2400      	movs	r4, #0
  uint8_t txBuf[UART_TX_BUF_SIZE];
  size_t txLen = 0;

  for (size_t i = 0; i < strlen(packet); i++)
  {
    txBuf[txLen++] = packet[i];
   d4e0c:	ae01      	add	r6, sp, #4
  for (size_t i = 0; i < strlen(packet); i++)
   d4e0e:	4628      	mov	r0, r5
   d4e10:	f009 fd73 	bl	de8fa <strlen>
   d4e14:	42a0      	cmp	r0, r4
   d4e16:	d903      	bls.n	d4e20 <_Z12write_to_blePc+0x1c>
    txBuf[txLen++] = packet[i];
   d4e18:	5d2b      	ldrb	r3, [r5, r4]
   d4e1a:	55a3      	strb	r3, [r4, r6]
  for (size_t i = 0; i < strlen(packet); i++)
   d4e1c:	3401      	adds	r4, #1
   d4e1e:	e7f6      	b.n	d4e0e <_Z12write_to_blePc+0xa>
    //Serial.write(txBuf[txLen - 1]);
  }
  if (txLen > 0)
   d4e20:	b12c      	cbz	r4, d4e2e <_Z12write_to_blePc+0x2a>
  {
    txCharacteristic.setValue(txBuf, txLen);
   d4e22:	4804      	ldr	r0, [pc, #16]	; (d4e34 <_Z12write_to_blePc+0x30>)
   d4e24:	2300      	movs	r3, #0
   d4e26:	4622      	mov	r2, r4
   d4e28:	a901      	add	r1, sp, #4
   d4e2a:	f005 f9d3 	bl	da1d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
  }

}
   d4e2e:	b044      	add	sp, #272	; 0x110
   d4e30:	bd70      	pop	{r4, r5, r6, pc}
   d4e32:	bf00      	nop
   d4e34:	2003e5ac 	.word	0x2003e5ac

000d4e38 <_Z10backUp2BLEPc>:
  function takes in a blank char array and uses it to store output from the sd card
  global variables used: BACKUPFILE,SAMPLE_CHAR_SIZE,PHONE_BACKUP_REQUEST
  functions: write_to_ble
  Uses the File class for reading from the sd card but the SDFat class to delete the file
*/
void backUp2BLE(char *output){
   d4e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e3a:	b091      	sub	sp, #68	; 0x44
    Stream() {_timeout=1000;}
   d4e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e40:	9205      	str	r2, [sp, #20]
  File() {}
   d4e42:	4a27      	ldr	r2, [pc, #156]	; (d4ee0 <_Z10backUp2BLEPc+0xa8>)
   d4e44:	4927      	ldr	r1, [pc, #156]	; (d4ee4 <_Z10backUp2BLEPc+0xac>)
   d4e46:	9203      	str	r2, [sp, #12]
   d4e48:	2300      	movs	r3, #0
   d4e4a:	4a27      	ldr	r2, [pc, #156]	; (d4ee8 <_Z10backUp2BLEPc+0xb0>)
   d4e4c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d4e50:	4607      	mov	r7, r0
class File : public FatFile, public Stream {
   d4e52:	ad07      	add	r5, sp, #28
   d4e54:	a807      	add	r0, sp, #28
    Print() : write_error(0) {}
   d4e56:	9304      	str	r3, [sp, #16]
   d4e58:	f002 fc99 	bl	d778e <_ZN7FatFile4openEPS_PKci>
   d4e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e5e:	4e23      	ldr	r6, [pc, #140]	; (d4eec <_Z10backUp2BLEPc+0xb4>)
   d4e60:	f106 0410 	add.w	r4, r6, #16
   d4e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e6a:	682b      	ldr	r3, [r5, #0]
   d4e6c:	6023      	str	r3, [r4, #0]
class Print
   d4e6e:	9b04      	ldr	r3, [sp, #16]
   d4e70:	6073      	str	r3, [r6, #4]
class Stream : public Print
   d4e72:	9b05      	ldr	r3, [sp, #20]
   d4e74:	60b3      	str	r3, [r6, #8]
   d4e76:	9b06      	ldr	r3, [sp, #24]
   d4e78:	60f3      	str	r3, [r6, #12]
  myFile = SD.open(BACKUPFILE);
  if(myFile){
   d4e7a:	7c33      	ldrb	r3, [r6, #16]
   d4e7c:	b35b      	cbz	r3, d4ed6 <_Z10backUp2BLEPc+0x9e>
    char start[12] ="BACKUPSTART";
   d4e7e:	4a1c      	ldr	r2, [pc, #112]	; (d4ef0 <_Z10backUp2BLEPc+0xb8>)
   d4e80:	6810      	ldr	r0, [r2, #0]
   d4e82:	6851      	ldr	r1, [r2, #4]
   d4e84:	ab03      	add	r3, sp, #12
   d4e86:	c303      	stmia	r3!, {r0, r1}
   d4e88:	6890      	ldr	r0, [r2, #8]
    char end[10] ="BACKUPEND";
   d4e8a:	4a1a      	ldr	r2, [pc, #104]	; (d4ef4 <_Z10backUp2BLEPc+0xbc>)
    char start[12] ="BACKUPSTART";
   d4e8c:	6018      	str	r0, [r3, #0]
    char end[10] ="BACKUPEND";
   d4e8e:	6851      	ldr	r1, [r2, #4]
   d4e90:	6810      	ldr	r0, [r2, #0]
   d4e92:	8912      	ldrh	r2, [r2, #8]
   d4e94:	466b      	mov	r3, sp
   d4e96:	c303      	stmia	r3!, {r0, r1}
    write_to_ble(start);
   d4e98:	a803      	add	r0, sp, #12
    char end[10] ="BACKUPEND";
   d4e9a:	801a      	strh	r2, [r3, #0]
    write_to_ble(start);
   d4e9c:	f7ff ffb2 	bl	d4e04 <_Z12write_to_blePc>
    while (myFile.available()) {
      if(!myFile.fgets(output,SAMPLE_CHAR_SIZE)){
   d4ea0:	3c20      	subs	r4, #32
    while (myFile.available()) {
   d4ea2:	4630      	mov	r0, r6
   d4ea4:	f7ff f913 	bl	d40ce <_ZN4File9availableEv>
   d4ea8:	b158      	cbz	r0, d4ec2 <_Z10backUp2BLEPc+0x8a>
      if(!myFile.fgets(output,SAMPLE_CHAR_SIZE)){
   d4eaa:	2300      	movs	r3, #0
   d4eac:	f240 1209 	movw	r2, #265	; 0x109
   d4eb0:	4639      	mov	r1, r7
   d4eb2:	4620      	mov	r0, r4
   d4eb4:	f002 fb16 	bl	d74e4 <_ZN7FatFile5fgetsEPcsS0_>
   d4eb8:	b118      	cbz	r0, d4ec2 <_Z10backUp2BLEPc+0x8a>
        break;
      }
      write_to_ble(output);
   d4eba:	4638      	mov	r0, r7
   d4ebc:	f7ff ffa2 	bl	d4e04 <_Z12write_to_blePc>
    while (myFile.available()) {
   d4ec0:	e7ef      	b.n	d4ea2 <_Z10backUp2BLEPc+0x6a>
    }
    myFile.close();
   d4ec2:	480d      	ldr	r0, [pc, #52]	; (d4ef8 <_Z10backUp2BLEPc+0xc0>)
   d4ec4:	f002 fc5c 	bl	d7780 <_ZN7FatFile5closeEv>
    write_to_ble(end);
   d4ec8:	4668      	mov	r0, sp
   d4eca:	f7ff ff9b 	bl	d4e04 <_Z12write_to_blePc>
    return FatFile::remove(vwd(), path);
   d4ece:	4906      	ldr	r1, [pc, #24]	; (d4ee8 <_Z10backUp2BLEPc+0xb0>)
   d4ed0:	4804      	ldr	r0, [pc, #16]	; (d4ee4 <_Z10backUp2BLEPc+0xac>)
   d4ed2:	f002 fca9 	bl	d7828 <_ZN7FatFile6removeEPS_PKc>
  // else Serial.println("backup faied");
  /*
    for cases where the phone starts and the backup file does not exist, SD.open
    will fail and the backup request will be turned off.
  */
    PHONE_BACKUP_REQUEST = false;
   d4ed6:	4b09      	ldr	r3, [pc, #36]	; (d4efc <_Z10backUp2BLEPc+0xc4>)
   d4ed8:	2200      	movs	r2, #0
   d4eda:	701a      	strb	r2, [r3, #0]
}
   d4edc:	b011      	add	sp, #68	; 0x44
   d4ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ee0:	000dee5c 	.word	0x000dee5c
   d4ee4:	2003e278 	.word	0x2003e278
   d4ee8:	000decb1 	.word	0x000decb1
   d4eec:	2003e464 	.word	0x2003e464
   d4ef0:	000decbc 	.word	0x000decbc
   d4ef4:	000decc8 	.word	0x000decc8
   d4ef8:	2003e474 	.word	0x2003e474
   d4efc:	2003de34 	.word	0x2003de34

000d4f00 <_Z13record_sample17SampleDestination>:
void record_sample(SampleDestination dest){
   d4f00:	b510      	push	{r4, lr}
   d4f02:	b0ce      	sub	sp, #312	; 0x138
   d4f04:	2804      	cmp	r0, #4
   d4f06:	d81a      	bhi.n	d4f3e <_Z13record_sample17SampleDestination+0x3e>
   d4f08:	e8df f000 	tbb	[pc, r0]
   d4f0c:	551b2903 	.word	0x551b2903
   d4f10:	78          	.byte	0x78
   d4f11:	00          	.byte	0x00
      sample_write(&latest_sample,data);
   d4f12:	483c      	ldr	r0, [pc, #240]	; (d5004 <_Z13record_sample17SampleDestination+0x104>)
   d4f14:	a90b      	add	r1, sp, #44	; 0x2c
   d4f16:	f7ff fb23 	bl	d4560 <_Z12sample_writeP6SamplePc>
      writeToFile(OUTPUTFILE, data);
   d4f1a:	493b      	ldr	r1, [pc, #236]	; (d5008 <_Z13record_sample17SampleDestination+0x108>)
   d4f1c:	a803      	add	r0, sp, #12
   d4f1e:	f004 fdd4 	bl	d9aca <_ZN6StringC1EPKc>
   d4f22:	a90b      	add	r1, sp, #44	; 0x2c
   d4f24:	a807      	add	r0, sp, #28
   d4f26:	f004 fdd0 	bl	d9aca <_ZN6StringC1EPKc>
   d4f2a:	a907      	add	r1, sp, #28
   d4f2c:	a803      	add	r0, sp, #12
   d4f2e:	f7ff fba1 	bl	d4674 <_Z11writeToFile6StringS_>
   d4f32:	a807      	add	r0, sp, #28
   d4f34:	f004 fd7e 	bl	d9a34 <_ZN6StringD1Ev>
   d4f38:	a803      	add	r0, sp, #12
   d4f3a:	f004 fd7b 	bl	d9a34 <_ZN6StringD1Ev>
}
   d4f3e:	b04e      	add	sp, #312	; 0x138
   d4f40:	bd10      	pop	{r4, pc}
      sample_write(&latest_sample,data);
   d4f42:	a90b      	add	r1, sp, #44	; 0x2c
   d4f44:	482f      	ldr	r0, [pc, #188]	; (d5004 <_Z13record_sample17SampleDestination+0x104>)
   d4f46:	f7ff fb0b 	bl	d4560 <_Z12sample_writeP6SamplePc>
      if (BLE.connected()){
   d4f4a:	f005 fa39 	bl	da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4f4e:	f005 fad4 	bl	da4fa <_ZNK8particle14BleLocalDevice9connectedEv>
   d4f52:	2800      	cmp	r0, #0
   d4f54:	d0f3      	beq.n	d4f3e <_Z13record_sample17SampleDestination+0x3e>
        write_to_ble(data);
   d4f56:	a80b      	add	r0, sp, #44	; 0x2c
   d4f58:	f7ff ff54 	bl	d4e04 <_Z12write_to_blePc>
   d4f5c:	e7ef      	b.n	d4f3e <_Z13record_sample17SampleDestination+0x3e>
      take_average(&latest_sample, &av_sample_CLOUD, &run_average_CLOUD);
   d4f5e:	4a2b      	ldr	r2, [pc, #172]	; (d500c <_Z13record_sample17SampleDestination+0x10c>)
   d4f60:	492b      	ldr	r1, [pc, #172]	; (d5010 <_Z13record_sample17SampleDestination+0x110>)
   d4f62:	4828      	ldr	r0, [pc, #160]	; (d5004 <_Z13record_sample17SampleDestination+0x104>)
   d4f64:	f7ff fca4 	bl	d48b0 <_Z12take_averageP6SampleS0_P12Data_average>
      sample_write(&av_sample_CLOUD,data);
   d4f68:	4829      	ldr	r0, [pc, #164]	; (d5010 <_Z13record_sample17SampleDestination+0x110>)
   d4f6a:	a90b      	add	r1, sp, #44	; 0x2c
   d4f6c:	f7ff faf8 	bl	d4560 <_Z12sample_writeP6SamplePc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4f70:	4b28      	ldr	r3, [pc, #160]	; (d5014 <_Z13record_sample17SampleDestination+0x114>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4f72:	4929      	ldr	r1, [pc, #164]	; (d5018 <_Z13record_sample17SampleDestination+0x118>)
   d4f74:	781b      	ldrb	r3, [r3, #0]
   d4f76:	f88d 3000 	strb.w	r3, [sp]
   d4f7a:	aa0b      	add	r2, sp, #44	; 0x2c
   d4f7c:	233c      	movs	r3, #60	; 0x3c
   d4f7e:	a807      	add	r0, sp, #28
   d4f80:	f006 fbbe 	bl	db700 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4f84:	9c08      	ldr	r4, [sp, #32]
   d4f86:	b17c      	cbz	r4, d4fa8 <_Z13record_sample17SampleDestination+0xa8>
      if (--_M_use_count == 0)
   d4f88:	6863      	ldr	r3, [r4, #4]
   d4f8a:	3b01      	subs	r3, #1
   d4f8c:	6063      	str	r3, [r4, #4]
   d4f8e:	b95b      	cbnz	r3, d4fa8 <_Z13record_sample17SampleDestination+0xa8>
          _M_dispose();
   d4f90:	6823      	ldr	r3, [r4, #0]
   d4f92:	4620      	mov	r0, r4
   d4f94:	689b      	ldr	r3, [r3, #8]
   d4f96:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4f98:	68a3      	ldr	r3, [r4, #8]
   d4f9a:	3b01      	subs	r3, #1
   d4f9c:	60a3      	str	r3, [r4, #8]
   d4f9e:	b91b      	cbnz	r3, d4fa8 <_Z13record_sample17SampleDestination+0xa8>
            _M_destroy();
   d4fa0:	6823      	ldr	r3, [r4, #0]
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	68db      	ldr	r3, [r3, #12]
   d4fa6:	4798      	blx	r3
        av_sample_CLOUD.PUB_CLOUD = true;
   d4fa8:	4b19      	ldr	r3, [pc, #100]	; (d5010 <_Z13record_sample17SampleDestination+0x110>)
      reset_average(&run_average_CLOUD);
   d4faa:	4818      	ldr	r0, [pc, #96]	; (d500c <_Z13record_sample17SampleDestination+0x10c>)
        av_sample_CLOUD.PUB_CLOUD = true;
   d4fac:	2201      	movs	r2, #1
   d4fae:	701a      	strb	r2, [r3, #0]
        reset_average(&run_average_BLE);
   d4fb0:	f7ff fd0e 	bl	d49d0 <_Z13reset_averageP12Data_average>
   d4fb4:	e7c3      	b.n	d4f3e <_Z13record_sample17SampleDestination+0x3e>
      if(!BLE.connected()){
   d4fb6:	f005 fa03 	bl	da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4fba:	f005 fa9e 	bl	da4fa <_ZNK8particle14BleLocalDevice9connectedEv>
   d4fbe:	2800      	cmp	r0, #0
   d4fc0:	d1bd      	bne.n	d4f3e <_Z13record_sample17SampleDestination+0x3e>
        take_average(&latest_sample, &av_sample_BLE, &run_average_BLE);
   d4fc2:	4a16      	ldr	r2, [pc, #88]	; (d501c <_Z13record_sample17SampleDestination+0x11c>)
   d4fc4:	4916      	ldr	r1, [pc, #88]	; (d5020 <_Z13record_sample17SampleDestination+0x120>)
   d4fc6:	480f      	ldr	r0, [pc, #60]	; (d5004 <_Z13record_sample17SampleDestination+0x104>)
   d4fc8:	f7ff fc72 	bl	d48b0 <_Z12take_averageP6SampleS0_P12Data_average>
        sample_write(&av_sample_BLE,data);
   d4fcc:	4814      	ldr	r0, [pc, #80]	; (d5020 <_Z13record_sample17SampleDestination+0x120>)
   d4fce:	a90b      	add	r1, sp, #44	; 0x2c
   d4fd0:	f7ff fac6 	bl	d4560 <_Z12sample_writeP6SamplePc>
        writeToFile(BACKUPFILE,data);
   d4fd4:	4913      	ldr	r1, [pc, #76]	; (d5024 <_Z13record_sample17SampleDestination+0x124>)
   d4fd6:	a803      	add	r0, sp, #12
   d4fd8:	f004 fd77 	bl	d9aca <_ZN6StringC1EPKc>
   d4fdc:	a90b      	add	r1, sp, #44	; 0x2c
   d4fde:	a807      	add	r0, sp, #28
   d4fe0:	f004 fd73 	bl	d9aca <_ZN6StringC1EPKc>
   d4fe4:	a907      	add	r1, sp, #28
   d4fe6:	a803      	add	r0, sp, #12
   d4fe8:	f7ff fb44 	bl	d4674 <_Z11writeToFile6StringS_>
   d4fec:	a807      	add	r0, sp, #28
   d4fee:	f004 fd21 	bl	d9a34 <_ZN6StringD1Ev>
   d4ff2:	a803      	add	r0, sp, #12
   d4ff4:	f004 fd1e 	bl	d9a34 <_ZN6StringD1Ev>
        reset_average(&run_average_BLE);
   d4ff8:	4808      	ldr	r0, [pc, #32]	; (d501c <_Z13record_sample17SampleDestination+0x11c>)
   d4ffa:	e7d9      	b.n	d4fb0 <_Z13record_sample17SampleDestination+0xb0>
        backUp2BLE(data);
   d4ffc:	a80b      	add	r0, sp, #44	; 0x2c
   d4ffe:	f7ff ff1b 	bl	d4e38 <_Z10backUp2BLEPc>
}
   d5002:	e79c      	b.n	d4f3e <_Z13record_sample17SampleDestination+0x3e>
   d5004:	2003e42c 	.word	0x2003e42c
   d5008:	000decd2 	.word	0x000decd2
   d500c:	2003e55c 	.word	0x2003e55c
   d5010:	2003e34c 	.word	0x2003e34c
   d5014:	2003e310 	.word	0x2003e310
   d5018:	000decdb 	.word	0x000decdb
   d501c:	2003e514 	.word	0x2003e514
   d5020:	2003e314 	.word	0x2003e314
   d5024:	000decb1 	.word	0x000decb1

000d5028 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d5028:	b530      	push	{r4, r5, lr}
   d502a:	b085      	sub	sp, #20
   d502c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d502e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d5030:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d5032:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d5034:	f004 fa40 	bl	d94b8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d5038:	b9b0      	cbnz	r0, d5068 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d503a:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d503c:	b10c      	cbz	r4, d5042 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d503e:	6923      	ldr	r3, [r4, #16]
   d5040:	b923      	cbnz	r3, d504c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d5042:	4a0a      	ldr	r2, [pc, #40]	; (d506c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d5044:	2100      	movs	r1, #0
   d5046:	200a      	movs	r0, #10
   d5048:	f004 fa26 	bl	d9498 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d504c:	2300      	movs	r3, #0
   d504e:	f8ad 3006 	strh.w	r3, [sp, #6]
   d5052:	230c      	movs	r3, #12
   d5054:	f8ad 3004 	strh.w	r3, [sp, #4]
   d5058:	2304      	movs	r3, #4
   d505a:	9303      	str	r3, [sp, #12]
   d505c:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d505e:	6923      	ldr	r3, [r4, #16]
   d5060:	aa01      	add	r2, sp, #4
   d5062:	2101      	movs	r1, #1
   d5064:	4620      	mov	r0, r4
   d5066:	4798      	blx	r3
}
   d5068:	b005      	add	sp, #20
   d506a:	bd30      	pop	{r4, r5, pc}
   d506c:	000d902d 	.word	0x000d902d

000d5070 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   d5070:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d5072:	2003      	movs	r0, #3
   d5074:	a901      	add	r1, sp, #4
   d5076:	f7ff ffd7 	bl	d5028 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d507a:	b940      	cbnz	r0, d508e <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d507c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d5080:	ee00 3a10 	vmov	s0, r3
   d5084:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   d5088:	b003      	add	sp, #12
   d508a:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   d508e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d5092:	e7f9      	b.n	d5088 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000d5094 <_Z11take_sampleP6Sample>:
void take_sample(Sample* latest){
   d5094:	b510      	push	{r4, lr}
   d5096:	4604      	mov	r4, r0
  pm.poll();
   d5098:	4837      	ldr	r0, [pc, #220]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d509a:	f000 fccb 	bl	d5a34 <_ZN7PMSA0034pollEv>
  if (Time.isValid()){
   d509e:	f005 ffdd 	bl	db05c <_ZN9TimeClass7isValidEv>
   d50a2:	b1b0      	cbz	r0, d50d2 <_Z11take_sampleP6Sample+0x3e>
    latest->seconds = Time.second();
   d50a4:	f006 f820 	bl	db0e8 <_ZN9TimeClass6secondEv>
   d50a8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    latest->minute = Time.minute();
   d50ac:	f006 f810 	bl	db0d0 <_ZN9TimeClass6minuteEv>
   d50b0:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    latest->hour = Time.hour();
   d50b4:	f006 f800 	bl	db0b8 <_ZN9TimeClass4hourEv>
   d50b8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    latest->day = Time.day();
   d50bc:	f006 f820 	bl	db100 <_ZN9TimeClass3dayEv>
   d50c0:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    latest->month = Time.month();
   d50c4:	f006 f828 	bl	db118 <_ZN9TimeClass5monthEv>
   d50c8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    latest->year = Time.year();
   d50cc:	f006 f82c 	bl	db128 <_ZN9TimeClass4yearEv>
   d50d0:	8660      	strh	r0, [r4, #50]	; 0x32
  latest->pt_03 = pm.pt_03();
   d50d2:	4829      	ldr	r0, [pc, #164]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d50d4:	f000 fce4 	bl	d5aa0 <_ZN7PMSA0035pt_03Ev>
   d50d8:	8060      	strh	r0, [r4, #2]
  latest->pt_05 = pm.pt_05();
   d50da:	4827      	ldr	r0, [pc, #156]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d50dc:	f000 fce2 	bl	d5aa4 <_ZN7PMSA0035pt_05Ev>
   d50e0:	80a0      	strh	r0, [r4, #4]
  latest->pt_10 = pm.pt_10();
   d50e2:	4825      	ldr	r0, [pc, #148]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d50e4:	f000 fce0 	bl	d5aa8 <_ZN7PMSA0035pt_10Ev>
   d50e8:	80e0      	strh	r0, [r4, #6]
  latest->pt_25 = pm.pt_25();
   d50ea:	4823      	ldr	r0, [pc, #140]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d50ec:	f000 fcde 	bl	d5aac <_ZN7PMSA0035pt_25Ev>
   d50f0:	8120      	strh	r0, [r4, #8]
  latest->pt_50 = pm.pt_50();
   d50f2:	4821      	ldr	r0, [pc, #132]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d50f4:	f000 fcdc 	bl	d5ab0 <_ZN7PMSA0035pt_50Ev>
   d50f8:	8160      	strh	r0, [r4, #10]
  latest->pt_100 = pm.pt_100();
   d50fa:	481f      	ldr	r0, [pc, #124]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d50fc:	f000 fcda 	bl	d5ab4 <_ZN7PMSA0036pt_100Ev>
   d5100:	81a0      	strh	r0, [r4, #12]
  latest->pm10_env = pm.pm10_env();
   d5102:	481d      	ldr	r0, [pc, #116]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d5104:	f000 fcc6 	bl	d5a94 <_ZN7PMSA0038pm10_envEv>
   d5108:	81e0      	strh	r0, [r4, #14]
  latest->pm25_env = pm.pm25_env();
   d510a:	481b      	ldr	r0, [pc, #108]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d510c:	f000 fcc4 	bl	d5a98 <_ZN7PMSA0038pm25_envEv>
   d5110:	8220      	strh	r0, [r4, #16]
  latest->pm100_env = pm.pm100_env();
   d5112:	4819      	ldr	r0, [pc, #100]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d5114:	f000 fcc2 	bl	d5a9c <_ZN7PMSA0039pm100_envEv>
   d5118:	8260      	strh	r0, [r4, #18]
  latest->pm10_st = pm.pm10_st();
   d511a:	4817      	ldr	r0, [pc, #92]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d511c:	f000 fcb4 	bl	d5a88 <_ZN7PMSA0037pm10_stEv>
   d5120:	82a0      	strh	r0, [r4, #20]
  latest->pm25_st = pm.pm25_st();
   d5122:	4815      	ldr	r0, [pc, #84]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d5124:	f000 fcb2 	bl	d5a8c <_ZN7PMSA0037pm25_stEv>
   d5128:	82e0      	strh	r0, [r4, #22]
  latest->pm100_st = pm.pm100_st();
   d512a:	4813      	ldr	r0, [pc, #76]	; (d5178 <_Z11take_sampleP6Sample+0xe4>)
   d512c:	f000 fcb0 	bl	d5a90 <_ZN7PMSA0038pm100_stEv>
   d5130:	8320      	strh	r0, [r4, #24]
  latest->temp = bme.readTemperature();
   d5132:	4812      	ldr	r0, [pc, #72]	; (d517c <_Z11take_sampleP6Sample+0xe8>)
   d5134:	f001 f96e 	bl	d6414 <_ZN15Adafruit_BME28015readTemperatureEv>
  latest->humidity = bme.readHumidity();
   d5138:	4810      	ldr	r0, [pc, #64]	; (d517c <_Z11take_sampleP6Sample+0xe8>)
  latest->temp = bme.readTemperature();
   d513a:	ed84 0a07 	vstr	s0, [r4, #28]
  latest->humidity = bme.readHumidity();
   d513e:	f001 fb19 	bl	d6774 <_ZN15Adafruit_BME28012readHumidityEv>
  latest->pressure = bme.readPressure();
   d5142:	480e      	ldr	r0, [pc, #56]	; (d517c <_Z11take_sampleP6Sample+0xe8>)
  latest->humidity = bme.readHumidity();
   d5144:	ed84 0a08 	vstr	s0, [r4, #32]
  latest->pressure = bme.readPressure();
   d5148:	f001 f992 	bl	d6470 <_ZN15Adafruit_BME28012readPressureEv>
  latest->altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d514c:	480b      	ldr	r0, [pc, #44]	; (d517c <_Z11take_sampleP6Sample+0xe8>)
  latest->pressure = bme.readPressure();
   d514e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  latest->altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d5152:	ed9f 0a0b 	vldr	s0, [pc, #44]	; d5180 <_Z11take_sampleP6Sample+0xec>
   d5156:	f001 fa67 	bl	d6628 <_ZN15Adafruit_BME28012readAltitudeEf>
   d515a:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
  latest->battery = System.batteryCharge();
   d515e:	f7ff ff87 	bl	d5070 <_ZNK11SystemClass13batteryChargeEv.isra.0>
  update_average(latest, &run_average_BLE);
   d5162:	4908      	ldr	r1, [pc, #32]	; (d5184 <_Z11take_sampleP6Sample+0xf0>)
  latest->battery = System.batteryCharge();
   d5164:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
  update_average(latest, &run_average_BLE);
   d5168:	4620      	mov	r0, r4
   d516a:	f7ff fb4b 	bl	d4804 <_Z14update_averageP6SampleP12Data_average>
}
   d516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  update_average(latest, &run_average_CLOUD);
   d5172:	4905      	ldr	r1, [pc, #20]	; (d5188 <_Z11take_sampleP6Sample+0xf4>)
   d5174:	f7ff bb46 	b.w	d4804 <_Z14update_averageP6SampleP12Data_average>
   d5178:	2003e498 	.word	0x2003e498
   d517c:	2003e384 	.word	0x2003e384
   d5180:	447d5000 	.word	0x447d5000
   d5184:	2003e514 	.word	0x2003e514
   d5188:	2003e55c 	.word	0x2003e55c

000d518c <_Z11displayDATAP6Sample>:
{
   d518c:	b530      	push	{r4, r5, lr}
   d518e:	ed2d 8b02 	vpush	{d8}
   d5192:	b095      	sub	sp, #84	; 0x54
  CellularSignal sig = Cellular.RSSI();
   d5194:	49c0      	ldr	r1, [pc, #768]	; (d5498 <_Z11displayDATAP6Sample+0x30c>)
{
   d5196:	4604      	mov	r4, r0
  CellularSignal sig = Cellular.RSSI();
   d5198:	a80a      	add	r0, sp, #40	; 0x28
   d519a:	f006 fd4f 	bl	dbc3c <_ZN5spark13CellularClass4RSSIEv>
  float strength = sig.getStrength();
   d519e:	a80a      	add	r0, sp, #40	; 0x28
   d51a0:	f006 f814 	bl	db1cc <_ZNK14CellularSignal11getStrengthEv>
   d51a4:	eeb0 8a40 	vmov.f32	s16, s0
  EEPROM.get(NAME_ADDR,ID);
   d51a8:	f006 ffdc 	bl	dc164 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d51ac:	2214      	movs	r2, #20
   d51ae:	eb0d 0102 	add.w	r1, sp, r2
   d51b2:	200a      	movs	r0, #10
   d51b4:	f003 ff5a 	bl	d906c <HAL_EEPROM_Get>
  String IDs(ID);
   d51b8:	a905      	add	r1, sp, #20
   d51ba:	a801      	add	r0, sp, #4
   d51bc:	f004 fc85 	bl	d9aca <_ZN6StringC1EPKc>
  epd.setTextWrap(true);
   d51c0:	48b6      	ldr	r0, [pc, #728]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d51c2:	2101      	movs	r1, #1
   d51c4:	f001 f844 	bl	d6250 <_ZN12Adafruit_GFX11setTextWrapEb>
  epd.setTextSize(1);
   d51c8:	2101      	movs	r1, #1
   d51ca:	48b4      	ldr	r0, [pc, #720]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d51cc:	f001 f838 	bl	d6240 <_ZN12Adafruit_GFX11setTextSizeEh>
  epd.clearBuffer();
   d51d0:	48b2      	ldr	r0, [pc, #712]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d51d2:	f003 fd07 	bl	d8be4 <_ZN12Adafruit_EPD11clearBufferEv>
  epd.setCursor(ORIGIN_X, 10);
   d51d6:	220a      	movs	r2, #10
   d51d8:	48b0      	ldr	r0, [pc, #704]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d51da:	2105      	movs	r1, #5
   d51dc:	f001 f82d 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.setTextColor(EPD_BLACK);
   d51e0:	48ae      	ldr	r0, [pc, #696]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d51e2:	2100      	movs	r1, #0
   d51e4:	f001 f831 	bl	d624a <_ZN12Adafruit_GFX12setTextColorEt>
  epd.print(ID);
   d51e8:	48ac      	ldr	r0, [pc, #688]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d51ea:	a905      	add	r1, sp, #20
   d51ec:	f005 fd9c 	bl	dad28 <_ZN5Print5printEPKc>
  if(SD_WRITE_SUCCESSFUL){
   d51f0:	4bab      	ldr	r3, [pc, #684]	; (d54a0 <_Z11displayDATAP6Sample+0x314>)
   d51f2:	781b      	ldrb	r3, [r3, #0]
   d51f4:	2b00      	cmp	r3, #0
   d51f6:	f000 81c4 	beq.w	d5582 <_Z11displayDATAP6Sample+0x3f6>
    epd.print("   ++");
   d51fa:	49aa      	ldr	r1, [pc, #680]	; (d54a4 <_Z11displayDATAP6Sample+0x318>)
    epd.print("   --");    
   d51fc:	48a7      	ldr	r0, [pc, #668]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d51fe:	f005 fd93 	bl	dad28 <_ZN5Print5printEPKc>
  epd.setCursor(ORIGIN_X+mid_offset, 10);
   d5202:	48a6      	ldr	r0, [pc, #664]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5204:	220a      	movs	r2, #10
   d5206:	216e      	movs	r1, #110	; 0x6e
   d5208:	f001 f817 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d520c:	220a      	movs	r2, #10
   d520e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   d5212:	48a2      	ldr	r0, [pc, #648]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5214:	f005 fda5 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.print("/");
   d5218:	49a3      	ldr	r1, [pc, #652]	; (d54a8 <_Z11displayDATAP6Sample+0x31c>)
   d521a:	48a0      	ldr	r0, [pc, #640]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d521c:	f005 fd84 	bl	dad28 <_ZN5Print5printEPKc>
   d5220:	220a      	movs	r2, #10
   d5222:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
   d5226:	489d      	ldr	r0, [pc, #628]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5228:	f005 fd9b 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.print("/");
   d522c:	499e      	ldr	r1, [pc, #632]	; (d54a8 <_Z11displayDATAP6Sample+0x31c>)
   d522e:	489b      	ldr	r0, [pc, #620]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5230:	f005 fd7a 	bl	dad28 <_ZN5Print5printEPKc>
   d5234:	220a      	movs	r2, #10
   d5236:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   d5238:	4898      	ldr	r0, [pc, #608]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d523a:	f005 fd92 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.print("  ");
   d523e:	499b      	ldr	r1, [pc, #620]	; (d54ac <_Z11displayDATAP6Sample+0x320>)
   d5240:	4896      	ldr	r0, [pc, #600]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5242:	f005 fd71 	bl	dad28 <_ZN5Print5printEPKc>
   d5246:	220a      	movs	r2, #10
   d5248:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   d524c:	4893      	ldr	r0, [pc, #588]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d524e:	f005 fd88 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.print(":");
   d5252:	4997      	ldr	r1, [pc, #604]	; (d54b0 <_Z11displayDATAP6Sample+0x324>)
   d5254:	4891      	ldr	r0, [pc, #580]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5256:	f005 fd67 	bl	dad28 <_ZN5Print5printEPKc>
   d525a:	220a      	movs	r2, #10
   d525c:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   d5260:	488e      	ldr	r0, [pc, #568]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5262:	f005 fd7e 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.print(":");
   d5266:	4992      	ldr	r1, [pc, #584]	; (d54b0 <_Z11displayDATAP6Sample+0x324>)
   d5268:	488c      	ldr	r0, [pc, #560]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d526a:	f005 fd5d 	bl	dad28 <_ZN5Print5printEPKc>
   d526e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d5272:	488a      	ldr	r0, [pc, #552]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5274:	220a      	movs	r2, #10
   d5276:	f005 fd74 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 20);
   d527a:	2214      	movs	r2, #20
   d527c:	4887      	ldr	r0, [pc, #540]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d527e:	2105      	movs	r1, #5
   d5280:	f000 ffdb 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Batery: ");
   d5284:	498b      	ldr	r1, [pc, #556]	; (d54b4 <_Z11displayDATAP6Sample+0x328>)
   d5286:	4885      	ldr	r0, [pc, #532]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5288:	f005 fd4e 	bl	dad28 <_ZN5Print5printEPKc>
  epd.print(System.batteryCharge());
   d528c:	f7ff fef0 	bl	d5070 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d5290:	2102      	movs	r1, #2
   d5292:	4882      	ldr	r0, [pc, #520]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5294:	f005 fe4c 	bl	daf30 <_ZN5Print5printEfi>
  epd.print("%  ");
   d5298:	4987      	ldr	r1, [pc, #540]	; (d54b8 <_Z11displayDATAP6Sample+0x32c>)
   d529a:	4880      	ldr	r0, [pc, #512]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d529c:	f005 fd44 	bl	dad28 <_ZN5Print5printEPKc>
  epd.setCursor(ORIGIN_X+mid_offset, 20);
   d52a0:	2214      	movs	r2, #20
   d52a2:	487e      	ldr	r0, [pc, #504]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d52a4:	216e      	movs	r1, #110	; 0x6e
   d52a6:	f000 ffc8 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Cell:");
   d52aa:	4984      	ldr	r1, [pc, #528]	; (d54bc <_Z11displayDATAP6Sample+0x330>)
   d52ac:	487b      	ldr	r0, [pc, #492]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d52ae:	f005 fd3b 	bl	dad28 <_ZN5Print5printEPKc>
  epd.print(strength);
   d52b2:	eeb0 0a48 	vmov.f32	s0, s16
   d52b6:	2102      	movs	r1, #2
   d52b8:	4878      	ldr	r0, [pc, #480]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d52ba:	f005 fe39 	bl	daf30 <_ZN5Print5printEfi>
  epd.print("   Ch: ");
   d52be:	4980      	ldr	r1, [pc, #512]	; (d54c0 <_Z11displayDATAP6Sample+0x334>)
   d52c0:	4876      	ldr	r0, [pc, #472]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d52c2:	f005 fd31 	bl	dad28 <_ZN5Print5printEPKc>
   d52c6:	4669      	mov	r1, sp
   d52c8:	2007      	movs	r0, #7
   d52ca:	f7ff fead 	bl	d5028 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   d52ce:	1e05      	subs	r5, r0, #0
   d52d0:	db03      	blt.n	d52da <_Z11displayDATAP6Sample+0x14e>
        return val;
   d52d2:	9d00      	ldr	r5, [sp, #0]
        if (n < 0 && base == 10) {
   d52d4:	2d00      	cmp	r5, #0
   d52d6:	f280 8156 	bge.w	d5586 <_Z11displayDATAP6Sample+0x3fa>
            t = print('-');
   d52da:	212d      	movs	r1, #45	; 0x2d
   d52dc:	486f      	ldr	r0, [pc, #444]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d52de:	f005 fd27 	bl	dad30 <_ZN5Print5printEc>
            val = -n;
   d52e2:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d52e4:	220a      	movs	r2, #10
   d52e6:	486d      	ldr	r0, [pc, #436]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d52e8:	f005 fd3b 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 30);
   d52ec:	221e      	movs	r2, #30
   d52ee:	486b      	ldr	r0, [pc, #428]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d52f0:	2105      	movs	r1, #5
   d52f2:	f000 ffa2 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.setTextColor(EPD_BLACK);
   d52f6:	4869      	ldr	r0, [pc, #420]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d52f8:	2100      	movs	r1, #0
   d52fa:	f000 ffa6 	bl	d624a <_ZN12Adafruit_GFX12setTextColorEt>
  epd.print("Dp 0.3: ");
   d52fe:	4971      	ldr	r1, [pc, #452]	; (d54c4 <_Z11displayDATAP6Sample+0x338>)
   d5300:	4866      	ldr	r0, [pc, #408]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5302:	f005 fd11 	bl	dad28 <_ZN5Print5printEPKc>
   d5306:	8861      	ldrh	r1, [r4, #2]
   d5308:	4864      	ldr	r0, [pc, #400]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d530a:	220a      	movs	r2, #10
   d530c:	f005 fd29 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 30);
   d5310:	221e      	movs	r2, #30
   d5312:	4862      	ldr	r0, [pc, #392]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5314:	216e      	movs	r1, #110	; 0x6e
   d5316:	f000 ff90 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("E PM 1.0: ");
   d531a:	496b      	ldr	r1, [pc, #428]	; (d54c8 <_Z11displayDATAP6Sample+0x33c>)
   d531c:	485f      	ldr	r0, [pc, #380]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d531e:	f005 fd03 	bl	dad28 <_ZN5Print5printEPKc>
   d5322:	89e1      	ldrh	r1, [r4, #14]
   d5324:	485d      	ldr	r0, [pc, #372]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5326:	220a      	movs	r2, #10
   d5328:	f005 fd1b 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 40);
   d532c:	2228      	movs	r2, #40	; 0x28
   d532e:	485b      	ldr	r0, [pc, #364]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5330:	2105      	movs	r1, #5
   d5332:	f000 ff82 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 0.5: ");
   d5336:	4965      	ldr	r1, [pc, #404]	; (d54cc <_Z11displayDATAP6Sample+0x340>)
   d5338:	4858      	ldr	r0, [pc, #352]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d533a:	f005 fcf5 	bl	dad28 <_ZN5Print5printEPKc>
   d533e:	88a1      	ldrh	r1, [r4, #4]
   d5340:	4856      	ldr	r0, [pc, #344]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5342:	220a      	movs	r2, #10
   d5344:	f005 fd0d 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 40);
   d5348:	2228      	movs	r2, #40	; 0x28
   d534a:	4854      	ldr	r0, [pc, #336]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d534c:	216e      	movs	r1, #110	; 0x6e
   d534e:	f000 ff74 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("E PM 2.5: ");
   d5352:	495f      	ldr	r1, [pc, #380]	; (d54d0 <_Z11displayDATAP6Sample+0x344>)
   d5354:	4851      	ldr	r0, [pc, #324]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5356:	f005 fce7 	bl	dad28 <_ZN5Print5printEPKc>
   d535a:	8a21      	ldrh	r1, [r4, #16]
   d535c:	484f      	ldr	r0, [pc, #316]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d535e:	220a      	movs	r2, #10
   d5360:	f005 fcff 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 50);
   d5364:	2232      	movs	r2, #50	; 0x32
   d5366:	484d      	ldr	r0, [pc, #308]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5368:	2105      	movs	r1, #5
   d536a:	f000 ff66 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 1.0: ");
   d536e:	4959      	ldr	r1, [pc, #356]	; (d54d4 <_Z11displayDATAP6Sample+0x348>)
   d5370:	484a      	ldr	r0, [pc, #296]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5372:	f005 fcd9 	bl	dad28 <_ZN5Print5printEPKc>
   d5376:	88e1      	ldrh	r1, [r4, #6]
   d5378:	4848      	ldr	r0, [pc, #288]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d537a:	220a      	movs	r2, #10
   d537c:	f005 fcf1 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 50);
   d5380:	2232      	movs	r2, #50	; 0x32
   d5382:	4846      	ldr	r0, [pc, #280]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5384:	216e      	movs	r1, #110	; 0x6e
   d5386:	f000 ff58 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("E PM 10 : ");
   d538a:	4953      	ldr	r1, [pc, #332]	; (d54d8 <_Z11displayDATAP6Sample+0x34c>)
   d538c:	4843      	ldr	r0, [pc, #268]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d538e:	f005 fccb 	bl	dad28 <_ZN5Print5printEPKc>
   d5392:	8a61      	ldrh	r1, [r4, #18]
   d5394:	4841      	ldr	r0, [pc, #260]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5396:	220a      	movs	r2, #10
   d5398:	f005 fce3 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 60);
   d539c:	223c      	movs	r2, #60	; 0x3c
   d539e:	483f      	ldr	r0, [pc, #252]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53a0:	2105      	movs	r1, #5
   d53a2:	f000 ff4a 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 2.5: ");
   d53a6:	494d      	ldr	r1, [pc, #308]	; (d54dc <_Z11displayDATAP6Sample+0x350>)
   d53a8:	483c      	ldr	r0, [pc, #240]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53aa:	f005 fcbd 	bl	dad28 <_ZN5Print5printEPKc>
   d53ae:	8921      	ldrh	r1, [r4, #8]
   d53b0:	483a      	ldr	r0, [pc, #232]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53b2:	220a      	movs	r2, #10
   d53b4:	f005 fcd5 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 60);
   d53b8:	223c      	movs	r2, #60	; 0x3c
   d53ba:	4838      	ldr	r0, [pc, #224]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53bc:	216e      	movs	r1, #110	; 0x6e
   d53be:	f000 ff3c 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("S PM 1.0: ");
   d53c2:	4947      	ldr	r1, [pc, #284]	; (d54e0 <_Z11displayDATAP6Sample+0x354>)
   d53c4:	4835      	ldr	r0, [pc, #212]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53c6:	f005 fcaf 	bl	dad28 <_ZN5Print5printEPKc>
   d53ca:	8aa1      	ldrh	r1, [r4, #20]
   d53cc:	4833      	ldr	r0, [pc, #204]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53ce:	220a      	movs	r2, #10
   d53d0:	f005 fcc7 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 70);
   d53d4:	2246      	movs	r2, #70	; 0x46
   d53d6:	4831      	ldr	r0, [pc, #196]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53d8:	2105      	movs	r1, #5
   d53da:	f000 ff2e 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp 5.0: ");
   d53de:	4941      	ldr	r1, [pc, #260]	; (d54e4 <_Z11displayDATAP6Sample+0x358>)
   d53e0:	482e      	ldr	r0, [pc, #184]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53e2:	f005 fca1 	bl	dad28 <_ZN5Print5printEPKc>
   d53e6:	8961      	ldrh	r1, [r4, #10]
   d53e8:	482c      	ldr	r0, [pc, #176]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53ea:	220a      	movs	r2, #10
   d53ec:	f005 fcb9 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 70);
   d53f0:	2246      	movs	r2, #70	; 0x46
   d53f2:	482a      	ldr	r0, [pc, #168]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53f4:	216e      	movs	r1, #110	; 0x6e
   d53f6:	f000 ff20 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("S PM 2.5: ");
   d53fa:	493b      	ldr	r1, [pc, #236]	; (d54e8 <_Z11displayDATAP6Sample+0x35c>)
   d53fc:	4827      	ldr	r0, [pc, #156]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d53fe:	f005 fc93 	bl	dad28 <_ZN5Print5printEPKc>
   d5402:	8ae1      	ldrh	r1, [r4, #22]
   d5404:	4825      	ldr	r0, [pc, #148]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5406:	220a      	movs	r2, #10
   d5408:	f005 fcab 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 80);
   d540c:	2250      	movs	r2, #80	; 0x50
   d540e:	4823      	ldr	r0, [pc, #140]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5410:	2105      	movs	r1, #5
   d5412:	f000 ff12 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Dp10.0: ");
   d5416:	4935      	ldr	r1, [pc, #212]	; (d54ec <_Z11displayDATAP6Sample+0x360>)
   d5418:	4820      	ldr	r0, [pc, #128]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d541a:	f005 fc85 	bl	dad28 <_ZN5Print5printEPKc>
   d541e:	89a1      	ldrh	r1, [r4, #12]
   d5420:	481e      	ldr	r0, [pc, #120]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5422:	220a      	movs	r2, #10
   d5424:	f005 fc9d 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X+mid_offset, 80);
   d5428:	2250      	movs	r2, #80	; 0x50
   d542a:	481c      	ldr	r0, [pc, #112]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d542c:	216e      	movs	r1, #110	; 0x6e
   d542e:	f000 ff04 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("S PM 10 : ");
   d5432:	492f      	ldr	r1, [pc, #188]	; (d54f0 <_Z11displayDATAP6Sample+0x364>)
   d5434:	4819      	ldr	r0, [pc, #100]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5436:	f005 fc77 	bl	dad28 <_ZN5Print5printEPKc>
   d543a:	8b21      	ldrh	r1, [r4, #24]
   d543c:	4817      	ldr	r0, [pc, #92]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d543e:	220a      	movs	r2, #10
   d5440:	f005 fc8f 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.setCursor(ORIGIN_X, 90);
   d5444:	225a      	movs	r2, #90	; 0x5a
   d5446:	4815      	ldr	r0, [pc, #84]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5448:	2105      	movs	r1, #5
   d544a:	f000 fef6 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Temp: ");
   d544e:	4929      	ldr	r1, [pc, #164]	; (d54f4 <_Z11displayDATAP6Sample+0x368>)
   d5450:	4812      	ldr	r0, [pc, #72]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5452:	f005 fc69 	bl	dad28 <_ZN5Print5printEPKc>
  epd.print(sample->temp);
   d5456:	ed94 0a07 	vldr	s0, [r4, #28]
   d545a:	4810      	ldr	r0, [pc, #64]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d545c:	2102      	movs	r1, #2
   d545e:	f005 fd67 	bl	daf30 <_ZN5Print5printEfi>
  epd.print("C  RH: ");
   d5462:	4925      	ldr	r1, [pc, #148]	; (d54f8 <_Z11displayDATAP6Sample+0x36c>)
   d5464:	480d      	ldr	r0, [pc, #52]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5466:	f005 fc5f 	bl	dad28 <_ZN5Print5printEPKc>
  epd.print((int) sample->humidity);
   d546a:	edd4 7a08 	vldr	s15, [r4, #32]
   d546e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d5472:	ee17 5a90 	vmov	r5, s15
        if (n < 0 && base == 10) {
   d5476:	2d00      	cmp	r5, #0
   d5478:	f280 8087 	bge.w	d558a <_Z11displayDATAP6Sample+0x3fe>
            t = print('-');
   d547c:	212d      	movs	r1, #45	; 0x2d
   d547e:	4807      	ldr	r0, [pc, #28]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5480:	f005 fc56 	bl	dad30 <_ZN5Print5printEc>
            val = -n;
   d5484:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d5486:	220a      	movs	r2, #10
   d5488:	4804      	ldr	r0, [pc, #16]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d548a:	f005 fc6a 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.print("%  P: ");
   d548e:	491b      	ldr	r1, [pc, #108]	; (d54fc <_Z11displayDATAP6Sample+0x370>)
   d5490:	4802      	ldr	r0, [pc, #8]	; (d549c <_Z11displayDATAP6Sample+0x310>)
   d5492:	f005 fc49 	bl	dad28 <_ZN5Print5printEPKc>
   d5496:	e035      	b.n	d5504 <_Z11displayDATAP6Sample+0x378>
   d5498:	2003e660 	.word	0x2003e660
   d549c:	2003e3d4 	.word	0x2003e3d4
   d54a0:	2003e2c0 	.word	0x2003e2c0
   d54a4:	000decef 	.word	0x000decef
   d54a8:	000decfb 	.word	0x000decfb
   d54ac:	000ded07 	.word	0x000ded07
   d54b0:	000ded0e 	.word	0x000ded0e
   d54b4:	000decfd 	.word	0x000decfd
   d54b8:	000ded06 	.word	0x000ded06
   d54bc:	000ded0a 	.word	0x000ded0a
   d54c0:	000ded10 	.word	0x000ded10
   d54c4:	000ded18 	.word	0x000ded18
   d54c8:	000ded21 	.word	0x000ded21
   d54cc:	000ded2c 	.word	0x000ded2c
   d54d0:	000ded35 	.word	0x000ded35
   d54d4:	000ded40 	.word	0x000ded40
   d54d8:	000ded49 	.word	0x000ded49
   d54dc:	000ded54 	.word	0x000ded54
   d54e0:	000ded5d 	.word	0x000ded5d
   d54e4:	000ded68 	.word	0x000ded68
   d54e8:	000ded71 	.word	0x000ded71
   d54ec:	000ded7c 	.word	0x000ded7c
   d54f0:	000ded85 	.word	0x000ded85
   d54f4:	000ded90 	.word	0x000ded90
   d54f8:	000ded97 	.word	0x000ded97
   d54fc:	000ded9f 	.word	0x000ded9f
   d5500:	447a0000 	.word	0x447a0000
  epd.print(sample->pressure/1000);
   d5504:	ed5f 7a02 	vldr	s15, [pc, #-8]	; d5500 <_Z11displayDATAP6Sample+0x374>
   d5508:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
   d550c:	4820      	ldr	r0, [pc, #128]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d550e:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5512:	2102      	movs	r1, #2
   d5514:	f005 fd0c 	bl	daf30 <_ZN5Print5printEfi>
  epd.print("kPa");
   d5518:	491e      	ldr	r1, [pc, #120]	; (d5594 <_Z11displayDATAP6Sample+0x408>)
   d551a:	481d      	ldr	r0, [pc, #116]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d551c:	f005 fc04 	bl	dad28 <_ZN5Print5printEPKc>
  epd.setCursor(ORIGIN_X, 100);
   d5520:	2264      	movs	r2, #100	; 0x64
   d5522:	481b      	ldr	r0, [pc, #108]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d5524:	2105      	movs	r1, #5
   d5526:	f000 fe88 	bl	d623a <_ZN12Adafruit_GFX9setCursorEss>
  epd.print("Samp: ");
   d552a:	491b      	ldr	r1, [pc, #108]	; (d5598 <_Z11displayDATAP6Sample+0x40c>)
   d552c:	4818      	ldr	r0, [pc, #96]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d552e:	f005 fbfb 	bl	dad28 <_ZN5Print5printEPKc>
   d5532:	4b1a      	ldr	r3, [pc, #104]	; (d559c <_Z11displayDATAP6Sample+0x410>)
   d5534:	4816      	ldr	r0, [pc, #88]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d5536:	6819      	ldr	r1, [r3, #0]
   d5538:	220a      	movs	r2, #10
   d553a:	f005 fc12 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.print("s    Disp: ");
   d553e:	4918      	ldr	r1, [pc, #96]	; (d55a0 <_Z11displayDATAP6Sample+0x414>)
   d5540:	4813      	ldr	r0, [pc, #76]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d5542:	f005 fbf1 	bl	dad28 <_ZN5Print5printEPKc>
   d5546:	4b17      	ldr	r3, [pc, #92]	; (d55a4 <_Z11displayDATAP6Sample+0x418>)
   d5548:	4811      	ldr	r0, [pc, #68]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d554a:	6819      	ldr	r1, [r3, #0]
   d554c:	220a      	movs	r2, #10
   d554e:	f005 fc08 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.print("s    Pub: ");
   d5552:	4915      	ldr	r1, [pc, #84]	; (d55a8 <_Z11displayDATAP6Sample+0x41c>)
   d5554:	480e      	ldr	r0, [pc, #56]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d5556:	f005 fbe7 	bl	dad28 <_ZN5Print5printEPKc>
   d555a:	4b14      	ldr	r3, [pc, #80]	; (d55ac <_Z11displayDATAP6Sample+0x420>)
   d555c:	480c      	ldr	r0, [pc, #48]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d555e:	6819      	ldr	r1, [r3, #0]
   d5560:	220a      	movs	r2, #10
   d5562:	f005 fbfe 	bl	dad62 <_ZN5Print11printNumberEmh>
  epd.print("h");
   d5566:	4912      	ldr	r1, [pc, #72]	; (d55b0 <_Z11displayDATAP6Sample+0x424>)
   d5568:	4809      	ldr	r0, [pc, #36]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d556a:	f005 fbdd 	bl	dad28 <_ZN5Print5printEPKc>
  epd.display();
   d556e:	4808      	ldr	r0, [pc, #32]	; (d5590 <_Z11displayDATAP6Sample+0x404>)
   d5570:	f003 fc33 	bl	d8dda <_ZN12Adafruit_EPD7displayEv>
  String IDs(ID);
   d5574:	a801      	add	r0, sp, #4
   d5576:	f004 fa5d 	bl	d9a34 <_ZN6StringD1Ev>
}
   d557a:	b015      	add	sp, #84	; 0x54
   d557c:	ecbd 8b02 	vpop	{d8}
   d5580:	bd30      	pop	{r4, r5, pc}
    epd.print("   --");    
   d5582:	490c      	ldr	r1, [pc, #48]	; (d55b4 <_Z11displayDATAP6Sample+0x428>)
   d5584:	e63a      	b.n	d51fc <_Z11displayDATAP6Sample+0x70>
            val = n;
   d5586:	4629      	mov	r1, r5
   d5588:	e6ac      	b.n	d52e4 <_Z11displayDATAP6Sample+0x158>
   d558a:	ee17 1a90 	vmov	r1, s15
   d558e:	e77a      	b.n	d5486 <_Z11displayDATAP6Sample+0x2fa>
   d5590:	2003e3d4 	.word	0x2003e3d4
   d5594:	000deda6 	.word	0x000deda6
   d5598:	000dedaa 	.word	0x000dedaa
   d559c:	2003de30 	.word	0x2003de30
   d55a0:	000dedb1 	.word	0x000dedb1
   d55a4:	2003e2c4 	.word	0x2003e2c4
   d55a8:	000dedbd 	.word	0x000dedbd
   d55ac:	2003de38 	.word	0x2003de38
   d55b0:	000dedc8 	.word	0x000dedc8
   d55b4:	000decf5 	.word	0x000decf5

000d55b8 <loop>:
{
   d55b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!preSensorDutyMillis || !predisplayDutyMillis || !prePublishDutyMillis || !preTimeCheckMillis )
   d55bc:	4c5e      	ldr	r4, [pc, #376]	; (d5738 <loop+0x180>)
   d55be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; d5768 <loop+0x1b0>
   d55c2:	6823      	ldr	r3, [r4, #0]
   d55c4:	4e5d      	ldr	r6, [pc, #372]	; (d573c <loop+0x184>)
   d55c6:	4d5e      	ldr	r5, [pc, #376]	; (d5740 <loop+0x188>)
{
   d55c8:	b087      	sub	sp, #28
  if (!preSensorDutyMillis || !predisplayDutyMillis || !prePublishDutyMillis || !preTimeCheckMillis )
   d55ca:	b133      	cbz	r3, d55da <loop+0x22>
   d55cc:	f8d8 3000 	ldr.w	r3, [r8]
   d55d0:	b11b      	cbz	r3, d55da <loop+0x22>
   d55d2:	6833      	ldr	r3, [r6, #0]
   d55d4:	b10b      	cbz	r3, d55da <loop+0x22>
   d55d6:	682b      	ldr	r3, [r5, #0]
   d55d8:	b983      	cbnz	r3, d55fc <loop+0x44>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d55da:	f003 fd37 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
    preSensorDutyMillis = millis();
   d55de:	6020      	str	r0, [r4, #0]
   d55e0:	f003 fd34 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
    predisplayDutyMillis = millis();
   d55e4:	f8c8 0000 	str.w	r0, [r8]
   d55e8:	f003 fd30 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
    prePublishDutyMillis = millis();
   d55ec:	6030      	str	r0, [r6, #0]
   d55ee:	f003 fd2d 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
    preTimeCheckMillis = millis();
   d55f2:	6028      	str	r0, [r5, #0]
   d55f4:	f003 fd2a 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
    preBackupSampleMillis = millis();
   d55f8:	4b52      	ldr	r3, [pc, #328]	; (d5744 <loop+0x18c>)
   d55fa:	6018      	str	r0, [r3, #0]
   d55fc:	f003 fd26 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
   d5600:	4682      	mov	sl, r0
   d5602:	f003 fd23 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
   d5606:	4681      	mov	r9, r0
   d5608:	f003 fd20 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
   d560c:	4607      	mov	r7, r0
   d560e:	f003 fd1d 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
   d5612:	4683      	mov	fp, r0
   d5614:	f003 fd1a 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
        tm = 0;
   d5618:	2300      	movs	r3, #0
   d561a:	2200      	movs	r2, #0
   d561c:	4605      	mov	r5, r0
        return spark_sync_time_last(nullptr, &tm);
   d561e:	a904      	add	r1, sp, #16
   d5620:	2000      	movs	r0, #0
        tm = 0;
   d5622:	e9cd 2304 	strd	r2, r3, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d5626:	f004 f835 	bl	d9694 <spark_sync_time_last>
  if (curTimeCheckMillis - Particle.timeSyncedLast() >= ONE_DAY_MILLIS && Particle.connected){
   d562a:	4b47      	ldr	r3, [pc, #284]	; (d5748 <loop+0x190>)
   d562c:	ebab 0000 	sub.w	r0, fp, r0
   d5630:	4298      	cmp	r0, r3
   d5632:	d925      	bls.n	d5680 <loop+0xc8>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5634:	f004 f806 	bl	d9644 <spark_cloud_flag_connected>
        if (!connected()) {
   d5638:	b110      	cbz	r0, d5640 <loop+0x88>
        return spark_sync_time(NULL);
   d563a:	2000      	movs	r0, #0
   d563c:	f004 f81a 	bl	d9674 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d5640:	2000      	movs	r0, #0
   d5642:	f003 fd2b 	bl	d909c <hal_timer_millis>
   d5646:	f04f 0b00 	mov.w	fp, #0
   d564a:	9003      	str	r0, [sp, #12]
   d564c:	2000      	movs	r0, #0
   d564e:	f003 fd25 	bl	d909c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5652:	9b03      	ldr	r3, [sp, #12]
   d5654:	1ac3      	subs	r3, r0, r3
   d5656:	9300      	str	r3, [sp, #0]
   d5658:	eb61 030b 	sbc.w	r3, r1, fp
   d565c:	9301      	str	r3, [sp, #4]
        while (_while() && !_condition()) {
   d565e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d5662:	2300      	movs	r3, #0
   d5664:	f242 720f 	movw	r2, #9999	; 0x270f
   d5668:	428b      	cmp	r3, r1
   d566a:	bf08      	it	eq
   d566c:	4282      	cmpeq	r2, r0
   d566e:	d305      	bcc.n	d567c <loop+0xc4>
    waitFor(Particle.syncTimeDone,10000);
   d5670:	f7fe fd96 	bl	d41a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5674:	b910      	cbnz	r0, d567c <loop+0xc4>
            spark_process();
   d5676:	f003 ffd5 	bl	d9624 <spark_process>
        while (_while() && !_condition()) {
   d567a:	e7e7      	b.n	d564c <loop+0x94>
   d567c:	f7fe fd90 	bl	d41a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (curSensorDutyMillis - preSensorDutyMillis >= SENSOR_CYCLE*1000)
   d5680:	6823      	ldr	r3, [r4, #0]
   d5682:	ebaa 0203 	sub.w	r2, sl, r3
   d5686:	4b31      	ldr	r3, [pc, #196]	; (d574c <loop+0x194>)
   d5688:	6819      	ldr	r1, [r3, #0]
   d568a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d568e:	434b      	muls	r3, r1
   d5690:	429a      	cmp	r2, r3
   d5692:	d317      	bcc.n	d56c4 <loop+0x10c>
    take_sample(&latest_sample);
   d5694:	482e      	ldr	r0, [pc, #184]	; (d5750 <loop+0x198>)
   d5696:	f7ff fcfd 	bl	d5094 <_Z11take_sampleP6Sample>
    SD_WRITE_SUCCESSFUL = false;
   d569a:	4b2e      	ldr	r3, [pc, #184]	; (d5754 <loop+0x19c>)
   d569c:	2000      	movs	r0, #0
   d569e:	7018      	strb	r0, [r3, #0]
    record_sample(samp_dest);
   d56a0:	f7ff fc2e 	bl	d4f00 <_Z13record_sample17SampleDestination>
    record_sample(samp_dest);
   d56a4:	2002      	movs	r0, #2
   d56a6:	f7ff fc2b 	bl	d4f00 <_Z13record_sample17SampleDestination>
    if(PHONE_BACKUP_REQUEST){
   d56aa:	4b2b      	ldr	r3, [pc, #172]	; (d5758 <loop+0x1a0>)
   d56ac:	781b      	ldrb	r3, [r3, #0]
   d56ae:	b13b      	cbz	r3, d56c0 <loop+0x108>
      if(BLE.connected()){
   d56b0:	f004 fe86 	bl	da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d56b4:	f004 ff21 	bl	da4fa <_ZNK8particle14BleLocalDevice9connectedEv>
   d56b8:	b110      	cbz	r0, d56c0 <loop+0x108>
      record_sample(samp_dest);
   d56ba:	2004      	movs	r0, #4
   d56bc:	f7ff fc20 	bl	d4f00 <_Z13record_sample17SampleDestination>
    preSensorDutyMillis = curSensorDutyMillis;
   d56c0:	f8c4 a000 	str.w	sl, [r4]
  if( (curDisplayDutyMillis - predisplayDutyMillis)  >= DISPLAY_REFRESH*1000){
   d56c4:	f8d8 3000 	ldr.w	r3, [r8]
   d56c8:	eba9 0203 	sub.w	r2, r9, r3
   d56cc:	4b23      	ldr	r3, [pc, #140]	; (d575c <loop+0x1a4>)
   d56ce:	6819      	ldr	r1, [r3, #0]
   d56d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d56d4:	434b      	muls	r3, r1
   d56d6:	429a      	cmp	r2, r3
   d56d8:	d304      	bcc.n	d56e4 <loop+0x12c>
    displayDATA(&latest_sample);
   d56da:	481d      	ldr	r0, [pc, #116]	; (d5750 <loop+0x198>)
   d56dc:	f7ff fd56 	bl	d518c <_Z11displayDATAP6Sample>
    predisplayDutyMillis = curDisplayDutyMillis;
   d56e0:	f8c8 9000 	str.w	r9, [r8]
  if( (curPublishDutyMillis - prePublishDutyMillis)  >= PUBLISH_RATE*1000){
   d56e4:	6833      	ldr	r3, [r6, #0]
   d56e6:	1afa      	subs	r2, r7, r3
   d56e8:	4b1d      	ldr	r3, [pc, #116]	; (d5760 <loop+0x1a8>)
   d56ea:	6819      	ldr	r1, [r3, #0]
   d56ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d56f0:	434b      	muls	r3, r1
   d56f2:	429a      	cmp	r2, r3
   d56f4:	d303      	bcc.n	d56fe <loop+0x146>
    record_sample(samp_dest);
   d56f6:	2001      	movs	r0, #1
   d56f8:	f7ff fc02 	bl	d4f00 <_Z13record_sample17SampleDestination>
    prePublishDutyMillis = curPublishDutyMillis;
   d56fc:	6037      	str	r7, [r6, #0]
  if( (curBackupSampleMillis - preBackupSampleMillis) >=  BACKUP_RATE*1000){
   d56fe:	4c11      	ldr	r4, [pc, #68]	; (d5744 <loop+0x18c>)
   d5700:	6822      	ldr	r2, [r4, #0]
   d5702:	1aa9      	subs	r1, r5, r2
   d5704:	4a17      	ldr	r2, [pc, #92]	; (d5764 <loop+0x1ac>)
   d5706:	6810      	ldr	r0, [r2, #0]
   d5708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d570c:	4342      	muls	r2, r0
   d570e:	4291      	cmp	r1, r2
   d5710:	d30f      	bcc.n	d5732 <loop+0x17a>
    if(!BLE.connected())PHONE_BACKUP_REQUEST = true;
   d5712:	f004 fe55 	bl	da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5716:	f004 fef0 	bl	da4fa <_ZNK8particle14BleLocalDevice9connectedEv>
   d571a:	4b0f      	ldr	r3, [pc, #60]	; (d5758 <loop+0x1a0>)
   d571c:	b928      	cbnz	r0, d572a <loop+0x172>
   d571e:	2201      	movs	r2, #1
   d5720:	701a      	strb	r2, [r3, #0]
      record_sample(samp_dest);
   d5722:	2003      	movs	r0, #3
   d5724:	f7ff fbec 	bl	d4f00 <_Z13record_sample17SampleDestination>
   d5728:	e002      	b.n	d5730 <loop+0x178>
    if (PHONE_BACKUP_REQUEST){
   d572a:	781b      	ldrb	r3, [r3, #0]
   d572c:	2b00      	cmp	r3, #0
   d572e:	d1f8      	bne.n	d5722 <loop+0x16a>
    preBackupSampleMillis = curBackupSampleMillis;
   d5730:	6025      	str	r5, [r4, #0]
}
   d5732:	b007      	add	sp, #28
   d5734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5738:	2003e508 	.word	0x2003e508
   d573c:	2003e504 	.word	0x2003e504
   d5740:	2003e50c 	.word	0x2003e50c
   d5744:	2003e500 	.word	0x2003e500
   d5748:	05265bff 	.word	0x05265bff
   d574c:	2003e2c4 	.word	0x2003e2c4
   d5750:	2003e42c 	.word	0x2003e42c
   d5754:	2003e2c0 	.word	0x2003e2c0
   d5758:	2003de34 	.word	0x2003de34
   d575c:	2003de30 	.word	0x2003de30
   d5760:	2003de38 	.word	0x2003de38
   d5764:	2003ddac 	.word	0x2003ddac
   d5768:	2003e510 	.word	0x2003e510

000d576c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d576c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d576e:	4616      	mov	r6, r2
   d5770:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5772:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5774:	e9c0 2200 	strd	r2, r2, [r0]
   d5778:	4604      	mov	r4, r0
   d577a:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d577c:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d577e:	4619      	mov	r1, r3
   d5780:	a806      	add	r0, sp, #24
   d5782:	f004 fb4d 	bl	d9e20 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d5786:	9916      	ldr	r1, [sp, #88]	; 0x58
   d5788:	4638      	mov	r0, r7
   d578a:	f004 fb49 	bl	d9e20 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d578e:	7833      	ldrb	r3, [r6, #0]
   d5790:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d5794:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d5796:	9302      	str	r3, [sp, #8]
   d5798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d579a:	4620      	mov	r0, r4
   d579c:	e9cd 7300 	strd	r7, r3, [sp]
   d57a0:	aa05      	add	r2, sp, #20
   d57a2:	ab06      	add	r3, sp, #24
   d57a4:	4629      	mov	r1, r5
   d57a6:	f004 ff2f 	bl	da608 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d57aa:	4620      	mov	r0, r4
   d57ac:	b011      	add	sp, #68	; 0x44
   d57ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d57b0 <_ZN16Adafruit_SSD1675D0Ev>:
   d57b0:	b510      	push	{r4, lr}
   d57b2:	4604      	mov	r4, r0
   d57b4:	f7fe fce2 	bl	d417c <_ZN16Adafruit_SSD1675D1Ev>
   d57b8:	4620      	mov	r0, r4
   d57ba:	2150      	movs	r1, #80	; 0x50
   d57bc:	f006 fd6d 	bl	dc29a <_ZdlPvj>
   d57c0:	4620      	mov	r0, r4
   d57c2:	bd10      	pop	{r4, pc}

000d57c4 <_GLOBAL__sub_I_SystemMode>:
}
   d57c4:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d57c6:	4b66      	ldr	r3, [pc, #408]	; (d5960 <_GLOBAL__sub_I_SystemMode+0x19c>)
              error_(SYSTEM_ERROR_NONE) {
   d57c8:	4d66      	ldr	r5, [pc, #408]	; (d5964 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d57ca:	2601      	movs	r6, #1
   d57cc:	2400      	movs	r4, #0
   d57ce:	701e      	strb	r6, [r3, #0]
    SleepResult() {}
   d57d0:	4b65      	ldr	r3, [pc, #404]	; (d5968 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d57d2:	60ab      	str	r3, [r5, #8]
   d57d4:	b092      	sub	sp, #72	; 0x48
              error_(SYSTEM_ERROR_NONE) {
   d57d6:	602c      	str	r4, [r5, #0]
   d57d8:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d57da:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d57dc:	2002      	movs	r0, #2
   d57de:	f003 fe7d 	bl	d94dc <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d57e2:	4a62      	ldr	r2, [pc, #392]	; (d596c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d57e4:	4962      	ldr	r1, [pc, #392]	; (d5970 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d57e6:	4628      	mov	r0, r5
   d57e8:	f006 fd52 	bl	dc290 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d57ec:	4621      	mov	r1, r4
   d57ee:	4630      	mov	r0, r6
   d57f0:	f003 fe84 	bl	d94fc <system_thread_set_state>
FuelGauge fuel;
   d57f4:	4621      	mov	r1, r4
   d57f6:	485f      	ldr	r0, [pc, #380]	; (d5974 <_GLOBAL__sub_I_SystemMode+0x1b0>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d57f8:	4d5f      	ldr	r5, [pc, #380]	; (d5978 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d57fa:	f005 fd88 	bl	db30e <_ZN9FuelGaugeC1Eb>
   d57fe:	4a5b      	ldr	r2, [pc, #364]	; (d596c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d5800:	495e      	ldr	r1, [pc, #376]	; (d597c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d5802:	485c      	ldr	r0, [pc, #368]	; (d5974 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d5804:	f006 fd44 	bl	dc290 <__aeabi_atexit>
Adafruit_BME280 bme;
   d5808:	485d      	ldr	r0, [pc, #372]	; (d5980 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d580a:	f000 fd2b 	bl	d6264 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SSD1675 epd(250,122, EPD_DC, EPD_RESET, EPD_CS, SRAM_CS, EPD_BUSY);
   d580e:	f04f 33ff 	mov.w	r3, #4294967295
   d5812:	2203      	movs	r2, #3
   d5814:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5818:	2204      	movs	r2, #4
   d581a:	e9cd 3200 	strd	r3, r2, [sp]
   d581e:	21fa      	movs	r1, #250	; 0xfa
   d5820:	2305      	movs	r3, #5
   d5822:	227a      	movs	r2, #122	; 0x7a
   d5824:	4857      	ldr	r0, [pc, #348]	; (d5984 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d5826:	f002 fd7d 	bl	d8324 <_ZN16Adafruit_SSD1675C1Eiiaaaaa>
   d582a:	4a50      	ldr	r2, [pc, #320]	; (d596c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d582c:	4956      	ldr	r1, [pc, #344]	; (d5988 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d582e:	4855      	ldr	r0, [pc, #340]	; (d5984 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d5830:	f006 fd2e 	bl	dc290 <__aeabi_atexit>
PMSA003 pm = PMSA003(); // create instance of class
   d5834:	4855      	ldr	r0, [pc, #340]	; (d598c <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d5836:	f000 f8e1 	bl	d59fc <_ZN7PMSA003C1Ev>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d583a:	4b55      	ldr	r3, [pc, #340]	; (d5990 <_GLOBAL__sub_I_SystemMode+0x1cc>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d583c:	2264      	movs	r2, #100	; 0x64
   d583e:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
   d5842:	4a54      	ldr	r2, [pc, #336]	; (d5994 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d5844:	71dc      	strb	r4, [r3, #7]
   d5846:	f8a3 443c 	strh.w	r4, [r3, #1084]	; 0x43c
   d584a:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d584e:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d5852:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   d5856:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d585a:	f883 6474 	strb.w	r6, [r3, #1140]	; 0x474
   d585e:	7829      	ldrb	r1, [r5, #0]
   d5860:	f3bf 8f5b 	dmb	ish
   d5864:	4031      	ands	r1, r6
   d5866:	461c      	mov	r4, r3
   d5868:	d10b      	bne.n	d5882 <_GLOBAL__sub_I_SystemMode+0xbe>
   d586a:	4628      	mov	r0, r5
   d586c:	9105      	str	r1, [sp, #20]
   d586e:	f7fe fc23 	bl	d40b8 <__cxa_guard_acquire>
   d5872:	9905      	ldr	r1, [sp, #20]
   d5874:	b128      	cbz	r0, d5882 <_GLOBAL__sub_I_SystemMode+0xbe>
   d5876:	4848      	ldr	r0, [pc, #288]	; (d5998 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d5878:	f003 ffb0 	bl	d97dc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d587c:	4628      	mov	r0, r5
   d587e:	f7fe fc20 	bl	d40c2 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5882:	4b45      	ldr	r3, [pc, #276]	; (d5998 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d5884:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
SdFat SD;
   d5888:	4a38      	ldr	r2, [pc, #224]	; (d596c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d588a:	4944      	ldr	r1, [pc, #272]	; (d599c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d588c:	4840      	ldr	r0, [pc, #256]	; (d5990 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d588e:	f006 fcff 	bl	dc290 <__aeabi_atexit>
   d5892:	4843      	ldr	r0, [pc, #268]	; (d59a0 <_GLOBAL__sub_I_SystemMode+0x1dc>)
File myFile;
   d5894:	4a35      	ldr	r2, [pc, #212]	; (d596c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d5896:	4943      	ldr	r1, [pc, #268]	; (d59a4 <_GLOBAL__sub_I_SystemMode+0x1e0>)
    Stream() {_timeout=1000;}
   d5898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d589c:	2400      	movs	r4, #0
   d589e:	6083      	str	r3, [r0, #8]
  File() {}
   d58a0:	4b41      	ldr	r3, [pc, #260]	; (d59a8 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d58a2:	8204      	strh	r4, [r0, #16]
    Print() : write_error(0) {}
   d58a4:	6044      	str	r4, [r0, #4]
   d58a6:	6003      	str	r3, [r0, #0]
   d58a8:	f006 fcf2 	bl	dc290 <__aeabi_atexit>
typedef struct Data_average{
   d58ac:	4b3f      	ldr	r3, [pc, #252]	; (d59ac <_GLOBAL__sub_I_SystemMode+0x1e8>)
String deviceID;
   d58ae:	4940      	ldr	r1, [pc, #256]	; (d59b0 <_GLOBAL__sub_I_SystemMode+0x1ec>)
typedef struct Data_average{
   d58b0:	701c      	strb	r4, [r3, #0]
   d58b2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   d58b6:	4b3f      	ldr	r3, [pc, #252]	; (d59b4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
String deviceID;
   d58b8:	483f      	ldr	r0, [pc, #252]	; (d59b8 <_GLOBAL__sub_I_SystemMode+0x1f4>)
typedef struct Data_average{
   d58ba:	701c      	strb	r4, [r3, #0]
   d58bc:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
typedef struct Sample{
   d58c0:	4b3e      	ldr	r3, [pc, #248]	; (d59bc <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d58c2:	801c      	strh	r4, [r3, #0]
   d58c4:	4b3e      	ldr	r3, [pc, #248]	; (d59c0 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d58c6:	801c      	strh	r4, [r3, #0]
   d58c8:	4b3e      	ldr	r3, [pc, #248]	; (d59c4 <_GLOBAL__sub_I_SystemMode+0x200>)
   d58ca:	801c      	strh	r4, [r3, #0]
String deviceID;
   d58cc:	f004 f8fd 	bl	d9aca <_ZN6StringC1EPKc>
   d58d0:	4a26      	ldr	r2, [pc, #152]	; (d596c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d58d2:	493d      	ldr	r1, [pc, #244]	; (d59c8 <_GLOBAL__sub_I_SystemMode+0x204>)
   d58d4:	4838      	ldr	r0, [pc, #224]	; (d59b8 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d58d6:	f006 fcdb 	bl	dc290 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d58da:	493c      	ldr	r1, [pc, #240]	; (d59cc <_GLOBAL__sub_I_SystemMode+0x208>)
   d58dc:	483c      	ldr	r0, [pc, #240]	; (d59d0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d58de:	f004 fb9f 	bl	da020 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d58e2:	493c      	ldr	r1, [pc, #240]	; (d59d4 <_GLOBAL__sub_I_SystemMode+0x210>)
   d58e4:	483c      	ldr	r0, [pc, #240]	; (d59d8 <_GLOBAL__sub_I_SystemMode+0x214>)
   d58e6:	f004 fb9b 	bl	da020 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d58ea:	493c      	ldr	r1, [pc, #240]	; (d59dc <_GLOBAL__sub_I_SystemMode+0x218>)
   d58ec:	483c      	ldr	r0, [pc, #240]	; (d59e0 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d58ee:	f004 fb97 	bl	da020 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d58f2:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid); // originally NOTIFY rather than READ -- Charlie
   d58f4:	493a      	ldr	r1, [pc, #232]	; (d59e0 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d58f6:	f88d 301c 	strb.w	r3, [sp, #28]
   d58fa:	a808      	add	r0, sp, #32
   d58fc:	f004 fa90 	bl	d9e20 <_ZN8particle7BleUuidC1ERKS0_>
   d5900:	4933      	ldr	r1, [pc, #204]	; (d59d0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d5902:	a80d      	add	r0, sp, #52	; 0x34
   d5904:	f004 fa8c 	bl	d9e20 <_ZN8particle7BleUuidC1ERKS0_>
   d5908:	ab0d      	add	r3, sp, #52	; 0x34
   d590a:	9300      	str	r3, [sp, #0]
   d590c:	aa07      	add	r2, sp, #28
   d590e:	ab08      	add	r3, sp, #32
   d5910:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5914:	4933      	ldr	r1, [pc, #204]	; (d59e4 <_GLOBAL__sub_I_SystemMode+0x220>)
   d5916:	4834      	ldr	r0, [pc, #208]	; (d59e8 <_GLOBAL__sub_I_SystemMode+0x224>)
   d5918:	f7ff ff28 	bl	d576c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d591c:	4a13      	ldr	r2, [pc, #76]	; (d596c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d591e:	4933      	ldr	r1, [pc, #204]	; (d59ec <_GLOBAL__sub_I_SystemMode+0x228>)
   d5920:	4831      	ldr	r0, [pc, #196]	; (d59e8 <_GLOBAL__sub_I_SystemMode+0x224>)
   d5922:	f006 fcb5 	bl	dc290 <__aeabi_atexit>
   d5926:	2308      	movs	r3, #8
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE, rxUuid, serviceUuid, onDataReceived, NULL);
   d5928:	492b      	ldr	r1, [pc, #172]	; (d59d8 <_GLOBAL__sub_I_SystemMode+0x214>)
   d592a:	f88d 301c 	strb.w	r3, [sp, #28]
   d592e:	a808      	add	r0, sp, #32
   d5930:	f004 fa76 	bl	d9e20 <_ZN8particle7BleUuidC1ERKS0_>
   d5934:	4926      	ldr	r1, [pc, #152]	; (d59d0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d5936:	a80d      	add	r0, sp, #52	; 0x34
   d5938:	f004 fa72 	bl	d9e20 <_ZN8particle7BleUuidC1ERKS0_>
   d593c:	4b2c      	ldr	r3, [pc, #176]	; (d59f0 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d593e:	9301      	str	r3, [sp, #4]
   d5940:	ab0d      	add	r3, sp, #52	; 0x34
   d5942:	9300      	str	r3, [sp, #0]
   d5944:	aa07      	add	r2, sp, #28
   d5946:	ab08      	add	r3, sp, #32
   d5948:	492a      	ldr	r1, [pc, #168]	; (d59f4 <_GLOBAL__sub_I_SystemMode+0x230>)
   d594a:	9402      	str	r4, [sp, #8]
   d594c:	482a      	ldr	r0, [pc, #168]	; (d59f8 <_GLOBAL__sub_I_SystemMode+0x234>)
   d594e:	f7ff ff0d 	bl	d576c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d5952:	4a06      	ldr	r2, [pc, #24]	; (d596c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d5954:	4925      	ldr	r1, [pc, #148]	; (d59ec <_GLOBAL__sub_I_SystemMode+0x228>)
   d5956:	4828      	ldr	r0, [pc, #160]	; (d59f8 <_GLOBAL__sub_I_SystemMode+0x234>)
   d5958:	f006 fc9a 	bl	dc290 <__aeabi_atexit>
}
   d595c:	b012      	add	sp, #72	; 0x48
   d595e:	bd70      	pop	{r4, r5, r6, pc}
   d5960:	2003e310 	.word	0x2003e310
   d5964:	2003e2c8 	.word	0x2003e2c8
   d5968:	ffff0000 	.word	0xffff0000
   d596c:	2003de20 	.word	0x2003de20
   d5970:	000d4191 	.word	0x000d4191
   d5974:	2003e424 	.word	0x2003e424
   d5978:	2003de24 	.word	0x2003de24
   d597c:	000db32f 	.word	0x000db32f
   d5980:	2003e384 	.word	0x2003e384
   d5984:	2003e3d4 	.word	0x2003e3d4
   d5988:	000d417d 	.word	0x000d417d
   d598c:	2003e498 	.word	0x2003e498
   d5990:	2003de3c 	.word	0x2003de3c
   d5994:	000dee48 	.word	0x000dee48
   d5998:	2003de28 	.word	0x2003de28
   d599c:	000d4113 	.word	0x000d4113
   d59a0:	2003e464 	.word	0x2003e464
   d59a4:	000d4111 	.word	0x000d4111
   d59a8:	000dee5c 	.word	0x000dee5c
   d59ac:	2003e55c 	.word	0x2003e55c
   d59b0:	000ded09 	.word	0x000ded09
   d59b4:	2003e514 	.word	0x2003e514
   d59b8:	2003e3c4 	.word	0x2003e3c4
   d59bc:	2003e42c 	.word	0x2003e42c
   d59c0:	2003e34c 	.word	0x2003e34c
   d59c4:	2003e314 	.word	0x2003e314
   d59c8:	000d9a35 	.word	0x000d9a35
   d59cc:	000dedca 	.word	0x000dedca
   d59d0:	2003e2d4 	.word	0x2003e2d4
   d59d4:	000dedef 	.word	0x000dedef
   d59d8:	2003e2e8 	.word	0x2003e2e8
   d59dc:	000dee14 	.word	0x000dee14
   d59e0:	2003e2fc 	.word	0x2003e2fc
   d59e4:	000dee39 	.word	0x000dee39
   d59e8:	2003e5ac 	.word	0x2003e5ac
   d59ec:	000da55f 	.word	0x000da55f
   d59f0:	000d40e9 	.word	0x000d40e9
   d59f4:	000dee3c 	.word	0x000dee3c
   d59f8:	2003e5a4 	.word	0x2003e5a4

000d59fc <_ZN7PMSA003C1Ev>:

 */



PMSA003::PMSA003(){}
   d59fc:	4770      	bx	lr

000d59fe <_ZN7PMSA0034initEv>:
    _wire = &Wire;
    return init();
}

bool PMSA003::init() // private, called by begin only
{
   d59fe:	b510      	push	{r4, lr}
   d5a00:	4604      	mov	r4, r0
    _wire->begin();
   d5a02:	6e00      	ldr	r0, [r0, #96]	; 0x60
   d5a04:	f006 fa3c 	bl	dbe80 <_ZN7TwoWire5beginEv>

    // To prevent null readings, sets to 0
    for (int i = 0; i < 15; i++)
   d5a08:	1ea3      	subs	r3, r4, #2
    {
        _datBuffer[i] = 0;
   d5a0a:	2200      	movs	r2, #0
   d5a0c:	341c      	adds	r4, #28
   d5a0e:	f823 2f02 	strh.w	r2, [r3, #2]!
    for (int i = 0; i < 15; i++)
   d5a12:	42a3      	cmp	r3, r4
   d5a14:	d1fb      	bne.n	d5a0e <_ZN7PMSA0034initEv+0x10>
    }
    return true;
}
   d5a16:	2001      	movs	r0, #1
   d5a18:	bd10      	pop	{r4, pc}

000d5a1a <_ZN7PMSA0035beginEv>:
{
   d5a1a:	b510      	push	{r4, lr}
    _i2caddr = PMSA_ADDRESS;
   d5a1c:	2312      	movs	r3, #18
   d5a1e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
{
   d5a22:	4604      	mov	r4, r0
    _wire = &Wire;
   d5a24:	f006 fbe4 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d5a28:	6620      	str	r0, [r4, #96]	; 0x60
    return init();
   d5a2a:	4620      	mov	r0, r4
}
   d5a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return init();
   d5a30:	f7ff bfe5 	b.w	d59fe <_ZN7PMSA0034initEv>

000d5a34 <_ZN7PMSA0034pollEv>:
    Call this everytime you want new data. 

    v1.1 - changed to a bool, returns true if data is non-zero and new. 
 */
bool PMSA003::poll() 
{   
   d5a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _wire->requestFrom(PMSA_ADDRESS,PMSA_DEFAULT_SIZE);
   d5a36:	2220      	movs	r2, #32
{   
   d5a38:	4604      	mov	r4, r0
    _wire->requestFrom(PMSA_ADDRESS,PMSA_DEFAULT_SIZE);
   d5a3a:	2112      	movs	r1, #18
   d5a3c:	6e00      	ldr	r0, [r0, #96]	; 0x60
   d5a3e:	f006 fa4e 	bl	dbede <_ZN7TwoWire11requestFromEhj>
   d5a42:	2500      	movs	r5, #0

    uint8_t i = 0;

    bool CONN_FLAG = false;
   d5a44:	462e      	mov	r6, r5

    //pull 32 bytes of data from i2c address and place it in the buffer
    while (_wire->available())
   d5a46:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d5a48:	6803      	ldr	r3, [r0, #0]
   d5a4a:	691b      	ldr	r3, [r3, #16]
   d5a4c:	4798      	blx	r3
   d5a4e:	1c6f      	adds	r7, r5, #1
   d5a50:	b150      	cbz	r0, d5a68 <_ZN7PMSA0034pollEv+0x34>
    {
        _streamBuffer[i++] = _wire->read();
   d5a52:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d5a54:	6803      	ldr	r3, [r0, #0]
   d5a56:	695b      	ldr	r3, [r3, #20]
   d5a58:	4798      	blx	r3
   d5a5a:	b2ed      	uxtb	r5, r5
   d5a5c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
        CONN_FLAG = true;
   d5a60:	2601      	movs	r6, #1
        _streamBuffer[i++] = _wire->read();
   d5a62:	83e8      	strh	r0, [r5, #30]
    while (_wire->available())
   d5a64:	463d      	mov	r5, r7
   d5a66:	e7ee      	b.n	d5a46 <_ZN7PMSA0034pollEv+0x12>
   d5a68:	4620      	mov	r0, r4
   d5a6a:	1ea3      	subs	r3, r4, #2
   d5a6c:	f104 011c 	add.w	r1, r4, #28

    // Data is little endian'd, sets it to a data buffer from stream
    for (uint8_t i = 0; i < 15; i++)
    {
        _datBuffer[i] = _streamBuffer[2 + i * 2 + 1];
        _datBuffer[i] += (_streamBuffer[2 + i * 2] << 8);
   d5a70:	8c44      	ldrh	r4, [r0, #34]	; 0x22
   d5a72:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   d5a74:	eb02 2204 	add.w	r2, r2, r4, lsl #8
   d5a78:	f823 2f02 	strh.w	r2, [r3, #2]!
    for (uint8_t i = 0; i < 15; i++)
   d5a7c:	4299      	cmp	r1, r3
   d5a7e:	f100 0004 	add.w	r0, r0, #4
   d5a82:	d1f5      	bne.n	d5a70 <_ZN7PMSA0034pollEv+0x3c>
    }

    return CONN_FLAG;
}
   d5a84:	4630      	mov	r0, r6
   d5a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a88 <_ZN7PMSA0037pm10_stEv>:
 */

const uint16_t PMSA003::pm10_st()
{
    return _datBuffer[1];
}
   d5a88:	8840      	ldrh	r0, [r0, #2]
   d5a8a:	4770      	bx	lr

000d5a8c <_ZN7PMSA0037pm25_stEv>:

const uint16_t PMSA003::pm25_st()
{
    return _datBuffer[2];
}
   d5a8c:	8880      	ldrh	r0, [r0, #4]
   d5a8e:	4770      	bx	lr

000d5a90 <_ZN7PMSA0038pm100_stEv>:

const uint16_t PMSA003::pm100_st()
{
    return _datBuffer[3];
}
   d5a90:	88c0      	ldrh	r0, [r0, #6]
   d5a92:	4770      	bx	lr

000d5a94 <_ZN7PMSA0038pm10_envEv>:

const uint16_t PMSA003::pm10_env()
{
    return _datBuffer[4];
}
   d5a94:	8900      	ldrh	r0, [r0, #8]
   d5a96:	4770      	bx	lr

000d5a98 <_ZN7PMSA0038pm25_envEv>:

const uint16_t PMSA003::pm25_env()
{
    return _datBuffer[5];
}
   d5a98:	8940      	ldrh	r0, [r0, #10]
   d5a9a:	4770      	bx	lr

000d5a9c <_ZN7PMSA0039pm100_envEv>:

const uint16_t PMSA003::pm100_env()
{
    return _datBuffer[6];
}
   d5a9c:	8980      	ldrh	r0, [r0, #12]
   d5a9e:	4770      	bx	lr

000d5aa0 <_ZN7PMSA0035pt_03Ev>:

const uint16_t PMSA003::pt_03()
{
    return _datBuffer[7];
}
   d5aa0:	89c0      	ldrh	r0, [r0, #14]
   d5aa2:	4770      	bx	lr

000d5aa4 <_ZN7PMSA0035pt_05Ev>:

const uint16_t PMSA003::pt_05()
{
    return _datBuffer[8];
}
   d5aa4:	8a00      	ldrh	r0, [r0, #16]
   d5aa6:	4770      	bx	lr

000d5aa8 <_ZN7PMSA0035pt_10Ev>:

const uint16_t PMSA003::pt_10()
{
    return _datBuffer[9];
}
   d5aa8:	8a40      	ldrh	r0, [r0, #18]
   d5aaa:	4770      	bx	lr

000d5aac <_ZN7PMSA0035pt_25Ev>:

const uint16_t PMSA003::pt_25()
{
    return _datBuffer[10];
}
   d5aac:	8a80      	ldrh	r0, [r0, #20]
   d5aae:	4770      	bx	lr

000d5ab0 <_ZN7PMSA0035pt_50Ev>:

const uint16_t PMSA003::pt_50()
{
    return _datBuffer[11];
}
   d5ab0:	8ac0      	ldrh	r0, [r0, #22]
   d5ab2:	4770      	bx	lr

000d5ab4 <_ZN7PMSA0036pt_100Ev>:

const uint16_t PMSA003::pt_100()
{
    return _datBuffer[12];
}
   d5ab4:	8b00      	ldrh	r0, [r0, #24]
   d5ab6:	4770      	bx	lr

000d5ab8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d5ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5abc:	b085      	sub	sp, #20
   d5abe:	461f      	mov	r7, r3
   d5ac0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d5ac4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5ac8:	eba8 0902 	sub.w	r9, r8, r2
   d5acc:	eba7 0a01 	sub.w	sl, r7, r1
   d5ad0:	f1b9 0f00 	cmp.w	r9, #0
   d5ad4:	bfb8      	it	lt
   d5ad6:	f1c9 0900 	rsblt	r9, r9, #0
   d5ada:	f1ba 0f00 	cmp.w	sl, #0
   d5ade:	bfb8      	it	lt
   d5ae0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d5ae4:	45d1      	cmp	r9, sl
        uint16_t color) {
   d5ae6:	4683      	mov	fp, r0
   d5ae8:	460c      	mov	r4, r1
   d5aea:	4615      	mov	r5, r2
    if (steep) {
   d5aec:	dd04      	ble.n	d5af8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d5aee:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d5af0:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d5af2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d5af4:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d5af6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d5af8:	42bc      	cmp	r4, r7
   d5afa:	dd05      	ble.n	d5b08 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d5afc:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d5afe:	4645      	mov	r5, r8
   d5b00:	4690      	mov	r8, r2
    if (x0 > x1) {
   d5b02:	4622      	mov	r2, r4
   d5b04:	463c      	mov	r4, r7
   d5b06:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d5b08:	1b3e      	subs	r6, r7, r4
   d5b0a:	b2b2      	uxth	r2, r6
   d5b0c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d5b0e:	eba8 0205 	sub.w	r2, r8, r5
   d5b12:	2a00      	cmp	r2, #0
   d5b14:	bfb8      	it	lt
   d5b16:	4252      	neglt	r2, r2
   d5b18:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d5b1a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d5b1e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d5b22:	4545      	cmp	r5, r8
   d5b24:	bfb4      	ite	lt
   d5b26:	2201      	movlt	r2, #1
   d5b28:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d5b2c:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d5b2e:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d5b30:	42bc      	cmp	r4, r7
   d5b32:	dc1c      	bgt.n	d5b6e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d5b34:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d5b38:	9303      	str	r3, [sp, #12]
        if (steep) {
   d5b3a:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d5b3c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d5b40:	bfc7      	ittee	gt
   d5b42:	4629      	movgt	r1, r5
   d5b44:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d5b46:	462a      	movle	r2, r5
   d5b48:	4621      	movle	r1, r4
   d5b4a:	4658      	mov	r0, fp
   d5b4c:	47c0      	blx	r8
        }
        err -= dy;
   d5b4e:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d5b50:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d5b52:	1ab6      	subs	r6, r6, r2
   d5b54:	b2b1      	uxth	r1, r6
   d5b56:	b236      	sxth	r6, r6
        if (err < 0) {
   d5b58:	2e00      	cmp	r6, #0
   d5b5a:	da05      	bge.n	d5b68 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d5b5c:	9a02      	ldr	r2, [sp, #8]
   d5b5e:	4415      	add	r5, r2
            err += dx;
   d5b60:	9a00      	ldr	r2, [sp, #0]
   d5b62:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d5b64:	b22d      	sxth	r5, r5
            err += dx;
   d5b66:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d5b68:	3401      	adds	r4, #1
   d5b6a:	b224      	sxth	r4, r4
   d5b6c:	e7e0      	b.n	d5b30 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d5b6e:	b005      	add	sp, #20
   d5b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5b74 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d5b74:	4770      	bx	lr

000d5b76 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d5b76:	b410      	push	{r4}
    drawPixel(x, y, color);
   d5b78:	6804      	ldr	r4, [r0, #0]
   d5b7a:	6924      	ldr	r4, [r4, #16]
   d5b7c:	46a4      	mov	ip, r4
}
   d5b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d5b82:	4760      	bx	ip

000d5b84 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d5b84:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d5b86:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d5b88:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d5b8c:	9502      	str	r5, [sp, #8]
   d5b8e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d5b90:	46a4      	mov	ip, r4
}
   d5b92:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d5b94:	4760      	bx	ip

000d5b96 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d5b96:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d5b98:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d5b9a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d5b9e:	9502      	str	r5, [sp, #8]
   d5ba0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d5ba2:	46a4      	mov	ip, r4
}
   d5ba4:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d5ba6:	4760      	bx	ip

000d5ba8 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5ba8:	b470      	push	{r4, r5, r6}
   d5baa:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d5bae:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d5bb2:	6804      	ldr	r4, [r0, #0]
   d5bb4:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d5bb8:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d5bba:	46a4      	mov	ip, r4
}
   d5bbc:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d5bbe:	4760      	bx	ip

000d5bc0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d5bc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5bc4:	461c      	mov	r4, r3
    startWrite();
   d5bc6:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d5bc8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d5bcc:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d5bce:	4605      	mov	r5, r0
   d5bd0:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d5bd2:	3c01      	subs	r4, #1
   d5bd4:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d5bd6:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d5bd8:	b224      	sxth	r4, r4
    startWrite();
   d5bda:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d5bdc:	682b      	ldr	r3, [r5, #0]
   d5bde:	f8cd 8004 	str.w	r8, [sp, #4]
   d5be2:	9400      	str	r4, [sp, #0]
   d5be4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d5be6:	4628      	mov	r0, r5
   d5be8:	463b      	mov	r3, r7
   d5bea:	4632      	mov	r2, r6
   d5bec:	4639      	mov	r1, r7
   d5bee:	47a0      	blx	r4
    endWrite();
   d5bf0:	682b      	ldr	r3, [r5, #0]
   d5bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bf4:	4628      	mov	r0, r5
}
   d5bf6:	b002      	add	sp, #8
   d5bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d5bfc:	4718      	bx	r3

000d5bfe <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d5bfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5c02:	461d      	mov	r5, r3
    startWrite();
   d5c04:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d5c06:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d5c0a:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d5c0c:	4604      	mov	r4, r0
   d5c0e:	4617      	mov	r7, r2
   d5c10:	460e      	mov	r6, r1
    startWrite();
   d5c12:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d5c14:	e9cd 7800 	strd	r7, r8, [sp]
   d5c18:	6822      	ldr	r2, [r4, #0]
   d5c1a:	1e6b      	subs	r3, r5, #1
   d5c1c:	4433      	add	r3, r6
   d5c1e:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d5c20:	4620      	mov	r0, r4
   d5c22:	b21b      	sxth	r3, r3
   d5c24:	463a      	mov	r2, r7
   d5c26:	4631      	mov	r1, r6
   d5c28:	47a8      	blx	r5
    endWrite();
   d5c2a:	6823      	ldr	r3, [r4, #0]
   d5c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c2e:	4620      	mov	r0, r4
}
   d5c30:	b002      	add	sp, #8
   d5c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d5c36:	4718      	bx	r3

000d5c38 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5c38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5c3c:	461e      	mov	r6, r3
    startWrite();
   d5c3e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d5c40:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d5c44:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5c46:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d5c4a:	460c      	mov	r4, r1
   d5c4c:	4605      	mov	r5, r0
   d5c4e:	4617      	mov	r7, r2
    startWrite();
   d5c50:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d5c52:	4426      	add	r6, r4
   d5c54:	42b4      	cmp	r4, r6
   d5c56:	682b      	ldr	r3, [r5, #0]
   d5c58:	da0b      	bge.n	d5c72 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d5c5a:	f8cd 8000 	str.w	r8, [sp]
   d5c5e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d5c62:	4621      	mov	r1, r4
   d5c64:	464b      	mov	r3, r9
   d5c66:	463a      	mov	r2, r7
   d5c68:	4628      	mov	r0, r5
   d5c6a:	3401      	adds	r4, #1
   d5c6c:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d5c6e:	b224      	sxth	r4, r4
   d5c70:	e7f0      	b.n	d5c54 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d5c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c74:	4628      	mov	r0, r5
}
   d5c76:	b002      	add	sp, #8
   d5c78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5c7c:	4718      	bx	r3

000d5c7e <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d5c7e:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d5c80:	6802      	ldr	r2, [r0, #0]
   d5c82:	9101      	str	r1, [sp, #4]
   d5c84:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5c88:	9100      	str	r1, [sp, #0]
   d5c8a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d5c8c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5c90:	2200      	movs	r2, #0
   d5c92:	4611      	mov	r1, r2
   d5c94:	47a0      	blx	r4
}
   d5c96:	b002      	add	sp, #8
   d5c98:	bd10      	pop	{r4, pc}

000d5c9a <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5c9a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5c9e:	461d      	mov	r5, r3
    startWrite();
   d5ca0:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d5ca2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d5ca6:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5ca8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d5cac:	4604      	mov	r4, r0
   d5cae:	460f      	mov	r7, r1
   d5cb0:	4616      	mov	r6, r2
    startWrite();
   d5cb2:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d5cb4:	6823      	ldr	r3, [r4, #0]
   d5cb6:	f8cd 8000 	str.w	r8, [sp]
   d5cba:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d5cbe:	4632      	mov	r2, r6
   d5cc0:	462b      	mov	r3, r5
   d5cc2:	4639      	mov	r1, r7
   d5cc4:	4620      	mov	r0, r4
   d5cc6:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d5cc8:	6823      	ldr	r3, [r4, #0]
   d5cca:	f8cd 8000 	str.w	r8, [sp]
   d5cce:	f109 32ff 	add.w	r2, r9, #4294967295
   d5cd2:	4432      	add	r2, r6
   d5cd4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d5cd8:	4639      	mov	r1, r7
   d5cda:	462b      	mov	r3, r5
   d5cdc:	4620      	mov	r0, r4
   d5cde:	b212      	sxth	r2, r2
   d5ce0:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d5ce2:	6823      	ldr	r3, [r4, #0]
   d5ce4:	f8cd 8000 	str.w	r8, [sp]
   d5ce8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d5cec:	4632      	mov	r2, r6
   d5cee:	464b      	mov	r3, r9
   d5cf0:	4639      	mov	r1, r7
   d5cf2:	4620      	mov	r0, r4
   d5cf4:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d5cf6:	1e6b      	subs	r3, r5, #1
   d5cf8:	19d9      	adds	r1, r3, r7
   d5cfa:	6823      	ldr	r3, [r4, #0]
   d5cfc:	f8cd 8000 	str.w	r8, [sp]
   d5d00:	6a1d      	ldr	r5, [r3, #32]
   d5d02:	4620      	mov	r0, r4
   d5d04:	464b      	mov	r3, r9
   d5d06:	4632      	mov	r2, r6
   d5d08:	b209      	sxth	r1, r1
   d5d0a:	47a8      	blx	r5
    endWrite();
   d5d0c:	6823      	ldr	r3, [r4, #0]
   d5d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d10:	4620      	mov	r0, r4
}
   d5d12:	b002      	add	sp, #8
   d5d14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5d18:	4718      	bx	r3

000d5d1a <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d5d1a:	4770      	bx	lr

000d5d1c <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d5d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d5d20:	4299      	cmp	r1, r3
        uint16_t color) {
   d5d22:	4616      	mov	r6, r2
   d5d24:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d5d28:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5d2c:	6802      	ldr	r2, [r0, #0]
   d5d2e:	4680      	mov	r8, r0
   d5d30:	460d      	mov	r5, r1
   d5d32:	461c      	mov	r4, r3
    if(x0 == x1){
   d5d34:	d113      	bne.n	d5d5e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5d36:	42be      	cmp	r6, r7
   d5d38:	bfc8      	it	gt
   d5d3a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5d3c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5d40:	bfc4      	itt	gt
   d5d42:	463e      	movgt	r6, r7
   d5d44:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5d46:	1c7b      	adds	r3, r7, #1
   d5d48:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d5d4a:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5d4c:	b21b      	sxth	r3, r3
   d5d4e:	4632      	mov	r2, r6
   d5d50:	4629      	mov	r1, r5
   d5d52:	4640      	mov	r0, r8
   d5d54:	46a4      	mov	ip, r4
}
   d5d56:	b003      	add	sp, #12
   d5d58:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5d5c:	4760      	bx	ip
    } else if(y0 == y1){
   d5d5e:	42be      	cmp	r6, r7
   d5d60:	d10a      	bne.n	d5d78 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d5d62:	4299      	cmp	r1, r3
   d5d64:	bfc2      	ittt	gt
   d5d66:	460b      	movgt	r3, r1
   d5d68:	4625      	movgt	r5, r4
   d5d6a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5d6c:	1c63      	adds	r3, r4, #1
   d5d6e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d5d72:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5d74:	1b5b      	subs	r3, r3, r5
   d5d76:	e7e9      	b.n	d5d4c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d5d78:	6953      	ldr	r3, [r2, #20]
   d5d7a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d5d7c:	e9cd 7900 	strd	r7, r9, [sp]
   d5d80:	f8d8 3000 	ldr.w	r3, [r8]
   d5d84:	4640      	mov	r0, r8
   d5d86:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5d88:	4632      	mov	r2, r6
   d5d8a:	4623      	mov	r3, r4
   d5d8c:	4629      	mov	r1, r5
   d5d8e:	47b8      	blx	r7
        endWrite();
   d5d90:	f8d8 3000 	ldr.w	r3, [r8]
   d5d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d96:	4640      	mov	r0, r8
}
   d5d98:	b003      	add	sp, #12
   d5d9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d5d9e:	4718      	bx	r3

000d5da0 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d5da0:	f001 0303 	and.w	r3, r1, #3
   d5da4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d5da8:	7643      	strb	r3, [r0, #25]
    switch(rotation) {
   d5daa:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d5dac:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5db0:	bf59      	ittee	pl
   d5db2:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d5db4:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d5db6:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d5db8:	81c3      	strhmi	r3, [r0, #14]
}
   d5dba:	4770      	bx	lr

000d5dbc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5dbc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d5dbe:	8101      	strh	r1, [r0, #8]
   d5dc0:	2400      	movs	r4, #0
   d5dc2:	4d07      	ldr	r5, [pc, #28]	; (d5de0 <_ZN12Adafruit_GFXC1Ess+0x24>)
   d5dc4:	8142      	strh	r2, [r0, #10]
    _width    = WIDTH;
   d5dc6:	8181      	strh	r1, [r0, #12]
    _height   = HEIGHT;
   d5dc8:	81c2      	strh	r2, [r0, #14]
    textsize  = 1;
   d5dca:	f04f 31ff 	mov.w	r1, #4294967295
   d5dce:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   d5dd2:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d5dd6:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d5dd8:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d5dda:	6104      	str	r4, [r0, #16]
    gfxFont   = NULL;
   d5ddc:	61c4      	str	r4, [r0, #28]
}
   d5dde:	bd30      	pop	{r4, r5, pc}
   d5de0:	000df434 	.word	0x000df434

000d5de4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5de8:	b089      	sub	sp, #36	; 0x24
   d5dea:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d5dee:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5df0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d5df4:	9304      	str	r3, [sp, #16]
   d5df6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d5dfa:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5dfc:	9305      	str	r3, [sp, #20]
   d5dfe:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d5e02:	4604      	mov	r4, r0
    startWrite();
   d5e04:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d5e06:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d5e0a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d5e0e:	bf48      	it	mi
   d5e10:	f108 020e 	addmi.w	r2, r8, #14
   d5e14:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d5e18:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d5e1a:	4635      	mov	r5, r6
   d5e1c:	9b03      	ldr	r3, [sp, #12]
   d5e1e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d5e20:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d5e24:	189a      	adds	r2, r3, r2
   d5e26:	9b05      	ldr	r3, [sp, #20]
   d5e28:	428b      	cmp	r3, r1
   d5e2a:	b212      	sxth	r2, r2
   d5e2c:	dd27      	ble.n	d5e7e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5e2e:	9b04      	ldr	r3, [sp, #16]
   d5e30:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d5e32:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5e36:	9306      	str	r3, [sp, #24]
   d5e38:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d5e3c:	4580      	cmp	r8, r0
   d5e3e:	fa1f f189 	uxth.w	r1, r9
   d5e42:	dd17      	ble.n	d5e74 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d5e44:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5e46:	bf05      	ittet	eq
   d5e48:	9b06      	ldreq	r3, [sp, #24]
   d5e4a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d5e4c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5e4e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d5e50:	bf18      	it	ne
   d5e52:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d5e54:	062b      	lsls	r3, r5, #24
   d5e56:	d50a      	bpl.n	d5e6e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d5e58:	9b02      	ldr	r3, [sp, #8]
   d5e5a:	6820      	ldr	r0, [r4, #0]
   d5e5c:	9207      	str	r2, [sp, #28]
   d5e5e:	4419      	add	r1, r3
   d5e60:	6983      	ldr	r3, [r0, #24]
   d5e62:	b209      	sxth	r1, r1
   d5e64:	461f      	mov	r7, r3
   d5e66:	4620      	mov	r0, r4
   d5e68:	4653      	mov	r3, sl
   d5e6a:	47b8      	blx	r7
   d5e6c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d5e6e:	f109 0901 	add.w	r9, r9, #1
   d5e72:	e7e1      	b.n	d5e38 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d5e74:	9b01      	ldr	r3, [sp, #4]
   d5e76:	3301      	adds	r3, #1
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	445e      	add	r6, fp
   d5e7c:	e7ce      	b.n	d5e1c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d5e7e:	6823      	ldr	r3, [r4, #0]
   d5e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e82:	4620      	mov	r0, r4
}
   d5e84:	b009      	add	sp, #36	; 0x24
   d5e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d5e8a:	4718      	bx	r3

000d5e8c <_ZN12Adafruit_GFX8drawCharEsshtth>:
  uint16_t color, uint16_t bg, uint8_t size) {
   d5e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e90:	ed2d 8b02 	vpush	{d8}
   d5e94:	b091      	sub	sp, #68	; 0x44
   d5e96:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d5e98:	69c2      	ldr	r2, [r0, #28]
  uint16_t color, uint16_t bg, uint8_t size) {
   d5e9a:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
   d5e9e:	f89d 4078 	ldrb.w	r4, [sp, #120]	; 0x78
   d5ea2:	4698      	mov	r8, r3
   d5ea4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d5ea8:	9302      	str	r3, [sp, #8]
   d5eaa:	4682      	mov	sl, r0
   d5eac:	460d      	mov	r5, r1
    if(!gfxFont) { // 'Classic' built-in font
   d5eae:	2a00      	cmp	r2, #0
   d5eb0:	f040 80b7 	bne.w	d6022 <_ZN12Adafruit_GFX8drawCharEsshtth+0x196>
        if((x >= _width)            || // Clip right
   d5eb4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5eb8:	428b      	cmp	r3, r1
   d5eba:	f340 813c 	ble.w	d6136 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
   d5ebe:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d5ec2:	42b3      	cmp	r3, r6
   d5ec4:	f340 8137 	ble.w	d6136 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
           ((x + 6 * size - 1) < 0) || // Clip left
   d5ec8:	2306      	movs	r3, #6
   d5eca:	fb13 1304 	smlabb	r3, r3, r4, r1
           (y >= _height)           || // Clip bottom
   d5ece:	2b00      	cmp	r3, #0
   d5ed0:	f340 8131 	ble.w	d6136 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
           ((y + 8 * size - 1) < 0))   // Clip top
   d5ed4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size - 1) < 0) || // Clip left
   d5ed8:	2b00      	cmp	r3, #0
   d5eda:	f340 812c 	ble.w	d6136 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d5ede:	7ec3      	ldrb	r3, [r0, #27]
   d5ee0:	b933      	cbnz	r3, d5ef0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x64>
   d5ee2:	f1b8 0faf 	cmp.w	r8, #175	; 0xaf
   d5ee6:	bf84      	itt	hi
   d5ee8:	f108 0801 	addhi.w	r8, r8, #1
   d5eec:	fa5f f888 	uxtbhi.w	r8, r8
        startWrite();
   d5ef0:	f8da 3000 	ldr.w	r3, [sl]
   d5ef4:	4650      	mov	r0, sl
   d5ef6:	695b      	ldr	r3, [r3, #20]
   d5ef8:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5efa:	2305      	movs	r3, #5
   d5efc:	9309      	str	r3, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5efe:	2300      	movs	r3, #0
   d5f00:	9303      	str	r3, [sp, #12]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5f02:	4b8f      	ldr	r3, [pc, #572]	; (d6140 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b4>)
   d5f04:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   d5f08:	4443      	add	r3, r8
   d5f0a:	930a      	str	r3, [sp, #40]	; 0x28
   d5f0c:	b2b3      	uxth	r3, r6
   d5f0e:	9307      	str	r3, [sp, #28]
   d5f10:	9a03      	ldr	r2, [sp, #12]
   d5f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5f14:	5c9b      	ldrb	r3, [r3, r2]
   d5f16:	9306      	str	r3, [sp, #24]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d5f18:	fb02 f904 	mul.w	r9, r2, r4
   d5f1c:	b2a3      	uxth	r3, r4
   d5f1e:	fa19 f985 	uxtah	r9, r9, r5
   d5f22:	9305      	str	r3, [sp, #20]
   d5f24:	b2ab      	uxth	r3, r5
   d5f26:	9308      	str	r3, [sp, #32]
   d5f28:	fa0f f389 	sxth.w	r3, r9
   d5f2c:	ee08 3a10 	vmov	s16, r3
   d5f30:	9b07      	ldr	r3, [sp, #28]
   d5f32:	9304      	str	r3, [sp, #16]
                        writePixel(x+i, y+j, bg);
   d5f34:	4613      	mov	r3, r2
   d5f36:	442b      	add	r3, r5
   d5f38:	b21b      	sxth	r3, r3
   d5f3a:	ee08 3a90 	vmov	s17, r3
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d5f3e:	f04f 0800 	mov.w	r8, #0
   d5f42:	fa0f f984 	sxth.w	r9, r4
                if(line & 1) {
   d5f46:	9a06      	ldr	r2, [sp, #24]
   d5f48:	f8da 3000 	ldr.w	r3, [sl]
   d5f4c:	07d1      	lsls	r1, r2, #31
   d5f4e:	d54a      	bpl.n	d5fe6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x15a>
                    if(size == 1)
   d5f50:	2c01      	cmp	r4, #1
   d5f52:	d13a      	bne.n	d5fca <_ZN12Adafruit_GFX8drawCharEsshtth+0x13e>
                        writePixel(x+i, y+j, color);
   d5f54:	9a07      	ldr	r2, [sp, #28]
   d5f56:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d5f5a:	9b02      	ldr	r3, [sp, #8]
   d5f5c:	4442      	add	r2, r8
                        writePixel(x+i, y+j, bg);
   d5f5e:	ee18 1a90 	vmov	r1, s17
   d5f62:	b212      	sxth	r2, r2
   d5f64:	4650      	mov	r0, sl
   d5f66:	47d8      	blx	fp
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5f68:	9b06      	ldr	r3, [sp, #24]
   d5f6a:	085b      	lsrs	r3, r3, #1
   d5f6c:	9306      	str	r3, [sp, #24]
   d5f6e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   d5f72:	f108 0801 	add.w	r8, r8, #1
   d5f76:	4413      	add	r3, r2
   d5f78:	b29b      	uxth	r3, r3
   d5f7a:	f1b8 0f08 	cmp.w	r8, #8
   d5f7e:	9304      	str	r3, [sp, #16]
   d5f80:	d1e1      	bne.n	d5f46 <_ZN12Adafruit_GFX8drawCharEsshtth+0xba>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5f82:	9b03      	ldr	r3, [sp, #12]
   d5f84:	3301      	adds	r3, #1
   d5f86:	b25b      	sxtb	r3, r3
   d5f88:	9303      	str	r3, [sp, #12]
   d5f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5f8c:	3b01      	subs	r3, #1
   d5f8e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5f92:	9309      	str	r3, [sp, #36]	; 0x24
   d5f94:	d1bc      	bne.n	d5f10 <_ZN12Adafruit_GFX8drawCharEsshtth+0x84>
        if(bg != color) { // If opaque, draw vertical line for last column
   d5f96:	9b02      	ldr	r3, [sp, #8]
   d5f98:	42bb      	cmp	r3, r7
   d5f9a:	d00c      	beq.n	d5fb6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12a>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
   d5f9c:	2c01      	cmp	r4, #1
   d5f9e:	f8da 2000 	ldr.w	r2, [sl]
   d5fa2:	d12d      	bne.n	d6000 <_ZN12Adafruit_GFX8drawCharEsshtth+0x174>
   d5fa4:	9908      	ldr	r1, [sp, #32]
   d5fa6:	9700      	str	r7, [sp, #0]
   d5fa8:	3105      	adds	r1, #5
   d5faa:	6a14      	ldr	r4, [r2, #32]
   d5fac:	4643      	mov	r3, r8
   d5fae:	4632      	mov	r2, r6
   d5fb0:	b209      	sxth	r1, r1
   d5fb2:	4650      	mov	r0, sl
   d5fb4:	47a0      	blx	r4
        endWrite();
   d5fb6:	f8da 3000 	ldr.w	r3, [sl]
   d5fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fbc:	4650      	mov	r0, sl
}
   d5fbe:	b011      	add	sp, #68	; 0x44
   d5fc0:	ecbd 8b02 	vpop	{d8}
   d5fc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d5fc8:	4718      	bx	r3
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d5fca:	9a02      	ldr	r2, [sp, #8]
   d5fcc:	9201      	str	r2, [sp, #4]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d5fce:	f8cd 9000 	str.w	r9, [sp]
   d5fd2:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d5fd6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d5fda:	ee18 1a10 	vmov	r1, s16
   d5fde:	464b      	mov	r3, r9
   d5fe0:	4650      	mov	r0, sl
   d5fe2:	47d8      	blx	fp
   d5fe4:	e7c0      	b.n	d5f68 <_ZN12Adafruit_GFX8drawCharEsshtth+0xdc>
                } else if(bg != color) {
   d5fe6:	9a02      	ldr	r2, [sp, #8]
   d5fe8:	42ba      	cmp	r2, r7
   d5fea:	d0bd      	beq.n	d5f68 <_ZN12Adafruit_GFX8drawCharEsshtth+0xdc>
                    if(size == 1)
   d5fec:	2c01      	cmp	r4, #1
   d5fee:	d105      	bne.n	d5ffc <_ZN12Adafruit_GFX8drawCharEsshtth+0x170>
                        writePixel(x+i, y+j, bg);
   d5ff0:	9a07      	ldr	r2, [sp, #28]
   d5ff2:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d5ff6:	4442      	add	r2, r8
   d5ff8:	463b      	mov	r3, r7
   d5ffa:	e7b0      	b.n	d5f5e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd2>
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d5ffc:	9701      	str	r7, [sp, #4]
   d5ffe:	e7e6      	b.n	d5fce <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
   d6000:	9b05      	ldr	r3, [sp, #20]
   d6002:	9701      	str	r7, [sp, #4]
   d6004:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   d6008:	9b08      	ldr	r3, [sp, #32]
   d600a:	440b      	add	r3, r1
   d600c:	4619      	mov	r1, r3
   d600e:	9b05      	ldr	r3, [sp, #20]
   d6010:	00db      	lsls	r3, r3, #3
   d6012:	9300      	str	r3, [sp, #0]
   d6014:	69d5      	ldr	r5, [r2, #28]
   d6016:	4623      	mov	r3, r4
   d6018:	4632      	mov	r2, r6
   d601a:	b209      	sxth	r1, r1
   d601c:	4650      	mov	r0, sl
   d601e:	47a8      	blx	r5
        endWrite();
   d6020:	e7c9      	b.n	d5fb6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12a>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d6022:	7a13      	ldrb	r3, [r2, #8]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d6024:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
   d6026:	6812      	ldr	r2, [r2, #0]
   d6028:	9209      	str	r2, [sp, #36]	; 0x24
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d602a:	eba8 0803 	sub.w	r8, r8, r3
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d602e:	fa5f f888 	uxtb.w	r8, r8
   d6032:	eb01 03c8 	add.w	r3, r1, r8, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d6036:	f831 b038 	ldrh.w	fp, [r1, r8, lsl #3]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d603a:	789a      	ldrb	r2, [r3, #2]
                 yo = pgm_read_byte(&glyph->yOffset);
   d603c:	f993 8006 	ldrsb.w	r8, [r3, #6]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d6040:	920a      	str	r2, [sp, #40]	; 0x28
        if(size > 1) {
   d6042:	2c01      	cmp	r4, #1
                 h  = pgm_read_byte(&glyph->height);
   d6044:	78da      	ldrb	r2, [r3, #3]
   d6046:	920b      	str	r2, [sp, #44]	; 0x2c
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d6048:	f993 2005 	ldrsb.w	r2, [r3, #5]
   d604c:	9206      	str	r2, [sp, #24]
        int16_t  xo16 = 0, yo16 = 0;
   d604e:	bf95      	itete	ls
   d6050:	2300      	movls	r3, #0
            yo16 = yo;
   d6052:	fa0f f388 	sxthhi.w	r3, r8
        int16_t  xo16 = 0, yo16 = 0;
   d6056:	461f      	movls	r7, r3
            yo16 = yo;
   d6058:	9303      	strhi	r3, [sp, #12]
        int16_t  xo16 = 0, yo16 = 0;
   d605a:	bf98      	it	ls
   d605c:	9303      	strls	r3, [sp, #12]
        startWrite();
   d605e:	6803      	ldr	r3, [r0, #0]
            xo16 = xo;
   d6060:	bf88      	it	hi
   d6062:	f9bd 7018 	ldrshhi.w	r7, [sp, #24]
        startWrite();
   d6066:	695b      	ldr	r3, [r3, #20]
   d6068:	4798      	blx	r3
        for(yy=0; yy<h; yy++) {
   d606a:	4367      	muls	r7, r4
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d606c:	b2a3      	uxth	r3, r4
   d606e:	9305      	str	r3, [sp, #20]
   d6070:	b2ab      	uxth	r3, r5
   d6072:	fa17 f585 	uxtah	r5, r7, r5
   d6076:	b2b2      	uxth	r2, r6
   d6078:	9308      	str	r3, [sp, #32]
   d607a:	b2ab      	uxth	r3, r5
   d607c:	930d      	str	r3, [sp, #52]	; 0x34
   d607e:	920e      	str	r2, [sp, #56]	; 0x38
        uint8_t  xx, yy, bits = 0, bit = 0;
   d6080:	2300      	movs	r3, #0
                        writePixel(x+xo+xx, y+yo+yy, color);
   d6082:	fa18 f286 	uxtah	r2, r8, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d6086:	461f      	mov	r7, r3
        for(yy=0; yy<h; yy++) {
   d6088:	461d      	mov	r5, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d608a:	920f      	str	r2, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d608c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d608e:	4295      	cmp	r5, r2
   d6090:	d291      	bcs.n	d5fb6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12a>
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d6092:	9a03      	ldr	r2, [sp, #12]
   d6094:	9905      	ldr	r1, [sp, #20]
   d6096:	980e      	ldr	r0, [sp, #56]	; 0x38
   d6098:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   d609c:	442a      	add	r2, r5
   d609e:	fb02 0201 	mla	r2, r2, r1, r0
   d60a2:	b212      	sxth	r2, r2
   d60a4:	ee08 2a10 	vmov	s16, r2
   d60a8:	9906      	ldr	r1, [sp, #24]
   d60aa:	9a08      	ldr	r2, [sp, #32]
   d60ac:	1856      	adds	r6, r2, r1
   d60ae:	b2b2      	uxth	r2, r6
   d60b0:	9204      	str	r2, [sp, #16]
   d60b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d60b4:	189a      	adds	r2, r3, r2
   d60b6:	b2d2      	uxtb	r2, r2
   d60b8:	9207      	str	r2, [sp, #28]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d60ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d60bc:	eb02 0905 	add.w	r9, r2, r5
   d60c0:	fa0f f989 	sxth.w	r9, r9
            for(xx=0; xx<w; xx++) {
   d60c4:	9a07      	ldr	r2, [sp, #28]
   d60c6:	429a      	cmp	r2, r3
   d60c8:	d032      	beq.n	d6130 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2a4>
                if(!(bit++ & 7)) {
   d60ca:	1c5a      	adds	r2, r3, #1
   d60cc:	b2d2      	uxtb	r2, r2
   d60ce:	920c      	str	r2, [sp, #48]	; 0x30
   d60d0:	075a      	lsls	r2, r3, #29
                    bits = pgm_read_byte(&bitmap[bo++]);
   d60d2:	bf01      	itttt	eq
   d60d4:	9a09      	ldreq	r2, [sp, #36]	; 0x24
   d60d6:	f812 700b 	ldrbeq.w	r7, [r2, fp]
   d60da:	f10b 0301 	addeq.w	r3, fp, #1
   d60de:	fa1f fb83 	uxtheq.w	fp, r3
                if(bits & 0x80) {
   d60e2:	063b      	lsls	r3, r7, #24
   d60e4:	d50b      	bpl.n	d60fe <_ZN12Adafruit_GFX8drawCharEsshtth+0x272>
                    if(size == 1) {
   d60e6:	2c01      	cmp	r4, #1
   d60e8:	f8da 2000 	ldr.w	r2, [sl]
   d60ec:	d113      	bne.n	d6116 <_ZN12Adafruit_GFX8drawCharEsshtth+0x28a>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d60ee:	6993      	ldr	r3, [r2, #24]
   d60f0:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
   d60f4:	461e      	mov	r6, r3
   d60f6:	464a      	mov	r2, r9
   d60f8:	9b02      	ldr	r3, [sp, #8]
   d60fa:	4650      	mov	r0, sl
   d60fc:	47b0      	blx	r6
                bits <<= 1;
   d60fe:	9e04      	ldr	r6, [sp, #16]
   d6100:	3601      	adds	r6, #1
   d6102:	b2b3      	uxth	r3, r6
   d6104:	9304      	str	r3, [sp, #16]
   d6106:	9b05      	ldr	r3, [sp, #20]
   d6108:	007f      	lsls	r7, r7, #1
   d610a:	4498      	add	r8, r3
   d610c:	b2ff      	uxtb	r7, r7
                if(!(bit++ & 7)) {
   d610e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6110:	fa1f f888 	uxth.w	r8, r8
            for(xx=0; xx<w; xx++) {
   d6114:	e7d6      	b.n	d60c4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x238>
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d6116:	9902      	ldr	r1, [sp, #8]
   d6118:	b223      	sxth	r3, r4
   d611a:	e9cd 3100 	strd	r3, r1, [sp]
   d611e:	69d2      	ldr	r2, [r2, #28]
   d6120:	fa0f f188 	sxth.w	r1, r8
   d6124:	4616      	mov	r6, r2
   d6126:	4650      	mov	r0, sl
   d6128:	ee18 2a10 	vmov	r2, s16
   d612c:	47b0      	blx	r6
   d612e:	e7e6      	b.n	d60fe <_ZN12Adafruit_GFX8drawCharEsshtth+0x272>
        for(yy=0; yy<h; yy++) {
   d6130:	3501      	adds	r5, #1
   d6132:	b2ed      	uxtb	r5, r5
   d6134:	e7aa      	b.n	d608c <_ZN12Adafruit_GFX8drawCharEsshtth+0x200>
}
   d6136:	b011      	add	sp, #68	; 0x44
   d6138:	ecbd 8b02 	vpop	{d8}
   d613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6140:	000def2b 	.word	0x000def2b

000d6144 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d6144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d6146:	69c2      	ldr	r2, [r0, #28]
size_t Adafruit_GFX::write(uint8_t c) {
   d6148:	4604      	mov	r4, r0
   d614a:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d614c:	2a00      	cmp	r2, #0
   d614e:	d132      	bne.n	d61b6 <_ZN12Adafruit_GFX5writeEh+0x72>
        if(c == '\n') {                        // Newline?
   d6150:	290a      	cmp	r1, #10
   d6152:	d108      	bne.n	d6166 <_ZN12Adafruit_GFX5writeEh+0x22>
            cursor_y += textsize * 8;          // advance y one line
   d6154:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d6156:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize * 8;          // advance y one line
   d6158:	7e02      	ldrb	r2, [r0, #24]
   d615a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize *
   d615e:	8263      	strh	r3, [r4, #18]
}
   d6160:	2001      	movs	r0, #1
   d6162:	b004      	add	sp, #16
   d6164:	bd70      	pop	{r4, r5, r6, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d6166:	290d      	cmp	r1, #13
   d6168:	d0fa      	beq.n	d6160 <_ZN12Adafruit_GFX5writeEh+0x1c>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
   d616a:	7e01      	ldrb	r1, [r0, #24]
   d616c:	7e80      	ldrb	r0, [r0, #26]
   d616e:	b170      	cbz	r0, d618e <_ZN12Adafruit_GFX5writeEh+0x4a>
   d6170:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
   d6174:	2006      	movs	r0, #6
   d6176:	fb10 5001 	smlabb	r0, r0, r1, r5
   d617a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   d617e:	42a8      	cmp	r0, r5
   d6180:	bfc1      	itttt	gt
   d6182:	f9b4 0012 	ldrshgt.w	r0, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d6186:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize * 8;      // advance y one line
   d6188:	eb00 02c1 	addgt.w	r2, r0, r1, lsl #3
   d618c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d618e:	8ae2      	ldrh	r2, [r4, #22]
   d6190:	9201      	str	r2, [sp, #4]
   d6192:	8aa2      	ldrh	r2, [r4, #20]
   d6194:	9102      	str	r1, [sp, #8]
   d6196:	9200      	str	r2, [sp, #0]
   d6198:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d619c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d61a0:	4620      	mov	r0, r4
   d61a2:	f7ff fe73 	bl	d5e8c <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
   d61a6:	7e23      	ldrb	r3, [r4, #24]
   d61a8:	8a22      	ldrh	r2, [r4, #16]
   d61aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d61ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
   d61b2:	8223      	strh	r3, [r4, #16]
   d61b4:	e7d4      	b.n	d6160 <_ZN12Adafruit_GFX5writeEh+0x1c>
        if(c == '\n') {
   d61b6:	290a      	cmp	r1, #10
   d61b8:	d107      	bne.n	d61ca <_ZN12Adafruit_GFX5writeEh+0x86>
            cursor_x  = 0;
   d61ba:	2300      	movs	r3, #0
   d61bc:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d61be:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize *
   d61c0:	7e01      	ldrb	r1, [r0, #24]
   d61c2:	8a42      	ldrh	r2, [r0, #18]
   d61c4:	fb01 2303 	mla	r3, r1, r3, r2
   d61c8:	e7c9      	b.n	d615e <_ZN12Adafruit_GFX5writeEh+0x1a>
        } else if(c != '\r') {
   d61ca:	290d      	cmp	r1, #13
   d61cc:	d0c8      	beq.n	d6160 <_ZN12Adafruit_GFX5writeEh+0x1c>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d61ce:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d61d0:	42a9      	cmp	r1, r5
   d61d2:	d3c5      	bcc.n	d6160 <_ZN12Adafruit_GFX5writeEh+0x1c>
   d61d4:	7a51      	ldrb	r1, [r2, #9]
   d61d6:	4299      	cmp	r1, r3
   d61d8:	d3c2      	bcc.n	d6160 <_ZN12Adafruit_GFX5writeEh+0x1c>
                  &gfxFont->glyph))[c - first]);
   d61da:	6851      	ldr	r1, [r2, #4]
   d61dc:	1b5d      	subs	r5, r3, r5
   d61de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d61e2:	78ae      	ldrb	r6, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d61e4:	b31e      	cbz	r6, d622e <_ZN12Adafruit_GFX5writeEh+0xea>
   d61e6:	78e9      	ldrb	r1, [r5, #3]
   d61e8:	b309      	cbz	r1, d622e <_ZN12Adafruit_GFX5writeEh+0xea>
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
   d61ea:	7ea1      	ldrb	r1, [r4, #26]
   d61ec:	7e00      	ldrb	r0, [r0, #24]
   d61ee:	b191      	cbz	r1, d6216 <_ZN12Adafruit_GFX5writeEh+0xd2>
   d61f0:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d61f4:	4431      	add	r1, r6
   d61f6:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d61fa:	fb00 6101 	mla	r1, r0, r1, r6
   d61fe:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d6202:	42b1      	cmp	r1, r6
   d6204:	dd07      	ble.n	d6216 <_ZN12Adafruit_GFX5writeEh+0xd2>
                        cursor_x  = 0;
   d6206:	2600      	movs	r6, #0
   d6208:	8226      	strh	r6, [r4, #16]
   d620a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d620e:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize *
   d6210:	fb02 1200 	mla	r2, r2, r0, r1
   d6214:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d6216:	8ae2      	ldrh	r2, [r4, #22]
   d6218:	9201      	str	r2, [sp, #4]
   d621a:	8aa2      	ldrh	r2, [r4, #20]
   d621c:	9002      	str	r0, [sp, #8]
   d621e:	9200      	str	r2, [sp, #0]
   d6220:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d6224:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d6228:	4620      	mov	r0, r4
   d622a:	f7ff fe2f 	bl	d5e8c <_ZN12Adafruit_GFX8drawCharEsshtth>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
   d622e:	7929      	ldrb	r1, [r5, #4]
   d6230:	7e23      	ldrb	r3, [r4, #24]
   d6232:	8a22      	ldrh	r2, [r4, #16]
   d6234:	fb01 2303 	mla	r3, r1, r3, r2
   d6238:	e7bb      	b.n	d61b2 <_ZN12Adafruit_GFX5writeEh+0x6e>

000d623a <_ZN12Adafruit_GFX9setCursorEss>:
    cursor_x = x;
   d623a:	8201      	strh	r1, [r0, #16]
    cursor_y = y;
   d623c:	8242      	strh	r2, [r0, #18]
}
   d623e:	4770      	bx	lr

000d6240 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize = (s > 0) ? s : 1;
   d6240:	2901      	cmp	r1, #1
   d6242:	bf38      	it	cc
   d6244:	2101      	movcc	r1, #1
   d6246:	7601      	strb	r1, [r0, #24]
}
   d6248:	4770      	bx	lr

000d624a <_ZN12Adafruit_GFX12setTextColorEt>:
    textcolor = textbgcolor = c;
   d624a:	82c1      	strh	r1, [r0, #22]
   d624c:	8281      	strh	r1, [r0, #20]
}
   d624e:	4770      	bx	lr

000d6250 <_ZN12Adafruit_GFX11setTextWrapEb>:
    wrap = w;
   d6250:	7681      	strb	r1, [r0, #26]
}
   d6252:	4770      	bx	lr

000d6254 <_ZNK12Adafruit_GFX11getRotationEv>:
}
   d6254:	7e40      	ldrb	r0, [r0, #25]
   d6256:	4770      	bx	lr

000d6258 <_ZNK12Adafruit_GFX5widthEv>:
}
   d6258:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d625c:	4770      	bx	lr

000d625e <_ZNK12Adafruit_GFX6heightEv>:
}
   d625e:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d6262:	4770      	bx	lr

000d6264 <_ZN15Adafruit_BME280C1Ev>:

/***************************************************************************
 PRIVATE FUNCTIONS
 ***************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d6264:	f04f 33ff 	mov.w	r3, #4294967295
   d6268:	60c3      	str	r3, [r0, #12]
{ }
   d626a:	4770      	bx	lr

000d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   d626c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d626e:	4c0b      	ldr	r4, [pc, #44]	; (d629c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d6270:	7821      	ldrb	r1, [r4, #0]
   d6272:	f3bf 8f5b 	dmb	ish
   d6276:	f011 0101 	ands.w	r1, r1, #1
   d627a:	d10b      	bne.n	d6294 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d627c:	4620      	mov	r0, r4
   d627e:	9101      	str	r1, [sp, #4]
   d6280:	f7fd ff1a 	bl	d40b8 <__cxa_guard_acquire>
   d6284:	9901      	ldr	r1, [sp, #4]
   d6286:	b128      	cbz	r0, d6294 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d6288:	4805      	ldr	r0, [pc, #20]	; (d62a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d628a:	f003 faa7 	bl	d97dc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d628e:	4620      	mov	r0, r4
   d6290:	f7fd ff17 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d6294:	4802      	ldr	r0, [pc, #8]	; (d62a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d6296:	b002      	add	sp, #8
   d6298:	bd10      	pop	{r4, pc}
   d629a:	bf00      	nop
   d629c:	2003de24 	.word	0x2003de24
   d62a0:	2003de28 	.word	0x2003de28

000d62a4 <_ZN15Adafruit_BME2807spixferEh>:
/**************************************************************************/
/*!
    @brief  Encapsulate hardware and software SPI transfer into one function
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d62a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d62a8:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d62ac:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d62ae:	4605      	mov	r5, r0
   d62b0:	460f      	mov	r7, r1
    if (_sck == -1)
   d62b2:	d106      	bne.n	d62c2 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d62b4:	f7ff ffda 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d62b8:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d62ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d62be:	f003 bb2f 	b.w	d9920 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d62c2:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d62c4:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d62c6:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d62ca:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d62ce:	2100      	movs	r1, #0
   d62d0:	b280      	uxth	r0, r0
   d62d2:	f005 ff1a 	bl	dc10a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d62d6:	f995 000d 	ldrsb.w	r0, [r5, #13]
   d62da:	fa08 f106 	lsl.w	r1, r8, r6
   d62de:	4039      	ands	r1, r7
   d62e0:	b280      	uxth	r0, r0
   d62e2:	f005 ff12 	bl	dc10a <digitalWrite>
        digitalWrite(_sck, HIGH);
   d62e6:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d62ea:	2101      	movs	r1, #1
   d62ec:	b280      	uxth	r0, r0
   d62ee:	f005 ff0c 	bl	dc10a <digitalWrite>
        if (digitalRead(_miso))
   d62f2:	f995 000e 	ldrsb.w	r0, [r5, #14]
        reply <<= 1;
   d62f6:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d62f8:	b280      	uxth	r0, r0
        reply <<= 1;
   d62fa:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d62fc:	f005 ff1e 	bl	dc13c <digitalRead>
   d6300:	b108      	cbz	r0, d6306 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d6302:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d6306:	3e01      	subs	r6, #1
   d6308:	d2df      	bcs.n	d62ca <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d630a:	4620      	mov	r0, r4
   d630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6310 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d6310:	b508      	push	{r3, lr}
        instance().endTransaction();
   d6312:	f7ff ffab 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d6316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d631a:	f003 ba7a 	b.w	d9812 <_ZN8SPIClass14endTransactionEv>

000d631e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d631e:	b507      	push	{r0, r1, r2, lr}
   d6320:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d6322:	f7ff ffa3 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d6326:	9901      	ldr	r1, [sp, #4]
    }
   d6328:	b003      	add	sp, #12
   d632a:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d632e:	f003 ba89 	b.w	d9844 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d6334 <_ZN15Adafruit_BME2806read24Eh>:
/*!
    @brief  Reads a 24 bit value over I2C
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d6334:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d6336:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d633a:	3301      	adds	r3, #1
{
   d633c:	b085      	sub	sp, #20
   d633e:	4604      	mov	r4, r0
   d6340:	460d      	mov	r5, r1
    if (_cs == -1) {
   d6342:	d12a      	bne.n	d639a <_ZN15Adafruit_BME2806read24Eh+0x66>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d6344:	f005 ff54 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d6348:	7821      	ldrb	r1, [r4, #0]
   d634a:	f005 fdcb 	bl	dbee4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d634e:	f005 ff4f 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d6352:	6803      	ldr	r3, [r0, #0]
   d6354:	4629      	mov	r1, r5
   d6356:	689b      	ldr	r3, [r3, #8]
   d6358:	4798      	blx	r3
        Wire.endTransmission();
   d635a:	f005 ff49 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d635e:	f005 fdc9 	bl	dbef4 <_ZN7TwoWire15endTransmissionEv>
        Wire.requestFrom((uint8_t)_i2caddr, (byte)3);
   d6362:	f005 ff45 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d6366:	7821      	ldrb	r1, [r4, #0]
   d6368:	2203      	movs	r2, #3
   d636a:	f005 fdb8 	bl	dbede <_ZN7TwoWire11requestFromEhj>

        value = Wire.read();
   d636e:	f005 ff3f 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d6372:	6803      	ldr	r3, [r0, #0]
   d6374:	695b      	ldr	r3, [r3, #20]
   d6376:	4798      	blx	r3
        value <<= 8;
   d6378:	0205      	lsls	r5, r0, #8
        value |= Wire.read();
   d637a:	f005 ff39 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d637e:	6803      	ldr	r3, [r0, #0]
   d6380:	695b      	ldr	r3, [r3, #20]
   d6382:	4798      	blx	r3
   d6384:	4328      	orrs	r0, r5
        value <<= 8;
   d6386:	0205      	lsls	r5, r0, #8
        value |= Wire.read();
   d6388:	f005 ff32 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d638c:	6803      	ldr	r3, [r0, #0]
   d638e:	695b      	ldr	r3, [r3, #20]
   d6390:	4798      	blx	r3
   d6392:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d6394:	4628      	mov	r0, r5
   d6396:	b005      	add	sp, #20
   d6398:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d639a:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d639e:	3301      	adds	r3, #1
   d63a0:	d10c      	bne.n	d63bc <_ZN15Adafruit_BME2806read24Eh+0x88>
      dataMode_{dataMode}
   d63a2:	4b1a      	ldr	r3, [pc, #104]	; (d640c <_ZN15Adafruit_BME2806read24Eh+0xd8>)
   d63a4:	9300      	str	r3, [sp, #0]
   d63a6:	2300      	movs	r3, #0
   d63a8:	f88d 3004 	strb.w	r3, [sp, #4]
   d63ac:	4b18      	ldr	r3, [pc, #96]	; (d6410 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
   d63ae:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d63b0:	4668      	mov	r0, sp
   d63b2:	2301      	movs	r3, #1
   d63b4:	f8ad 300c 	strh.w	r3, [sp, #12]
   d63b8:	f7ff ffb1 	bl	d631e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d63bc:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d63c0:	2100      	movs	r1, #0
   d63c2:	b280      	uxth	r0, r0
   d63c4:	f005 fea1 	bl	dc10a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d63c8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d63cc:	4620      	mov	r0, r4
   d63ce:	f7ff ff69 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d63d2:	2100      	movs	r1, #0
   d63d4:	4620      	mov	r0, r4
   d63d6:	f7ff ff65 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d63da:	2100      	movs	r1, #0
        value <<= 8;
   d63dc:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d63de:	4620      	mov	r0, r4
   d63e0:	f7ff ff60 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
   d63e4:	4328      	orrs	r0, r5
        value <<= 8;
   d63e6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d63e8:	2100      	movs	r1, #0
   d63ea:	4620      	mov	r0, r4
   d63ec:	f7ff ff5a 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
   d63f0:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d63f2:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d63f6:	2101      	movs	r1, #1
   d63f8:	b280      	uxth	r0, r0
   d63fa:	f005 fe86 	bl	dc10a <digitalWrite>
        if (_sck == -1)
   d63fe:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d6402:	3301      	adds	r3, #1
   d6404:	d1c6      	bne.n	d6394 <_ZN15Adafruit_BME2806read24Eh+0x60>
            SPI.endTransaction(); // release the SPI bus
   d6406:	f7ff ff83 	bl	d6310 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d640a:	e7c3      	b.n	d6394 <_ZN15Adafruit_BME2806read24Eh+0x60>
   d640c:	000dee48 	.word	0x000dee48
   d6410:	0007a120 	.word	0x0007a120

000d6414 <_ZN15Adafruit_BME28015readTemperatureEv>:
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d6414:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d6416:	21fa      	movs	r1, #250	; 0xfa
{
   d6418:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d641a:	f7ff ff8b 	bl	d6334 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d641e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d6422:	d01e      	beq.n	d6462 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d6424:	8a21      	ldrh	r1, [r4, #16]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d6426:	ed9f 7a10 	vldr	s14, [pc, #64]	; d6468 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d642a:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d642c:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d6430:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d6434:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d6438:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d643a:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d643c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d6440:	1312      	asrs	r2, r2, #12
   d6442:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d6444:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d6446:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d644a:	60a3      	str	r3, [r4, #8]
    float T = (t_fine * 5 + 128) >> 8;
   d644c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d6450:	3380      	adds	r3, #128	; 0x80
   d6452:	121b      	asrs	r3, r3, #8
   d6454:	ee07 3a90 	vmov	s15, r3
   d6458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d645c:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d6460:	bd10      	pop	{r4, pc}
        return NAN;
   d6462:	ed9f 0a02 	vldr	s0, [pc, #8]	; d646c <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d6466:	e7fb      	b.n	d6460 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d6468:	42c80000 	.word	0x42c80000
   d646c:	7fc00000 	.word	0x7fc00000

000d6470 <_ZN15Adafruit_BME28012readPressureEv>:
/**************************************************************************/
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d6470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6474:	4604      	mov	r4, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d6476:	f7ff ffcd 	bl	d6414 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d647a:	21f7      	movs	r1, #247	; 0xf7
   d647c:	4620      	mov	r0, r4
   d647e:	f7ff ff59 	bl	d6334 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d6482:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d6486:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d6488:	f000 80bf 	beq.w	d660a <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d648c:	68a0      	ldr	r0, [r4, #8]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d648e:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
    var1 = ((int64_t)t_fine) - 128000;
   d6492:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d6496:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d649a:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d649e:	fba3 8903 	umull	r8, r9, r3, r3
   d64a2:	fb03 f102 	mul.w	r1, r3, r2
   d64a6:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d64aa:	17f7      	asrs	r7, r6, #31
   d64ac:	fb06 f102 	mul.w	r1, r6, r2
   d64b0:	fb03 1107 	mla	r1, r3, r7, r1
   d64b4:	fba6 6703 	umull	r6, r7, r6, r3
   d64b8:	440f      	add	r7, r1
   d64ba:	0339      	lsls	r1, r7, #12
   d64bc:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d64c0:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d64c2:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
   d64c6:	17f7      	asrs	r7, r6, #31
   d64c8:	fb06 fc09 	mul.w	ip, r6, r9
   d64cc:	fb08 cc07 	mla	ip, r8, r7, ip
   d64d0:	fba6 6708 	umull	r6, r7, r6, r8
   d64d4:	4467      	add	r7, ip
   d64d6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d64da:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d64de:	8ae6      	ldrh	r6, [r4, #22]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d64e0:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d64e4:	eb1c 0000 	adds.w	r0, ip, r0
   d64e8:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d64ec:	3000      	adds	r0, #0
   d64ee:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d64f2:	fba0 0106 	umull	r0, r1, r0, r6
   d64f6:	fb06 110e 	mla	r1, r6, lr, r1
   d64fa:	104e      	asrs	r6, r1, #1
   d64fc:	17cf      	asrs	r7, r1, #31

    if (var1 == 0) {
   d64fe:	ea56 0107 	orrs.w	r1, r6, r7
   d6502:	f000 8085 	beq.w	d6610 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d6506:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
   d650a:	fb00 fc09 	mul.w	ip, r0, r9
   d650e:	17c1      	asrs	r1, r0, #31
   d6510:	fb08 cc01 	mla	ip, r8, r1, ip
   d6514:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d6518:	f9b4 801e 	ldrsh.w	r8, [r4, #30]
   d651c:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d6520:	fb08 f202 	mul.w	r2, r8, r2
   d6524:	fb03 2209 	mla	r2, r3, r9, r2
   d6528:	fba8 8903 	umull	r8, r9, r8, r3
   d652c:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d652e:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d6530:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d6534:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d6538:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d653a:	1812      	adds	r2, r2, r0
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
   d653c:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d6540:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d6544:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d6548:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d654c:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d654e:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d6550:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d6552:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d6556:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d655a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d655e:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d6562:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d6566:	1ac0      	subs	r0, r0, r3
   d6568:	f640 4335 	movw	r3, #3125	; 0xc35
   d656c:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d6570:	fba0 0103 	umull	r0, r1, r0, r3
   d6574:	fb03 110e 	mla	r1, r3, lr, r1
   d6578:	4632      	mov	r2, r6
   d657a:	463b      	mov	r3, r7
   d657c:	f007 ff58 	bl	de430 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d6580:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
   d6584:	134d      	asrs	r5, r1, #13
   d6586:	0b46      	lsrs	r6, r0, #13
   d6588:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d658c:	fb02 f705 	mul.w	r7, r2, r5
   d6590:	17d3      	asrs	r3, r2, #31
   d6592:	fb06 7703 	mla	r7, r6, r3, r7
   d6596:	fba2 2306 	umull	r2, r3, r2, r6
   d659a:	443b      	add	r3, r7
   d659c:	4355      	muls	r5, r2
   d659e:	fb06 5503 	mla	r5, r6, r3, r5
   d65a2:	fba2 2306 	umull	r2, r3, r2, r6
   d65a6:	442b      	add	r3, r5
   d65a8:	0e55      	lsrs	r5, r2, #25
   d65aa:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d65ae:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d65b2:	f9b4 4022 	ldrsh.w	r4, [r4, #34]	; 0x22
   d65b6:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d65b8:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d65bc:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d65c0:	17d3      	asrs	r3, r2, #31
   d65c2:	4351      	muls	r1, r2
   d65c4:	fb00 1103 	mla	r1, r0, r3, r1
   d65c8:	fba2 2300 	umull	r2, r3, r2, r0
   d65cc:	440b      	add	r3, r1
   d65ce:	0cd1      	lsrs	r1, r2, #19
   d65d0:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d65d4:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d65d6:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d65da:	eb46 0300 	adc.w	r3, r6, r0
   d65de:	0a2a      	lsrs	r2, r5, #8
   d65e0:	17e5      	asrs	r5, r4, #31
   d65e2:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d65e6:	1219      	asrs	r1, r3, #8
   d65e8:	0120      	lsls	r0, r4, #4
   d65ea:	012b      	lsls	r3, r5, #4
   d65ec:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d65f0:	1880      	adds	r0, r0, r2
   d65f2:	eb43 0101 	adc.w	r1, r3, r1
   d65f6:	f007 fedd 	bl	de3b4 <__aeabi_l2f>
   d65fa:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6618 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d65fe:	ee07 0a90 	vmov	s15, r0
   d6602:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d6606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d660a:	ed9f 0a04 	vldr	s0, [pc, #16]	; d661c <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d660e:	e7fa      	b.n	d6606 <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d6610:	ed9f 0a03 	vldr	s0, [pc, #12]	; d6620 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d6614:	e7f7      	b.n	d6606 <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d6616:	bf00      	nop
   d6618:	3b800000 	.word	0x3b800000
   d661c:	7fc00000 	.word	0x7fc00000
	...

000d6628 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @param  atmospheric   Atmospheric pressure in hPa
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d6628:	b508      	push	{r3, lr}
   d662a:	ed2d 8b02 	vpush	{d8}
   d662e:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d6632:	f7ff ff1d 	bl	d6470 <_ZN15Adafruit_BME28012readPressureEv>
   d6636:	ed9f 7a16 	vldr	s14, [pc, #88]	; d6690 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d663a:	eec0 7a07 	vdiv.f32	s15, s0, s14
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d663e:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d6642:	ee17 0a90 	vmov	r0, s15
   d6646:	f007 fa45 	bl	ddad4 <__aeabi_f2d>
   d664a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d6680 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d664e:	ec41 0b10 	vmov	d0, r0, r1
   d6652:	f005 ff3d 	bl	dc4d0 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d6656:	490f      	ldr	r1, [pc, #60]	; (d6694 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d6658:	ec53 2b10 	vmov	r2, r3, d0
   d665c:	2000      	movs	r0, #0
   d665e:	f007 f8d9 	bl	dd814 <__aeabi_dsub>
   d6662:	a309      	add	r3, pc, #36	; (adr r3, d6688 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d6664:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6668:	f007 fa8c 	bl	ddb84 <__aeabi_dmul>
   d666c:	f007 fd82 	bl	de174 <__aeabi_d2f>
}
   d6670:	ecbd 8b02 	vpop	{d8}
   d6674:	ee00 0a10 	vmov	s0, r0
   d6678:	bd08      	pop	{r3, pc}
   d667a:	bf00      	nop
   d667c:	f3af 8000 	nop.w
   d6680:	1a36e2eb 	.word	0x1a36e2eb
   d6684:	3fc85bc0 	.word	0x3fc85bc0
   d6688:	00000000 	.word	0x00000000
   d668c:	40e5a540 	.word	0x40e5a540
   d6690:	42c80000 	.word	0x42c80000
   d6694:	3ff00000 	.word	0x3ff00000

000d6698 <_ZN15Adafruit_BME2806read16Eh>:
{
   d6698:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d669a:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d669e:	3301      	adds	r3, #1
{
   d66a0:	b085      	sub	sp, #20
   d66a2:	4604      	mov	r4, r0
   d66a4:	460d      	mov	r5, r1
    if (_cs == -1) {
   d66a6:	d125      	bne.n	d66f4 <_ZN15Adafruit_BME2806read16Eh+0x5c>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d66a8:	f005 fda2 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d66ac:	7821      	ldrb	r1, [r4, #0]
   d66ae:	f005 fc19 	bl	dbee4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d66b2:	f005 fd9d 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d66b6:	6803      	ldr	r3, [r0, #0]
   d66b8:	4629      	mov	r1, r5
   d66ba:	689b      	ldr	r3, [r3, #8]
   d66bc:	4798      	blx	r3
        Wire.endTransmission();
   d66be:	f005 fd97 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d66c2:	f005 fc17 	bl	dbef4 <_ZN7TwoWire15endTransmissionEv>
        Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
   d66c6:	f005 fd93 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d66ca:	7821      	ldrb	r1, [r4, #0]
   d66cc:	2202      	movs	r2, #2
   d66ce:	f005 fc06 	bl	dbede <_ZN7TwoWire11requestFromEhj>
        value = (Wire.read() << 8) | Wire.read();
   d66d2:	f005 fd8d 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d66d6:	6803      	ldr	r3, [r0, #0]
   d66d8:	695b      	ldr	r3, [r3, #20]
   d66da:	4798      	blx	r3
   d66dc:	4605      	mov	r5, r0
   d66de:	f005 fd87 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d66e2:	6803      	ldr	r3, [r0, #0]
   d66e4:	695b      	ldr	r3, [r3, #20]
   d66e6:	4798      	blx	r3
   d66e8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d66ec:	b285      	uxth	r5, r0
}
   d66ee:	4628      	mov	r0, r5
   d66f0:	b005      	add	sp, #20
   d66f2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d66f4:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d66f8:	3301      	adds	r3, #1
   d66fa:	d10c      	bne.n	d6716 <_ZN15Adafruit_BME2806read16Eh+0x7e>
   d66fc:	4b18      	ldr	r3, [pc, #96]	; (d6760 <_ZN15Adafruit_BME2806read16Eh+0xc8>)
   d66fe:	9300      	str	r3, [sp, #0]
   d6700:	2300      	movs	r3, #0
   d6702:	f88d 3004 	strb.w	r3, [sp, #4]
   d6706:	4b17      	ldr	r3, [pc, #92]	; (d6764 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d6708:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d670a:	4668      	mov	r0, sp
   d670c:	2301      	movs	r3, #1
   d670e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6712:	f7ff fe04 	bl	d631e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d6716:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d671a:	2100      	movs	r1, #0
   d671c:	b280      	uxth	r0, r0
   d671e:	f005 fcf4 	bl	dc10a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d6722:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d6726:	4620      	mov	r0, r4
   d6728:	f7ff fdbc 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d672c:	2100      	movs	r1, #0
   d672e:	4620      	mov	r0, r4
   d6730:	f7ff fdb8 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
   d6734:	2100      	movs	r1, #0
   d6736:	4605      	mov	r5, r0
   d6738:	4620      	mov	r0, r4
   d673a:	f7ff fdb3 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
   d673e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d6742:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d6744:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6748:	2101      	movs	r1, #1
   d674a:	b280      	uxth	r0, r0
   d674c:	f005 fcdd 	bl	dc10a <digitalWrite>
        if (_sck == -1)
   d6750:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d6754:	3301      	adds	r3, #1
   d6756:	d1ca      	bne.n	d66ee <_ZN15Adafruit_BME2806read16Eh+0x56>
            SPI.endTransaction(); // release the SPI bus
   d6758:	f7ff fdda 	bl	d6310 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d675c:	e7c7      	b.n	d66ee <_ZN15Adafruit_BME2806read16Eh+0x56>
   d675e:	bf00      	nop
   d6760:	000dee48 	.word	0x000dee48
   d6764:	0007a120 	.word	0x0007a120

000d6768 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d6768:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d676a:	f7ff ff95 	bl	d6698 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d676e:	ba40      	rev16	r0, r0
}
   d6770:	b280      	uxth	r0, r0
   d6772:	bd08      	pop	{r3, pc}

000d6774 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d6774:	b538      	push	{r3, r4, r5, lr}
   d6776:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d6778:	f7ff fe4c 	bl	d6414 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d677c:	21fd      	movs	r1, #253	; 0xfd
   d677e:	4620      	mov	r0, r4
   d6780:	f7ff ff8a 	bl	d6698 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d6784:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d6788:	d038      	beq.n	d67fc <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d678a:	f9b4 502e 	ldrsh.w	r5, [r4, #46]	; 0x2e
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d678e:	68a2      	ldr	r2, [r4, #8]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d6790:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6794:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d6796:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d679a:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d679e:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d67a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d67a6:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d67a8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d67ac:	4353      	muls	r3, r2
   d67ae:	12db      	asrs	r3, r3, #11
   d67b0:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d67b4:	f994 3032 	ldrsb.w	r3, [r4, #50]	; 0x32
   d67b8:	4353      	muls	r3, r2
   d67ba:	129b      	asrs	r3, r3, #10
   d67bc:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d67be:	129b      	asrs	r3, r3, #10
   d67c0:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d67c4:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   d67c8:	4353      	muls	r3, r2
   d67ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d67ce:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d67d0:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d67d2:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d67d4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d67d8:	4352      	muls	r2, r2
   d67da:	11d2      	asrs	r2, r2, #7
   d67dc:	434a      	muls	r2, r1
   d67de:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d67e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d67e6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d67ea:	bfa8      	it	ge
   d67ec:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d67f0:	131b      	asrs	r3, r3, #12
   d67f2:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d67f6:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d67fa:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d67fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6804 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d6800:	e7fb      	b.n	d67fa <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d6802:	bf00      	nop
   d6804:	7fc00000 	.word	0x7fc00000

000d6808 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d6808:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d680a:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d680e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d6810:	b085      	sub	sp, #20
   d6812:	4604      	mov	r4, r0
   d6814:	460d      	mov	r5, r1
    if (_cs == -1) {
   d6816:	d11d      	bne.n	d6854 <_ZN15Adafruit_BME2805read8Eh+0x4c>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d6818:	f005 fcea 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d681c:	7821      	ldrb	r1, [r4, #0]
   d681e:	f005 fb61 	bl	dbee4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d6822:	f005 fce5 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d6826:	6803      	ldr	r3, [r0, #0]
   d6828:	4629      	mov	r1, r5
   d682a:	689b      	ldr	r3, [r3, #8]
   d682c:	4798      	blx	r3
        Wire.endTransmission();
   d682e:	f005 fcdf 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d6832:	f005 fb5f 	bl	dbef4 <_ZN7TwoWire15endTransmissionEv>
        Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
   d6836:	f005 fcdb 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d683a:	7821      	ldrb	r1, [r4, #0]
   d683c:	2201      	movs	r2, #1
   d683e:	f005 fb4e 	bl	dbede <_ZN7TwoWire11requestFromEhj>
        value = Wire.read();
   d6842:	f005 fcd5 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d6846:	6803      	ldr	r3, [r0, #0]
   d6848:	695b      	ldr	r3, [r3, #20]
   d684a:	4798      	blx	r3
   d684c:	b2c5      	uxtb	r5, r0
}
   d684e:	4628      	mov	r0, r5
   d6850:	b005      	add	sp, #20
   d6852:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d6854:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d6858:	3301      	adds	r3, #1
   d685a:	d10c      	bne.n	d6876 <_ZN15Adafruit_BME2805read8Eh+0x6e>
   d685c:	4b14      	ldr	r3, [pc, #80]	; (d68b0 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d685e:	9300      	str	r3, [sp, #0]
   d6860:	2300      	movs	r3, #0
   d6862:	f88d 3004 	strb.w	r3, [sp, #4]
   d6866:	4b13      	ldr	r3, [pc, #76]	; (d68b4 <_ZN15Adafruit_BME2805read8Eh+0xac>)
   d6868:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d686a:	4668      	mov	r0, sp
   d686c:	2301      	movs	r3, #1
   d686e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6872:	f7ff fd54 	bl	d631e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d6876:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d687a:	2100      	movs	r1, #0
   d687c:	b280      	uxth	r0, r0
   d687e:	f005 fc44 	bl	dc10a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d6882:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d6886:	4620      	mov	r0, r4
   d6888:	f7ff fd0c 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d688c:	2100      	movs	r1, #0
   d688e:	4620      	mov	r0, r4
   d6890:	f7ff fd08 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
   d6894:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d6896:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d689a:	2101      	movs	r1, #1
   d689c:	b280      	uxth	r0, r0
   d689e:	f005 fc34 	bl	dc10a <digitalWrite>
        if (_sck == -1)
   d68a2:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d68a6:	3301      	adds	r3, #1
   d68a8:	d1d1      	bne.n	d684e <_ZN15Adafruit_BME2805read8Eh+0x46>
            SPI.endTransaction(); // release the SPI bus
   d68aa:	f7ff fd31 	bl	d6310 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d68ae:	e7ce      	b.n	d684e <_ZN15Adafruit_BME2805read8Eh+0x46>
   d68b0:	000dee48 	.word	0x000dee48
   d68b4:	0007a120 	.word	0x0007a120

000d68b8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d68b8:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d68ba:	21f3      	movs	r1, #243	; 0xf3
   d68bc:	f7ff ffa4 	bl	d6808 <_ZN15Adafruit_BME2805read8Eh>
}
   d68c0:	f000 0001 	and.w	r0, r0, #1
   d68c4:	bd08      	pop	{r3, pc}

000d68c6 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d68c6:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d68c8:	2188      	movs	r1, #136	; 0x88
{
   d68ca:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d68cc:	f7ff ff4c 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d68d0:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d68d2:	8220      	strh	r0, [r4, #16]
    return (int16_t)read16_LE(reg);
   d68d4:	4620      	mov	r0, r4
   d68d6:	f7ff ff47 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
   d68da:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d68dc:	8260      	strh	r0, [r4, #18]
    return (int16_t)read16_LE(reg);
   d68de:	4620      	mov	r0, r4
   d68e0:	f7ff ff42 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d68e4:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d68e6:	82a0      	strh	r0, [r4, #20]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d68e8:	4620      	mov	r0, r4
   d68ea:	f7ff ff3d 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d68ee:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d68f0:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d68f2:	4620      	mov	r0, r4
   d68f4:	f7ff ff38 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
   d68f8:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d68fa:	8320      	strh	r0, [r4, #24]
    return (int16_t)read16_LE(reg);
   d68fc:	4620      	mov	r0, r4
   d68fe:	f7ff ff33 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
   d6902:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d6904:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d6906:	4620      	mov	r0, r4
   d6908:	f7ff ff2e 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
   d690c:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d690e:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d6910:	4620      	mov	r0, r4
   d6912:	f7ff ff29 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
   d6916:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d6918:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d691a:	4620      	mov	r0, r4
   d691c:	f7ff ff24 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
   d6920:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d6922:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d6924:	4620      	mov	r0, r4
   d6926:	f7ff ff1f 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
   d692a:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d692c:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d692e:	4620      	mov	r0, r4
   d6930:	f7ff ff1a 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
   d6934:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d6936:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d6938:	4620      	mov	r0, r4
   d693a:	f7ff ff15 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d693e:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d6940:	84e0      	strh	r0, [r4, #38]	; 0x26
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d6942:	4620      	mov	r0, r4
   d6944:	f7ff ff60 	bl	d6808 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d6948:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d694a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d694e:	4620      	mov	r0, r4
   d6950:	f7ff ff0a 	bl	d6768 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6954:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d6956:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6958:	4620      	mov	r0, r4
   d695a:	f7ff ff55 	bl	d6808 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d695e:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d6960:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d6964:	4620      	mov	r0, r4
   d6966:	f7ff ff4f 	bl	d6808 <_ZN15Adafruit_BME2805read8Eh>
   d696a:	21e5      	movs	r1, #229	; 0xe5
   d696c:	4605      	mov	r5, r0
   d696e:	4620      	mov	r0, r4
   d6970:	f7ff ff4a 	bl	d6808 <_ZN15Adafruit_BME2805read8Eh>
   d6974:	f000 030f 	and.w	r3, r0, #15
   d6978:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d697c:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d697e:	21e6      	movs	r1, #230	; 0xe6
   d6980:	4620      	mov	r0, r4
   d6982:	f7ff ff41 	bl	d6808 <_ZN15Adafruit_BME2805read8Eh>
   d6986:	21e5      	movs	r1, #229	; 0xe5
   d6988:	4605      	mov	r5, r0
   d698a:	4620      	mov	r0, r4
   d698c:	f7ff ff3c 	bl	d6808 <_ZN15Adafruit_BME2805read8Eh>
   d6990:	1103      	asrs	r3, r0, #4
   d6992:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d6996:	8620      	strh	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d6998:	21e7      	movs	r1, #231	; 0xe7
   d699a:	4620      	mov	r0, r4
   d699c:	f7ff ff34 	bl	d6808 <_ZN15Adafruit_BME2805read8Eh>
   d69a0:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
   d69a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d69a8 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d69a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d69aa:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d69ae:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d69b0:	4604      	mov	r4, r0
   d69b2:	460e      	mov	r6, r1
   d69b4:	4615      	mov	r5, r2
    if (_cs == -1) {
   d69b6:	d116      	bne.n	d69e6 <_ZN15Adafruit_BME2806write8Ehh+0x3e>
        Wire.beginTransmission((uint8_t)_i2caddr);
   d69b8:	f005 fc1a 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d69bc:	7821      	ldrb	r1, [r4, #0]
   d69be:	f005 fa91 	bl	dbee4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t)reg);
   d69c2:	f005 fc15 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d69c6:	6803      	ldr	r3, [r0, #0]
   d69c8:	4631      	mov	r1, r6
   d69ca:	689b      	ldr	r3, [r3, #8]
   d69cc:	4798      	blx	r3
        Wire.write((uint8_t)value);
   d69ce:	f005 fc0f 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d69d2:	6803      	ldr	r3, [r0, #0]
   d69d4:	4629      	mov	r1, r5
   d69d6:	689b      	ldr	r3, [r3, #8]
   d69d8:	4798      	blx	r3
        Wire.endTransmission();
   d69da:	f005 fc09 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d69de:	f005 fa89 	bl	dbef4 <_ZN7TwoWire15endTransmissionEv>
}
   d69e2:	b004      	add	sp, #16
   d69e4:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d69e6:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d69ea:	3301      	adds	r3, #1
   d69ec:	d10c      	bne.n	d6a08 <_ZN15Adafruit_BME2806write8Ehh+0x60>
   d69ee:	4b14      	ldr	r3, [pc, #80]	; (d6a40 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d69f0:	9300      	str	r3, [sp, #0]
   d69f2:	2300      	movs	r3, #0
   d69f4:	f88d 3004 	strb.w	r3, [sp, #4]
   d69f8:	4b12      	ldr	r3, [pc, #72]	; (d6a44 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   d69fa:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d69fc:	4668      	mov	r0, sp
   d69fe:	2301      	movs	r3, #1
   d6a00:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6a04:	f7ff fc8b 	bl	d631e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d6a08:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6a0c:	2100      	movs	r1, #0
   d6a0e:	b280      	uxth	r0, r0
   d6a10:	f005 fb7b 	bl	dc10a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d6a14:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d6a18:	4620      	mov	r0, r4
   d6a1a:	f7ff fc43 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d6a1e:	4629      	mov	r1, r5
   d6a20:	4620      	mov	r0, r4
   d6a22:	f7ff fc3f 	bl	d62a4 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d6a26:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6a2a:	2101      	movs	r1, #1
   d6a2c:	b280      	uxth	r0, r0
   d6a2e:	f005 fb6c 	bl	dc10a <digitalWrite>
    if (_sck == -1)
   d6a32:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d6a36:	3301      	adds	r3, #1
   d6a38:	d1d3      	bne.n	d69e2 <_ZN15Adafruit_BME2806write8Ehh+0x3a>
        SPI.endTransaction(); // release the SPI bus
   d6a3a:	f7ff fc69 	bl	d6310 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d6a3e:	e7d0      	b.n	d69e2 <_ZN15Adafruit_BME2806write8Ehh+0x3a>
   d6a40:	000dee48 	.word	0x000dee48
   d6a44:	0007a120 	.word	0x0007a120

000d6a48 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d6a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d6a4a:	00db      	lsls	r3, r3, #3
   d6a4c:	f002 0207 	and.w	r2, r2, #7
   d6a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d6a54:	4313      	orrs	r3, r2
   d6a56:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d6a5a:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d6a5e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    _humReg.osrs_h    = humSampling;
   d6a62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		 standby_duration  duration) {
   d6a66:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d6a6a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d6a6e:	f366 1347 	bfi	r3, r6, #5, #3
   d6a72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _configReg.t_sb   = duration;
   d6a76:	00ed      	lsls	r5, r5, #3
   d6a78:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
   d6a7c:	f007 0707 	and.w	r7, r7, #7
   d6a80:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d6a84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d6a88:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d6a8a:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d6a8c:	431d      	orrs	r5, r3
   d6a8e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d6a92:	f006 0207 	and.w	r2, r6, #7
   d6a96:	21f2      	movs	r1, #242	; 0xf2
   d6a98:	f7ff ff86 	bl	d69a8 <_ZN15Adafruit_BME2806write8Ehh>
            // unused - don't set
            unsigned int none : 1;
            unsigned int spi3w_en : 1;

            unsigned int get() {
                return (t_sb << 5) | (filter << 3) | spi3w_en;
   d6a9c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
   d6aa0:	f002 0107 	and.w	r1, r2, #7
   d6aa4:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d6aa8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d6aac:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d6ab0:	4620      	mov	r0, r4
   d6ab2:	21f5      	movs	r1, #245	; 0xf5
   d6ab4:	f7ff ff78 	bl	d69a8 <_ZN15Adafruit_BME2806write8Ehh>
            // 01 or 10 = forced
            // 11       = normal
            unsigned int mode : 2;

            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 3) | mode;
   d6ab8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d6abc:	f002 0107 	and.w	r1, r2, #7
   d6ac0:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d6ac4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6ac8:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d6acc:	4620      	mov	r0, r4
   d6ace:	21f4      	movs	r1, #244	; 0xf4
}
   d6ad0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6ad4:	f7ff bf68 	b.w	d69a8 <_ZN15Adafruit_BME2806write8Ehh>

000d6ad8 <_ZN15Adafruit_BME2805beginEh>:
{
   d6ad8:	b530      	push	{r4, r5, lr}
   d6ada:	4604      	mov	r4, r0
    _i2caddr = addr;
   d6adc:	7001      	strb	r1, [r0, #0]
    if (_cs == -1) {
   d6ade:	f990 000c 	ldrsb.w	r0, [r0, #12]
   d6ae2:	1c42      	adds	r2, r0, #1
{
   d6ae4:	b085      	sub	sp, #20
    if (_cs == -1) {
   d6ae6:	d119      	bne.n	d6b1c <_ZN15Adafruit_BME2805beginEh+0x44>
        Wire.begin();
   d6ae8:	f005 fb82 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   d6aec:	f005 f9c8 	bl	dbe80 <_ZN7TwoWire5beginEv>
    if (read8(BME280_REGISTER_CHIPID) != 0x60)
   d6af0:	21d0      	movs	r1, #208	; 0xd0
   d6af2:	4620      	mov	r0, r4
   d6af4:	f7ff fe88 	bl	d6808 <_ZN15Adafruit_BME2805read8Eh>
   d6af8:	2860      	cmp	r0, #96	; 0x60
   d6afa:	d142      	bne.n	d6b82 <_ZN15Adafruit_BME2805beginEh+0xaa>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d6afc:	4620      	mov	r0, r4
   d6afe:	22b6      	movs	r2, #182	; 0xb6
   d6b00:	21e0      	movs	r1, #224	; 0xe0
   d6b02:	f7ff ff51 	bl	d69a8 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d6b06:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6b0a:	f004 fb23 	bl	db154 <delay>
    while (isReadingCalibration())
   d6b0e:	4620      	mov	r0, r4
   d6b10:	f7ff fed2 	bl	d68b8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d6b14:	4605      	mov	r5, r0
   d6b16:	b328      	cbz	r0, d6b64 <_ZN15Adafruit_BME2805beginEh+0x8c>
          delay(100);
   d6b18:	2064      	movs	r0, #100	; 0x64
   d6b1a:	e7f6      	b.n	d6b0a <_ZN15Adafruit_BME2805beginEh+0x32>
        digitalWrite(_cs, HIGH);
   d6b1c:	2101      	movs	r1, #1
   d6b1e:	b280      	uxth	r0, r0
   d6b20:	f005 faf3 	bl	dc10a <digitalWrite>
        pinMode(_cs, OUTPUT);
   d6b24:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d6b28:	2101      	movs	r1, #1
   d6b2a:	b280      	uxth	r0, r0
   d6b2c:	f005 fadc 	bl	dc0e8 <pinMode>
        if (_sck == -1) {
   d6b30:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d6b34:	1c43      	adds	r3, r0, #1
   d6b36:	d104      	bne.n	d6b42 <_ZN15Adafruit_BME2805beginEh+0x6a>
        instance().begin();
   d6b38:	f7ff fb98 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d6b3c:	f002 fe58 	bl	d97f0 <_ZN8SPIClass5beginEv>
    }
   d6b40:	e7d6      	b.n	d6af0 <_ZN15Adafruit_BME2805beginEh+0x18>
            pinMode(_sck, OUTPUT);
   d6b42:	2101      	movs	r1, #1
   d6b44:	b280      	uxth	r0, r0
   d6b46:	f005 facf 	bl	dc0e8 <pinMode>
            pinMode(_mosi, OUTPUT);
   d6b4a:	f994 000d 	ldrsb.w	r0, [r4, #13]
   d6b4e:	2101      	movs	r1, #1
   d6b50:	b280      	uxth	r0, r0
   d6b52:	f005 fac9 	bl	dc0e8 <pinMode>
            pinMode(_miso, INPUT);
   d6b56:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6b5a:	2100      	movs	r1, #0
   d6b5c:	b280      	uxth	r0, r0
   d6b5e:	f005 fac3 	bl	dc0e8 <pinMode>
   d6b62:	e7c5      	b.n	d6af0 <_ZN15Adafruit_BME2805beginEh+0x18>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d6b64:	4620      	mov	r0, r4
   d6b66:	f7ff feae 	bl	d68c6 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d6b6a:	2305      	movs	r3, #5
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d6b72:	9300      	str	r3, [sp, #0]
   d6b74:	461a      	mov	r2, r3
   d6b76:	2103      	movs	r1, #3
   d6b78:	f7ff ff66 	bl	d6a48 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    return true;
   d6b7c:	2001      	movs	r0, #1
}
   d6b7e:	b005      	add	sp, #20
   d6b80:	bd30      	pop	{r4, r5, pc}
        return false;
   d6b82:	2000      	movs	r0, #0
   d6b84:	e7fb      	b.n	d6b7e <_ZN15Adafruit_BME2805beginEh+0xa6>

000d6b86 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d6b86:	b510      	push	{r4, lr}
   d6b88:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6b8a:	3024      	adds	r0, #36	; 0x24
   d6b8c:	f000 ff36 	bl	d79fc <_ZN8FatCache4syncEv>
   d6b90:	b128      	cbz	r0, d6b9e <_ZN9FatVolume9cacheSyncEv+0x18>
   d6b92:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d6b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6b9a:	f000 bf2f 	b.w	d79fc <_ZN8FatCache4syncEv>
  }
   d6b9e:	bd10      	pop	{r4, pc}

000d6ba0 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6ba0:	1e41      	subs	r1, r0, #1
   d6ba2:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d6ba6:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6ba8:	0842      	lsrs	r2, r0, #1
   d6baa:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d6bae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6bb2:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6bb6:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6bb8:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6bba:	d1f5      	bne.n	d6ba8 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d6bbc:	4770      	bx	lr

000d6bbe <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d6bbe:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d6bc0:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   d6bc2:	4604      	mov	r4, r0
   d6bc4:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d6bc6:	b923      	cbnz	r3, d6bd2 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d6bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   d6bcc:	6889      	ldr	r1, [r1, #8]
   d6bce:	f000 bbc2 	b.w	d7356 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   d6bd2:	2224      	movs	r2, #36	; 0x24
   d6bd4:	2100      	movs	r1, #0
   d6bd6:	f007 fe27 	bl	de828 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d6bda:	2310      	movs	r3, #16
  m_flags = F_READ;
   d6bdc:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   d6bde:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d6be0:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d6be2:	68ab      	ldr	r3, [r5, #8]
   d6be4:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d6be6:	68eb      	ldr	r3, [r5, #12]
   d6be8:	6223      	str	r3, [r4, #32]
}
   d6bea:	bd38      	pop	{r3, r4, r5, pc}

000d6bec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6bf0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6bf2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6bf6:	2b20      	cmp	r3, #32
   d6bf8:	d0fa      	beq.n	d6bf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6bfa:	4d6b      	ldr	r5, [pc, #428]	; (d6da8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d6bfc:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d6bfe:	2400      	movs	r4, #0
    c = path[len];
   d6c00:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d6c02:	b1c3      	cbz	r3, d6c36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d6c04:	2b2f      	cmp	r3, #47	; 0x2f
   d6c06:	d016      	beq.n	d6c36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6c08:	2b5c      	cmp	r3, #92	; 0x5c
   d6c0a:	d102      	bne.n	d6c12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6c0c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d6c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6c12:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d6c16:	b2c0      	uxtb	r0, r0
   d6c18:	281d      	cmp	r0, #29
   d6c1a:	d803      	bhi.n	d6c24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d6c1c:	fa25 f000 	lsr.w	r0, r5, r0
   d6c20:	07c0      	lsls	r0, r0, #31
   d6c22:	d4f3      	bmi.n	d6c0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6c24:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d6c28:	283c      	cmp	r0, #60	; 0x3c
   d6c2a:	d0ef      	beq.n	d6c0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d6c2c:	3b20      	subs	r3, #32
   d6c2e:	2b5e      	cmp	r3, #94	; 0x5e
   d6c30:	d8ec      	bhi.n	d6c0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d6c32:	3401      	adds	r4, #1
    c = path[len];
   d6c34:	e7e4      	b.n	d6c00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d6c36:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d6c38:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6c3a:	4607      	mov	r7, r0
   d6c3c:	f810 5b01 	ldrb.w	r5, [r0], #1
   d6c40:	2d20      	cmp	r5, #32
   d6c42:	d0fa      	beq.n	d6c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d6c44:	2d2f      	cmp	r5, #47	; 0x2f
   d6c46:	d0f8      	beq.n	d6c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d6c48:	6017      	str	r7, [r2, #0]
  while (len) {
   d6c4a:	b14c      	cbz	r4, d6c60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d6c4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6c50:	2a2e      	cmp	r2, #46	; 0x2e
   d6c52:	d001      	beq.n	d6c58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d6c54:	2a20      	cmp	r2, #32
   d6c56:	d101      	bne.n	d6c5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d6c58:	3c01      	subs	r4, #1
  while (len) {
   d6c5a:	e7f6      	b.n	d6c4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d6c5c:	2cff      	cmp	r4, #255	; 0xff
   d6c5e:	dcd5      	bgt.n	d6c0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d6c60:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d6c62:	f101 030d 	add.w	r3, r1, #13
   d6c66:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d6c6a:	2020      	movs	r0, #32
   d6c6c:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d6c70:	4293      	cmp	r3, r2
   d6c72:	d1fb      	bne.n	d6c6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6c74:	f04f 0800 	mov.w	r8, #0
   d6c78:	f816 3008 	ldrb.w	r3, [r6, r8]
   d6c7c:	2b2e      	cmp	r3, #46	; 0x2e
   d6c7e:	d001      	beq.n	d6c84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6c80:	2b20      	cmp	r3, #32
   d6c82:	d102      	bne.n	d6c8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d6c84:	f108 0801 	add.w	r8, r8, #1
   d6c88:	e7f6      	b.n	d6c78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d6c8a:	fab8 f088 	clz	r0, r8
   d6c8e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6c90:	1e65      	subs	r5, r4, #1
   d6c92:	1c6b      	adds	r3, r5, #1
   d6c94:	d002      	beq.n	d6c9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d6c96:	5d73      	ldrb	r3, [r6, r5]
   d6c98:	2b2e      	cmp	r3, #46	; 0x2e
   d6c9a:	d114      	bne.n	d6cc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6c9c:	f04f 0900 	mov.w	r9, #0
   d6ca0:	2707      	movs	r7, #7
   d6ca2:	464a      	mov	r2, r9
   d6ca4:	46ca      	mov	sl, r9
   d6ca6:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d6caa:	45a0      	cmp	r8, r4
   d6cac:	da69      	bge.n	d6d82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d6cae:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6cb2:	2b20      	cmp	r3, #32
   d6cb4:	d003      	beq.n	d6cbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d6cb6:	2b2e      	cmp	r3, #46	; 0x2e
   d6cb8:	d107      	bne.n	d6cca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6cba:	45a8      	cmp	r8, r5
   d6cbc:	d012      	beq.n	d6ce4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d6cbe:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d6cc0:	f108 0801 	add.w	r8, r8, #1
   d6cc4:	e7f1      	b.n	d6caa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6cc6:	3d01      	subs	r5, #1
   d6cc8:	e7e3      	b.n	d6c92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d6cca:	2b22      	cmp	r3, #34	; 0x22
   d6ccc:	d008      	beq.n	d6ce0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d6cce:	2b7c      	cmp	r3, #124	; 0x7c
   d6cd0:	d006      	beq.n	d6ce0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6cd2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6cd6:	f1bc 0f05 	cmp.w	ip, #5
   d6cda:	d80b      	bhi.n	d6cf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6cdc:	2b2d      	cmp	r3, #45	; 0x2d
   d6cde:	d013      	beq.n	d6d08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d6ce0:	45a8      	cmp	r8, r5
   d6ce2:	d15c      	bne.n	d6d9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d6ce4:	2f0a      	cmp	r7, #10
   d6ce6:	d04b      	beq.n	d6d80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6ce8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6cea:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6cec:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6cee:	f04f 0e10 	mov.w	lr, #16
   d6cf2:	e7e5      	b.n	d6cc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d6cf4:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6cf8:	f1bc 0f05 	cmp.w	ip, #5
   d6cfc:	d9f0      	bls.n	d6ce0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d6cfe:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6d02:	f1bc 0f02 	cmp.w	ip, #2
   d6d06:	d9eb      	bls.n	d6ce0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d6d08:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6d0c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6d10:	d8e6      	bhi.n	d6ce0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d6d12:	45a8      	cmp	r8, r5
   d6d14:	d0e6      	beq.n	d6ce4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d6d16:	42ba      	cmp	r2, r7
   d6d18:	d830      	bhi.n	d6d7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d6d1a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6d1e:	f1bc 0f19 	cmp.w	ip, #25
   d6d22:	d81a      	bhi.n	d6d5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d6d24:	3b20      	subs	r3, #32
        lc |= bit;
   d6d26:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d6d2a:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6d2c:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d6d30:	f102 0c01 	add.w	ip, r2, #1
   d6d34:	fa5f fc8c 	uxtb.w	ip, ip
   d6d38:	440a      	add	r2, r1
      if (i < 7) {
   d6d3a:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d6d3e:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d6d40:	d801      	bhi.n	d6d46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d6d42:	f881 c00c 	strb.w	ip, [r1, #12]
   d6d46:	4662      	mov	r2, ip
   d6d48:	e7ba      	b.n	d6cc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d6d4a:	45a8      	cmp	r8, r5
   d6d4c:	dc18      	bgt.n	d6d80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6d4e:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6d50:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6d52:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6d54:	f04f 0e10 	mov.w	lr, #16
   d6d58:	e7b1      	b.n	d6cbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d6d5a:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6d5e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6d62:	bf98      	it	ls
   d6d64:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d6d68:	e7e2      	b.n	d6d30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d6d6a:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6d6c:	2001      	movs	r0, #1
   d6d6e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6d70:	4419      	add	r1, r3
   d6d72:	237e      	movs	r3, #126	; 0x7e
   d6d74:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6d76:	2331      	movs	r3, #49	; 0x31
   d6d78:	738b      	strb	r3, [r1, #14]
   d6d7a:	e748      	b.n	d6c0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d6d7c:	2f0a      	cmp	r7, #10
   d6d7e:	d1e4      	bne.n	d6d4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d6d80:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d6d82:	7b4b      	ldrb	r3, [r1, #13]
   d6d84:	2b20      	cmp	r3, #32
   d6d86:	f43f af41 	beq.w	d6c0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d6d8a:	2800      	cmp	r0, #0
   d6d8c:	d0ed      	beq.n	d6d6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6d8e:	ea1a 0f09 	tst.w	sl, r9
   d6d92:	bf18      	it	ne
   d6d94:	f04f 0902 	movne.w	r9, #2
   d6d98:	f881 9000 	strb.w	r9, [r1]
   d6d9c:	e737      	b.n	d6c0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d6d9e:	42ba      	cmp	r2, r7
   d6da0:	d8ec      	bhi.n	d6d7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d6da2:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d6da4:	2000      	movs	r0, #0
   d6da6:	e7c3      	b.n	d6d30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d6da8:	31000101 	.word	0x31000101

000d6dac <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6db0:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6db2:	2300      	movs	r3, #0
   d6db4:	f8ad 3004 	strh.w	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6db8:	7803      	ldrb	r3, [r0, #0]
   d6dba:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   d6dbc:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6dbe:	d50a      	bpl.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
   d6dc0:	7883      	ldrb	r3, [r0, #2]
   d6dc2:	079a      	lsls	r2, r3, #30
   d6dc4:	d507      	bpl.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d6dc6:	6a01      	ldr	r1, [r0, #32]
   d6dc8:	b939      	cbnz	r1, d6dda <_ZN7FatFile6removeEv+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6dca:	2101      	movs	r1, #1
   d6dcc:	4620      	mov	r0, r4
   d6dce:	f000 fab3 	bl	d7338 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6dd2:	4605      	mov	r5, r0
   d6dd4:	b938      	cbnz	r0, d6de6 <_ZN7FatFile6removeEv+0x3a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d6dd6:	2000      	movs	r0, #0
   d6dd8:	e048      	b.n	d6e6c <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d6dda:	6880      	ldr	r0, [r0, #8]
   d6ddc:	f000 feff 	bl	d7bde <_ZN9FatVolume9freeChainEm>
   d6de0:	2800      	cmp	r0, #0
   d6de2:	d1f2      	bne.n	d6dca <_ZN7FatFile6removeEv+0x1e>
   d6de4:	e7f7      	b.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
  chksum = lfnChecksum(dir->name);
   d6de6:	f7ff fedb 	bl	d6ba0 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   d6dea:	26e5      	movs	r6, #229	; 0xe5
   d6dec:	702e      	strb	r6, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   d6dee:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   d6df0:	4607      	mov	r7, r0
  m_attr = FILE_ATTR_CLOSED;
   d6df2:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   d6df4:	68a0      	ldr	r0, [r4, #8]
   d6df6:	f7ff fec6 	bl	d6b86 <_ZN9FatVolume9cacheSyncEv>
   d6dfa:	2800      	cmp	r0, #0
   d6dfc:	d0eb      	beq.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
  if (!isLFN()) {
   d6dfe:	78e3      	ldrb	r3, [r4, #3]
   d6e00:	2b00      	cmp	r3, #0
   d6e02:	d033      	beq.n	d6e6c <_ZN7FatFile6removeEv+0xc0>
  if (!dirFile.openCluster(this)) {
   d6e04:	4621      	mov	r1, r4
   d6e06:	a801      	add	r0, sp, #4
   d6e08:	f7ff fed9 	bl	d6bbe <_ZN7FatFile11openClusterEPS_>
   d6e0c:	2800      	cmp	r0, #0
   d6e0e:	d0e2      	beq.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
   d6e10:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6e12:	78e3      	ldrb	r3, [r4, #3]
   d6e14:	fa5f f885 	uxtb.w	r8, r5
   d6e18:	4543      	cmp	r3, r8
   d6e1a:	d3dc      	bcc.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6e1c:	88a1      	ldrh	r1, [r4, #4]
   d6e1e:	1b49      	subs	r1, r1, r5
   d6e20:	0149      	lsls	r1, r1, #5
   d6e22:	a801      	add	r0, sp, #4
   d6e24:	f000 fbc5 	bl	d75b2 <_ZN7FatFile7seekSetEm>
   d6e28:	2800      	cmp	r0, #0
   d6e2a:	d0d4      	beq.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6e2c:	2100      	movs	r1, #0
   d6e2e:	a801      	add	r0, sp, #4
   d6e30:	f000 fba0 	bl	d7574 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6e34:	2800      	cmp	r0, #0
   d6e36:	d0ce      	beq.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6e38:	7ac3      	ldrb	r3, [r0, #11]
   d6e3a:	2b0f      	cmp	r3, #15
   d6e3c:	d1cb      	bne.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
        ord != (ldir->ord & 0X1F) ||
   d6e3e:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6e40:	f002 031f 	and.w	r3, r2, #31
   d6e44:	4543      	cmp	r3, r8
   d6e46:	d1c6      	bne.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
        ord != (ldir->ord & 0X1F) ||
   d6e48:	7b43      	ldrb	r3, [r0, #13]
   d6e4a:	42bb      	cmp	r3, r7
   d6e4c:	d1c3      	bne.n	d6dd6 <_ZN7FatFile6removeEv+0x2a>
    ldir->ord = DIR_NAME_DELETED;
   d6e4e:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d6e50:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d6e52:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d6e56:	f043 0301 	orr.w	r3, r3, #1
   d6e5a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d6e5e:	0653      	lsls	r3, r2, #25
   d6e60:	f105 0501 	add.w	r5, r5, #1
   d6e64:	d5d5      	bpl.n	d6e12 <_ZN7FatFile6removeEv+0x66>
      if (!m_vol->cacheSync()) {
   d6e66:	68a0      	ldr	r0, [r4, #8]
   d6e68:	f7ff fe8d 	bl	d6b86 <_ZN9FatVolume9cacheSyncEv>
}
   d6e6c:	b00a      	add	sp, #40	; 0x28
   d6e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e72 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6e72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6e76:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6e7a:	4606      	mov	r6, r0
   d6e7c:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6e7e:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6e80:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6e82:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6e86:	6861      	ldr	r1, [r4, #4]
   d6e88:	68a2      	ldr	r2, [r4, #8]
   d6e8a:	186b      	adds	r3, r5, r1
   d6e8c:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6e8e:	4411      	add	r1, r2
   d6e90:	4291      	cmp	r1, r2
   d6e92:	d006      	beq.n	d6ea2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d6e94:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6e98:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6e9c:	4043      	eors	r3, r0
   d6e9e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6ea0:	e7f6      	b.n	d6e90 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d6ea2:	f1b9 0f03 	cmp.w	r9, #3
   d6ea6:	bf28      	it	cs
   d6ea8:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6eac:	f109 0204 	add.w	r2, r9, #4
   d6eb0:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6eb2:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6eb6:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6eb8:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6eba:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ebc:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ebe:	bf94      	ite	ls
   d6ec0:	3130      	addls	r1, #48	; 0x30
   d6ec2:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ec4:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ec6:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6ec8:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ecc:	d1f1      	bne.n	d6eb2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d6ece:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d6ed2:	2100      	movs	r1, #0
   d6ed4:	735f      	strb	r7, [r3, #13]
   d6ed6:	4630      	mov	r0, r6
   d6ed8:	f000 fb6b 	bl	d75b2 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d6edc:	2101      	movs	r1, #1
   d6ede:	4630      	mov	r0, r6
   d6ee0:	f000 fb48 	bl	d7574 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6ee4:	4601      	mov	r1, r0
   d6ee6:	b928      	cbnz	r0, d6ef4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6ee8:	7870      	ldrb	r0, [r6, #1]
   d6eea:	fab0 f080 	clz	r0, r0
   d6eee:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d6ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d6ef4:	7803      	ldrb	r3, [r0, #0]
   d6ef6:	b16b      	cbz	r3, d6f14 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6ef8:	7ac3      	ldrb	r3, [r0, #11]
   d6efa:	071b      	lsls	r3, r3, #28
   d6efc:	d4ee      	bmi.n	d6edc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6efe:	220b      	movs	r2, #11
   d6f00:	4640      	mov	r0, r8
   d6f02:	f007 fc5b 	bl	de7bc <memcmp>
   d6f06:	2800      	cmp	r0, #0
   d6f08:	d1e8      	bne.n	d6edc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d6f0a:	3501      	adds	r5, #1
   d6f0c:	b2ad      	uxth	r5, r5
   d6f0e:	2d64      	cmp	r5, #100	; 0x64
   d6f10:	d1b9      	bne.n	d6e86 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d6f12:	e7ed      	b.n	d6ef0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d6f14:	2001      	movs	r0, #1
   d6f16:	e7eb      	b.n	d6ef0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>

000d6f18 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f1c:	ed2d 8b02 	vpush	{d8}
   d6f20:	b089      	sub	sp, #36	; 0x24
   d6f22:	460d      	mov	r5, r1
   d6f24:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d6f26:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6f28:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d6f2a:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6f2e:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d6f30:	d105      	bne.n	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d6f32:	2000      	movs	r0, #0
}
   d6f34:	b009      	add	sp, #36	; 0x24
   d6f36:	ecbd 8b02 	vpop	{d8}
   d6f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d6f3e:	9b06      	ldr	r3, [sp, #24]
   d6f40:	781b      	ldrb	r3, [r3, #0]
   d6f42:	2b00      	cmp	r3, #0
   d6f44:	d1f5      	bne.n	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d6f46:	6853      	ldr	r3, [r2, #4]
   d6f48:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6f4a:	7813      	ldrb	r3, [r2, #0]
   d6f4c:	0799      	lsls	r1, r3, #30
   d6f4e:	bf1c      	itt	ne
   d6f50:	9b04      	ldrne	r3, [sp, #16]
   d6f52:	f103 070c 	addne.w	r7, r3, #12
   d6f56:	f04f 0100 	mov.w	r1, #0
   d6f5a:	bf18      	it	ne
   d6f5c:	230d      	movne	r3, #13
   d6f5e:	4628      	mov	r0, r5
   d6f60:	bf1d      	ittte	ne
   d6f62:	fbb7 f7f3 	udivne	r7, r7, r3
   d6f66:	3701      	addne	r7, #1
   d6f68:	b2ff      	uxtbne	r7, r7
   d6f6a:	2701      	moveq	r7, #1
   d6f6c:	f000 fb21 	bl	d75b2 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6f70:	f108 020d 	add.w	r2, r8, #13
  }
   d6f74:	2300      	movs	r3, #0
   d6f76:	ee08 2a10 	vmov	s16, r2
   d6f7a:	469b      	mov	fp, r3
   d6f7c:	461c      	mov	r4, r3
   d6f7e:	461e      	mov	r6, r3
   d6f80:	9303      	str	r3, [sp, #12]
   d6f82:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d6f84:	696a      	ldr	r2, [r5, #20]
   d6f86:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6f88:	2101      	movs	r1, #1
   d6f8a:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d6f8c:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6f90:	f000 faf0 	bl	d7574 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6f94:	9b07      	ldr	r3, [sp, #28]
   d6f96:	2800      	cmp	r0, #0
   d6f98:	d16e      	bne.n	d7078 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d6f9a:	786b      	ldrb	r3, [r5, #1]
   d6f9c:	2b00      	cmp	r3, #0
   d6f9e:	d1c8      	bne.n	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6fa0:	9b05      	ldr	r3, [sp, #20]
   d6fa2:	059a      	lsls	r2, r3, #22
   d6fa4:	d5c5      	bpl.n	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d6fa6:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d6faa:	3b01      	subs	r3, #1
   d6fac:	2b01      	cmp	r3, #1
   d6fae:	d8c0      	bhi.n	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d6fb0:	9b03      	ldr	r3, [sp, #12]
   d6fb2:	2c00      	cmp	r4, #0
   d6fb4:	bf08      	it	eq
   d6fb6:	464b      	moveq	r3, r9
   d6fb8:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d6fba:	42bc      	cmp	r4, r7
   d6fbc:	f0c0 8103 	bcc.w	d71c6 <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d6fc0:	f1ba 0f00 	cmp.w	sl, #0
   d6fc4:	f040 811b 	bne.w	d71fe <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6fc8:	9b03      	ldr	r3, [sp, #12]
   d6fca:	4628      	mov	r0, r5
   d6fcc:	0159      	lsls	r1, r3, #5
   d6fce:	f000 faf0 	bl	d75b2 <_ZN7FatFile7seekSetEm>
   d6fd2:	2800      	cmp	r0, #0
   d6fd4:	d0ad      	beq.n	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d6fd6:	3f01      	subs	r7, #1
   d6fd8:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6fdc:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6fde:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d6fe2:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6fe4:	2e00      	cmp	r6, #0
   d6fe6:	f000 8121 	beq.w	d722c <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6fea:	2100      	movs	r1, #0
   d6fec:	4628      	mov	r0, r5
   d6fee:	f000 fac1 	bl	d7574 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6ff2:	4604      	mov	r4, r0
   d6ff4:	2800      	cmp	r0, #0
   d6ff6:	d09c      	beq.n	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d6ff8:	68aa      	ldr	r2, [r5, #8]
   d6ffa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6ffe:	4556      	cmp	r6, sl
   d7000:	f043 0301 	orr.w	r3, r3, #1
   d7004:	bf0c      	ite	eq
   d7006:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d700a:	46b3      	movne	fp, r6
   d700c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d7010:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d7014:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d7016:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d701a:	f108 000d 	add.w	r0, r8, #13
   d701e:	f7ff fdbf 	bl	d6ba0 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d7022:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d7026:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d7028:	f884 901a 	strb.w	r9, [r4, #26]
   d702c:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d7030:	f10b 3bff 	add.w	fp, fp, #4294967295
   d7034:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d7036:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d703a:	fb02 f20b 	mul.w	r2, r2, fp
   d703e:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d7040:	9904      	ldr	r1, [sp, #16]
   d7042:	4291      	cmp	r1, r2
   d7044:	f240 80e3 	bls.w	d720e <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d7048:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d704c:	2b04      	cmp	r3, #4
   d704e:	fa5f fe83 	uxtb.w	lr, r3
   d7052:	f103 0001 	add.w	r0, r3, #1
   d7056:	f200 80e0 	bhi.w	d721a <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d705a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d705e:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d7062:	280d      	cmp	r0, #13
   d7064:	f102 0201 	add.w	r2, r2, #1
   d7068:	4603      	mov	r3, r0
   d706a:	d1e9      	bne.n	d7040 <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d706c:	3e01      	subs	r6, #1
   d706e:	b2f6      	uxtb	r6, r6
   d7070:	e7b8      	b.n	d6fe4 <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d7072:	f04f 0a01 	mov.w	sl, #1
   d7076:	e785      	b.n	d6f84 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d7078:	7802      	ldrb	r2, [r0, #0]
   d707a:	2ae5      	cmp	r2, #229	; 0xe5
   d707c:	d000      	beq.n	d7080 <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d707e:	b97a      	cbnz	r2, d70a0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d7080:	9903      	ldr	r1, [sp, #12]
   d7082:	2c00      	cmp	r4, #0
   d7084:	bf08      	it	eq
   d7086:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d7088:	42bc      	cmp	r4, r7
        freeFound++;
   d708a:	bf38      	it	cc
   d708c:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d708e:	9103      	str	r1, [sp, #12]
        freeFound++;
   d7090:	bf38      	it	cc
   d7092:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d7094:	2a00      	cmp	r2, #0
   d7096:	d083      	beq.n	d6fa0 <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d7098:	2ae5      	cmp	r2, #229	; 0xe5
   d709a:	d104      	bne.n	d70a6 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d709c:	2600      	movs	r6, #0
   d709e:	e771      	b.n	d6f84 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d70a0:	42bc      	cmp	r4, r7
   d70a2:	bf38      	it	cc
   d70a4:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d70a6:	2a2e      	cmp	r2, #46	; 0x2e
   d70a8:	d0f8      	beq.n	d709c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d70aa:	7ac1      	ldrb	r1, [r0, #11]
   d70ac:	290f      	cmp	r1, #15
   d70ae:	d15d      	bne.n	d716c <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d70b0:	bb3e      	cbnz	r6, d7102 <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d70b2:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d70b6:	f43f af65 	beq.w	d6f84 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d70ba:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d70be:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d70c0:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d70c2:	f10b 32ff 	add.w	r2, fp, #4294967295
   d70c6:	f04f 0e0d 	mov.w	lr, #13
   d70ca:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d70ce:	9a04      	ldr	r2, [sp, #16]
   d70d0:	4572      	cmp	r2, lr
   d70d2:	d9e3      	bls.n	d709c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d70d4:	eba2 020e 	sub.w	r2, r2, lr
   d70d8:	9207      	str	r2, [sp, #28]
   d70da:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d70de:	f1bc 0f04 	cmp.w	ip, #4
   d70e2:	eb0c 090e 	add.w	r9, ip, lr
   d70e6:	fa5f f28c 	uxtb.w	r2, ip
   d70ea:	d814      	bhi.n	d7116 <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d70ec:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d70f0:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d70f4:	9907      	ldr	r1, [sp, #28]
   d70f6:	458c      	cmp	ip, r1
   d70f8:	d11b      	bne.n	d7132 <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d70fa:	2a00      	cmp	r2, #0
   d70fc:	bf18      	it	ne
   d70fe:	2600      	movne	r6, #0
   d7100:	e740      	b.n	d6f84 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d7102:	f10b 3bff 	add.w	fp, fp, #4294967295
   d7106:	fa5f fb8b 	uxtb.w	fp, fp
   d710a:	455a      	cmp	r2, fp
   d710c:	d1c6      	bne.n	d709c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d710e:	7b42      	ldrb	r2, [r0, #13]
   d7110:	429a      	cmp	r2, r3
   d7112:	d0d6      	beq.n	d70c2 <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d7114:	e7c2      	b.n	d709c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d7116:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d7118:	bf95      	itete	ls
   d711a:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d711e:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d7122:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d7126:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d712a:	bf94      	ite	ls
   d712c:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d712e:	8892      	ldrhhi	r2, [r2, #4]
   d7130:	e7e0      	b.n	d70f4 <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d7132:	2aff      	cmp	r2, #255	; 0xff
   d7134:	d8b2      	bhi.n	d709c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d7136:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d7138:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d713c:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d713e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d7142:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d7146:	bf98      	it	ls
   d7148:	3220      	addls	r2, #32
   d714a:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d714e:	bf98      	it	ls
   d7150:	b2d2      	uxtbls	r2, r2
   d7152:	f1b9 0f19 	cmp.w	r9, #25
   d7156:	bf9c      	itt	ls
   d7158:	3120      	addls	r1, #32
   d715a:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d715c:	4291      	cmp	r1, r2
   d715e:	d19d      	bne.n	d709c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d7160:	f10c 0c01 	add.w	ip, ip, #1
   d7164:	f1bc 0f0d 	cmp.w	ip, #13
   d7168:	d1b9      	bne.n	d70de <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d716a:	e70b      	b.n	d6f84 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d716c:	070a      	lsls	r2, r1, #28
   d716e:	d495      	bmi.n	d709c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d7170:	b166      	cbz	r6, d718c <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d7172:	f1bb 0f01 	cmp.w	fp, #1
   d7176:	9303      	str	r3, [sp, #12]
   d7178:	f47f aedb 	bne.w	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d717c:	f7ff fd10 	bl	d6ba0 <_ZN7FatFile11lfnChecksumEPh>
   d7180:	9b03      	ldr	r3, [sp, #12]
   d7182:	4298      	cmp	r0, r3
   d7184:	f47f aed5 	bne.w	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d7188:	46b2      	mov	sl, r6
   d718a:	e00f      	b.n	d71ac <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d718c:	ee18 1a10 	vmov	r1, s16
   d7190:	220b      	movs	r2, #11
   d7192:	9307      	str	r3, [sp, #28]
   d7194:	f007 fb12 	bl	de7bc <memcmp>
   d7198:	9b07      	ldr	r3, [sp, #28]
   d719a:	2800      	cmp	r0, #0
   d719c:	f47f aef2 	bne.w	d6f84 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d71a0:	f898 a000 	ldrb.w	sl, [r8]
   d71a4:	f01a 0a01 	ands.w	sl, sl, #1
   d71a8:	f47f af63 	bne.w	d7072 <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d71ac:	9b05      	ldr	r3, [sp, #20]
   d71ae:	0519      	lsls	r1, r3, #20
   d71b0:	f53f aebf 	bmi.w	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d71b4:	9b05      	ldr	r3, [sp, #20]
   d71b6:	9806      	ldr	r0, [sp, #24]
   d71b8:	f8cd a000 	str.w	sl, [sp]
   d71bc:	464a      	mov	r2, r9
   d71be:	4629      	mov	r1, r5
   d71c0:	f000 fa3a 	bl	d7638 <_ZN7FatFile15openCachedEntryEPS_tih>
   d71c4:	e6b6      	b.n	d6f34 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d71c6:	2100      	movs	r1, #0
   d71c8:	4628      	mov	r0, r5
   d71ca:	f000 f9d3 	bl	d7574 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d71ce:	b998      	cbnz	r0, d71f8 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d71d0:	786b      	ldrb	r3, [r5, #1]
   d71d2:	2b00      	cmp	r3, #0
   d71d4:	f47f aead 	bne.w	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d71d8:	4628      	mov	r0, r5
   d71da:	f000 f86f 	bl	d72bc <_ZN7FatFile13addDirClusterEv>
   d71de:	2800      	cmp	r0, #0
   d71e0:	f43f aea7 	beq.w	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d71e4:	68ab      	ldr	r3, [r5, #8]
   d71e6:	791b      	ldrb	r3, [r3, #4]
   d71e8:	2b01      	cmp	r3, #1
   d71ea:	f63f aee9 	bhi.w	d6fc0 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d71ee:	3410      	adds	r4, #16
   d71f0:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d71f2:	42a7      	cmp	r7, r4
   d71f4:	d8f0      	bhi.n	d71d8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d71f6:	e6e3      	b.n	d6fc0 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d71f8:	3401      	adds	r4, #1
   d71fa:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d71fc:	e6dd      	b.n	d6fba <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d71fe:	4641      	mov	r1, r8
   d7200:	4628      	mov	r0, r5
   d7202:	f7ff fe36 	bl	d6e72 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d7206:	2800      	cmp	r0, #0
   d7208:	f47f aede 	bne.w	d6fc8 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d720c:	e691      	b.n	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d720e:	bf14      	ite	ne
   d7210:	f04f 31ff 	movne.w	r1, #4294967295
   d7214:	2100      	moveq	r1, #0
   d7216:	b289      	uxth	r1, r1
   d7218:	e718      	b.n	d704c <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d721a:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d721e:	bf94      	ite	ls
   d7220:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d7224:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d7228:	8099      	strh	r1, [r3, #4]
   d722a:	e71a      	b.n	d7062 <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d722c:	4631      	mov	r1, r6
   d722e:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d7230:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d7232:	f000 f99f 	bl	d7574 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d7236:	4604      	mov	r4, r0
   d7238:	2800      	cmp	r0, #0
   d723a:	f43f ae7a 	beq.w	d6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d723e:	2220      	movs	r2, #32
   d7240:	4631      	mov	r1, r6
   d7242:	f007 faf1 	bl	de828 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d7246:	4643      	mov	r3, r8
   d7248:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d724c:	6022      	str	r2, [r4, #0]
   d724e:	685a      	ldr	r2, [r3, #4]
   d7250:	6062      	str	r2, [r4, #4]
   d7252:	891a      	ldrh	r2, [r3, #8]
   d7254:	8122      	strh	r2, [r4, #8]
   d7256:	7a9b      	ldrb	r3, [r3, #10]
   d7258:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d725a:	f898 3000 	ldrb.w	r3, [r8]
   d725e:	f003 0318 	and.w	r3, r3, #24
   d7262:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d7264:	4b0f      	ldr	r3, [pc, #60]	; (d72a4 <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d7266:	681b      	ldr	r3, [r3, #0]
   d7268:	b19b      	cbz	r3, d7292 <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d726a:	f104 010e 	add.w	r1, r4, #14
   d726e:	f104 0010 	add.w	r0, r4, #16
   d7272:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d7274:	8a23      	ldrh	r3, [r4, #16]
   d7276:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d7278:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d727a:	89e3      	ldrh	r3, [r4, #14]
   d727c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d727e:	68aa      	ldr	r2, [r5, #8]
   d7280:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d7284:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d7288:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d728c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   d7290:	e790      	b.n	d71b4 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d7292:	2321      	movs	r3, #33	; 0x21
   d7294:	7423      	strb	r3, [r4, #16]
   d7296:	2328      	movs	r3, #40	; 0x28
   d7298:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d729a:	2308      	movs	r3, #8
   d729c:	73a6      	strb	r6, [r4, #14]
   d729e:	73e3      	strb	r3, [r4, #15]
   d72a0:	e7e8      	b.n	d7274 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d72a2:	bf00      	nop
   d72a4:	2003e5b4 	.word	0x2003e5b4

000d72a8 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d72a8:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d72aa:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d72ac:	f043 0304 	orr.w	r3, r3, #4
   d72b0:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d72b2:	f100 0210 	add.w	r2, r0, #16
   d72b6:	6880      	ldr	r0, [r0, #8]
   d72b8:	f000 bc56 	b.w	d7b68 <_ZN9FatVolume15allocateClusterEmPm>

000d72bc <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d72bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d72c0:	7801      	ldrb	r1, [r0, #0]
   d72c2:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d72c6:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d72c8:	d003      	beq.n	d72d2 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d72ca:	2600      	movs	r6, #0
}
   d72cc:	4630      	mov	r0, r6
   d72ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d72d2:	6942      	ldr	r2, [r0, #20]
   d72d4:	4b17      	ldr	r3, [pc, #92]	; (d7334 <_ZN7FatFile13addDirClusterEv+0x78>)
   d72d6:	429a      	cmp	r2, r3
   d72d8:	d2f7      	bcs.n	d72ca <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d72da:	f7ff ffe5 	bl	d72a8 <_ZN7FatFile10addClusterEv>
   d72de:	4606      	mov	r6, r0
   d72e0:	2800      	cmp	r0, #0
   d72e2:	d0f2      	beq.n	d72ca <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d72e4:	6921      	ldr	r1, [r4, #16]
   d72e6:	68a0      	ldr	r0, [r4, #8]
   d72e8:	f000 fbd3 	bl	d7a92 <_ZNK9FatVolume17clusterFirstBlockEm>
   d72ec:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   d72ee:	68a0      	ldr	r0, [r4, #8]
   d72f0:	2205      	movs	r2, #5
   d72f2:	4639      	mov	r1, r7
   d72f4:	3024      	adds	r0, #36	; 0x24
   d72f6:	f000 fba9 	bl	d7a4c <_ZN8FatCache4readEmh>
  if (!pc) {
   d72fa:	4680      	mov	r8, r0
   d72fc:	2800      	cmp	r0, #0
   d72fe:	d0e4      	beq.n	d72ca <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d7300:	4629      	mov	r1, r5
   d7302:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7306:	f007 fa8f 	bl	de828 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d730a:	2501      	movs	r5, #1
   d730c:	68a3      	ldr	r3, [r4, #8]
   d730e:	791a      	ldrb	r2, [r3, #4]
   d7310:	42aa      	cmp	r2, r5
   d7312:	d909      	bls.n	d7328 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d7314:	6818      	ldr	r0, [r3, #0]
   d7316:	4642      	mov	r2, r8
   d7318:	19e9      	adds	r1, r5, r7
   d731a:	f000 ff00 	bl	d811e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d731e:	2800      	cmp	r0, #0
   d7320:	d0d3      	beq.n	d72ca <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d7322:	3501      	adds	r5, #1
   d7324:	b2ed      	uxtb	r5, r5
   d7326:	e7f1      	b.n	d730c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d7328:	6963      	ldr	r3, [r4, #20]
   d732a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d732e:	6163      	str	r3, [r4, #20]
  return true;
   d7330:	e7cc      	b.n	d72cc <_ZN7FatFile13addDirClusterEv+0x10>
   d7332:	bf00      	nop
   d7334:	001ffe00 	.word	0x001ffe00

000d7338 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d7338:	b510      	push	{r4, lr}
   d733a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d733c:	6880      	ldr	r0, [r0, #8]
   d733e:	460a      	mov	r2, r1
   d7340:	3024      	adds	r0, #36	; 0x24
   d7342:	69a1      	ldr	r1, [r4, #24]
   d7344:	f000 fb82 	bl	d7a4c <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d7348:	b120      	cbz	r0, d7354 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d734a:	88a3      	ldrh	r3, [r4, #4]
   d734c:	f003 030f 	and.w	r3, r3, #15
   d7350:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d7354:	bd10      	pop	{r4, pc}

000d7356 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d7356:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d7358:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d735a:	4605      	mov	r5, r0
   d735c:	460e      	mov	r6, r1
  if (isOpen()) {
   d735e:	b94c      	cbnz	r4, d7374 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d7360:	2224      	movs	r2, #36	; 0x24
   d7362:	4621      	mov	r1, r4
   d7364:	f007 fa60 	bl	de828 <memset>

  m_vol = vol;
   d7368:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d736a:	79f3      	ldrb	r3, [r6, #7]
   d736c:	2b10      	cmp	r3, #16
   d736e:	d003      	beq.n	d7378 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d7370:	2b20      	cmp	r3, #32
   d7372:	d007      	beq.n	d7384 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d7374:	2000      	movs	r0, #0
   d7376:	e004      	b.n	d7382 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d7378:	2320      	movs	r3, #32
  m_flags = F_READ;
   d737a:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d737c:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d737e:	70ac      	strb	r4, [r5, #2]
  return true;
   d7380:	4620      	mov	r0, r4
}
   d7382:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d7384:	2340      	movs	r3, #64	; 0x40
   d7386:	e7f8      	b.n	d737a <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d7388 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d7388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d738c:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d738e:	4604      	mov	r4, r0
   d7390:	4688      	mov	r8, r1
   d7392:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d7394:	2b00      	cmp	r3, #0
   d7396:	d05d      	beq.n	d7454 <_ZN7FatFile4readEPvj+0xcc>
   d7398:	7882      	ldrb	r2, [r0, #2]
   d739a:	07d1      	lsls	r1, r2, #31
   d739c:	d55a      	bpl.n	d7454 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d739e:	071a      	lsls	r2, r3, #28
   d73a0:	d52d      	bpl.n	d73fe <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d73a2:	69c3      	ldr	r3, [r0, #28]
   d73a4:	6942      	ldr	r2, [r0, #20]
   d73a6:	1a9b      	subs	r3, r3, r2
   d73a8:	429d      	cmp	r5, r3
   d73aa:	bf28      	it	cs
   d73ac:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d73ae:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d73b0:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d73b4:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d73b8:	2e00      	cmp	r6, #0
   d73ba:	f000 808f 	beq.w	d74dc <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d73be:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d73c0:	6963      	ldr	r3, [r4, #20]
   d73c2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d73c4:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d73c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d73ca:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d73ce:	d51f      	bpl.n	d7410 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d73d0:	6a00      	ldr	r0, [r0, #32]
   d73d2:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d73d4:	68a0      	ldr	r0, [r4, #8]
   d73d6:	f1ba 0f00 	cmp.w	sl, #0
   d73da:	d142      	bne.n	d7462 <_ZN7FatFile4readEPvj+0xda>
   d73dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d73e0:	d33f      	bcc.n	d7462 <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
   d73e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d73e4:	4299      	cmp	r1, r3
   d73e6:	d03c      	beq.n	d7462 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d73e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d73ec:	d252      	bcs.n	d7494 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d73ee:	6800      	ldr	r0, [r0, #0]
   d73f0:	4642      	mov	r2, r8
   d73f2:	f000 fe0b 	bl	d800c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d73f6:	b368      	cbz	r0, d7454 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d73f8:	f44f 7700 	mov.w	r7, #512	; 0x200
   d73fc:	e044      	b.n	d7488 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d73fe:	069b      	lsls	r3, r3, #26
   d7400:	d5d5      	bpl.n	d73ae <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d7402:	6883      	ldr	r3, [r0, #8]
   d7404:	891a      	ldrh	r2, [r3, #8]
   d7406:	6943      	ldr	r3, [r0, #20]
   d7408:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d740c:	b29b      	uxth	r3, r3
   d740e:	e7cb      	b.n	d73a8 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d7410:	f890 9005 	ldrb.w	r9, [r0, #5]
   d7414:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d7418:	f1ba 0f00 	cmp.w	sl, #0
   d741c:	d108      	bne.n	d7430 <_ZN7FatFile4readEPvj+0xa8>
   d741e:	f1b9 0f00 	cmp.w	r9, #0
   d7422:	d105      	bne.n	d7430 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d7424:	b95b      	cbnz	r3, d743e <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d7426:	0651      	lsls	r1, r2, #25
   d7428:	bf4c      	ite	mi
   d742a:	6a03      	ldrmi	r3, [r0, #32]
   d742c:	6a23      	ldrpl	r3, [r4, #32]
   d742e:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7430:	6921      	ldr	r1, [r4, #16]
   d7432:	68a0      	ldr	r0, [r4, #8]
   d7434:	f000 fb2d 	bl	d7a92 <_ZNK9FatVolume17clusterFirstBlockEm>
   d7438:	eb09 0100 	add.w	r1, r9, r0
   d743c:	e7ca      	b.n	d73d4 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d743e:	6921      	ldr	r1, [r4, #16]
   d7440:	465a      	mov	r2, fp
   d7442:	f000 fb2c 	bl	d7a9e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d7446:	2800      	cmp	r0, #0
   d7448:	db04      	blt.n	d7454 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d744a:	d1f1      	bne.n	d7430 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d744c:	7823      	ldrb	r3, [r4, #0]
   d744e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7452:	d143      	bne.n	d74dc <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d7454:	7863      	ldrb	r3, [r4, #1]
   d7456:	f043 0302 	orr.w	r3, r3, #2
   d745a:	7063      	strb	r3, [r4, #1]
  return -1;
   d745c:	f04f 30ff 	mov.w	r0, #4294967295
   d7460:	e03d      	b.n	d74de <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d7462:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d7466:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d7468:	f04f 0200 	mov.w	r2, #0
   d746c:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d7470:	bf28      	it	cs
   d7472:	4637      	movcs	r7, r6
   d7474:	f000 faea 	bl	d7a4c <_ZN8FatCache4readEmh>
      if (!pc) {
   d7478:	2800      	cmp	r0, #0
   d747a:	d0eb      	beq.n	d7454 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d747c:	eb00 010a 	add.w	r1, r0, sl
   d7480:	463a      	mov	r2, r7
   d7482:	4640      	mov	r0, r8
   d7484:	f007 f9a8 	bl	de7d8 <memcpy>
    m_curPosition += n;
   d7488:	6963      	ldr	r3, [r4, #20]
   d748a:	443b      	add	r3, r7
    dst += n;
   d748c:	44b8      	add	r8, r7
    m_curPosition += n;
   d748e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d7490:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d7492:	e791      	b.n	d73b8 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d7494:	7822      	ldrb	r2, [r4, #0]
   d7496:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d7498:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d749c:	d406      	bmi.n	d74ac <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d749e:	7902      	ldrb	r2, [r0, #4]
   d74a0:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d74a4:	b2d2      	uxtb	r2, r2
   d74a6:	4592      	cmp	sl, r2
   d74a8:	bf28      	it	cs
   d74aa:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d74ac:	4299      	cmp	r1, r3
      n = 512*nb;
   d74ae:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d74b2:	d208      	bcs.n	d74c6 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d74b4:	68a0      	ldr	r0, [r4, #8]
   d74b6:	4653      	mov	r3, sl
   d74b8:	6800      	ldr	r0, [r0, #0]
   d74ba:	4642      	mov	r2, r8
   d74bc:	f000 fdee 	bl	d809c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d74c0:	2800      	cmp	r0, #0
   d74c2:	d1e1      	bne.n	d7488 <_ZN7FatFile4readEPvj+0x100>
   d74c4:	e7c6      	b.n	d7454 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d74c6:	4453      	add	r3, sl
   d74c8:	428b      	cmp	r3, r1
   d74ca:	d9f3      	bls.n	d74b4 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d74cc:	3024      	adds	r0, #36	; 0x24
   d74ce:	9101      	str	r1, [sp, #4]
   d74d0:	f000 fa94 	bl	d79fc <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d74d4:	9901      	ldr	r1, [sp, #4]
   d74d6:	2800      	cmp	r0, #0
   d74d8:	d1ec      	bne.n	d74b4 <_ZN7FatFile4readEPvj+0x12c>
   d74da:	e7bb      	b.n	d7454 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d74dc:	1ba8      	subs	r0, r5, r6
}
   d74de:	b003      	add	sp, #12
   d74e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d74e4 <_ZN7FatFile5fgetsEPcsS0_>:
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
   d74e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d74e8:	4680      	mov	r8, r0
   d74ea:	460e      	mov	r6, r1
   d74ec:	4691      	mov	r9, r2
   d74ee:	461f      	mov	r7, r3
  int16_t r = -1;
   d74f0:	f04f 35ff 	mov.w	r5, #4294967295
  int16_t n = 0;
   d74f4:	f04f 0a00 	mov.w	sl, #0
  while ((n + 1) < num && (r = read(&ch, 1)) == 1) {
   d74f8:	f10a 0401 	add.w	r4, sl, #1
   d74fc:	454c      	cmp	r4, r9
   d74fe:	da1f      	bge.n	d7540 <_ZN7FatFile5fgetsEPcsS0_+0x5c>
   d7500:	2201      	movs	r2, #1
   d7502:	f10d 0107 	add.w	r1, sp, #7
   d7506:	4640      	mov	r0, r8
   d7508:	f7ff ff3e 	bl	d7388 <_ZN7FatFile4readEPvj>
   d750c:	b205      	sxth	r5, r0
   d750e:	2d01      	cmp	r5, #1
   d7510:	d116      	bne.n	d7540 <_ZN7FatFile5fgetsEPcsS0_+0x5c>
    if (ch == '\r') {
   d7512:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7516:	290d      	cmp	r1, #13
   d7518:	d0f0      	beq.n	d74fc <_ZN7FatFile5fgetsEPcsS0_+0x18>
    str[n++] = ch;
   d751a:	f806 100a 	strb.w	r1, [r6, sl]
   d751e:	b224      	sxth	r4, r4
    if (!delim) {
   d7520:	b93f      	cbnz	r7, d7532 <_ZN7FatFile5fgetsEPcsS0_+0x4e>
      if (ch == '\n') {
   d7522:	290a      	cmp	r1, #10
   d7524:	d10a      	bne.n	d753c <_ZN7FatFile5fgetsEPcsS0_+0x58>
  str[n] = '\0';
   d7526:	2300      	movs	r3, #0
   d7528:	5533      	strb	r3, [r6, r4]
}
   d752a:	4620      	mov	r0, r4
   d752c:	b002      	add	sp, #8
   d752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (strchr(delim, ch)) {
   d7532:	4638      	mov	r0, r7
   d7534:	f007 f9a4 	bl	de880 <strchr>
   d7538:	2800      	cmp	r0, #0
   d753a:	d1f4      	bne.n	d7526 <_ZN7FatFile5fgetsEPcsS0_+0x42>
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
   d753c:	46a2      	mov	sl, r4
   d753e:	e7db      	b.n	d74f8 <_ZN7FatFile5fgetsEPcsS0_+0x14>
  if (r < 0) {
   d7540:	2d00      	cmp	r5, #0
   d7542:	db01      	blt.n	d7548 <_ZN7FatFile5fgetsEPcsS0_+0x64>
   d7544:	4654      	mov	r4, sl
   d7546:	e7ee      	b.n	d7526 <_ZN7FatFile5fgetsEPcsS0_+0x42>
    return -1;
   d7548:	f04f 34ff 	mov.w	r4, #4294967295
   d754c:	e7ed      	b.n	d752a <_ZN7FatFile5fgetsEPcsS0_+0x46>

000d754e <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d754e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d7550:	2201      	movs	r2, #1
   d7552:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d7556:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d755a:	4604      	mov	r4, r0
   d755c:	f7ff ff14 	bl	d7388 <_ZN7FatFile4readEPvj>
   d7560:	2801      	cmp	r0, #1
   d7562:	bf0a      	itet	eq
   d7564:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d7568:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d756c:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d7570:	b002      	add	sp, #8
   d7572:	bd70      	pop	{r4, r5, r6, pc}

000d7574 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d7574:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d7576:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d7578:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d757c:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d757e:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d7582:	d000      	beq.n	d7586 <_ZN7FatFile12readDirCacheEb+0x12>
   d7584:	b999      	cbnz	r1, d75ae <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d7586:	2201      	movs	r2, #1
   d7588:	f10d 0107 	add.w	r1, sp, #7
   d758c:	4620      	mov	r0, r4
   d758e:	f7ff fefb 	bl	d7388 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d7592:	b240      	sxtb	r0, r0
   d7594:	2801      	cmp	r0, #1
   d7596:	d002      	beq.n	d759e <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d7598:	2000      	movs	r0, #0
}
   d759a:	b003      	add	sp, #12
   d759c:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d759e:	6963      	ldr	r3, [r4, #20]
   d75a0:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d75a2:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d75a4:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d75a6:	3030      	adds	r0, #48	; 0x30
   d75a8:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d75ac:	e7f5      	b.n	d759a <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d75ae:	3320      	adds	r3, #32
   d75b0:	e7f7      	b.n	d75a2 <_ZN7FatFile12readDirCacheEb+0x2e>

000d75b2 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d75b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d75b6:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d75b8:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d75ba:	4604      	mov	r4, r0
   d75bc:	460d      	mov	r5, r1
  if (!isOpen()) {
   d75be:	b162      	cbz	r2, d75da <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d75c0:	6940      	ldr	r0, [r0, #20]
   d75c2:	4288      	cmp	r0, r1
   d75c4:	d002      	beq.n	d75cc <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d75c6:	b919      	cbnz	r1, d75d0 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d75c8:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d75ca:	6165      	str	r5, [r4, #20]
    return true;
   d75cc:	2001      	movs	r0, #1
   d75ce:	e006      	b.n	d75de <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d75d0:	0716      	lsls	r6, r2, #28
   d75d2:	d506      	bpl.n	d75e2 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d75d4:	69e3      	ldr	r3, [r4, #28]
   d75d6:	428b      	cmp	r3, r1
   d75d8:	d20b      	bcs.n	d75f2 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d75da:	6127      	str	r7, [r4, #16]
  return false;
   d75dc:	2000      	movs	r0, #0
}
   d75de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d75e2:	0691      	lsls	r1, r2, #26
   d75e4:	d505      	bpl.n	d75f2 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d75e6:	68a3      	ldr	r3, [r4, #8]
   d75e8:	891b      	ldrh	r3, [r3, #8]
   d75ea:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d75ee:	d9ec      	bls.n	d75ca <_ZN7FatFile7seekSetEm+0x18>
   d75f0:	e7f3      	b.n	d75da <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d75f2:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d75f6:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d75fa:	1e43      	subs	r3, r0, #1
   d75fc:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d7600:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d7602:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d7604:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d7606:	42b3      	cmp	r3, r6
   d7608:	d800      	bhi.n	d760c <_ZN7FatFile7seekSetEm+0x5a>
   d760a:	b998      	cbnz	r0, d7634 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d760c:	0653      	lsls	r3, r2, #25
   d760e:	bf4c      	ite	mi
   d7610:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d7614:	6a23      	ldrpl	r3, [r4, #32]
   d7616:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d7618:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d761c:	2e00      	cmp	r6, #0
   d761e:	d0d4      	beq.n	d75ca <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d7620:	6921      	ldr	r1, [r4, #16]
   d7622:	68a0      	ldr	r0, [r4, #8]
   d7624:	4642      	mov	r2, r8
   d7626:	f000 fa3a 	bl	d7a9e <_ZN9FatVolume6fatGetEmPm>
   d762a:	2800      	cmp	r0, #0
   d762c:	f106 36ff 	add.w	r6, r6, #4294967295
   d7630:	dcf4      	bgt.n	d761c <_ZN7FatFile7seekSetEm+0x6a>
   d7632:	e7d2      	b.n	d75da <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d7634:	1af6      	subs	r6, r6, r3
   d7636:	e7ef      	b.n	d7618 <_ZN7FatFile7seekSetEm+0x66>

000d7638 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d7638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d763a:	460f      	mov	r7, r1
   d763c:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d763e:	2100      	movs	r1, #0
   d7640:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d7642:	4604      	mov	r4, r0
   d7644:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d7646:	f007 f8ef 	bl	de828 <memset>
  m_vol = dirFile->m_vol;
   d764a:	68b8      	ldr	r0, [r7, #8]
   d764c:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d764e:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d7650:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d7654:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d7658:	6a3b      	ldr	r3, [r7, #32]
   d765a:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d765c:	0171      	lsls	r1, r6, #5
   d765e:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d7662:	7af3      	ldrb	r3, [r6, #11]
   d7664:	071f      	lsls	r7, r3, #28
   d7666:	d446      	bmi.n	d76f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d7668:	1843      	adds	r3, r0, r1
   d766a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d766e:	f003 0317 	and.w	r3, r3, #23
   d7672:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d7674:	7af2      	ldrb	r2, [r6, #11]
   d7676:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d767a:	bf04      	itt	eq
   d767c:	f043 0308 	orreq.w	r3, r3, #8
   d7680:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d7682:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d7686:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d7688:	f005 0303 	and.w	r3, r5, #3
   d768c:	2b01      	cmp	r3, #1
   d768e:	d02c      	beq.n	d76ea <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d7690:	2b02      	cmp	r3, #2
   d7692:	d028      	beq.n	d76e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d7694:	bb7b      	cbnz	r3, d76f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d7696:	056a      	lsls	r2, r5, #21
   d7698:	d42d      	bmi.n	d76f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d769a:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d769c:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d769e:	78a2      	ldrb	r2, [r4, #2]
   d76a0:	0793      	lsls	r3, r2, #30
   d76a2:	d504      	bpl.n	d76ae <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d76a4:	7823      	ldrb	r3, [r4, #0]
   d76a6:	06df      	lsls	r7, r3, #27
   d76a8:	d425      	bmi.n	d76f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d76aa:	07de      	lsls	r6, r3, #31
   d76ac:	d423      	bmi.n	d76f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d76ae:	11ab      	asrs	r3, r5, #6
   d76b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d76b4:	f005 0608 	and.w	r6, r5, #8
   d76b8:	4333      	orrs	r3, r6
   d76ba:	4313      	orrs	r3, r2
   d76bc:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d76be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d76c0:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d76c2:	1843      	adds	r3, r0, r1
   d76c4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d76c8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d76cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d76d0:	056a      	lsls	r2, r5, #21
   d76d2:	d513      	bpl.n	d76fc <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d76d4:	b959      	cbnz	r1, d76ee <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d76d6:	78a3      	ldrb	r3, [r4, #2]
   d76d8:	f043 0304 	orr.w	r3, r3, #4
   d76dc:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d76de:	046b      	lsls	r3, r5, #17
   d76e0:	d410      	bmi.n	d7704 <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d76e2:	2001      	movs	r0, #1
}
   d76e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d76e6:	2303      	movs	r3, #3
   d76e8:	e7d8      	b.n	d769c <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d76ea:	2302      	movs	r3, #2
   d76ec:	e7d6      	b.n	d769c <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d76ee:	f000 fa76 	bl	d7bde <_ZN9FatVolume9freeChainEm>
   d76f2:	2800      	cmp	r0, #0
   d76f4:	d1ef      	bne.n	d76d6 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d76f6:	2000      	movs	r0, #0
   d76f8:	7020      	strb	r0, [r4, #0]
  return false;
   d76fa:	e7f3      	b.n	d76e4 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d76fc:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d76fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7700:	61e3      	str	r3, [r4, #28]
   d7702:	e7ec      	b.n	d76de <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d7704:	69e1      	ldr	r1, [r4, #28]
   d7706:	4620      	mov	r0, r4
   d7708:	f7ff ff53 	bl	d75b2 <_ZN7FatFile7seekSetEm>
   d770c:	2800      	cmp	r0, #0
   d770e:	d1e8      	bne.n	d76e2 <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d7710:	e7f1      	b.n	d76f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
	...

000d7714 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d7714:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d7716:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d7718:	4604      	mov	r4, r0
  if (!isOpen()) {
   d771a:	b90b      	cbnz	r3, d7720 <_ZN7FatFile4syncEv+0xc>
    return true;
   d771c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d771e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d7720:	7883      	ldrb	r3, [r0, #2]
   d7722:	075a      	lsls	r2, r3, #29
   d7724:	d523      	bpl.n	d776e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7726:	2101      	movs	r1, #1
   d7728:	f7ff fe06 	bl	d7338 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d772c:	4605      	mov	r5, r0
   d772e:	b928      	cbnz	r0, d773c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d7730:	7863      	ldrb	r3, [r4, #1]
   d7732:	f043 0301 	orr.w	r3, r3, #1
   d7736:	7063      	strb	r3, [r4, #1]
  return false;
   d7738:	2000      	movs	r0, #0
   d773a:	e7f0      	b.n	d771e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d773c:	7803      	ldrb	r3, [r0, #0]
   d773e:	2be5      	cmp	r3, #229	; 0xe5
   d7740:	d0f6      	beq.n	d7730 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d7742:	7823      	ldrb	r3, [r4, #0]
   d7744:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d7746:	bf44      	itt	mi
   d7748:	69e3      	ldrmi	r3, [r4, #28]
   d774a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d774c:	8c23      	ldrh	r3, [r4, #32]
   d774e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d7750:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d7752:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d7754:	4b09      	ldr	r3, [pc, #36]	; (d777c <_ZN7FatFile4syncEv+0x68>)
   d7756:	681b      	ldr	r3, [r3, #0]
   d7758:	b12b      	cbz	r3, d7766 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d775a:	f100 0116 	add.w	r1, r0, #22
   d775e:	3018      	adds	r0, #24
   d7760:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d7762:	8b2b      	ldrh	r3, [r5, #24]
   d7764:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d7766:	78a3      	ldrb	r3, [r4, #2]
   d7768:	f023 0304 	bic.w	r3, r3, #4
   d776c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d776e:	68a0      	ldr	r0, [r4, #8]
   d7770:	f7ff fa09 	bl	d6b86 <_ZN9FatVolume9cacheSyncEv>
   d7774:	2800      	cmp	r0, #0
   d7776:	d0db      	beq.n	d7730 <_ZN7FatFile4syncEv+0x1c>
   d7778:	e7d0      	b.n	d771c <_ZN7FatFile4syncEv+0x8>
   d777a:	bf00      	nop
   d777c:	2003e5b4 	.word	0x2003e5b4

000d7780 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d7780:	b510      	push	{r4, lr}
   d7782:	4604      	mov	r4, r0
  bool rtn = sync();
   d7784:	f7ff ffc6 	bl	d7714 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d7788:	2300      	movs	r3, #0
   d778a:	7023      	strb	r3, [r4, #0]
}
   d778c:	bd10      	pop	{r4, pc}

000d778e <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d778e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7790:	b093      	sub	sp, #76	; 0x4c
   d7792:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7794:	2300      	movs	r3, #0
   d7796:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d779a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d779c:	9201      	str	r2, [sp, #4]
   d779e:	4606      	mov	r6, r0
   d77a0:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d77a2:	b113      	cbz	r3, d77aa <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d77a4:	2000      	movs	r0, #0
}
   d77a6:	b013      	add	sp, #76	; 0x4c
   d77a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d77aa:	780b      	ldrb	r3, [r1, #0]
   d77ac:	f013 0f70 	tst.w	r3, #112	; 0x70
   d77b0:	d0f8      	beq.n	d77a4 <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d77b2:	7813      	ldrb	r3, [r2, #0]
   d77b4:	2b2f      	cmp	r3, #47	; 0x2f
   d77b6:	d112      	bne.n	d77de <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d77b8:	9a01      	ldr	r2, [sp, #4]
   d77ba:	7813      	ldrb	r3, [r2, #0]
   d77bc:	2b2f      	cmp	r3, #47	; 0x2f
   d77be:	d102      	bne.n	d77c6 <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d77c0:	3201      	adds	r2, #1
   d77c2:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d77c4:	e7f8      	b.n	d77b8 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d77c6:	68a1      	ldr	r1, [r4, #8]
   d77c8:	b91b      	cbnz	r3, d77d2 <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d77ca:	4630      	mov	r0, r6
   d77cc:	f7ff fdc3 	bl	d7356 <_ZN7FatFile8openRootEP9FatVolume>
   d77d0:	e7e9      	b.n	d77a6 <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d77d2:	a809      	add	r0, sp, #36	; 0x24
   d77d4:	f7ff fdbf 	bl	d7356 <_ZN7FatFile8openRootEP9FatVolume>
   d77d8:	2800      	cmp	r0, #0
   d77da:	d0e3      	beq.n	d77a4 <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d77dc:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d77de:	9801      	ldr	r0, [sp, #4]
   d77e0:	aa01      	add	r2, sp, #4
   d77e2:	a903      	add	r1, sp, #12
   d77e4:	f7ff fa02 	bl	d6bec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d77e8:	2800      	cmp	r0, #0
   d77ea:	d0db      	beq.n	d77a4 <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d77ec:	9b01      	ldr	r3, [sp, #4]
   d77ee:	781b      	ldrb	r3, [r3, #0]
   d77f0:	b19b      	cbz	r3, d781a <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d77f2:	2300      	movs	r3, #0
   d77f4:	aa03      	add	r2, sp, #12
   d77f6:	4621      	mov	r1, r4
   d77f8:	4630      	mov	r0, r6
   d77fa:	f7ff fb8d 	bl	d6f18 <_ZN7FatFile4openEPS_P7fname_ti>
   d77fe:	2800      	cmp	r0, #0
   d7800:	d0d0      	beq.n	d77a4 <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d7802:	4635      	mov	r5, r6
   d7804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7806:	ac09      	add	r4, sp, #36	; 0x24
   d7808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d780a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d780c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d780e:	682b      	ldr	r3, [r5, #0]
   d7810:	6023      	str	r3, [r4, #0]
    close();
   d7812:	4630      	mov	r0, r6
   d7814:	f7ff ffb4 	bl	d7780 <_ZN7FatFile5closeEv>
  while (1) {
   d7818:	e7e0      	b.n	d77dc <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d781a:	463b      	mov	r3, r7
   d781c:	aa03      	add	r2, sp, #12
   d781e:	4621      	mov	r1, r4
   d7820:	4630      	mov	r0, r6
   d7822:	f7ff fb79 	bl	d6f18 <_ZN7FatFile4openEPS_P7fname_ti>
   d7826:	e7be      	b.n	d77a6 <_ZN7FatFile4openEPS_PKci+0x18>

000d7828 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d7828:	b500      	push	{lr}
   d782a:	b08b      	sub	sp, #44	; 0x2c
   d782c:	2300      	movs	r3, #0
   d782e:	460a      	mov	r2, r1
   d7830:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   d7834:	4601      	mov	r1, r0
   d7836:	2301      	movs	r3, #1
   d7838:	a801      	add	r0, sp, #4
   d783a:	f7ff ffa8 	bl	d778e <_ZN7FatFile4openEPS_PKci>
   d783e:	b110      	cbz	r0, d7846 <_ZN7FatFile6removeEPS_PKc+0x1e>
  return file.remove();
   d7840:	a801      	add	r0, sp, #4
   d7842:	f7ff fab3 	bl	d6dac <_ZN7FatFile6removeEv>
}
   d7846:	b00b      	add	sp, #44	; 0x2c
   d7848:	f85d fb04 	ldr.w	pc, [sp], #4

000d784c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d784c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7850:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d7852:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7854:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d7856:	4604      	mov	r4, r0
   d7858:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d785a:	d55b      	bpl.n	d7914 <_ZN7FatFile5writeEPKvj+0xc8>
   d785c:	7883      	ldrb	r3, [r0, #2]
   d785e:	079a      	lsls	r2, r3, #30
   d7860:	d558      	bpl.n	d7914 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d7862:	071b      	lsls	r3, r3, #28
   d7864:	d451      	bmi.n	d790a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d7866:	6963      	ldr	r3, [r4, #20]
   d7868:	43db      	mvns	r3, r3
   d786a:	42bb      	cmp	r3, r7
   d786c:	d352      	bcc.n	d7914 <_ZN7FatFile5writeEPKvj+0xc8>
   d786e:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7870:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d7874:	6966      	ldr	r6, [r4, #20]
   d7876:	f1b8 0f00 	cmp.w	r8, #0
   d787a:	f000 8091 	beq.w	d79a0 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d787e:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d7880:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d7882:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7886:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d788a:	d10e      	bne.n	d78aa <_ZN7FatFile5writeEPKvj+0x5e>
   d788c:	b96d      	cbnz	r5, d78aa <_ZN7FatFile5writeEPKvj+0x5e>
   d788e:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d7890:	2900      	cmp	r1, #0
   d7892:	d046      	beq.n	d7922 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7894:	4652      	mov	r2, sl
   d7896:	f000 f902 	bl	d7a9e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d789a:	2800      	cmp	r0, #0
   d789c:	db3a      	blt.n	d7914 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d789e:	d104      	bne.n	d78aa <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d78a0:	4620      	mov	r0, r4
   d78a2:	f7ff fd01 	bl	d72a8 <_ZN7FatFile10addClusterEv>
   d78a6:	2800      	cmp	r0, #0
   d78a8:	d034      	beq.n	d7914 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d78aa:	6921      	ldr	r1, [r4, #16]
   d78ac:	68a0      	ldr	r0, [r4, #8]
   d78ae:	f000 f8f0 	bl	d7a92 <_ZNK9FatVolume17clusterFirstBlockEm>
   d78b2:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d78b4:	68a0      	ldr	r0, [r4, #8]
   d78b6:	b915      	cbnz	r5, d78be <_ZN7FatFile5writeEPKvj+0x72>
   d78b8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d78bc:	d23f      	bcs.n	d793e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d78be:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d78c2:	4546      	cmp	r6, r8
   d78c4:	bf28      	it	cs
   d78c6:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d78c8:	2d00      	cmp	r5, #0
   d78ca:	d136      	bne.n	d793a <_ZN7FatFile5writeEPKvj+0xee>
   d78cc:	6962      	ldr	r2, [r4, #20]
   d78ce:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d78d0:	429a      	cmp	r2, r3
   d78d2:	bf34      	ite	cc
   d78d4:	2201      	movcc	r2, #1
   d78d6:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d78d8:	3024      	adds	r0, #36	; 0x24
   d78da:	f000 f8b7 	bl	d7a4c <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d78de:	b1c8      	cbz	r0, d7914 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d78e0:	4428      	add	r0, r5
   d78e2:	4632      	mov	r2, r6
   d78e4:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d78e6:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d78e8:	f006 ff76 	bl	de7d8 <memcpy>
      if (512 == (n + blockOffset)) {
   d78ec:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d78f0:	d104      	bne.n	d78fc <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d78f2:	68a0      	ldr	r0, [r4, #8]
   d78f4:	3024      	adds	r0, #36	; 0x24
   d78f6:	f000 f881 	bl	d79fc <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d78fa:	b158      	cbz	r0, d7914 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d78fc:	6963      	ldr	r3, [r4, #20]
   d78fe:	4433      	add	r3, r6
   d7900:	6163      	str	r3, [r4, #20]
    src += n;
   d7902:	44b1      	add	r9, r6
    nToWrite -= n;
   d7904:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d7908:	e7b4      	b.n	d7874 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d790a:	69c1      	ldr	r1, [r0, #28]
   d790c:	f7ff fe51 	bl	d75b2 <_ZN7FatFile7seekSetEm>
   d7910:	2800      	cmp	r0, #0
   d7912:	d1a8      	bne.n	d7866 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d7914:	7863      	ldrb	r3, [r4, #1]
   d7916:	f043 0301 	orr.w	r3, r3, #1
   d791a:	7063      	strb	r3, [r4, #1]
  return -1;
   d791c:	f04f 30ff 	mov.w	r0, #4294967295
   d7920:	e050      	b.n	d79c4 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d7922:	6a23      	ldr	r3, [r4, #32]
   d7924:	b93b      	cbnz	r3, d7936 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d7926:	4620      	mov	r0, r4
   d7928:	f7ff fcbe 	bl	d72a8 <_ZN7FatFile10addClusterEv>
   d792c:	2800      	cmp	r0, #0
   d792e:	d0f1      	beq.n	d7914 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d7930:	6923      	ldr	r3, [r4, #16]
   d7932:	6223      	str	r3, [r4, #32]
   d7934:	e7b9      	b.n	d78aa <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d7936:	6123      	str	r3, [r4, #16]
   d7938:	e7b7      	b.n	d78aa <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d793a:	2201      	movs	r2, #1
   d793c:	e7cc      	b.n	d78d8 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d793e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d7942:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d7944:	d31b      	bcc.n	d797e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d7946:	f890 c004 	ldrb.w	ip, [r0, #4]
   d794a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d794e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d7950:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d7954:	4573      	cmp	r3, lr
   d7956:	bf28      	it	cs
   d7958:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d795a:	4291      	cmp	r1, r2
      n = 512*nb;
   d795c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7960:	d307      	bcc.n	d7972 <_ZN7FatFile5writeEPKvj+0x126>
   d7962:	441a      	add	r2, r3
   d7964:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d7966:	bf82      	ittt	hi
   d7968:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   d796c:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7970:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d7972:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d7974:	464a      	mov	r2, r9
   d7976:	6828      	ldr	r0, [r5, #0]
   d7978:	f000 fc47 	bl	d820a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d797c:	e7bd      	b.n	d78fa <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d797e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d7980:	bf02      	ittt	eq
   d7982:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   d7986:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d798a:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d798c:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d798e:	464a      	mov	r2, r9
   d7990:	6818      	ldr	r0, [r3, #0]
   d7992:	f000 fbc4 	bl	d811e <_ZN9SdSpiCard10writeBlockEmPKh>
   d7996:	2800      	cmp	r0, #0
   d7998:	d0bc      	beq.n	d7914 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d799a:	f44f 7600 	mov.w	r6, #512	; 0x200
   d799e:	e7ad      	b.n	d78fc <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d79a0:	69e2      	ldr	r2, [r4, #28]
   d79a2:	78a3      	ldrb	r3, [r4, #2]
   d79a4:	42b2      	cmp	r2, r6
   d79a6:	d204      	bcs.n	d79b2 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d79a8:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d79aa:	f043 0304 	orr.w	r3, r3, #4
   d79ae:	70a3      	strb	r3, [r4, #2]
   d79b0:	e003      	b.n	d79ba <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d79b2:	4a08      	ldr	r2, [pc, #32]	; (d79d4 <_ZN7FatFile5writeEPKvj+0x188>)
   d79b4:	6812      	ldr	r2, [r2, #0]
   d79b6:	2a00      	cmp	r2, #0
   d79b8:	d1f7      	bne.n	d79aa <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d79ba:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d79be:	2b00      	cmp	r3, #0
   d79c0:	db02      	blt.n	d79c8 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d79c2:	4638      	mov	r0, r7
}
   d79c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d79c8:	4620      	mov	r0, r4
   d79ca:	f7ff fea3 	bl	d7714 <_ZN7FatFile4syncEv>
   d79ce:	2800      	cmp	r0, #0
   d79d0:	d1f7      	bne.n	d79c2 <_ZN7FatFile5writeEPKvj+0x176>
   d79d2:	e79f      	b.n	d7914 <_ZN7FatFile5writeEPKvj+0xc8>
   d79d4:	2003e5b4 	.word	0x2003e5b4

000d79d8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d79d8:	b513      	push	{r0, r1, r4, lr}
   d79da:	4604      	mov	r4, r0
    }
   d79dc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d79de:	b159      	cbz	r1, d79f8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d79e0:	9101      	str	r1, [sp, #4]
   d79e2:	f006 ff8a 	bl	de8fa <strlen>
   d79e6:	6823      	ldr	r3, [r4, #0]
   d79e8:	9901      	ldr	r1, [sp, #4]
   d79ea:	68db      	ldr	r3, [r3, #12]
   d79ec:	4602      	mov	r2, r0
   d79ee:	4620      	mov	r0, r4
    }
   d79f0:	b002      	add	sp, #8
   d79f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d79f6:	4718      	bx	r3
    }
   d79f8:	b002      	add	sp, #8
   d79fa:	bd10      	pop	{r4, pc}

000d79fc <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d79fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d79fe:	7803      	ldrb	r3, [r0, #0]
   d7a00:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d7a02:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d7a04:	d520      	bpl.n	d7a48 <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d7a06:	6843      	ldr	r3, [r0, #4]
   d7a08:	6881      	ldr	r1, [r0, #8]
   d7a0a:	f100 020c 	add.w	r2, r0, #12
   d7a0e:	6818      	ldr	r0, [r3, #0]
   d7a10:	9201      	str	r2, [sp, #4]
   d7a12:	f000 fb84 	bl	d811e <_ZN9SdSpiCard10writeBlockEmPKh>
   d7a16:	9a01      	ldr	r2, [sp, #4]
   d7a18:	4605      	mov	r5, r0
   d7a1a:	b918      	cbnz	r0, d7a24 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d7a1c:	2500      	movs	r5, #0
}
   d7a1e:	4628      	mov	r0, r5
   d7a20:	b003      	add	sp, #12
   d7a22:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d7a24:	7823      	ldrb	r3, [r4, #0]
   d7a26:	079b      	lsls	r3, r3, #30
   d7a28:	d404      	bmi.n	d7a34 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d7a2a:	7823      	ldrb	r3, [r4, #0]
   d7a2c:	f023 0301 	bic.w	r3, r3, #1
   d7a30:	7023      	strb	r3, [r4, #0]
   d7a32:	e7f4      	b.n	d7a1e <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d7a34:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d7a38:	6919      	ldr	r1, [r3, #16]
   d7a3a:	4401      	add	r1, r0
   d7a3c:	6818      	ldr	r0, [r3, #0]
   d7a3e:	f000 fb6e 	bl	d811e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d7a42:	2800      	cmp	r0, #0
   d7a44:	d1f1      	bne.n	d7a2a <_ZN8FatCache4syncEv+0x2e>
   d7a46:	e7e9      	b.n	d7a1c <_ZN8FatCache4syncEv+0x20>
  return true;
   d7a48:	2501      	movs	r5, #1
   d7a4a:	e7e8      	b.n	d7a1e <_ZN8FatCache4syncEv+0x22>

000d7a4c <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7a4c:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7a4e:	6883      	ldr	r3, [r0, #8]
   d7a50:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7a52:	4604      	mov	r4, r0
   d7a54:	460e      	mov	r6, r1
   d7a56:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d7a58:	d009      	beq.n	d7a6e <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d7a5a:	f7ff ffcf 	bl	d79fc <_ZN8FatCache4syncEv>
   d7a5e:	b908      	cbnz	r0, d7a64 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d7a60:	2000      	movs	r0, #0
}
   d7a62:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d7a64:	076b      	lsls	r3, r5, #29
   d7a66:	d50a      	bpl.n	d7a7e <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d7a68:	2300      	movs	r3, #0
   d7a6a:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7a6c:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d7a6e:	7822      	ldrb	r2, [r4, #0]
   d7a70:	f005 0503 	and.w	r5, r5, #3
   d7a74:	4620      	mov	r0, r4
   d7a76:	4315      	orrs	r5, r2
   d7a78:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d7a7c:	e7f1      	b.n	d7a62 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7a7e:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d7a80:	f104 020c 	add.w	r2, r4, #12
   d7a84:	6818      	ldr	r0, [r3, #0]
   d7a86:	4631      	mov	r1, r6
   d7a88:	f000 fac0 	bl	d800c <_ZN9SdSpiCard9readBlockEmPh>
   d7a8c:	2800      	cmp	r0, #0
   d7a8e:	d1eb      	bne.n	d7a68 <_ZN8FatCache4readEmh+0x1c>
   d7a90:	e7e6      	b.n	d7a60 <_ZN8FatCache4readEmh+0x14>

000d7a92 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d7a92:	7983      	ldrb	r3, [r0, #6]
   d7a94:	6940      	ldr	r0, [r0, #20]
   d7a96:	3902      	subs	r1, #2
   d7a98:	4099      	lsls	r1, r3
}
   d7a9a:	4408      	add	r0, r1
   d7a9c:	4770      	bx	lr

000d7a9e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7a9e:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d7aa0:	b570      	push	{r4, r5, r6, lr}
   d7aa2:	4605      	mov	r5, r0
   d7aa4:	460c      	mov	r4, r1
   d7aa6:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d7aa8:	d802      	bhi.n	d7ab0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d7aaa:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7aae:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d7ab0:	69c3      	ldr	r3, [r0, #28]
   d7ab2:	428b      	cmp	r3, r1
   d7ab4:	d3f9      	bcc.n	d7aaa <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d7ab6:	79c3      	ldrb	r3, [r0, #7]
   d7ab8:	2b20      	cmp	r3, #32
   d7aba:	d116      	bne.n	d7aea <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d7abc:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d7abe:	2202      	movs	r2, #2
   d7ac0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7ac4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7ac8:	f7ff ffc0 	bl	d7a4c <_ZN8FatCache4readEmh>
    if (!pc) {
   d7acc:	2800      	cmp	r0, #0
   d7ace:	d0ec      	beq.n	d7aaa <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d7ad0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7ad4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d7ad8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d7adc:	69ea      	ldr	r2, [r5, #28]
   d7ade:	429a      	cmp	r2, r3
  *value = next;
   d7ae0:	bf26      	itte	cs
   d7ae2:	6033      	strcs	r3, [r6, #0]
  return 1;
   d7ae4:	2001      	movcs	r0, #1
    return 0;
   d7ae6:	2000      	movcc	r0, #0
   d7ae8:	e7e1      	b.n	d7aae <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d7aea:	2b10      	cmp	r3, #16
   d7aec:	d1dd      	bne.n	d7aaa <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d7aee:	6983      	ldr	r3, [r0, #24]
   d7af0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7af4:	2202      	movs	r2, #2
   d7af6:	4419      	add	r1, r3
   d7af8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7afc:	f7ff ffa6 	bl	d7a4c <_ZN8FatCache4readEmh>
    if (!pc) {
   d7b00:	2800      	cmp	r0, #0
   d7b02:	d0d2      	beq.n	d7aaa <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d7b04:	b2e4      	uxtb	r4, r4
   d7b06:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d7b0a:	e7e7      	b.n	d7adc <_ZN9FatVolume6fatGetEmPm+0x3e>

000d7b0c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7b0c:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d7b0e:	b538      	push	{r3, r4, r5, lr}
   d7b10:	460c      	mov	r4, r1
   d7b12:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d7b14:	d801      	bhi.n	d7b1a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d7b16:	2000      	movs	r0, #0
}
   d7b18:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d7b1a:	69c3      	ldr	r3, [r0, #28]
   d7b1c:	428b      	cmp	r3, r1
   d7b1e:	d3fa      	bcc.n	d7b16 <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d7b20:	79c3      	ldrb	r3, [r0, #7]
   d7b22:	2b20      	cmp	r3, #32
   d7b24:	d10f      	bne.n	d7b46 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d7b26:	6981      	ldr	r1, [r0, #24]
   d7b28:	2203      	movs	r2, #3
   d7b2a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7b2e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7b32:	f7ff ff8b 	bl	d7a4c <_ZN8FatCache4readEmh>
    if (!pc) {
   d7b36:	2800      	cmp	r0, #0
   d7b38:	d0ed      	beq.n	d7b16 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d7b3a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7b3e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d7b42:	2001      	movs	r0, #1
   d7b44:	e7e8      	b.n	d7b18 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d7b46:	2b10      	cmp	r3, #16
   d7b48:	d1e5      	bne.n	d7b16 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d7b4a:	6983      	ldr	r3, [r0, #24]
   d7b4c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7b50:	2203      	movs	r2, #3
   d7b52:	4419      	add	r1, r3
   d7b54:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7b58:	f7ff ff78 	bl	d7a4c <_ZN8FatCache4readEmh>
    if (!pc) {
   d7b5c:	2800      	cmp	r0, #0
   d7b5e:	d0da      	beq.n	d7b16 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d7b60:	b2e4      	uxtb	r4, r4
   d7b62:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d7b66:	e7ec      	b.n	d7b42 <_ZN9FatVolume6fatPutEmm+0x36>

000d7b68 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7b68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d7b6c:	68c4      	ldr	r4, [r0, #12]
   d7b6e:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7b70:	4605      	mov	r5, r0
   d7b72:	460e      	mov	r6, r1
   d7b74:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d7b76:	d301      	bcc.n	d7b7c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d7b78:	2701      	movs	r7, #1
   d7b7a:	e001      	b.n	d7b80 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7b7c:	460c      	mov	r4, r1
    setStart = false;
   d7b7e:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d7b80:	69eb      	ldr	r3, [r5, #28]
    find++;
   d7b82:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7b84:	42a3      	cmp	r3, r4
   d7b86:	d202      	bcs.n	d7b8e <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d7b88:	b9c7      	cbnz	r7, d7bbc <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d7b8a:	68ec      	ldr	r4, [r5, #12]
   d7b8c:	e7f4      	b.n	d7b78 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d7b8e:	42a6      	cmp	r6, r4
   d7b90:	d014      	beq.n	d7bbc <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d7b92:	aa01      	add	r2, sp, #4
   d7b94:	4621      	mov	r1, r4
   d7b96:	4628      	mov	r0, r5
   d7b98:	f7ff ff81 	bl	d7a9e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7b9c:	2800      	cmp	r0, #0
   d7b9e:	db0d      	blt.n	d7bbc <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d7ba0:	d0ee      	beq.n	d7b80 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7ba2:	9b01      	ldr	r3, [sp, #4]
   d7ba4:	2b00      	cmp	r3, #0
   d7ba6:	d1eb      	bne.n	d7b80 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d7ba8:	b107      	cbz	r7, d7bac <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d7baa:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d7bac:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d7bb0:	4621      	mov	r1, r4
   d7bb2:	4628      	mov	r0, r5
   d7bb4:	f7ff ffaa 	bl	d7b0c <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d7bb8:	4607      	mov	r7, r0
   d7bba:	b920      	cbnz	r0, d7bc6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d7bbc:	2700      	movs	r7, #0
}
   d7bbe:	4638      	mov	r0, r7
   d7bc0:	b002      	add	sp, #8
   d7bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d7bc6:	b916      	cbnz	r6, d7bce <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d7bc8:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d7bcc:	e7f7      	b.n	d7bbe <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d7bce:	4622      	mov	r2, r4
   d7bd0:	4631      	mov	r1, r6
   d7bd2:	4628      	mov	r0, r5
   d7bd4:	f7ff ff9a 	bl	d7b0c <_ZN9FatVolume6fatPutEmm>
   d7bd8:	2800      	cmp	r0, #0
   d7bda:	d1f5      	bne.n	d7bc8 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d7bdc:	e7ee      	b.n	d7bbc <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d7bde <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d7bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7be0:	4605      	mov	r5, r0
   d7be2:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d7be4:	aa01      	add	r2, sp, #4
   d7be6:	4621      	mov	r1, r4
   d7be8:	4628      	mov	r0, r5
   d7bea:	f7ff ff58 	bl	d7a9e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7bee:	1e06      	subs	r6, r0, #0
   d7bf0:	db10      	blt.n	d7c14 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d7bf2:	2200      	movs	r2, #0
   d7bf4:	4621      	mov	r1, r4
   d7bf6:	4628      	mov	r0, r5
   d7bf8:	f7ff ff88 	bl	d7b0c <_ZN9FatVolume6fatPutEmm>
   d7bfc:	b150      	cbz	r0, d7c14 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7bfe:	68eb      	ldr	r3, [r5, #12]
   d7c00:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d7c02:	bf24      	itt	cs
   d7c04:	f104 34ff 	addcs.w	r4, r4, #4294967295
   d7c08:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d7c0a:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d7c0c:	2e00      	cmp	r6, #0
   d7c0e:	d1e9      	bne.n	d7be4 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d7c10:	b002      	add	sp, #8
   d7c12:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d7c14:	2000      	movs	r0, #0
   d7c16:	e7fb      	b.n	d7c10 <_ZN9FatVolume9freeChainEm+0x32>

000d7c18 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d7c18:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d7c1a:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d7c1c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7c1e:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d7c20:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   d7c24:	4604      	mov	r4, r0
  m_fatType = 0;
   d7c26:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d7c28:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d7c2c:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d7c2e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7c32:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d7c34:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d7c38:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d7c3c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d7c40:	460d      	mov	r5, r1
   d7c42:	b1b9      	cbz	r1, d7c74 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d7c44:	2904      	cmp	r1, #4
   d7c46:	d901      	bls.n	d7c4c <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7c48:	2000      	movs	r0, #0
}
   d7c4a:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d7c4c:	4611      	mov	r1, r2
   d7c4e:	4630      	mov	r0, r6
   d7c50:	f7ff fefc 	bl	d7a4c <_ZN8FatCache4readEmh>
    if (!pc) {
   d7c54:	2800      	cmp	r0, #0
   d7c56:	d0f7      	beq.n	d7c48 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7c58:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7c5c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d7c60:	065b      	lsls	r3, r3, #25
   d7c62:	d1f1      	bne.n	d7c48 <_ZN9FatVolume4initEh+0x30>
   d7c64:	f105 011b 	add.w	r1, r5, #27
   d7c68:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d7c6c:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d7c70:	2d00      	cmp	r5, #0
   d7c72:	d0e9      	beq.n	d7c48 <_ZN9FatVolume4initEh+0x30>
   d7c74:	2200      	movs	r2, #0
   d7c76:	4629      	mov	r1, r5
   d7c78:	4630      	mov	r0, r6
   d7c7a:	f7ff fee7 	bl	d7a4c <_ZN8FatCache4readEmh>
  if (!pc) {
   d7c7e:	2800      	cmp	r0, #0
   d7c80:	d0e2      	beq.n	d7c48 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d7c82:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d7c8a:	d1dd      	bne.n	d7c48 <_ZN9FatVolume4initEh+0x30>
   d7c8c:	7c03      	ldrb	r3, [r0, #16]
   d7c8e:	2b02      	cmp	r3, #2
   d7c90:	d1da      	bne.n	d7c48 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d7c92:	89c3      	ldrh	r3, [r0, #14]
   d7c94:	2b00      	cmp	r3, #0
   d7c96:	d0d7      	beq.n	d7c48 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d7c98:	7b41      	ldrb	r1, [r0, #13]
   d7c9a:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d7c9c:	1e4b      	subs	r3, r1, #1
   d7c9e:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d7ca0:	2300      	movs	r3, #0
   d7ca2:	71a3      	strb	r3, [r4, #6]
   d7ca4:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7ca6:	2301      	movs	r3, #1
   d7ca8:	4299      	cmp	r1, r3
   d7caa:	d007      	beq.n	d7cbc <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d7cac:	3e01      	subs	r6, #1
   d7cae:	d0cb      	beq.n	d7c48 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7cb0:	79a2      	ldrb	r2, [r4, #6]
   d7cb2:	005b      	lsls	r3, r3, #1
   d7cb4:	3201      	adds	r2, #1
   d7cb6:	b2db      	uxtb	r3, r3
   d7cb8:	71a2      	strb	r2, [r4, #6]
   d7cba:	e7f5      	b.n	d7ca8 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d7cbc:	8ac1      	ldrh	r1, [r0, #22]
   d7cbe:	b901      	cbnz	r1, d7cc2 <_ZN9FatVolume4initEh+0xaa>
   d7cc0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d7cc2:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7cc4:	89c3      	ldrh	r3, [r0, #14]
   d7cc6:	442b      	add	r3, r5
   d7cc8:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d7cca:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d7cce:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d7cd0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d7cd4:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7cd6:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d7cda:	0149      	lsls	r1, r1, #5
   d7cdc:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d7ce0:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d7ce4:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d7ce6:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d7cea:	b902      	cbnz	r2, d7cee <_ZN9FatVolume4initEh+0xd6>
   d7cec:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d7cee:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d7cf0:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d7cf2:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d7cf4:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d7cf6:	1c4b      	adds	r3, r1, #1
   d7cf8:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d7cfa:	f640 73f4 	movw	r3, #4084	; 0xff4
   d7cfe:	4299      	cmp	r1, r3
   d7d00:	d802      	bhi.n	d7d08 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d7d02:	230c      	movs	r3, #12
   d7d04:	71e3      	strb	r3, [r4, #7]
   d7d06:	e79f      	b.n	d7c48 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d7d08:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d7d0c:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d7d0e:	bf85      	ittet	hi
   d7d10:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d7d12:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d7d14:	2310      	movls	r3, #16
    m_fatType = 32;
   d7d16:	2320      	movhi	r3, #32
   d7d18:	71e3      	strb	r3, [r4, #7]
  return true;
   d7d1a:	2001      	movs	r0, #1
   d7d1c:	e795      	b.n	d7c4a <_ZN9FatVolume4initEh+0x32>
	...

000d7d20 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7d20:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7d22:	4e0e      	ldr	r6, [pc, #56]	; (d7d5c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7d24:	460d      	mov	r5, r1
   d7d26:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7d28:	f001 f988 	bl	d903c <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7d2c:	6833      	ldr	r3, [r6, #0]
   d7d2e:	1ac0      	subs	r0, r0, r3
   d7d30:	4b0b      	ldr	r3, [pc, #44]	; (d7d60 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d7d32:	4298      	cmp	r0, r3
   d7d34:	d908      	bls.n	d7d48 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7d36:	f001 f989 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7d3a:	4b0a      	ldr	r3, [pc, #40]	; (d7d64 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7d3c:	6018      	str	r0, [r3, #0]
    		spark_process();
   d7d3e:	f001 fc71 	bl	d9624 <spark_process>
   d7d42:	f001 f97b 	bl	d903c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d7d46:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7d48:	f001 f980 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7d4c:	b280      	uxth	r0, r0
   d7d4e:	1b40      	subs	r0, r0, r5
}
   d7d50:	42a0      	cmp	r0, r4
   d7d52:	bfd4      	ite	le
   d7d54:	2000      	movle	r0, #0
   d7d56:	2001      	movgt	r0, #1
   d7d58:	bd70      	pop	{r4, r5, r6, pc}
   d7d5a:	bf00      	nop
   d7d5c:	2003e5bc 	.word	0x2003e5bc
   d7d60:	000186a0 	.word	0x000186a0
   d7d64:	2003e7b8 	.word	0x2003e7b8

000d7d68 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7d68:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7d6a:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d7d6c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7d6e:	b94d      	cbnz	r5, d7d84 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7d70:	6840      	ldr	r0, [r0, #4]
   d7d72:	f000 fa6b 	bl	d824c <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d7d76:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d7d78:	4629      	mov	r1, r5
   d7d7a:	7d18      	ldrb	r0, [r3, #20]
   d7d7c:	f004 f9c5 	bl	dc10a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7d80:	2301      	movs	r3, #1
   d7d82:	7223      	strb	r3, [r4, #8]
  }
}
   d7d84:	bd38      	pop	{r3, r4, r5, pc}

000d7d86 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7d86:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7d88:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d7d8a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7d8c:	b16b      	cbz	r3, d7daa <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d7d8e:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d7d90:	2101      	movs	r1, #1
   d7d92:	7d18      	ldrb	r0, [r3, #20]
   d7d94:	f004 f9b9 	bl	dc10a <digitalWrite>
     m_spiDriver->send(data);
   d7d98:	6860      	ldr	r0, [r4, #4]
   d7d9a:	21ff      	movs	r1, #255	; 0xff
   d7d9c:	f000 fa88 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d7da0:	6860      	ldr	r0, [r4, #4]
   d7da2:	f000 fa67 	bl	d8274 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7da6:	2300      	movs	r3, #0
   d7da8:	7223      	strb	r3, [r4, #8]
  }
}
   d7daa:	bd10      	pop	{r4, pc}

000d7dac <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7dae:	4604      	mov	r4, r0
   d7db0:	460d      	mov	r5, r1
   d7db2:	4616      	mov	r6, r2
   d7db4:	f001 f94a 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7db8:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d7dba:	6860      	ldr	r0, [r4, #4]
   d7dbc:	f000 fa5d 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d7dc0:	28ff      	cmp	r0, #255	; 0xff
   d7dc2:	7260      	strb	r0, [r4, #9]
   d7dc4:	d10e      	bne.n	d7de4 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d7dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7dca:	4639      	mov	r1, r7
   d7dcc:	4620      	mov	r0, r4
   d7dce:	f7ff ffa7 	bl	d7d20 <_ZN9SdSpiCard10isTimedOutEtt>
   d7dd2:	2800      	cmp	r0, #0
   d7dd4:	d0f1      	beq.n	d7dba <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d7dd6:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d7dd8:	4620      	mov	r0, r4
   d7dda:	7023      	strb	r3, [r4, #0]
   d7ddc:	f7ff ffd3 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7de0:	2000      	movs	r0, #0
}
   d7de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d7de4:	28fe      	cmp	r0, #254	; 0xfe
   d7de6:	d001      	beq.n	d7dec <_ZN9SdSpiCard8readDataEPhj+0x40>
   d7de8:	2350      	movs	r3, #80	; 0x50
   d7dea:	e7f5      	b.n	d7dd8 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d7dec:	6860      	ldr	r0, [r4, #4]
   d7dee:	4632      	mov	r2, r6
   d7df0:	4629      	mov	r1, r5
   d7df2:	f000 fa47 	bl	d8284 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d7df6:	7260      	strb	r0, [r4, #9]
   d7df8:	b108      	cbz	r0, d7dfe <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d7dfa:	2360      	movs	r3, #96	; 0x60
   d7dfc:	e7ec      	b.n	d7dd8 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d7dfe:	6860      	ldr	r0, [r4, #4]
   d7e00:	f000 fa3b 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
   d7e04:	6860      	ldr	r0, [r4, #4]
   d7e06:	f000 fa38 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
   d7e0a:	2001      	movs	r0, #1
   d7e0c:	e7e9      	b.n	d7de2 <_ZN9SdSpiCard8readDataEPhj+0x36>

000d7e0e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7e0e:	b570      	push	{r4, r5, r6, lr}
   d7e10:	4604      	mov	r4, r0
   d7e12:	460e      	mov	r6, r1
   d7e14:	f001 f91a 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
   d7e18:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7e1a:	4632      	mov	r2, r6
   d7e1c:	4629      	mov	r1, r5
   d7e1e:	4620      	mov	r0, r4
   d7e20:	f7ff ff7e 	bl	d7d20 <_ZN9SdSpiCard10isTimedOutEtt>
   d7e24:	b930      	cbnz	r0, d7e34 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d7e26:	6860      	ldr	r0, [r4, #4]
   d7e28:	f000 fa27 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7e2c:	28ff      	cmp	r0, #255	; 0xff
   d7e2e:	d1f4      	bne.n	d7e1a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7e30:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d7e32:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d7e34:	2000      	movs	r0, #0
   d7e36:	e7fc      	b.n	d7e32 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d7e38 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d7e3a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7e3c:	9201      	str	r2, [sp, #4]
   d7e3e:	4604      	mov	r4, r0
   d7e40:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d7e42:	b90b      	cbnz	r3, d7e48 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7e44:	f7ff ff90 	bl	d7d68 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d7e48:	b125      	cbz	r5, d7e54 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d7e4a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7e4e:	4620      	mov	r0, r4
   d7e50:	f7ff ffdd 	bl	d7e0e <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d7e54:	6860      	ldr	r0, [r4, #4]
   d7e56:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7e5a:	f000 fa29 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
   d7e5e:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d7e60:	af01      	add	r7, sp, #4
   d7e62:	5db9      	ldrb	r1, [r7, r6]
   d7e64:	6860      	ldr	r0, [r4, #4]
   d7e66:	f000 fa23 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d7e6a:	3e01      	subs	r6, #1
   d7e6c:	d2f9      	bcs.n	d7e62 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7e6e:	2d00      	cmp	r5, #0
   d7e70:	6860      	ldr	r0, [r4, #4]
   d7e72:	bf0c      	ite	eq
   d7e74:	2195      	moveq	r1, #149	; 0x95
   d7e76:	2187      	movne	r1, #135	; 0x87
   d7e78:	f000 fa1a 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7e7c:	6860      	ldr	r0, [r4, #4]
   d7e7e:	f000 f9fc 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
   d7e82:	250b      	movs	r5, #11
   d7e84:	6860      	ldr	r0, [r4, #4]
   d7e86:	f000 f9f8 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7e8a:	0603      	lsls	r3, r0, #24
   d7e8c:	7260      	strb	r0, [r4, #9]
   d7e8e:	d503      	bpl.n	d7e98 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d7e90:	3d01      	subs	r5, #1
   d7e92:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7e96:	d1f5      	bne.n	d7e84 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d7e98:	b003      	add	sp, #12
   d7e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7e9c <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7e9c:	b570      	push	{r4, r5, r6, lr}
   d7e9e:	4604      	mov	r4, r0
   d7ea0:	460d      	mov	r5, r1
   d7ea2:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7ea4:	2137      	movs	r1, #55	; 0x37
   d7ea6:	2200      	movs	r2, #0
   d7ea8:	f7ff ffc6 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7eac:	4632      	mov	r2, r6
   d7eae:	4629      	mov	r1, r5
   d7eb0:	4620      	mov	r0, r4
  }
   d7eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d7eb6:	f7ff bfbf 	b.w	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
	...

000d7ebc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7ec0:	2500      	movs	r5, #0
   d7ec2:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7ec4:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d7ec6:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d7ec8:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7eca:	4604      	mov	r4, r0
   d7ecc:	4690      	mov	r8, r2
   d7ece:	461e      	mov	r6, r3
   d7ed0:	f001 f8bc 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d7ed4:	4641      	mov	r1, r8
   d7ed6:	4607      	mov	r7, r0
   d7ed8:	6860      	ldr	r0, [r4, #4]
   d7eda:	f000 f9bb 	bl	d8254 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d7ede:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d7ee0:	4a49      	ldr	r2, [pc, #292]	; (d8008 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d7ee2:	721d      	strb	r5, [r3, #8]
   d7ee4:	2501      	movs	r5, #1
   d7ee6:	60da      	str	r2, [r3, #12]
   d7ee8:	821d      	strh	r5, [r3, #16]
  spiStart();
   d7eea:	4620      	mov	r0, r4
   d7eec:	f7ff ff3c 	bl	d7d68 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d7ef0:	6863      	ldr	r3, [r4, #4]
   d7ef2:	4629      	mov	r1, r5
   d7ef4:	7d18      	ldrb	r0, [r3, #20]
   d7ef6:	f004 f908 	bl	dc10a <digitalWrite>
   d7efa:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d7efc:	6860      	ldr	r0, [r4, #4]
   d7efe:	21ff      	movs	r1, #255	; 0xff
   d7f00:	3d01      	subs	r5, #1
   d7f02:	f000 f9d5 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d7f06:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7f0a:	d1f7      	bne.n	d7efc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d7f0c:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d7f0e:	4629      	mov	r1, r5
   d7f10:	7d18      	ldrb	r0, [r3, #20]
   d7f12:	f004 f8fa 	bl	dc10a <digitalWrite>
  }
   d7f16:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d7f18:	2200      	movs	r2, #0
   d7f1a:	4611      	mov	r1, r2
   d7f1c:	4620      	mov	r0, r4
   d7f1e:	f7ff ff8b 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
   d7f22:	2801      	cmp	r0, #1
   d7f24:	4680      	mov	r8, r0
   d7f26:	d018      	beq.n	d7f5a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d7f28:	3d01      	subs	r5, #1
   d7f2a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7f2e:	d107      	bne.n	d7f40 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d7f30:	2320      	movs	r3, #32
  spiStop();
   d7f32:	4620      	mov	r0, r4
   d7f34:	7023      	strb	r3, [r4, #0]
   d7f36:	f7ff ff26 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7f3a:	2000      	movs	r0, #0
}
   d7f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d7f40:	6860      	ldr	r0, [r4, #4]
   d7f42:	21fd      	movs	r1, #253	; 0xfd
   d7f44:	f000 f9b4 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
   d7f48:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d7f4c:	6860      	ldr	r0, [r4, #4]
   d7f4e:	f000 f994 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d7f52:	f1b8 0801 	subs.w	r8, r8, #1
   d7f56:	d1f9      	bne.n	d7f4c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d7f58:	e7de      	b.n	d7f18 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7f5a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7f5e:	2108      	movs	r1, #8
   d7f60:	4620      	mov	r0, r4
   d7f62:	f7ff ff69 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
   d7f66:	2805      	cmp	r0, #5
   d7f68:	d114      	bne.n	d7f94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d7f6a:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7f6e:	2500      	movs	r5, #0
   d7f70:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d7f72:	462a      	mov	r2, r5
   d7f74:	2129      	movs	r1, #41	; 0x29
   d7f76:	4620      	mov	r0, r4
   d7f78:	f7ff ff90 	bl	d7e9c <_ZN9SdSpiCard8cardAcmdEhm>
   d7f7c:	4602      	mov	r2, r0
   d7f7e:	b1d8      	cbz	r0, d7fb8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7f80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7f84:	4639      	mov	r1, r7
   d7f86:	4620      	mov	r0, r4
   d7f88:	f7ff feca 	bl	d7d20 <_ZN9SdSpiCard10isTimedOutEtt>
   d7f8c:	2800      	cmp	r0, #0
   d7f8e:	d0f0      	beq.n	d7f72 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d7f90:	2343      	movs	r3, #67	; 0x43
   d7f92:	e7ce      	b.n	d7f32 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d7f94:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d7f96:	6860      	ldr	r0, [r4, #4]
   d7f98:	f000 f96f 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
   d7f9c:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d7f9e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7fa2:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d7fa4:	d1f7      	bne.n	d7f96 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d7fa6:	28aa      	cmp	r0, #170	; 0xaa
   d7fa8:	d104      	bne.n	d7fb4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d7faa:	2302      	movs	r3, #2
   d7fac:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7fae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d7fb2:	e7dd      	b.n	d7f70 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d7fb4:	2325      	movs	r3, #37	; 0x25
   d7fb6:	e7bc      	b.n	d7f32 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d7fb8:	7aa3      	ldrb	r3, [r4, #10]
   d7fba:	2b02      	cmp	r3, #2
   d7fbc:	d118      	bne.n	d7ff0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d7fbe:	213a      	movs	r1, #58	; 0x3a
   d7fc0:	4620      	mov	r0, r4
   d7fc2:	f7ff ff39 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
   d7fc6:	b108      	cbz	r0, d7fcc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d7fc8:	2337      	movs	r3, #55	; 0x37
   d7fca:	e7b2      	b.n	d7f32 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d7fcc:	6860      	ldr	r0, [r4, #4]
   d7fce:	f000 f954 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d7fd2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d7fd6:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d7fd8:	bf04      	itt	eq
   d7fda:	2303      	moveq	r3, #3
   d7fdc:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d7fde:	6860      	ldr	r0, [r4, #4]
   d7fe0:	f000 f94b 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
   d7fe4:	6860      	ldr	r0, [r4, #4]
   d7fe6:	f000 f948 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
   d7fea:	6860      	ldr	r0, [r4, #4]
   d7fec:	f000 f945 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	f7ff fec8 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d7ff6:	6863      	ldr	r3, [r4, #4]
   d7ff8:	7930      	ldrb	r0, [r6, #4]
   d7ffa:	68b1      	ldr	r1, [r6, #8]
   d7ffc:	89b2      	ldrh	r2, [r6, #12]
   d7ffe:	821a      	strh	r2, [r3, #16]
   d8000:	7218      	strb	r0, [r3, #8]
   d8002:	60d9      	str	r1, [r3, #12]
  return true;
   d8004:	2001      	movs	r0, #1
   d8006:	e799      	b.n	d7f3c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d8008:	0003d090 	.word	0x0003d090

000d800c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d800c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d800e:	7a83      	ldrb	r3, [r0, #10]
   d8010:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d8012:	bf18      	it	ne
   d8014:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d8016:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d8018:	460a      	mov	r2, r1
   d801a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d801c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d801e:	f7ff ff0b 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
   d8022:	b130      	cbz	r0, d8032 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d8024:	2330      	movs	r3, #48	; 0x30
   d8026:	7023      	strb	r3, [r4, #0]
  spiStop();
   d8028:	4620      	mov	r0, r4
   d802a:	f7ff feac 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d802e:	2500      	movs	r5, #0
   d8030:	e00b      	b.n	d804a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d8032:	4629      	mov	r1, r5
   d8034:	f44f 7200 	mov.w	r2, #512	; 0x200
   d8038:	4620      	mov	r0, r4
   d803a:	f7ff feb7 	bl	d7dac <_ZN9SdSpiCard8readDataEPhj>
   d803e:	4605      	mov	r5, r0
   d8040:	2800      	cmp	r0, #0
   d8042:	d0f1      	beq.n	d8028 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d8044:	4620      	mov	r0, r4
   d8046:	f7ff fe9e 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
}
   d804a:	4628      	mov	r0, r5
   d804c:	bd38      	pop	{r3, r4, r5, pc}

000d804e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d804e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d8050:	7a83      	ldrb	r3, [r0, #10]
   d8052:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d8054:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d8056:	bf18      	it	ne
   d8058:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d805a:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d805c:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d805e:	f7ff feeb 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
   d8062:	b130      	cbz	r0, d8072 <_ZN9SdSpiCard9readStartEm+0x24>
   d8064:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d8066:	4620      	mov	r0, r4
   d8068:	7023      	strb	r3, [r4, #0]
   d806a:	f7ff fe8c 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d806e:	2000      	movs	r0, #0
}
   d8070:	bd10      	pop	{r4, pc}
  return true;
   d8072:	2001      	movs	r0, #1
   d8074:	e7fc      	b.n	d8070 <_ZN9SdSpiCard9readStartEm+0x22>

000d8076 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d8076:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d8078:	2200      	movs	r2, #0
   d807a:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d807c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d807e:	f7ff fedb 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
   d8082:	b130      	cbz	r0, d8092 <_ZN9SdSpiCard8readStopEv+0x1c>
   d8084:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d8086:	4620      	mov	r0, r4
   d8088:	7023      	strb	r3, [r4, #0]
   d808a:	f7ff fe7c 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d808e:	2000      	movs	r0, #0
}
   d8090:	bd10      	pop	{r4, pc}
  spiStop();
   d8092:	4620      	mov	r0, r4
   d8094:	f7ff fe77 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d8098:	2001      	movs	r0, #1
   d809a:	e7f9      	b.n	d8090 <_ZN9SdSpiCard8readStopEv+0x1a>

000d809c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d809e:	4604      	mov	r4, r0
   d80a0:	4616      	mov	r6, r2
   d80a2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d80a4:	f7ff ffd3 	bl	d804e <_ZN9SdSpiCard9readStartEm>
   d80a8:	b168      	cbz	r0, d80c6 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d80aa:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d80ac:	b2ab      	uxth	r3, r5
   d80ae:	42bb      	cmp	r3, r7
   d80b0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d80b4:	d209      	bcs.n	d80ca <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d80b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d80ba:	4620      	mov	r0, r4
   d80bc:	f7ff fe76 	bl	d7dac <_ZN9SdSpiCard8readDataEPhj>
   d80c0:	3501      	adds	r5, #1
   d80c2:	2800      	cmp	r0, #0
   d80c4:	d1f2      	bne.n	d80ac <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d80c6:	2000      	movs	r0, #0
   d80c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d80ca:	4620      	mov	r0, r4
}
   d80cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d80d0:	f7ff bfd1 	b.w	d8076 <_ZN9SdSpiCard8readStopEv>

000d80d4 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d80d4:	b538      	push	{r3, r4, r5, lr}
   d80d6:	4604      	mov	r4, r0
   d80d8:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d80da:	6840      	ldr	r0, [r0, #4]
   d80dc:	f000 f8e8 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d80e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   d80e4:	6860      	ldr	r0, [r4, #4]
   d80e6:	4629      	mov	r1, r5
   d80e8:	f000 f8e6 	bl	d82b8 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d80ec:	6860      	ldr	r0, [r4, #4]
   d80ee:	21ff      	movs	r1, #255	; 0xff
   d80f0:	f000 f8de 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
   d80f4:	6860      	ldr	r0, [r4, #4]
   d80f6:	21ff      	movs	r1, #255	; 0xff
   d80f8:	f000 f8da 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d80fc:	6860      	ldr	r0, [r4, #4]
   d80fe:	f000 f8bc 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d8102:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d8104:	f000 001f 	and.w	r0, r0, #31
   d8108:	2805      	cmp	r0, #5
   d810a:	d006      	beq.n	d811a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d810c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d810e:	4620      	mov	r0, r4
   d8110:	7023      	strb	r3, [r4, #0]
   d8112:	f7ff fe38 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d8116:	2000      	movs	r0, #0
}
   d8118:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d811a:	2001      	movs	r0, #1
   d811c:	e7fc      	b.n	d8118 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d811e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d811e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d8120:	7a83      	ldrb	r3, [r0, #10]
   d8122:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d8124:	bf18      	it	ne
   d8126:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d8128:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d812a:	460a      	mov	r2, r1
   d812c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d812e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d8130:	f7ff fe82 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
   d8134:	4606      	mov	r6, r0
   d8136:	b130      	cbz	r0, d8146 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d8138:	2332      	movs	r3, #50	; 0x32
   d813a:	7023      	strb	r3, [r4, #0]
  spiStop();
   d813c:	4620      	mov	r0, r4
   d813e:	f7ff fe22 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d8142:	2500      	movs	r5, #0
   d8144:	e01f      	b.n	d8186 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d8146:	462a      	mov	r2, r5
   d8148:	21fe      	movs	r1, #254	; 0xfe
   d814a:	4620      	mov	r0, r4
   d814c:	f7ff ffc2 	bl	d80d4 <_ZN9SdSpiCard9writeDataEhPKh>
   d8150:	2800      	cmp	r0, #0
   d8152:	d0f3      	beq.n	d813c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d8154:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d8158:	4620      	mov	r0, r4
   d815a:	f7ff fe58 	bl	d7e0e <_ZN9SdSpiCard11waitNotBusyEt>
   d815e:	4605      	mov	r5, r0
   d8160:	b908      	cbnz	r0, d8166 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d8162:	235a      	movs	r3, #90	; 0x5a
   d8164:	e7e9      	b.n	d813a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d8166:	4632      	mov	r2, r6
   d8168:	210d      	movs	r1, #13
   d816a:	4620      	mov	r0, r4
   d816c:	f7ff fe64 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
   d8170:	b108      	cbz	r0, d8176 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d8172:	2329      	movs	r3, #41	; 0x29
   d8174:	e7e1      	b.n	d813a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d8176:	6860      	ldr	r0, [r4, #4]
   d8178:	f000 f87f 	bl	d827a <_ZN14SdSpiAltDriver7receiveEv>
   d817c:	2800      	cmp	r0, #0
   d817e:	d1f8      	bne.n	d8172 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d8180:	4620      	mov	r0, r4
   d8182:	f7ff fe00 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
}
   d8186:	4628      	mov	r0, r5
   d8188:	bd70      	pop	{r4, r5, r6, pc}

000d818a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d818a:	b513      	push	{r0, r1, r4, lr}
   d818c:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d818e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d8192:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d8194:	f7ff fe3b 	bl	d7e0e <_ZN9SdSpiCard11waitNotBusyEt>
   d8198:	9a01      	ldr	r2, [sp, #4]
   d819a:	b930      	cbnz	r0, d81aa <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d819c:	235b      	movs	r3, #91	; 0x5b
   d819e:	7023      	strb	r3, [r4, #0]
  spiStop();
   d81a0:	4620      	mov	r0, r4
   d81a2:	f7ff fdf0 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d81a6:	2000      	movs	r0, #0
   d81a8:	e005      	b.n	d81b6 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d81aa:	21fc      	movs	r1, #252	; 0xfc
   d81ac:	4620      	mov	r0, r4
   d81ae:	f7ff ff91 	bl	d80d4 <_ZN9SdSpiCard9writeDataEhPKh>
   d81b2:	2800      	cmp	r0, #0
   d81b4:	d0f4      	beq.n	d81a0 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d81b6:	b002      	add	sp, #8
   d81b8:	bd10      	pop	{r4, pc}

000d81ba <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d81ba:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d81bc:	7a83      	ldrb	r3, [r0, #10]
   d81be:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d81c0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d81c2:	bf18      	it	ne
   d81c4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d81c6:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d81c8:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d81ca:	f7ff fe35 	bl	d7e38 <_ZN9SdSpiCard11cardCommandEhm>
   d81ce:	b130      	cbz	r0, d81de <_ZN9SdSpiCard10writeStartEm+0x24>
   d81d0:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d81d2:	4620      	mov	r0, r4
   d81d4:	7023      	strb	r3, [r4, #0]
   d81d6:	f7ff fdd6 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d81da:	2000      	movs	r0, #0
}
   d81dc:	bd10      	pop	{r4, pc}
  return true;
   d81de:	2001      	movs	r0, #1
   d81e0:	e7fc      	b.n	d81dc <_ZN9SdSpiCard10writeStartEm+0x22>

000d81e2 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d81e2:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d81e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d81e8:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d81ea:	f7ff fe10 	bl	d7e0e <_ZN9SdSpiCard11waitNotBusyEt>
   d81ee:	4605      	mov	r5, r0
   d81f0:	b930      	cbnz	r0, d8200 <_ZN9SdSpiCard9writeStopEv+0x1e>
   d81f2:	2356      	movs	r3, #86	; 0x56
   d81f4:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d81f6:	4620      	mov	r0, r4
   d81f8:	f7ff fdc5 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d81fc:	4628      	mov	r0, r5
   d81fe:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d8200:	6860      	ldr	r0, [r4, #4]
   d8202:	21fd      	movs	r1, #253	; 0xfd
   d8204:	f000 f854 	bl	d82b0 <_ZN14SdSpiAltDriver4sendEh>
   d8208:	e7f5      	b.n	d81f6 <_ZN9SdSpiCard9writeStopEv+0x14>

000d820a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d820a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d820c:	4604      	mov	r4, r0
   d820e:	4616      	mov	r6, r2
   d8210:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d8212:	f7ff ffd2 	bl	d81ba <_ZN9SdSpiCard10writeStartEm>
   d8216:	b170      	cbz	r0, d8236 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d8218:	2500      	movs	r5, #0
   d821a:	42bd      	cmp	r5, r7
   d821c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d8220:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d8222:	d004      	beq.n	d822e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d8224:	f7ff ffb1 	bl	d818a <_ZN9SdSpiCard9writeDataEPKh>
   d8228:	b128      	cbz	r0, d8236 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d822a:	3501      	adds	r5, #1
   d822c:	e7f5      	b.n	d821a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d822e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d8232:	f7ff bfd6 	b.w	d81e2 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d8236:	4620      	mov	r0, r4
   d8238:	f7ff fda5 	bl	d7d86 <_ZN9SdSpiCard7spiStopEv>
}
   d823c:	2000      	movs	r0, #0
   d823e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8240 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d8240:	4b01      	ldr	r3, [pc, #4]	; (d8248 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d8242:	2201      	movs	r2, #1
   d8244:	701a      	strb	r2, [r3, #0]
}
   d8246:	4770      	bx	lr
   d8248:	2003e5c0 	.word	0x2003e5c0

000d824c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d824c:	1d01      	adds	r1, r0, #4
   d824e:	6800      	ldr	r0, [r0, #0]
   d8250:	f001 baf8 	b.w	d9844 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d8254 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d8254:	b510      	push	{r4, lr}
   d8256:	4604      	mov	r4, r0
  m_csPin = csPin;
   d8258:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d825a:	6800      	ldr	r0, [r0, #0]
   d825c:	f001 fac8 	bl	d97f0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d8260:	7d20      	ldrb	r0, [r4, #20]
   d8262:	2101      	movs	r1, #1
   d8264:	f003 ff40 	bl	dc0e8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d8268:	7d20      	ldrb	r0, [r4, #20]
   d826a:	2101      	movs	r1, #1
}
   d826c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d8270:	f003 bf4b 	b.w	dc10a <digitalWrite>

000d8274 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d8274:	6800      	ldr	r0, [r0, #0]
   d8276:	f001 bacc 	b.w	d9812 <_ZN8SPIClass14endTransactionEv>

000d827a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d827a:	6800      	ldr	r0, [r0, #0]
   d827c:	21ff      	movs	r1, #255	; 0xff
   d827e:	f001 bb4f 	b.w	d9920 <_ZN8SPIClass8transferEh>
	...

000d8284 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d8284:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8286:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d8288:	4a07      	ldr	r2, [pc, #28]	; (d82a8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d828a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d828c:	2500      	movs	r5, #0
   d828e:	4c07      	ldr	r4, [pc, #28]	; (d82ac <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d8290:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d8292:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d8294:	460a      	mov	r2, r1
   d8296:	4629      	mov	r1, r5
   d8298:	f001 fb48 	bl	d992c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d829c:	7823      	ldrb	r3, [r4, #0]
   d829e:	2b00      	cmp	r3, #0
   d82a0:	d0fc      	beq.n	d829c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d82a2:	2000      	movs	r0, #0
   d82a4:	b003      	add	sp, #12
   d82a6:	bd30      	pop	{r4, r5, pc}
   d82a8:	000d8241 	.word	0x000d8241
   d82ac:	2003e5c0 	.word	0x2003e5c0

000d82b0 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d82b0:	6800      	ldr	r0, [r0, #0]
   d82b2:	f001 bb35 	b.w	d9920 <_ZN8SPIClass8transferEh>
	...

000d82b8 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d82b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d82ba:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d82bc:	4a06      	ldr	r2, [pc, #24]	; (d82d8 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d82be:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d82c0:	2500      	movs	r5, #0
   d82c2:	4c06      	ldr	r4, [pc, #24]	; (d82dc <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d82c4:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d82c6:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d82c8:	462a      	mov	r2, r5
   d82ca:	f001 fb2f 	bl	d992c <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d82ce:	7823      	ldrb	r3, [r4, #0]
   d82d0:	2b00      	cmp	r3, #0
   d82d2:	d0fc      	beq.n	d82ce <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d82d4:	b003      	add	sp, #12
   d82d6:	bd30      	pop	{r4, r5, pc}
   d82d8:	000d8241 	.word	0x000d8241
   d82dc:	2003e5c0 	.word	0x2003e5c0

000d82e0 <_ZN16Adafruit_SSD167513setRAMAddressEtt>:
    @brief Some displays require setting the RAM address pointer
    @param x X address counter value
    @param y Y address counter value
*/
/**************************************************************************/
void Adafruit_SSD1675::setRAMAddress(uint16_t x, uint16_t y) {
   d82e0:	b513      	push	{r0, r1, r4, lr}
  uint8_t buf[2];

  // Set RAM X address counter
  buf[0] = 0;
   d82e2:	2300      	movs	r3, #0
   d82e4:	f88d 3004 	strb.w	r3, [sp, #4]
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d82e8:	aa01      	add	r2, sp, #4
   d82ea:	2301      	movs	r3, #1
   d82ec:	214e      	movs	r1, #78	; 0x4e
void Adafruit_SSD1675::setRAMAddress(uint16_t x, uint16_t y) {
   d82ee:	4604      	mov	r4, r0
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d82f0:	f000 fe55 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>

  // Set RAM Y address counter
  buf[0] = 0xF9;
   d82f4:	23f9      	movs	r3, #249	; 0xf9
   d82f6:	f8ad 3004 	strh.w	r3, [sp, #4]
  buf[1] = 0x00;
  EPD_command(SSD1675_SET_RAMYCOUNT, buf, 2);
   d82fa:	aa01      	add	r2, sp, #4
   d82fc:	2302      	movs	r3, #2
   d82fe:	214f      	movs	r1, #79	; 0x4f
   d8300:	4620      	mov	r0, r4
   d8302:	f000 fe4c 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
}
   d8306:	b002      	add	sp, #8
   d8308:	bd10      	pop	{r4, pc}

000d830a <_ZN16Adafruit_SSD167515writeRAMCommandEh>:
  if (index == 0) {
   d830a:	460a      	mov	r2, r1
   d830c:	b911      	cbnz	r1, d8314 <_ZN16Adafruit_SSD167515writeRAMCommandEh+0xa>
    return EPD_command(SSD1675_WRITE_RAM1, false);
   d830e:	2124      	movs	r1, #36	; 0x24
    return EPD_command(SSD1675_WRITE_RAM2, false);
   d8310:	f000 be2d 	b.w	d8f6e <_ZN12Adafruit_EPD11EPD_commandEhb>
  if (index == 1) {
   d8314:	2901      	cmp	r1, #1
   d8316:	d102      	bne.n	d831e <_ZN16Adafruit_SSD167515writeRAMCommandEh+0x14>
    return EPD_command(SSD1675_WRITE_RAM2, false);
   d8318:	2200      	movs	r2, #0
   d831a:	2126      	movs	r1, #38	; 0x26
   d831c:	e7f8      	b.n	d8310 <_ZN16Adafruit_SSD167515writeRAMCommandEh+0x6>
}
   d831e:	2000      	movs	r0, #0
   d8320:	4770      	bx	lr
	...

000d8324 <_ZN16Adafruit_SSD1675C1Eiiaaaaa>:
Adafruit_SSD1675::Adafruit_SSD1675(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY)
   d8324:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8326:	b085      	sub	sp, #20
   d8328:	4604      	mov	r4, r0
  : Adafruit_EPD(width, height, DC, RST, CS, SRCS, BUSY) {
   d832a:	f99d c034 	ldrsb.w	ip, [sp, #52]	; 0x34
Adafruit_SSD1675::Adafruit_SSD1675(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY)
   d832e:	f99d 7030 	ldrsb.w	r7, [sp, #48]	; 0x30
  : Adafruit_EPD(width, height, DC, RST, CS, SRCS, BUSY) {
   d8332:	e9cd 7c02 	strd	r7, ip, [sp, #8]
   d8336:	f99d c02c 	ldrsb.w	ip, [sp, #44]	; 0x2c
   d833a:	f8cd c004 	str.w	ip, [sp, #4]
   d833e:	f99d c028 	ldrsb.w	ip, [sp, #40]	; 0x28
   d8342:	f8cd c000 	str.w	ip, [sp]
Adafruit_SSD1675::Adafruit_SSD1675(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY)
   d8346:	4616      	mov	r6, r2
   d8348:	460d      	mov	r5, r1
  : Adafruit_EPD(width, height, DC, RST, CS, SRCS, BUSY) {
   d834a:	f000 fbad 	bl	d8aa8 <_ZN12Adafruit_EPDC1Eiiaaaaa>
   d834e:	4b17      	ldr	r3, [pc, #92]	; (d83ac <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x88>)
   d8350:	6023      	str	r3, [r4, #0]
  if ((height % 8) != 0) {
   d8352:	f016 0307 	ands.w	r3, r6, #7
   d8356:	d007      	beq.n	d8368 <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x44>
    height += 8 - (height % 8);
   d8358:	4272      	negs	r2, r6
   d835a:	f002 0207 	and.w	r2, r2, #7
   d835e:	bf58      	it	pl
   d8360:	4253      	negpl	r3, r2
   d8362:	f1c3 0308 	rsb	r3, r3, #8
   d8366:	441e      	add	r6, r3
  buffer1_size = width * height / 8;
   d8368:	4375      	muls	r5, r6
   d836a:	bf48      	it	mi
   d836c:	3507      	addmi	r5, #7
   d836e:	f3c5 01cf 	ubfx	r1, r5, #3, #16
  if (SRCS >= 0) {
   d8372:	2f00      	cmp	r7, #0
  buffer1_size = width * height / 8;
   d8374:	ea4f 00e5 	mov.w	r0, r5, asr #3
   d8378:	85e1      	strh	r1, [r4, #46]	; 0x2e
  buffer2_size = buffer1_size;
   d837a:	8621      	strh	r1, [r4, #48]	; 0x30
  if (SRCS >= 0) {
   d837c:	db0c      	blt.n	d8398 <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x74>
    use_sram = true;
   d837e:	2301      	movs	r3, #1
   d8380:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    buffer1_addr = 0;
   d8384:	2300      	movs	r3, #0
    buffer1 = buffer2 = NULL;
   d8386:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
    buffer1_addr = 0;
   d838a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    buffer2_addr = buffer1_size;
   d838e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
}
   d8392:	4620      	mov	r0, r4
   d8394:	b005      	add	sp, #20
   d8396:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buffer1 = (uint8_t *)malloc(buffer1_size);
   d8398:	b280      	uxth	r0, r0
   d839a:	f001 f98b 	bl	d96b4 <malloc>
   d839e:	6360      	str	r0, [r4, #52]	; 0x34
    buffer2 = (uint8_t *)malloc(buffer2_size);
   d83a0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   d83a2:	f001 f987 	bl	d96b4 <malloc>
   d83a6:	63a0      	str	r0, [r4, #56]	; 0x38
   d83a8:	e7f3      	b.n	d8392 <_ZN16Adafruit_SSD1675C1Eiiaaaaa+0x6e>
   d83aa:	bf00      	nop
   d83ac:	000df4d8 	.word	0x000df4d8

000d83b0 <_ZN16Adafruit_SSD16759busy_waitEv>:
{
   d83b0:	b510      	push	{r4, lr}
  if (_busy_pin >= 0) {
   d83b2:	f990 3025 	ldrsb.w	r3, [r0, #37]	; 0x25
   d83b6:	2b00      	cmp	r3, #0
{
   d83b8:	4604      	mov	r4, r0
  if (_busy_pin >= 0) {
   d83ba:	db09      	blt.n	d83d0 <_ZN16Adafruit_SSD16759busy_waitEv+0x20>
    while(digitalRead(_busy_pin)) { //wait for busy low
   d83bc:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   d83c0:	b280      	uxth	r0, r0
   d83c2:	f003 febb 	bl	dc13c <digitalRead>
   d83c6:	b148      	cbz	r0, d83dc <_ZN16Adafruit_SSD16759busy_waitEv+0x2c>
      delay(10);
   d83c8:	200a      	movs	r0, #10
   d83ca:	f002 fec3 	bl	db154 <delay>
    while(digitalRead(_busy_pin)) { //wait for busy low
   d83ce:	e7f5      	b.n	d83bc <_ZN16Adafruit_SSD16759busy_waitEv+0xc>
}
   d83d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(BUSY_WAIT);
   d83d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d83d8:	f002 bebc 	b.w	db154 <delay>
}
   d83dc:	bd10      	pop	{r4, pc}

000d83de <_ZN16Adafruit_SSD16756updateEv>:
{
   d83de:	b513      	push	{r0, r1, r4, lr}
  buf[0] = 0xC7;
   d83e0:	23c7      	movs	r3, #199	; 0xc7
{
   d83e2:	4604      	mov	r4, r0
  buf[0] = 0xC7;
   d83e4:	f88d 3004 	strb.w	r3, [sp, #4]
  EPD_command(SSD1675_DISP_CTRL2, buf, 1);
   d83e8:	aa01      	add	r2, sp, #4
   d83ea:	2301      	movs	r3, #1
   d83ec:	2122      	movs	r1, #34	; 0x22
   d83ee:	f000 fdd6 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_MASTER_ACTIVATE);
   d83f2:	2201      	movs	r2, #1
   d83f4:	2120      	movs	r1, #32
   d83f6:	4620      	mov	r0, r4
   d83f8:	f000 fdb9 	bl	d8f6e <_ZN12Adafruit_EPD11EPD_commandEhb>
  busy_wait();
   d83fc:	4620      	mov	r0, r4
   d83fe:	f7ff ffd7 	bl	d83b0 <_ZN16Adafruit_SSD16759busy_waitEv>
  if (_busy_pin <= -1) {
   d8402:	f994 3025 	ldrsb.w	r3, [r4, #37]	; 0x25
   d8406:	2b00      	cmp	r3, #0
   d8408:	da03      	bge.n	d8412 <_ZN16Adafruit_SSD16756updateEv+0x34>
    delay(1000);
   d840a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d840e:	f002 fea1 	bl	db154 <delay>
}
   d8412:	b002      	add	sp, #8
   d8414:	bd10      	pop	{r4, pc}
	...

000d8418 <_ZN16Adafruit_SSD16757powerUpEv>:
{
   d8418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d841c:	4604      	mov	r4, r0
  hardwareReset();
   d841e:	f000 fb89 	bl	d8b34 <_ZN12Adafruit_EPD13hardwareResetEv>
  delay(100);
   d8422:	2064      	movs	r0, #100	; 0x64
   d8424:	f002 fe96 	bl	db154 <delay>
  busy_wait();
   d8428:	4620      	mov	r0, r4
   d842a:	f7ff ffc1 	bl	d83b0 <_ZN16Adafruit_SSD16759busy_waitEv>
  EPD_command(SSD1675_SW_RESET);
   d842e:	2201      	movs	r2, #1
   d8430:	2112      	movs	r1, #18
   d8432:	4620      	mov	r0, r4
   d8434:	f000 fd9b 	bl	d8f6e <_ZN12Adafruit_EPD11EPD_commandEhb>
  busy_wait();
   d8438:	4620      	mov	r0, r4
   d843a:	f7ff ffb9 	bl	d83b0 <_ZN16Adafruit_SSD16759busy_waitEv>
  buf[0] = 0x54;
   d843e:	2354      	movs	r3, #84	; 0x54
   d8440:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_SET_ANALOGBLOCK, buf, 1);
   d8444:	466a      	mov	r2, sp
   d8446:	4620      	mov	r0, r4
   d8448:	2301      	movs	r3, #1
   d844a:	2174      	movs	r1, #116	; 0x74
   d844c:	f000 fda7 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x3B;
   d8450:	f04f 083b 	mov.w	r8, #59	; 0x3b
  EPD_command(SSD1675_SET_DIGITALBLOCK, buf, 1);
   d8454:	466a      	mov	r2, sp
   d8456:	4620      	mov	r0, r4
   d8458:	2301      	movs	r3, #1
   d845a:	217e      	movs	r1, #126	; 0x7e
  buf[0] = 0x3B;
   d845c:	f88d 8000 	strb.w	r8, [sp]
  EPD_command(SSD1675_SET_DIGITALBLOCK, buf, 1);
   d8460:	f000 fd9d 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0xFA;   // 250-1
   d8464:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   d8468:	f8ad 3000 	strh.w	r3, [sp]
  buf[2] = 0x00;
   d846c:	2600      	movs	r6, #0
  EPD_command(SSD1675_DRIVER_CONTROL, buf, 3);
   d846e:	466a      	mov	r2, sp
   d8470:	4620      	mov	r0, r4
   d8472:	2303      	movs	r3, #3
   d8474:	2101      	movs	r1, #1
  buf[0] = 0x03;
   d8476:	2503      	movs	r5, #3
  buf[2] = 0x00;
   d8478:	f88d 6002 	strb.w	r6, [sp, #2]
  EPD_command(SSD1675_DRIVER_CONTROL, buf, 3);
   d847c:	f000 fd8f 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_DATA_MODE, buf, 1);
   d8480:	466a      	mov	r2, sp
   d8482:	4620      	mov	r0, r4
   d8484:	2301      	movs	r3, #1
   d8486:	2111      	movs	r1, #17
  buf[0] = 0x03;
   d8488:	f88d 5000 	strb.w	r5, [sp]
  EPD_command(SSD1675_DATA_MODE, buf, 1);
   d848c:	f000 fd87 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x00;
   d8490:	f44f 6370 	mov.w	r3, #3840	; 0xf00
   d8494:	f8ad 3000 	strh.w	r3, [sp]
  EPD_command(SSD1675_SET_RAMXPOS, buf, 2);
   d8498:	466a      	mov	r2, sp
   d849a:	4620      	mov	r0, r4
   d849c:	2302      	movs	r3, #2
   d849e:	2144      	movs	r1, #68	; 0x44
   d84a0:	f000 fd7d 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x00;  // 0xF9-->(249+1)=250
   d84a4:	f44f 0379 	mov.w	r3, #16318464	; 0xf90000
   d84a8:	9300      	str	r3, [sp, #0]
  EPD_command(SSD1675_SET_RAMYPOS, buf, 4);
   d84aa:	466a      	mov	r2, sp
   d84ac:	4620      	mov	r0, r4
   d84ae:	2304      	movs	r3, #4
   d84b0:	2145      	movs	r1, #69	; 0x45
   d84b2:	f000 fd74 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_WRITE_BORDER, buf, 1);
   d84b6:	466a      	mov	r2, sp
   d84b8:	4620      	mov	r0, r4
   d84ba:	2301      	movs	r3, #1
   d84bc:	213c      	movs	r1, #60	; 0x3c
  buf[0] = 0x03;
   d84be:	f88d 5000 	strb.w	r5, [sp]
  EPD_command(SSD1675_WRITE_BORDER, buf, 1);
   d84c2:	f000 fd6c 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0x70;
   d84c6:	2370      	movs	r3, #112	; 0x70
   d84c8:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_WRITE_VCOM, buf, 1);
   d84cc:	466a      	mov	r2, sp
   d84ce:	4620      	mov	r0, r4
   d84d0:	2301      	movs	r3, #1
   d84d2:	212c      	movs	r1, #44	; 0x2c
   d84d4:	f000 fd63 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[70];
   d84d8:	2315      	movs	r3, #21
   d84da:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_GATE_VOLTAGE, buf, 1);
   d84de:	466a      	mov	r2, sp
   d84e0:	4629      	mov	r1, r5
   d84e2:	4620      	mov	r0, r4
   d84e4:	2301      	movs	r3, #1
   d84e6:	f000 fd5a 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[71];
   d84ea:	f64a 0341 	movw	r3, #43073	; 0xa841
   d84ee:	f8ad 3000 	strh.w	r3, [sp]
  buf[2] = LUT_DATA[73];
   d84f2:	2732      	movs	r7, #50	; 0x32
  EPD_command(SSD1675_SOURCE_VOLTAGE, buf, 3);
   d84f4:	462b      	mov	r3, r5
   d84f6:	466a      	mov	r2, sp
   d84f8:	4620      	mov	r0, r4
   d84fa:	2104      	movs	r1, #4
  buf[2] = LUT_DATA[73];
   d84fc:	f88d 7002 	strb.w	r7, [sp, #2]
  EPD_command(SSD1675_SOURCE_VOLTAGE, buf, 3);
   d8500:	f000 fd4d 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[74];
   d8504:	2330      	movs	r3, #48	; 0x30
   d8506:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_WRITE_DUMMY, buf, 1);
   d850a:	466a      	mov	r2, sp
   d850c:	4620      	mov	r0, r4
   d850e:	2301      	movs	r3, #1
   d8510:	213a      	movs	r1, #58	; 0x3a
   d8512:	f000 fd44 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = LUT_DATA[75];
   d8516:	230a      	movs	r3, #10
   d8518:	f88d 3000 	strb.w	r3, [sp]
  EPD_command(SSD1675_WRITE_GATELINE, buf, 1);
   d851c:	466a      	mov	r2, sp
   d851e:	4641      	mov	r1, r8
   d8520:	4620      	mov	r0, r4
   d8522:	2301      	movs	r3, #1
   d8524:	f000 fd3b 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_WRITE_LUT, LUT_DATA, 70);
   d8528:	4639      	mov	r1, r7
   d852a:	4620      	mov	r0, r4
   d852c:	4a0d      	ldr	r2, [pc, #52]	; (d8564 <_ZN16Adafruit_SSD16757powerUpEv+0x14c>)
   d852e:	2346      	movs	r3, #70	; 0x46
   d8530:	f000 fd35 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d8534:	466a      	mov	r2, sp
   d8536:	4620      	mov	r0, r4
   d8538:	2301      	movs	r3, #1
   d853a:	214e      	movs	r1, #78	; 0x4e
  buf[0] = 0;
   d853c:	f88d 6000 	strb.w	r6, [sp]
  EPD_command(SSD1675_SET_RAMXCOUNT, buf, 1);
   d8540:	f000 fd2d 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  buf[0] = 0xF9;
   d8544:	23f9      	movs	r3, #249	; 0xf9
   d8546:	f8ad 3000 	strh.w	r3, [sp]
  EPD_command(SSD1675_SET_RAMYCOUNT, buf, 2);
   d854a:	466a      	mov	r2, sp
   d854c:	2302      	movs	r3, #2
   d854e:	214f      	movs	r1, #79	; 0x4f
   d8550:	4620      	mov	r0, r4
   d8552:	f000 fd24 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
  busy_wait();
   d8556:	4620      	mov	r0, r4
   d8558:	f7ff ff2a 	bl	d83b0 <_ZN16Adafruit_SSD16759busy_waitEv>
}
   d855c:	b002      	add	sp, #8
   d855e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8562:	bf00      	nop
   d8564:	000df484 	.word	0x000df484

000d8568 <_ZN16Adafruit_SSD16759powerDownEv>:
{
   d8568:	b513      	push	{r0, r1, r4, lr}
  if (_reset_pin >= 0) {
   d856a:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
   d856e:	2b00      	cmp	r3, #0
{
   d8570:	4604      	mov	r4, r0
  if (_reset_pin >= 0) {
   d8572:	db0b      	blt.n	d858c <_ZN16Adafruit_SSD16759powerDownEv+0x24>
    buf[0] = 0x01;
   d8574:	2301      	movs	r3, #1
    EPD_command(SSD1675_DEEP_SLEEP, buf, 1);
   d8576:	aa01      	add	r2, sp, #4
   d8578:	2110      	movs	r1, #16
    buf[0] = 0x01;
   d857a:	f88d 3004 	strb.w	r3, [sp, #4]
    EPD_command(SSD1675_DEEP_SLEEP, buf, 1);
   d857e:	f000 fd0e 	bl	d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>
    delay(100);
   d8582:	2064      	movs	r0, #100	; 0x64
   d8584:	f002 fde6 	bl	db154 <delay>
}
   d8588:	b002      	add	sp, #8
   d858a:	bd10      	pop	{r4, pc}
    EPD_command(SSD1675_SW_RESET);
   d858c:	2201      	movs	r2, #1
   d858e:	2112      	movs	r1, #18
   d8590:	f000 fced 	bl	d8f6e <_ZN12Adafruit_EPD11EPD_commandEhb>
    busy_wait();
   d8594:	4620      	mov	r0, r4
   d8596:	f7ff ff0b 	bl	d83b0 <_ZN16Adafruit_SSD16759busy_waitEv>
}
   d859a:	e7f5      	b.n	d8588 <_ZN16Adafruit_SSD16759powerDownEv+0x20>

000d859c <_ZN16Adafruit_SSD16755beginEb>:
{
   d859c:	b510      	push	{r4, lr}
   d859e:	4604      	mov	r4, r0
  Adafruit_EPD::begin(reset);
   d85a0:	f000 fb74 	bl	d8c8c <_ZN12Adafruit_EPD5beginEb>
  setBlackBuffer(0, true);  // black defaults to inverted
   d85a4:	4620      	mov	r0, r4
   d85a6:	2201      	movs	r2, #1
   d85a8:	2100      	movs	r1, #0
   d85aa:	f000 faeb 	bl	d8b84 <_ZN12Adafruit_EPD14setBlackBufferEab>
  setColorBuffer(0, true);  // no secondary buffer, so we'll just reuse index 0
   d85ae:	4620      	mov	r0, r4
   d85b0:	2201      	movs	r2, #1
   d85b2:	2100      	movs	r1, #0
   d85b4:	f000 fafe 	bl	d8bb4 <_ZN12Adafruit_EPD14setColorBufferEab>
  powerDown();
   d85b8:	6823      	ldr	r3, [r4, #0]
   d85ba:	4620      	mov	r0, r4
   d85bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
   d85be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  powerDown();
   d85c2:	4718      	bx	r3

000d85c4 <_ZN16Adafruit_MCPSRAMC1Ea>:
*/
/**************************************************************************/
Adafruit_MCPSRAM::Adafruit_MCPSRAM(int8_t cs)
{
	_cs = cs;
	hwSPI = true;
   d85c4:	2201      	movs	r2, #1
	_cs = cs;
   d85c6:	7041      	strb	r1, [r0, #1]
	hwSPI = true;
   d85c8:	7002      	strb	r2, [r0, #0]
}
   d85ca:	4770      	bx	lr

000d85cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
    byte transfer(byte data) {
   d85cc:	b507      	push	{r0, r1, r2, lr}
   d85ce:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   d85d0:	f7fd fe4c 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d85d4:	9901      	ldr	r1, [sp, #4]
    }
   d85d6:	b003      	add	sp, #12
   d85d8:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   d85dc:	f001 b9a0 	b.w	d9920 <_ZN8SPIClass8transferEh>

000d85e0 <_ZN16Adafruit_MCPSRAM6csHighEv>:
/*!
    @brief set chip select pin high
*/
/**************************************************************************/
void Adafruit_MCPSRAM::csHigh()
{
   d85e0:	b510      	push	{r4, lr}
   d85e2:	4604      	mov	r4, r0
        instance().endTransaction();
   d85e4:	f7fd fe42 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d85e8:	f001 f913 	bl	d9812 <_ZN8SPIClass14endTransactionEv>
      SPI.endTransaction();
#endif
#ifdef HAVE_PORTREG
	*csport |= cspinmask;
#else
	digitalWrite(_cs, HIGH);
   d85ec:	f994 0001 	ldrsb.w	r0, [r4, #1]
   d85f0:	2101      	movs	r1, #1
#endif
}
   d85f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(_cs, HIGH);
   d85f6:	b280      	uxth	r0, r0
   d85f8:	f003 bd87 	b.w	dc10a <digitalWrite>

000d85fc <_ZN16Adafruit_MCPSRAM5csLowEv>:
/*!
    @brief set chip select pin low
*/
/**************************************************************************/
void Adafruit_MCPSRAM::csLow()
{
   d85fc:	b530      	push	{r4, r5, lr}
   d85fe:	b085      	sub	sp, #20
      dataMode_{dataMode}
   d8600:	4b0b      	ldr	r3, [pc, #44]	; (d8630 <_ZN16Adafruit_MCPSRAM5csLowEv+0x34>)
   d8602:	9300      	str	r3, [sp, #0]
   d8604:	4b0b      	ldr	r3, [pc, #44]	; (d8634 <_ZN16Adafruit_MCPSRAM5csLowEv+0x38>)
   d8606:	9302      	str	r3, [sp, #8]
   d8608:	4604      	mov	r4, r0
   d860a:	2301      	movs	r3, #1
   d860c:	2500      	movs	r5, #0
   d860e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d8612:	f88d 5004 	strb.w	r5, [sp, #4]
        return instance().beginTransaction(settings);
   d8616:	f7fd fe29 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d861a:	4669      	mov	r1, sp
   d861c:	f001 f912 	bl	d9844 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
      SPI.beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0));
#endif	
#ifdef HAVE_PORTREG
	*csport &= ~cspinmask;
#else
	digitalWrite(_cs, LOW);
   d8620:	f994 0001 	ldrsb.w	r0, [r4, #1]
   d8624:	4629      	mov	r1, r5
   d8626:	b280      	uxth	r0, r0
   d8628:	f003 fd6f 	bl	dc10a <digitalWrite>
#endif
}
   d862c:	b005      	add	sp, #20
   d862e:	bd30      	pop	{r4, r5, pc}
   d8630:	000dee48 	.word	0x000dee48
   d8634:	003d0900 	.word	0x003d0900

000d8638 <_ZN16Adafruit_MCPSRAM5beginEv>:
{
   d8638:	b570      	push	{r4, r5, r6, lr}
   d863a:	4604      	mov	r4, r0
	 pinMode(_cs, OUTPUT);
   d863c:	f990 0001 	ldrsb.w	r0, [r0, #1]
   d8640:	2101      	movs	r1, #1
   d8642:	b280      	uxth	r0, r0
   d8644:	f003 fd50 	bl	dc0e8 <pinMode>
	csHigh();
   d8648:	4620      	mov	r0, r4
   d864a:	f7ff ffc9 	bl	d85e0 <_ZN16Adafruit_MCPSRAM6csHighEv>
    if (!hwSPI){
   d864e:	7823      	ldrb	r3, [r4, #0]
   d8650:	b19b      	cbz	r3, d867a <_ZN16Adafruit_MCPSRAM5beginEv+0x42>
        instance().begin();
   d8652:	f7fd fe0b 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8656:	f001 f8cb 	bl	d97f0 <_ZN8SPIClass5beginEv>
csLow();
   d865a:	4620      	mov	r0, r4
   d865c:	f7ff ffce 	bl	d85fc <_ZN16Adafruit_MCPSRAM5csLowEv>
   d8660:	2503      	movs	r5, #3
	  if(hwSPI) {
   d8662:	7823      	ldrb	r3, [r4, #0]
   d8664:	b1cb      	cbz	r3, d869a <_ZN16Adafruit_MCPSRAM5beginEv+0x62>
		(void)SPI.transfer(0xFF);
   d8666:	20ff      	movs	r0, #255	; 0xff
   d8668:	f7ff ffb0 	bl	d85cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
for(int i=0; i<3; i++){
   d866c:	3d01      	subs	r5, #1
   d866e:	d1f8      	bne.n	d8662 <_ZN16Adafruit_MCPSRAM5beginEv+0x2a>
csHigh();
   d8670:	4620      	mov	r0, r4
}
   d8672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
csHigh();
   d8676:	f7ff bfb3 	b.w	d85e0 <_ZN16Adafruit_MCPSRAM6csHighEv>
      pinMode(_mosi, OUTPUT);
   d867a:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d867e:	2101      	movs	r1, #1
   d8680:	b280      	uxth	r0, r0
   d8682:	f003 fd31 	bl	dc0e8 <pinMode>
      pinMode(_sck, OUTPUT);
   d8686:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d868a:	2101      	movs	r1, #1
   d868c:	b280      	uxth	r0, r0
   d868e:	f003 fd2b 	bl	dc0e8 <pinMode>
    if (hwSPI){
   d8692:	7823      	ldrb	r3, [r4, #0]
   d8694:	2b00      	cmp	r3, #0
   d8696:	d0e0      	beq.n	d865a <_ZN16Adafruit_MCPSRAM5beginEv+0x22>
   d8698:	e7db      	b.n	d8652 <_ZN16Adafruit_MCPSRAM5beginEv+0x1a>
   d869a:	2608      	movs	r6, #8
		  digitalWrite(_sck, LOW);
   d869c:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d86a0:	2100      	movs	r1, #0
   d86a2:	b280      	uxth	r0, r0
   d86a4:	f003 fd31 	bl	dc10a <digitalWrite>
		  if(0xFF & bit) digitalWrite(_mosi, HIGH);
   d86a8:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d86ac:	2101      	movs	r1, #1
   d86ae:	b280      	uxth	r0, r0
   d86b0:	f003 fd2b 	bl	dc10a <digitalWrite>
		  digitalWrite(_sck, HIGH);
   d86b4:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d86b8:	2101      	movs	r1, #1
   d86ba:	b280      	uxth	r0, r0
   d86bc:	f003 fd25 	bl	dc10a <digitalWrite>
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d86c0:	3e01      	subs	r6, #1
   d86c2:	d1eb      	bne.n	d869c <_ZN16Adafruit_MCPSRAM5beginEv+0x64>
   d86c4:	e7d2      	b.n	d866c <_ZN16Adafruit_MCPSRAM5beginEv+0x34>

000d86c6 <_ZN16Adafruit_MCPSRAM5writeEtPhth>:
{
   d86c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d86ca:	b085      	sub	sp, #20
   d86cc:	460d      	mov	r5, r1
   d86ce:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
   d86d2:	9201      	str	r2, [sp, #4]
   d86d4:	461e      	mov	r6, r3
   d86d6:	4604      	mov	r4, r0
csLow();
   d86d8:	f7ff ff90 	bl	d85fc <_ZN16Adafruit_MCPSRAM5csLowEv>
cmdbuf[1] = (addr >> 8);
   d86dc:	122b      	asrs	r3, r5, #8
cmdbuf[0] = reg;
   d86de:	f88d b00c 	strb.w	fp, [sp, #12]
cmdbuf[1] = (addr >> 8);
   d86e2:	f88d 300d 	strb.w	r3, [sp, #13]
cmdbuf[2] = addr & 0xFF;
   d86e6:	f88d 500e 	strb.w	r5, [sp, #14]
for(int i=0; i<3; i++){
   d86ea:	f10d 0a0c 	add.w	sl, sp, #12
   d86ee:	2700      	movs	r7, #0
  if(hwSPI) {
   d86f0:	7823      	ldrb	r3, [r4, #0]
  uint8_t d = cmdbuf[i];
   d86f2:	f81a 9b01 	ldrb.w	r9, [sl], #1
  if(hwSPI) {
   d86f6:	b19b      	cbz	r3, d8720 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x5a>
    (void)SPI.transfer(d);
   d86f8:	4648      	mov	r0, r9
   d86fa:	f7ff ff67 	bl	d85cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  if(reg != MCPSRAM_WRITE) break;
   d86fe:	f1bb 0f02 	cmp.w	fp, #2
   d8702:	d102      	bne.n	d870a <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x44>
for(int i=0; i<3; i++){
   d8704:	3701      	adds	r7, #1
   d8706:	2f03      	cmp	r7, #3
   d8708:	d1f2      	bne.n	d86f0 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x2a>
   d870a:	2500      	movs	r5, #0
for(int i=0; i<num; i++){
   d870c:	42ae      	cmp	r6, r5
   d870e:	dd25      	ble.n	d875c <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x96>
  if(hwSPI) {
   d8710:	7823      	ldrb	r3, [r4, #0]
   d8712:	b11b      	cbz	r3, d871c <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x56>
    (void)SPI.transfer(d);
   d8714:	9b01      	ldr	r3, [sp, #4]
   d8716:	5d58      	ldrb	r0, [r3, r5]
   d8718:	f7ff ff58 	bl	d85cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
for(int i=0; i<num; i++){
   d871c:	3501      	adds	r5, #1
   d871e:	e7f5      	b.n	d870c <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x46>
   d8720:	f04f 0808 	mov.w	r8, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8724:	2580      	movs	r5, #128	; 0x80
      digitalWrite(_sck, LOW);
   d8726:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d872a:	2100      	movs	r1, #0
   d872c:	b280      	uxth	r0, r0
   d872e:	f003 fcec 	bl	dc10a <digitalWrite>
      if(d & bit) digitalWrite(_mosi, HIGH);
   d8732:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d8736:	ea19 0105 	ands.w	r1, r9, r5
   d873a:	bf18      	it	ne
   d873c:	2101      	movne	r1, #1
      else        digitalWrite(_mosi, LOW);
   d873e:	b280      	uxth	r0, r0
   d8740:	f003 fce3 	bl	dc10a <digitalWrite>
      digitalWrite(_sck, HIGH);
   d8744:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d8748:	2101      	movs	r1, #1
   d874a:	b280      	uxth	r0, r0
   d874c:	f003 fcdd 	bl	dc10a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8750:	f1b8 0801 	subs.w	r8, r8, #1
   d8754:	ea4f 0555 	mov.w	r5, r5, lsr #1
   d8758:	d1e5      	bne.n	d8726 <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x60>
   d875a:	e7d0      	b.n	d86fe <_ZN16Adafruit_MCPSRAM5writeEtPhth+0x38>
csHigh();
   d875c:	4620      	mov	r0, r4
}
   d875e:	b005      	add	sp, #20
   d8760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
csHigh();
   d8764:	f7ff bf3c 	b.w	d85e0 <_ZN16Adafruit_MCPSRAM6csHighEv>

000d8768 <_ZN16Adafruit_MCPSRAM6write8Ethh>:
{
   d8768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d876a:	f88d 200f 	strb.w	r2, [sp, #15]
	this->write(addr, &val, 1, reg);
   d876e:	9300      	str	r3, [sp, #0]
   d8770:	f10d 020f 	add.w	r2, sp, #15
   d8774:	2301      	movs	r3, #1
   d8776:	f7ff ffa6 	bl	d86c6 <_ZN16Adafruit_MCPSRAM5writeEtPhth>
}
   d877a:	b005      	add	sp, #20
   d877c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8780 <_ZN16Adafruit_MCPSRAM4readEtPhth>:
{
   d8780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8784:	b085      	sub	sp, #20
   d8786:	460e      	mov	r6, r1
   d8788:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
   d878c:	9301      	str	r3, [sp, #4]
   d878e:	4604      	mov	r4, r0
   d8790:	4615      	mov	r5, r2
csLow();
   d8792:	f7ff ff33 	bl	d85fc <_ZN16Adafruit_MCPSRAM5csLowEv>
cmdbuf[1] = (addr >> 8);
   d8796:	1233      	asrs	r3, r6, #8
cmdbuf[0] = reg;
   d8798:	f88d b00c 	strb.w	fp, [sp, #12]
cmdbuf[1] = (addr >> 8);
   d879c:	f88d 300d 	strb.w	r3, [sp, #13]
cmdbuf[2] = addr & 0xFF;
   d87a0:	f88d 600e 	strb.w	r6, [sp, #14]
for(int i=0; i<3; i++){
   d87a4:	f10d 0a0c 	add.w	sl, sp, #12
   d87a8:	2700      	movs	r7, #0
  if(hwSPI) {
   d87aa:	7823      	ldrb	r3, [r4, #0]
  uint8_t d = cmdbuf[i];
   d87ac:	f81a 9b01 	ldrb.w	r9, [sl], #1
  if(hwSPI) {
   d87b0:	b1ab      	cbz	r3, d87de <_ZN16Adafruit_MCPSRAM4readEtPhth+0x5e>
    (void)SPI.transfer(d);
   d87b2:	4648      	mov	r0, r9
   d87b4:	f7ff ff0a 	bl	d85cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  if(reg != MCPSRAM_READ) break;
   d87b8:	f1bb 0f03 	cmp.w	fp, #3
   d87bc:	d102      	bne.n	d87c4 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x44>
for(int i=0; i<3; i++){
   d87be:	3701      	adds	r7, #1
   d87c0:	2f03      	cmp	r7, #3
   d87c2:	d1f2      	bne.n	d87aa <_ZN16Adafruit_MCPSRAM4readEtPhth+0x2a>
   d87c4:	9b01      	ldr	r3, [sp, #4]
   d87c6:	442b      	add	r3, r5
   d87c8:	4698      	mov	r8, r3
for(int i=0; i<num; i++){
   d87ca:	45a8      	cmp	r8, r5
   d87cc:	d03f      	beq.n	d884e <_ZN16Adafruit_MCPSRAM4readEtPhth+0xce>
  if(hwSPI) {
   d87ce:	7823      	ldrb	r3, [r4, #0]
   d87d0:	b31b      	cbz	r3, d881a <_ZN16Adafruit_MCPSRAM4readEtPhth+0x9a>
    buf[i] = SPI.transfer(0x00);
   d87d2:	2000      	movs	r0, #0
   d87d4:	f7ff fefa 	bl	d85cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d87d8:	7028      	strb	r0, [r5, #0]
for(int i=0; i<num; i++){
   d87da:	3501      	adds	r5, #1
   d87dc:	e7f5      	b.n	d87ca <_ZN16Adafruit_MCPSRAM4readEtPhth+0x4a>
   d87de:	f04f 0808 	mov.w	r8, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d87e2:	2680      	movs	r6, #128	; 0x80
      digitalWrite(_sck, LOW);
   d87e4:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d87e8:	2100      	movs	r1, #0
   d87ea:	b280      	uxth	r0, r0
   d87ec:	f003 fc8d 	bl	dc10a <digitalWrite>
      if(d & bit) digitalWrite(_mosi, HIGH);
   d87f0:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d87f4:	ea19 0106 	ands.w	r1, r9, r6
   d87f8:	bf18      	it	ne
   d87fa:	2101      	movne	r1, #1
      else        digitalWrite(_mosi, LOW);
   d87fc:	b280      	uxth	r0, r0
   d87fe:	f003 fc84 	bl	dc10a <digitalWrite>
      digitalWrite(_sck, HIGH);
   d8802:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d8806:	2101      	movs	r1, #1
   d8808:	b280      	uxth	r0, r0
   d880a:	f003 fc7e 	bl	dc10a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d880e:	f1b8 0801 	subs.w	r8, r8, #1
   d8812:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d8816:	d1e5      	bne.n	d87e4 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x64>
   d8818:	e7ce      	b.n	d87b8 <_ZN16Adafruit_MCPSRAM4readEtPhth+0x38>
   d881a:	2708      	movs	r7, #8
      digitalWrite(_sck, LOW);
   d881c:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d8820:	2100      	movs	r1, #0
   d8822:	b280      	uxth	r0, r0
   d8824:	f003 fc71 	bl	dc10a <digitalWrite>
      digitalWrite(_sck, HIGH);
   d8828:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d882c:	2101      	movs	r1, #1
   d882e:	b280      	uxth	r0, r0
   d8830:	f003 fc6b 	bl	dc10a <digitalWrite>
	  buf[i] = (buf[i] << 1) | digitalRead(_miso);
   d8834:	f994 0003 	ldrsb.w	r0, [r4, #3]
   d8838:	782e      	ldrb	r6, [r5, #0]
   d883a:	b280      	uxth	r0, r0
   d883c:	f003 fc7e 	bl	dc13c <digitalRead>
   d8840:	0076      	lsls	r6, r6, #1
   d8842:	b276      	sxtb	r6, r6
   d8844:	4330      	orrs	r0, r6
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8846:	3f01      	subs	r7, #1
	  buf[i] = (buf[i] << 1) | digitalRead(_miso);
   d8848:	7028      	strb	r0, [r5, #0]
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d884a:	d1e7      	bne.n	d881c <_ZN16Adafruit_MCPSRAM4readEtPhth+0x9c>
   d884c:	e7c5      	b.n	d87da <_ZN16Adafruit_MCPSRAM4readEtPhth+0x5a>
csHigh();
   d884e:	4620      	mov	r0, r4
}
   d8850:	b005      	add	sp, #20
   d8852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
csHigh();
   d8856:	f7ff bec3 	b.w	d85e0 <_ZN16Adafruit_MCPSRAM6csHighEv>

000d885a <_ZN16Adafruit_MCPSRAM5read8Eth>:
{
   d885a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	this->read(addr, &c, 1, reg);
   d885c:	2301      	movs	r3, #1
   d885e:	9200      	str	r2, [sp, #0]
   d8860:	f10d 020f 	add.w	r2, sp, #15
   d8864:	f7ff ff8c 	bl	d8780 <_ZN16Adafruit_MCPSRAM4readEtPhth>
}
   d8868:	f89d 000f 	ldrb.w	r0, [sp, #15]
   d886c:	b005      	add	sp, #20
   d886e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8872 <_ZN16Adafruit_MCPSRAM5eraseEtth>:
{
   d8872:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8876:	460e      	mov	r6, r1
   d8878:	461d      	mov	r5, r3
   d887a:	4604      	mov	r4, r0
   d887c:	4690      	mov	r8, r2
	csLow();
   d887e:	f7ff febd 	bl	d85fc <_ZN16Adafruit_MCPSRAM5csLowEv>
	cmdbuf[0] = MCPSRAM_WRITE;
   d8882:	2302      	movs	r3, #2
   d8884:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdbuf[1] = (addr >> 8);
   d8888:	1233      	asrs	r3, r6, #8
   d888a:	f88d 3005 	strb.w	r3, [sp, #5]
	cmdbuf[2] = addr & 0xFF;
   d888e:	f88d 6006 	strb.w	r6, [sp, #6]
	for(int i=0; i<3; i++){
   d8892:	f10d 0b04 	add.w	fp, sp, #4
   d8896:	2700      	movs	r7, #0
		if(hwSPI) {
   d8898:	7823      	ldrb	r3, [r4, #0]
		uint8_t d = cmdbuf[i];
   d889a:	f81b ab01 	ldrb.w	sl, [fp], #1
		if(hwSPI) {
   d889e:	b17b      	cbz	r3, d88c0 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x4e>
			(void)SPI.transfer(d);
   d88a0:	4650      	mov	r0, sl
   d88a2:	f7ff fe93 	bl	d85cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for(int i=0; i<3; i++){
   d88a6:	3701      	adds	r7, #1
   d88a8:	2f03      	cmp	r7, #3
   d88aa:	d1f5      	bne.n	d8898 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x26>
   d88ac:	2700      	movs	r7, #0
	for(uint16_t i=0; i<length; i++){
   d88ae:	45b8      	cmp	r8, r7
   d88b0:	d042      	beq.n	d8938 <_ZN16Adafruit_MCPSRAM5eraseEtth+0xc6>
		if(hwSPI) {
   d88b2:	7823      	ldrb	r3, [r4, #0]
   d88b4:	b313      	cbz	r3, d88fc <_ZN16Adafruit_MCPSRAM5eraseEtth+0x8a>
			(void)SPI.transfer(d);
   d88b6:	4628      	mov	r0, r5
   d88b8:	f7ff fe88 	bl	d85cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for(uint16_t i=0; i<length; i++){
   d88bc:	3701      	adds	r7, #1
   d88be:	e7f6      	b.n	d88ae <_ZN16Adafruit_MCPSRAM5eraseEtth+0x3c>
   d88c0:	f04f 0908 	mov.w	r9, #8
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d88c4:	2680      	movs	r6, #128	; 0x80
				digitalWrite(_sck, LOW);
   d88c6:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d88ca:	2100      	movs	r1, #0
   d88cc:	b280      	uxth	r0, r0
   d88ce:	f003 fc1c 	bl	dc10a <digitalWrite>
				if(d & bit) digitalWrite(_mosi, HIGH);
   d88d2:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d88d6:	ea1a 0106 	ands.w	r1, sl, r6
   d88da:	bf18      	it	ne
   d88dc:	2101      	movne	r1, #1
				else        digitalWrite(_mosi, LOW);
   d88de:	b280      	uxth	r0, r0
   d88e0:	f003 fc13 	bl	dc10a <digitalWrite>
				digitalWrite(_sck, HIGH);
   d88e4:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d88e8:	2101      	movs	r1, #1
   d88ea:	b280      	uxth	r0, r0
   d88ec:	f003 fc0d 	bl	dc10a <digitalWrite>
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d88f0:	f1b9 0901 	subs.w	r9, r9, #1
   d88f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d88f8:	d1e5      	bne.n	d88c6 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x54>
   d88fa:	e7d4      	b.n	d88a6 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x34>
   d88fc:	f04f 0908 	mov.w	r9, #8
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8900:	2680      	movs	r6, #128	; 0x80
				digitalWrite(_sck, LOW);
   d8902:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d8906:	2100      	movs	r1, #0
   d8908:	b280      	uxth	r0, r0
   d890a:	f003 fbfe 	bl	dc10a <digitalWrite>
				if(d & bit) digitalWrite(_mosi, HIGH);
   d890e:	f994 0002 	ldrsb.w	r0, [r4, #2]
   d8912:	ea15 0106 	ands.w	r1, r5, r6
   d8916:	bf18      	it	ne
   d8918:	2101      	movne	r1, #1
				else        digitalWrite(_mosi, LOW);
   d891a:	b280      	uxth	r0, r0
   d891c:	f003 fbf5 	bl	dc10a <digitalWrite>
				digitalWrite(_sck, HIGH);
   d8920:	f994 0004 	ldrsb.w	r0, [r4, #4]
   d8924:	2101      	movs	r1, #1
   d8926:	b280      	uxth	r0, r0
   d8928:	f003 fbef 	bl	dc10a <digitalWrite>
			for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d892c:	f1b9 0901 	subs.w	r9, r9, #1
   d8930:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d8934:	d1e5      	bne.n	d8902 <_ZN16Adafruit_MCPSRAM5eraseEtth+0x90>
   d8936:	e7c1      	b.n	d88bc <_ZN16Adafruit_MCPSRAM5eraseEtth+0x4a>
	csHigh();
   d8938:	4620      	mov	r0, r4
}
   d893a:	b003      	add	sp, #12
   d893c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	csHigh();
   d8940:	f7ff be4e 	b.w	d85e0 <_ZN16Adafruit_MCPSRAM6csHighEv>

000d8944 <_ZN12Adafruit_EPD9drawPixelEsst>:
	@param x the x axis position
	@param y the y axis position
	@param color the color of the pixel
*/
/**************************************************************************/
void Adafruit_EPD::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d8944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d8948:	1e0f      	subs	r7, r1, #0
void Adafruit_EPD::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d894a:	4605      	mov	r5, r0
   d894c:	4614      	mov	r4, r2
   d894e:	4699      	mov	r9, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d8950:	f2c0 80a6 	blt.w	d8aa0 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
   d8954:	f7fd fc80 	bl	d6258 <_ZNK12Adafruit_GFX5widthEv>
   d8958:	42b8      	cmp	r0, r7
   d895a:	f340 80a1 	ble.w	d8aa0 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
   d895e:	2c00      	cmp	r4, #0
   d8960:	f2c0 809e 	blt.w	d8aa0 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
   d8964:	4628      	mov	r0, r5
   d8966:	f7fd fc7a 	bl	d625e <_ZNK12Adafruit_GFX6heightEv>
   d896a:	42a0      	cmp	r0, r4
   d896c:	f340 8098 	ble.w	d8aa0 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
    return;

  uint8_t *pBuf;

  // deal with non-8-bit heights
  uint16_t _HEIGHT = HEIGHT;
   d8970:	f8b5 800a 	ldrh.w	r8, [r5, #10]
  if (_HEIGHT % 8 != 0) {
   d8974:	f018 0f07 	tst.w	r8, #7
    _HEIGHT += 8 - (_HEIGHT % 8);
   d8978:	bf1c      	itt	ne
   d897a:	f028 0807 	bicne.w	r8, r8, #7
   d897e:	f108 0808 	addne.w	r8, r8, #8
  }

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d8982:	4628      	mov	r0, r5
    _HEIGHT += 8 - (_HEIGHT % 8);
   d8984:	bf18      	it	ne
   d8986:	fa1f f888 	uxthne.w	r8, r8
  switch (getRotation()) {
   d898a:	f7fd fc63 	bl	d6254 <_ZNK12Adafruit_GFX11getRotationEv>
   d898e:	2802      	cmp	r0, #2
   d8990:	d031      	beq.n	d89f6 <_ZN12Adafruit_EPD9drawPixelEsst+0xb2>
   d8992:	2803      	cmp	r0, #3
   d8994:	d037      	beq.n	d8a06 <_ZN12Adafruit_EPD9drawPixelEsst+0xc2>
   d8996:	2801      	cmp	r0, #1
   d8998:	d104      	bne.n	d89a4 <_ZN12Adafruit_EPD9drawPixelEsst+0x60>
  case 1:
    EPD_swap(x, y);
    x = WIDTH - x - 1;
   d899a:	892a      	ldrh	r2, [r5, #8]
   d899c:	43e4      	mvns	r4, r4
   d899e:	4422      	add	r2, r4
    break;
   d89a0:	463c      	mov	r4, r7
    x = WIDTH - x - 1;
   d89a2:	b217      	sxth	r7, r2
  case 3:
    EPD_swap(x, y);
    y = _HEIGHT - y - 1;
    break;
  }
  uint16_t addr = ( (uint32_t)(WIDTH - 1 - x) * (uint32_t)_HEIGHT + y)/8;
   d89a4:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
  uint8_t c;
  if (use_sram) {
   d89a8:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
  uint16_t addr = ( (uint32_t)(WIDTH - 1 - x) * (uint32_t)_HEIGHT + y)/8;
   d89ac:	3e01      	subs	r6, #1
   d89ae:	1bf6      	subs	r6, r6, r7
   d89b0:	fb08 4606 	mla	r6, r8, r6, r4
   d89b4:	f1a9 0703 	sub.w	r7, r9, #3
   d89b8:	08f0      	lsrs	r0, r6, #3
   d89ba:	b2bf      	uxth	r7, r7
   d89bc:	f3c6 06cf 	ubfx	r6, r6, #3, #16
  if (use_sram) {
   d89c0:	b333      	cbz	r3, d8a10 <_ZN12Adafruit_EPD9drawPixelEsst+0xcc>
    if ((color == EPD_RED) || (color == EPD_GRAY)) {
   d89c2:	2f01      	cmp	r7, #1
      addr = colorbuffer_addr + addr;
   d89c4:	bf94      	ite	ls
   d89c6:	f8b5 1048 	ldrhls.w	r1, [r5, #72]	; 0x48
    } else {
      addr = blackbuffer_addr + addr;
   d89ca:	f8b5 104a 	ldrhhi.w	r1, [r5, #74]	; 0x4a
   d89ce:	440e      	add	r6, r1
   d89d0:	b2b6      	uxth	r6, r6
    }
    c = sram.read8(addr);
   d89d2:	2203      	movs	r2, #3
   d89d4:	4631      	mov	r1, r6
   d89d6:	f105 0027 	add.w	r0, r5, #39	; 0x27
   d89da:	f7ff ff3e 	bl	d885a <_ZN16Adafruit_MCPSRAM5read8Eth>
    } else {
      pBuf = black_buffer + addr;
    }
  }

  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d89de:	2f01      	cmp	r7, #1
    c = sram.read8(addr);
   d89e0:	f88d 0007 	strb.w	r0, [sp, #7]
    pBuf = &c;
   d89e4:	f10d 0007 	add.w	r0, sp, #7
  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d89e8:	d917      	bls.n	d8a1a <_ZN12Adafruit_EPD9drawPixelEsst+0xd6>
   d89ea:	f1b9 0f00 	cmp.w	r9, #0
   d89ee:	d145      	bne.n	d8a7c <_ZN12Adafruit_EPD9drawPixelEsst+0x138>
      ((color == EPD_BLACK) && blackInverted)) {
   d89f0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d89f4:	e013      	b.n	d8a1e <_ZN12Adafruit_EPD9drawPixelEsst+0xda>
    x = WIDTH - x - 1;
   d89f6:	8929      	ldrh	r1, [r5, #8]
    y = _HEIGHT - y - 1;
   d89f8:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d89fa:	3901      	subs	r1, #1
   d89fc:	1bcf      	subs	r7, r1, r7
    y = _HEIGHT - y - 1;
   d89fe:	4444      	add	r4, r8
    x = WIDTH - x - 1;
   d8a00:	b23f      	sxth	r7, r7
    y = _HEIGHT - y - 1;
   d8a02:	b224      	sxth	r4, r4
    break;
   d8a04:	e7ce      	b.n	d89a4 <_ZN12Adafruit_EPD9drawPixelEsst+0x60>
    y = _HEIGHT - y - 1;
   d8a06:	43f9      	mvns	r1, r7
   d8a08:	4441      	add	r1, r8
    break;
   d8a0a:	4627      	mov	r7, r4
    y = _HEIGHT - y - 1;
   d8a0c:	b20c      	sxth	r4, r1
    break;
   d8a0e:	e7c9      	b.n	d89a4 <_ZN12Adafruit_EPD9drawPixelEsst+0x60>
    if((color == EPD_RED) || (color == EPD_GRAY)) {
   d8a10:	2f01      	cmp	r7, #1
   d8a12:	b280      	uxth	r0, r0
   d8a14:	d814      	bhi.n	d8a40 <_ZN12Adafruit_EPD9drawPixelEsst+0xfc>
      pBuf = color_buffer + addr;
   d8a16:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d8a18:	4418      	add	r0, r3
  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d8a1a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
      ((color == EPD_BLACK) && blackInverted)) {
   d8a1e:	b193      	cbz	r3, d8a46 <_ZN12Adafruit_EPD9drawPixelEsst+0x102>
    *pBuf &= ~(1 << (7 - y%8));
   d8a20:	4263      	negs	r3, r4
   d8a22:	f003 0307 	and.w	r3, r3, #7
   d8a26:	f004 0407 	and.w	r4, r4, #7
   d8a2a:	bf58      	it	pl
   d8a2c:	425c      	negpl	r4, r3
   d8a2e:	f1c4 0407 	rsb	r4, r4, #7
   d8a32:	2301      	movs	r3, #1
   d8a34:	40a3      	lsls	r3, r4
   d8a36:	7804      	ldrb	r4, [r0, #0]
   d8a38:	ea24 0403 	bic.w	r4, r4, r3
  } else if (((color == EPD_RED || color == EPD_GRAY) && !colorInverted) ||
	     ((color == EPD_BLACK) && !blackInverted)) {
    *pBuf |= (1 << (7 - y%8));
  } else if (color == EPD_INVERSE) {
    *pBuf ^= (1 << (7 - y%8));
   d8a3c:	7004      	strb	r4, [r0, #0]
   d8a3e:	e010      	b.n	d8a62 <_ZN12Adafruit_EPD9drawPixelEsst+0x11e>
      pBuf = black_buffer + addr;
   d8a40:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d8a42:	4418      	add	r0, r3
  if (((color == EPD_RED || color == EPD_GRAY) && colorInverted) ||
   d8a44:	e7d1      	b.n	d89ea <_ZN12Adafruit_EPD9drawPixelEsst+0xa6>
    *pBuf |= (1 << (7 - y%8));
   d8a46:	4263      	negs	r3, r4
   d8a48:	f003 0307 	and.w	r3, r3, #7
   d8a4c:	f004 0407 	and.w	r4, r4, #7
   d8a50:	bf58      	it	pl
   d8a52:	425c      	negpl	r4, r3
   d8a54:	7802      	ldrb	r2, [r0, #0]
   d8a56:	f1c4 0407 	rsb	r4, r4, #7
   d8a5a:	2301      	movs	r3, #1
   d8a5c:	40a3      	lsls	r3, r4
   d8a5e:	4313      	orrs	r3, r2
   d8a60:	7003      	strb	r3, [r0, #0]
  }

  if (use_sram) {
   d8a62:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
   d8a66:	b1db      	cbz	r3, d8aa0 <_ZN12Adafruit_EPD9drawPixelEsst+0x15c>
    sram.write8(addr, *pBuf);
   d8a68:	7802      	ldrb	r2, [r0, #0]
   d8a6a:	2302      	movs	r3, #2
   d8a6c:	4631      	mov	r1, r6
   d8a6e:	f105 0027 	add.w	r0, r5, #39	; 0x27
  }
}
   d8a72:	b003      	add	sp, #12
   d8a74:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    sram.write8(addr, *pBuf);
   d8a78:	f7ff be76 	b.w	d8768 <_ZN16Adafruit_MCPSRAM6write8Ethh>
  } else if (color == EPD_INVERSE) {
   d8a7c:	f1b9 0f02 	cmp.w	r9, #2
   d8a80:	d1ef      	bne.n	d8a62 <_ZN12Adafruit_EPD9drawPixelEsst+0x11e>
    *pBuf ^= (1 << (7 - y%8));
   d8a82:	4263      	negs	r3, r4
   d8a84:	f003 0307 	and.w	r3, r3, #7
   d8a88:	f004 0407 	and.w	r4, r4, #7
   d8a8c:	bf58      	it	pl
   d8a8e:	425c      	negpl	r4, r3
   d8a90:	f1c4 0407 	rsb	r4, r4, #7
   d8a94:	2301      	movs	r3, #1
   d8a96:	fa03 f404 	lsl.w	r4, r3, r4
   d8a9a:	7803      	ldrb	r3, [r0, #0]
   d8a9c:	405c      	eors	r4, r3
   d8a9e:	e7cd      	b.n	d8a3c <_ZN12Adafruit_EPD9drawPixelEsst+0xf8>
}
   d8aa0:	b003      	add	sp, #12
   d8aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8aa8 <_ZN12Adafruit_EPDC1Eiiaaaaa>:
Adafruit_EPD::Adafruit_EPD(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY) : Adafruit_GFX(width, height),
   d8aa8:	b570      	push	{r4, r5, r6, lr}
sram(SRCS) {
   d8aaa:	b212      	sxth	r2, r2
Adafruit_EPD::Adafruit_EPD(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY) : Adafruit_GFX(width, height),
   d8aac:	4604      	mov	r4, r0
sram(SRCS) {
   d8aae:	b209      	sxth	r1, r1
Adafruit_EPD::Adafruit_EPD(int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t SRCS, int8_t BUSY) : Adafruit_GFX(width, height),
   d8ab0:	f99d 5018 	ldrsb.w	r5, [sp, #24]
   d8ab4:	461e      	mov	r6, r3
sram(SRCS) {
   d8ab6:	f7fd f981 	bl	d5dbc <_ZN12Adafruit_GFXC1Ess>
   d8aba:	4620      	mov	r0, r4
   d8abc:	4b13      	ldr	r3, [pc, #76]	; (d8b0c <_ZN12Adafruit_EPDC1Eiiaaaaa+0x64>)
   d8abe:	f840 3b27 	str.w	r3, [r0], #39
   d8ac2:	4629      	mov	r1, r5
   d8ac4:	f7ff fd7e 	bl	d85c4 <_ZN16Adafruit_MCPSRAMC1Ea>
  _cs_pin = CS;
   d8ac8:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   d8acc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  _reset_pin = RST;
   d8ad0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d8ad4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  _busy_pin = BUSY;
   d8ad8:	f99d 301c 	ldrsb.w	r3, [sp, #28]
   d8adc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if (SRCS >= 0) {
   d8ae0:	43ed      	mvns	r5, r5
  hwSPI = true;
   d8ae2:	2301      	movs	r3, #1
  if (SRCS >= 0) {
   d8ae4:	0fed      	lsrs	r5, r5, #31
  hwSPI = true;
   d8ae6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  singleByteTxns = false;
   d8aea:	2300      	movs	r3, #0
  buffer1 = buffer2 = color_buffer = black_buffer = NULL;
   d8aec:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
   d8af0:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  colorbuffer_addr = blackbuffer_addr = 0;
   d8af4:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  _dc_pin = DC;
   d8af8:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
  if (SRCS >= 0) {
   d8afc:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  singleByteTxns = false;
   d8b00:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  buffer1_size = buffer2_size = 0;
   d8b04:	8623      	strh	r3, [r4, #48]	; 0x30
   d8b06:	85e3      	strh	r3, [r4, #46]	; 0x2e
}
   d8b08:	4620      	mov	r0, r4
   d8b0a:	bd70      	pop	{r4, r5, r6, pc}
   d8b0c:	000df544 	.word	0x000df544

000d8b10 <_ZN12Adafruit_EPDD1Ev>:
Adafruit_EPD::~Adafruit_EPD()
   d8b10:	b510      	push	{r4, lr}
   d8b12:	4b07      	ldr	r3, [pc, #28]	; (d8b30 <_ZN12Adafruit_EPDD1Ev+0x20>)
   d8b14:	6003      	str	r3, [r0, #0]
   d8b16:	4604      	mov	r4, r0
  if (buffer1 != NULL) {
   d8b18:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d8b1a:	b118      	cbz	r0, d8b24 <_ZN12Adafruit_EPDD1Ev+0x14>
    free(buffer1);
   d8b1c:	f000 fdd2 	bl	d96c4 <free>
    buffer1 = NULL;
   d8b20:	2300      	movs	r3, #0
   d8b22:	6363      	str	r3, [r4, #52]	; 0x34
  if (buffer2 != NULL) {
   d8b24:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d8b26:	b108      	cbz	r0, d8b2c <_ZN12Adafruit_EPDD1Ev+0x1c>
    free(buffer2);
   d8b28:	f000 fdcc 	bl	d96c4 <free>
}
   d8b2c:	4620      	mov	r0, r4
   d8b2e:	bd10      	pop	{r4, pc}
   d8b30:	000df544 	.word	0x000df544

000d8b34 <_ZN12Adafruit_EPD13hardwareResetEv>:
void Adafruit_EPD::hardwareReset(void) {
   d8b34:	b510      	push	{r4, lr}
   d8b36:	4604      	mov	r4, r0
  if (_reset_pin >= 0) {
   d8b38:	f990 0023 	ldrsb.w	r0, [r0, #35]	; 0x23
   d8b3c:	2800      	cmp	r0, #0
   d8b3e:	db20      	blt.n	d8b82 <_ZN12Adafruit_EPD13hardwareResetEv+0x4e>
    pinMode(_reset_pin, OUTPUT);
   d8b40:	2101      	movs	r1, #1
   d8b42:	b280      	uxth	r0, r0
   d8b44:	f003 fad0 	bl	dc0e8 <pinMode>
    digitalWrite(_reset_pin, HIGH);
   d8b48:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   d8b4c:	2101      	movs	r1, #1
   d8b4e:	b280      	uxth	r0, r0
   d8b50:	f003 fadb 	bl	dc10a <digitalWrite>
    delay(10);
   d8b54:	200a      	movs	r0, #10
   d8b56:	f002 fafd 	bl	db154 <delay>
    digitalWrite(_reset_pin, LOW);
   d8b5a:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   d8b5e:	2100      	movs	r1, #0
   d8b60:	b280      	uxth	r0, r0
   d8b62:	f003 fad2 	bl	dc10a <digitalWrite>
    delay(10);
   d8b66:	200a      	movs	r0, #10
   d8b68:	f002 faf4 	bl	db154 <delay>
    digitalWrite(_reset_pin, HIGH);
   d8b6c:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   d8b70:	2101      	movs	r1, #1
   d8b72:	b280      	uxth	r0, r0
   d8b74:	f003 fac9 	bl	dc10a <digitalWrite>
}
   d8b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(10);
   d8b7c:	200a      	movs	r0, #10
   d8b7e:	f002 bae9 	b.w	db154 <delay>
}
   d8b82:	bd10      	pop	{r4, pc}

000d8b84 <_ZN12Adafruit_EPD14setBlackBufferEab>:
    @param index 0 or 1, for primary or secondary value
    @param inverted Whether to invert the logical value
*/
/**************************************************************************/
 void Adafruit_EPD::setBlackBuffer(int8_t index, bool inverted) {
   if (index == 0) {
   d8b84:	b961      	cbnz	r1, d8ba0 <_ZN12Adafruit_EPD14setBlackBufferEab+0x1c>
     if (use_sram) {
   d8b86:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d8b8a:	b133      	cbz	r3, d8b9a <_ZN12Adafruit_EPD14setBlackBufferEab+0x16>
       blackbuffer_addr = buffer1_addr;
   d8b8c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
       black_buffer = buffer1;
     }
   }
   if (index == 1) {
     if (use_sram) {
       blackbuffer_addr = buffer2_addr;
   d8b90:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
     } else {
       black_buffer = buffer2;
     }
   }
   blackInverted = inverted;
   d8b94:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 }
   d8b98:	4770      	bx	lr
       black_buffer = buffer1;
   d8b9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
       black_buffer = buffer2;
   d8b9c:	6403      	str	r3, [r0, #64]	; 0x40
   d8b9e:	e7f9      	b.n	d8b94 <_ZN12Adafruit_EPD14setBlackBufferEab+0x10>
   if (index == 1) {
   d8ba0:	2901      	cmp	r1, #1
   d8ba2:	d1f7      	bne.n	d8b94 <_ZN12Adafruit_EPD14setBlackBufferEab+0x10>
     if (use_sram) {
   d8ba4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d8ba8:	b113      	cbz	r3, d8bb0 <_ZN12Adafruit_EPD14setBlackBufferEab+0x2c>
       blackbuffer_addr = buffer2_addr;
   d8baa:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   d8bae:	e7ef      	b.n	d8b90 <_ZN12Adafruit_EPD14setBlackBufferEab+0xc>
       black_buffer = buffer2;
   d8bb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d8bb2:	e7f3      	b.n	d8b9c <_ZN12Adafruit_EPD14setBlackBufferEab+0x18>

000d8bb4 <_ZN12Adafruit_EPD14setColorBufferEab>:
    @param index 0 or 1, for primary or secondary value
    @param inverted Whether to invert the logical value
*/
/**************************************************************************/
 void Adafruit_EPD::setColorBuffer(int8_t index, bool inverted) {
   if (index == 0) {
   d8bb4:	b961      	cbnz	r1, d8bd0 <_ZN12Adafruit_EPD14setColorBufferEab+0x1c>
     if (use_sram) {
   d8bb6:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d8bba:	b133      	cbz	r3, d8bca <_ZN12Adafruit_EPD14setColorBufferEab+0x16>
       colorbuffer_addr = buffer1_addr;
   d8bbc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
       color_buffer = buffer1;
     }
   }
   if (index == 1) {
     if (use_sram) {
       colorbuffer_addr = buffer2_addr;
   d8bc0:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
     } else {
       color_buffer = buffer2;
     }
   }
   colorInverted = inverted;
   d8bc4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 }
   d8bc8:	4770      	bx	lr
       color_buffer = buffer1;
   d8bca:	6b43      	ldr	r3, [r0, #52]	; 0x34
       color_buffer = buffer2;
   d8bcc:	63c3      	str	r3, [r0, #60]	; 0x3c
   d8bce:	e7f9      	b.n	d8bc4 <_ZN12Adafruit_EPD14setColorBufferEab+0x10>
   if (index == 1) {
   d8bd0:	2901      	cmp	r1, #1
   d8bd2:	d1f7      	bne.n	d8bc4 <_ZN12Adafruit_EPD14setColorBufferEab+0x10>
     if (use_sram) {
   d8bd4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d8bd8:	b113      	cbz	r3, d8be0 <_ZN12Adafruit_EPD14setColorBufferEab+0x2c>
       colorbuffer_addr = buffer2_addr;
   d8bda:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   d8bde:	e7ef      	b.n	d8bc0 <_ZN12Adafruit_EPD14setColorBufferEab+0xc>
       color_buffer = buffer2;
   d8be0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d8be2:	e7f3      	b.n	d8bcc <_ZN12Adafruit_EPD14setColorBufferEab+0x18>

000d8be4 <_ZN12Adafruit_EPD11clearBufferEv>:
/*!
    @brief clear all data buffers
*/
/**************************************************************************/
void Adafruit_EPD::clearBuffer()
{
   d8be4:	b510      	push	{r4, lr}
  if (use_sram) {
   d8be6:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
{
   d8bea:	4604      	mov	r4, r0
  if (use_sram) {
   d8bec:	b1c3      	cbz	r3, d8c20 <_ZN12Adafruit_EPD11clearBufferEv+0x3c>
    if (buffer1_size != 0) {
   d8bee:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   d8bf0:	b142      	cbz	r2, d8c04 <_ZN12Adafruit_EPD11clearBufferEv+0x20>
      if (blackInverted) {
   d8bf2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d8bf6:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   d8bfa:	3027      	adds	r0, #39	; 0x27
   d8bfc:	b103      	cbz	r3, d8c00 <_ZN12Adafruit_EPD11clearBufferEv+0x1c>
	sram.erase(buffer1_addr, buffer1_size, 0xFF);
   d8bfe:	23ff      	movs	r3, #255	; 0xff
      } else {
	sram.erase(buffer1_addr, buffer1_size, 0x00);
   d8c00:	f7ff fe37 	bl	d8872 <_ZN16Adafruit_MCPSRAM5eraseEtth>
      }
    }
    if (buffer2_size != 0) {
   d8c04:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d8c06:	b1fa      	cbz	r2, d8c48 <_ZN12Adafruit_EPD11clearBufferEv+0x64>
      if (colorInverted) {
   d8c08:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   d8c0c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
   d8c10:	f104 0027 	add.w	r0, r4, #39	; 0x27
   d8c14:	b103      	cbz	r3, d8c18 <_ZN12Adafruit_EPD11clearBufferEv+0x34>
	sram.erase(buffer2_addr, buffer2_size, 0xFF);
   d8c16:	23ff      	movs	r3, #255	; 0xff
      } else {
	memset(buffer2, 0x00, buffer2_size);
      }
    }
  }
}
   d8c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sram.erase(buffer2_addr, buffer2_size, 0x00);
   d8c1c:	f7ff be29 	b.w	d8872 <_ZN16Adafruit_MCPSRAM5eraseEtth>
    if (buffer1) {
   d8c20:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d8c22:	b130      	cbz	r0, d8c32 <_ZN12Adafruit_EPD11clearBufferEv+0x4e>
      if (blackInverted) {
   d8c24:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d8c28:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   d8c2a:	b101      	cbz	r1, d8c2e <_ZN12Adafruit_EPD11clearBufferEv+0x4a>
	memset(buffer1, 0xFF, buffer1_size);
   d8c2c:	21ff      	movs	r1, #255	; 0xff
	memset(buffer1, 0x00, buffer1_size);
   d8c2e:	f005 fdfb 	bl	de828 <memset>
    if (buffer2) {
   d8c32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d8c34:	b140      	cbz	r0, d8c48 <_ZN12Adafruit_EPD11clearBufferEv+0x64>
      if (colorInverted) {
   d8c36:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   d8c3a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d8c3c:	b101      	cbz	r1, d8c40 <_ZN12Adafruit_EPD11clearBufferEv+0x5c>
	memset(buffer2, 0xFF, buffer2_size);
   d8c3e:	21ff      	movs	r1, #255	; 0xff
}
   d8c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(buffer2, 0x00, buffer2_size);
   d8c44:	f005 bdf0 	b.w	de828 <memset>
}
   d8c48:	bd10      	pop	{r4, pc}

000d8c4a <_ZN12Adafruit_EPD6dcHighEv>:
void Adafruit_EPD::dcHigh()
{
#ifdef HAVE_PORTREG
  *dcport |= dcpinmask;
#else
  digitalWrite(_dc_pin, HIGH);
   d8c4a:	f990 0022 	ldrsb.w	r0, [r0, #34]	; 0x22
   d8c4e:	2101      	movs	r1, #1
   d8c50:	b280      	uxth	r0, r0
   d8c52:	f003 ba5a 	b.w	dc10a <digitalWrite>

000d8c56 <_ZN12Adafruit_EPD5dcLowEv>:
void Adafruit_EPD::dcLow()
{
#ifdef HAVE_PORTREG
  *dcport &= ~dcpinmask;
#else
  digitalWrite(_dc_pin, LOW);
   d8c56:	f990 0022 	ldrsb.w	r0, [r0, #34]	; 0x22
   d8c5a:	2100      	movs	r1, #0
   d8c5c:	b280      	uxth	r0, r0
   d8c5e:	f003 ba54 	b.w	dc10a <digitalWrite>
	...

000d8c64 <_ZN12Adafruit_EPD6csHighEv>:
{
   d8c64:	b510      	push	{r4, lr}
   d8c66:	4604      	mov	r4, r0
        instance().endTransaction();
   d8c68:	f7fd fb00 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8c6c:	f000 fdd1 	bl	d9812 <_ZN8SPIClass14endTransactionEv>
  _isInTransaction = false;
   d8c70:	4b05      	ldr	r3, [pc, #20]	; (d8c88 <_ZN12Adafruit_EPD6csHighEv+0x24>)
  digitalWrite(_cs_pin, HIGH);
   d8c72:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
  _isInTransaction = false;
   d8c76:	2200      	movs	r2, #0
   d8c78:	701a      	strb	r2, [r3, #0]
}
   d8c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(_cs_pin, HIGH);
   d8c7e:	2101      	movs	r1, #1
   d8c80:	b280      	uxth	r0, r0
   d8c82:	f003 ba42 	b.w	dc10a <digitalWrite>
   d8c86:	bf00      	nop
   d8c88:	2003e5c1 	.word	0x2003e5c1

000d8c8c <_ZN12Adafruit_EPD5beginEb>:
void Adafruit_EPD::begin(bool reset) {
   d8c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  setBlackBuffer(0, true);   // black defaults to inverted
   d8c8e:	2201      	movs	r2, #1
void Adafruit_EPD::begin(bool reset) {
   d8c90:	460d      	mov	r5, r1
  setBlackBuffer(0, true);   // black defaults to inverted
   d8c92:	2100      	movs	r1, #0
void Adafruit_EPD::begin(bool reset) {
   d8c94:	4604      	mov	r4, r0
  setBlackBuffer(0, true);   // black defaults to inverted
   d8c96:	f7ff ff75 	bl	d8b84 <_ZN12Adafruit_EPD14setBlackBufferEab>
  setColorBuffer(1, false);  // red defaults to not inverted
   d8c9a:	2200      	movs	r2, #0
   d8c9c:	2101      	movs	r1, #1
   d8c9e:	f7ff ff89 	bl	d8bb4 <_ZN12Adafruit_EPD14setColorBufferEab>
  if (use_sram) {
   d8ca2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   d8ca6:	b14b      	cbz	r3, d8cbc <_ZN12Adafruit_EPD5beginEb+0x30>
    sram.begin();
   d8ca8:	3027      	adds	r0, #39	; 0x27
   d8caa:	9001      	str	r0, [sp, #4]
   d8cac:	f7ff fcc4 	bl	d8638 <_ZN16Adafruit_MCPSRAM5beginEv>
    sram.write8(0, K640_SEQUENTIAL_MODE, MCPSRAM_WRSR);
   d8cb0:	9801      	ldr	r0, [sp, #4]
   d8cb2:	2301      	movs	r3, #1
   d8cb4:	2240      	movs	r2, #64	; 0x40
   d8cb6:	2100      	movs	r1, #0
   d8cb8:	f7ff fd56 	bl	d8768 <_ZN16Adafruit_MCPSRAM6write8Ethh>
  pinMode(_dc_pin, OUTPUT);
   d8cbc:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
   d8cc0:	2101      	movs	r1, #1
   d8cc2:	b280      	uxth	r0, r0
   d8cc4:	f003 fa10 	bl	dc0e8 <pinMode>
  pinMode(_cs_pin, OUTPUT);
   d8cc8:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   d8ccc:	2101      	movs	r1, #1
   d8cce:	b280      	uxth	r0, r0
   d8cd0:	f003 fa0a 	bl	dc0e8 <pinMode>
  csHigh();
   d8cd4:	4620      	mov	r0, r4
   d8cd6:	f7ff ffc5 	bl	d8c64 <_ZN12Adafruit_EPD6csHighEv>
  if (!hwSPI){
   d8cda:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
   d8cde:	b9d3      	cbnz	r3, d8d16 <_ZN12Adafruit_EPD5beginEb+0x8a>
    pinMode(_sid_pin, OUTPUT);
   d8ce0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d8ce4:	2101      	movs	r1, #1
   d8ce6:	b280      	uxth	r0, r0
   d8ce8:	f003 f9fe 	bl	dc0e8 <pinMode>
    pinMode(_sclk_pin, OUTPUT);
   d8cec:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d8cf0:	2101      	movs	r1, #1
   d8cf2:	b280      	uxth	r0, r0
   d8cf4:	f003 f9f8 	bl	dc0e8 <pinMode>
  if (reset) {
   d8cf8:	b115      	cbz	r5, d8d00 <_ZN12Adafruit_EPD5beginEb+0x74>
    hardwareReset();
   d8cfa:	4620      	mov	r0, r4
   d8cfc:	f7ff ff1a 	bl	d8b34 <_ZN12Adafruit_EPD13hardwareResetEv>
  if (_busy_pin >= 0) {
   d8d00:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   d8d04:	2800      	cmp	r0, #0
   d8d06:	db0b      	blt.n	d8d20 <_ZN12Adafruit_EPD5beginEb+0x94>
    pinMode(_busy_pin, INPUT);
   d8d08:	2100      	movs	r1, #0
   d8d0a:	b280      	uxth	r0, r0
}
   d8d0c:	b003      	add	sp, #12
   d8d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    pinMode(_busy_pin, INPUT);
   d8d12:	f003 b9e9 	b.w	dc0e8 <pinMode>
        instance().begin();
   d8d16:	f7fd faa9 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8d1a:	f000 fd69 	bl	d97f0 <_ZN8SPIClass5beginEv>
    }
   d8d1e:	e7eb      	b.n	d8cf8 <_ZN12Adafruit_EPD5beginEb+0x6c>
}
   d8d20:	b003      	add	sp, #12
   d8d22:	bd30      	pop	{r4, r5, pc}

000d8d24 <_ZN12Adafruit_EPD5csLowEv>:
{
   d8d24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!_isInTransaction) {
   d8d26:	4d0d      	ldr	r5, [pc, #52]	; (d8d5c <_ZN12Adafruit_EPD5csLowEv+0x38>)
   d8d28:	782b      	ldrb	r3, [r5, #0]
{
   d8d2a:	4604      	mov	r4, r0
  if (!_isInTransaction) {
   d8d2c:	b973      	cbnz	r3, d8d4c <_ZN12Adafruit_EPD5csLowEv+0x28>
   d8d2e:	4a0c      	ldr	r2, [pc, #48]	; (d8d60 <_ZN12Adafruit_EPD5csLowEv+0x3c>)
   d8d30:	f88d 3004 	strb.w	r3, [sp, #4]
   d8d34:	2601      	movs	r6, #1
   d8d36:	4b0b      	ldr	r3, [pc, #44]	; (d8d64 <_ZN12Adafruit_EPD5csLowEv+0x40>)
   d8d38:	9200      	str	r2, [sp, #0]
   d8d3a:	9302      	str	r3, [sp, #8]
   d8d3c:	f8ad 600c 	strh.w	r6, [sp, #12]
        return instance().beginTransaction(settings);
   d8d40:	f7fd fa94 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8d44:	4669      	mov	r1, sp
   d8d46:	f000 fd7d 	bl	d9844 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    _isInTransaction = true;
   d8d4a:	702e      	strb	r6, [r5, #0]
  digitalWrite(_cs_pin, LOW);
   d8d4c:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   d8d50:	2100      	movs	r1, #0
   d8d52:	b280      	uxth	r0, r0
   d8d54:	f003 f9d9 	bl	dc10a <digitalWrite>
}
   d8d58:	b004      	add	sp, #16
   d8d5a:	bd70      	pop	{r4, r5, r6, pc}
   d8d5c:	2003e5c1 	.word	0x2003e5c1
   d8d60:	000dee48 	.word	0x000dee48
   d8d64:	003d0900 	.word	0x003d0900

000d8d68 <_ZN12Adafruit_EPD11SPItransferEh>:
uint8_t Adafruit_EPD::SPItransfer(uint8_t d) {
   d8d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hwSPI) {
   d8d6a:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
uint8_t Adafruit_EPD::SPItransfer(uint8_t d) {
   d8d6e:	4605      	mov	r5, r0
   d8d70:	460e      	mov	r6, r1
  if (hwSPI) {
   d8d72:	b1b3      	cbz	r3, d8da2 <_ZN12Adafruit_EPD11SPItransferEh+0x3a>
    if (singleByteTxns){
   d8d74:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   d8d78:	b163      	cbz	r3, d8d94 <_ZN12Adafruit_EPD11SPItransferEh+0x2c>
      csLow();
   d8d7a:	f7ff ffd3 	bl	d8d24 <_ZN12Adafruit_EPD5csLowEv>
        return instance().transfer(data);
   d8d7e:	f7fd fa75 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8d82:	4631      	mov	r1, r6
   d8d84:	f000 fdcc 	bl	d9920 <_ZN8SPIClass8transferEh>
   d8d88:	4604      	mov	r4, r0
      csHigh();
   d8d8a:	4628      	mov	r0, r5
   d8d8c:	f7ff ff6a 	bl	d8c64 <_ZN12Adafruit_EPD6csHighEv>
}
   d8d90:	4620      	mov	r0, r4
   d8d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8d94:	f7fd fa6a 	bl	d626c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8d98:	4631      	mov	r1, r6
   d8d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d8d9e:	f000 bdbf 	b.w	d9920 <_ZN8SPIClass8transferEh>
   d8da2:	2408      	movs	r4, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8da4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(_sclk_pin, LOW);
   d8da6:	f995 0021 	ldrsb.w	r0, [r5, #33]	; 0x21
   d8daa:	2100      	movs	r1, #0
   d8dac:	b280      	uxth	r0, r0
   d8dae:	f003 f9ac 	bl	dc10a <digitalWrite>
      if(d & bit) digitalWrite(_sid_pin, HIGH);
   d8db2:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d8db6:	ea16 0107 	ands.w	r1, r6, r7
   d8dba:	bf18      	it	ne
   d8dbc:	2101      	movne	r1, #1
      else        digitalWrite(_sid_pin, LOW);
   d8dbe:	b280      	uxth	r0, r0
   d8dc0:	f003 f9a3 	bl	dc10a <digitalWrite>
      digitalWrite(_sclk_pin, HIGH);
   d8dc4:	f995 0021 	ldrsb.w	r0, [r5, #33]	; 0x21
   d8dc8:	2101      	movs	r1, #1
   d8dca:	b280      	uxth	r0, r0
   d8dcc:	f003 f99d 	bl	dc10a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d8dd0:	3c01      	subs	r4, #1
   d8dd2:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d8dd6:	d1e6      	bne.n	d8da6 <_ZN12Adafruit_EPD11SPItransferEh+0x3e>
   d8dd8:	e7da      	b.n	d8d90 <_ZN12Adafruit_EPD11SPItransferEh+0x28>

000d8dda <_ZN12Adafruit_EPD7displayEv>:
{
   d8dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  powerUp();
   d8dde:	6803      	ldr	r3, [r0, #0]
{
   d8de0:	4604      	mov	r4, r0
  powerUp();
   d8de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8de4:	4798      	blx	r3
  setRAMAddress(0, 0);
   d8de6:	6823      	ldr	r3, [r4, #0]
   d8de8:	2200      	movs	r2, #0
   d8dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8dec:	4611      	mov	r1, r2
   d8dee:	4620      	mov	r0, r4
   d8df0:	4798      	blx	r3
  if (use_sram) {
   d8df2:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
   d8df6:	b3b5      	cbz	r5, d8e66 <_ZN12Adafruit_EPD7displayEv+0x8c>
    sram.csLow();
   d8df8:	f104 0727 	add.w	r7, r4, #39	; 0x27
   d8dfc:	4638      	mov	r0, r7
   d8dfe:	f7ff fbfd 	bl	d85fc <_ZN16Adafruit_MCPSRAM5csLowEv>
    SPItransfer(MCPSRAM_READ);
   d8e02:	2103      	movs	r1, #3
   d8e04:	4620      	mov	r0, r4
   d8e06:	f7ff ffaf 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer1_addr >> 8);
   d8e0a:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   d8e0e:	4620      	mov	r0, r4
   d8e10:	0a09      	lsrs	r1, r1, #8
   d8e12:	f7ff ffa9 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer1_addr & 0xFF);
   d8e16:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   d8e1a:	4620      	mov	r0, r4
   d8e1c:	f7ff ffa4 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
    c = writeRAMCommand(0);
   d8e20:	6823      	ldr	r3, [r4, #0]
   d8e22:	2100      	movs	r1, #0
   d8e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8e26:	4620      	mov	r0, r4
   d8e28:	4798      	blx	r3
   d8e2a:	4605      	mov	r5, r0
    dcHigh();
   d8e2c:	4620      	mov	r0, r4
   d8e2e:	f7ff ff0c 	bl	d8c4a <_ZN12Adafruit_EPD6dcHighEv>
   d8e32:	2600      	movs	r6, #0
    for(uint16_t i=0; i<buffer1_size; i++){
   d8e34:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   d8e36:	b2b3      	uxth	r3, r6
   d8e38:	429a      	cmp	r2, r3
   d8e3a:	d906      	bls.n	d8e4a <_ZN12Adafruit_EPD7displayEv+0x70>
      c = SPItransfer(c);
   d8e3c:	4629      	mov	r1, r5
   d8e3e:	4620      	mov	r0, r4
   d8e40:	f7ff ff92 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
   d8e44:	3601      	adds	r6, #1
   d8e46:	4605      	mov	r5, r0
    for(uint16_t i=0; i<buffer1_size; i++){
   d8e48:	e7f4      	b.n	d8e34 <_ZN12Adafruit_EPD7displayEv+0x5a>
    csHigh();
   d8e4a:	4620      	mov	r0, r4
   d8e4c:	f7ff ff0a 	bl	d8c64 <_ZN12Adafruit_EPD6csHighEv>
    sram.csHigh();
   d8e50:	4638      	mov	r0, r7
   d8e52:	f7ff fbc5 	bl	d85e0 <_ZN16Adafruit_MCPSRAM6csHighEv>
  if (buffer2_size == 0) {
   d8e56:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d8e58:	b9e3      	cbnz	r3, d8e94 <_ZN12Adafruit_EPD7displayEv+0xba>
    update();
   d8e5a:	6823      	ldr	r3, [r4, #0]
   d8e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  powerDown();
   d8e5e:	4620      	mov	r0, r4
}
   d8e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  powerDown();
   d8e64:	4718      	bx	r3
    writeRAMCommand(0);
   d8e66:	6823      	ldr	r3, [r4, #0]
   d8e68:	4629      	mov	r1, r5
   d8e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8e6c:	4620      	mov	r0, r4
   d8e6e:	4798      	blx	r3
    dcHigh();
   d8e70:	4620      	mov	r0, r4
   d8e72:	f7ff feea 	bl	d8c4a <_ZN12Adafruit_EPD6dcHighEv>
    for(uint16_t i=0; i<buffer1_size; i++) {
   d8e76:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   d8e78:	b2ab      	uxth	r3, r5
   d8e7a:	429a      	cmp	r2, r3
   d8e7c:	d906      	bls.n	d8e8c <_ZN12Adafruit_EPD7displayEv+0xb2>
      SPItransfer(buffer1[i]);
   d8e7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d8e80:	4620      	mov	r0, r4
   d8e82:	5cd1      	ldrb	r1, [r2, r3]
   d8e84:	f7ff ff70 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
    for(uint16_t i=0; i<buffer1_size; i++) {
   d8e88:	3501      	adds	r5, #1
   d8e8a:	e7f4      	b.n	d8e76 <_ZN12Adafruit_EPD7displayEv+0x9c>
    csHigh();
   d8e8c:	4620      	mov	r0, r4
   d8e8e:	f7ff fee9 	bl	d8c64 <_ZN12Adafruit_EPD6csHighEv>
   d8e92:	e7e0      	b.n	d8e56 <_ZN12Adafruit_EPD7displayEv+0x7c>
  delay(2);
   d8e94:	2002      	movs	r0, #2
   d8e96:	f002 f95d 	bl	db154 <delay>
  setRAMAddress(0, 0);
   d8e9a:	6823      	ldr	r3, [r4, #0]
   d8e9c:	2200      	movs	r2, #0
   d8e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8ea0:	4611      	mov	r1, r2
   d8ea2:	4620      	mov	r0, r4
   d8ea4:	4798      	blx	r3
  if (use_sram) {
   d8ea6:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
   d8eaa:	b3ad      	cbz	r5, d8f18 <_ZN12Adafruit_EPD7displayEv+0x13e>
    sram.csLow();
   d8eac:	f104 0727 	add.w	r7, r4, #39	; 0x27
   d8eb0:	4638      	mov	r0, r7
   d8eb2:	f7ff fba3 	bl	d85fc <_ZN16Adafruit_MCPSRAM5csLowEv>
    SPItransfer(MCPSRAM_READ);
   d8eb6:	2103      	movs	r1, #3
   d8eb8:	4620      	mov	r0, r4
   d8eba:	f7ff ff55 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer2_addr >> 8);
   d8ebe:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
   d8ec2:	4620      	mov	r0, r4
   d8ec4:	0a09      	lsrs	r1, r1, #8
   d8ec6:	f7ff ff4f 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
    SPItransfer(buffer2_addr & 0xFF);
   d8eca:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   d8ece:	4620      	mov	r0, r4
   d8ed0:	f7ff ff4a 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
    c = writeRAMCommand(1);
   d8ed4:	6823      	ldr	r3, [r4, #0]
   d8ed6:	2101      	movs	r1, #1
   d8ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8eda:	4620      	mov	r0, r4
   d8edc:	4798      	blx	r3
   d8ede:	4605      	mov	r5, r0
    dcHigh();
   d8ee0:	4620      	mov	r0, r4
   d8ee2:	f7ff feb2 	bl	d8c4a <_ZN12Adafruit_EPD6dcHighEv>
   d8ee6:	2600      	movs	r6, #0
    for(uint16_t i=0; i<buffer2_size; i++){
   d8ee8:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d8eea:	b2b3      	uxth	r3, r6
   d8eec:	429a      	cmp	r2, r3
   d8eee:	d906      	bls.n	d8efe <_ZN12Adafruit_EPD7displayEv+0x124>
      c = SPItransfer(c);
   d8ef0:	4629      	mov	r1, r5
   d8ef2:	4620      	mov	r0, r4
   d8ef4:	f7ff ff38 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
   d8ef8:	3601      	adds	r6, #1
   d8efa:	4605      	mov	r5, r0
    for(uint16_t i=0; i<buffer2_size; i++){
   d8efc:	e7f4      	b.n	d8ee8 <_ZN12Adafruit_EPD7displayEv+0x10e>
    csHigh();
   d8efe:	4620      	mov	r0, r4
   d8f00:	f7ff feb0 	bl	d8c64 <_ZN12Adafruit_EPD6csHighEv>
    sram.csHigh();
   d8f04:	4638      	mov	r0, r7
   d8f06:	f7ff fb6b 	bl	d85e0 <_ZN16Adafruit_MCPSRAM6csHighEv>
  update();
   d8f0a:	6823      	ldr	r3, [r4, #0]
   d8f0c:	4620      	mov	r0, r4
   d8f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8f10:	4798      	blx	r3
  powerDown();
   d8f12:	6823      	ldr	r3, [r4, #0]
   d8f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d8f16:	e7a2      	b.n	d8e5e <_ZN12Adafruit_EPD7displayEv+0x84>
    writeRAMCommand(1);
   d8f18:	6823      	ldr	r3, [r4, #0]
   d8f1a:	2101      	movs	r1, #1
   d8f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8f1e:	4620      	mov	r0, r4
   d8f20:	4798      	blx	r3
    dcHigh();
   d8f22:	4620      	mov	r0, r4
   d8f24:	f7ff fe91 	bl	d8c4a <_ZN12Adafruit_EPD6dcHighEv>
    for(uint16_t i=0; i<buffer2_size; i++){
   d8f28:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d8f2a:	b2ab      	uxth	r3, r5
   d8f2c:	429a      	cmp	r2, r3
   d8f2e:	d906      	bls.n	d8f3e <_ZN12Adafruit_EPD7displayEv+0x164>
      SPItransfer(buffer2[i]);
   d8f30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d8f32:	4620      	mov	r0, r4
   d8f34:	5cd1      	ldrb	r1, [r2, r3]
   d8f36:	f7ff ff17 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
    for(uint16_t i=0; i<buffer2_size; i++){
   d8f3a:	3501      	adds	r5, #1
   d8f3c:	e7f4      	b.n	d8f28 <_ZN12Adafruit_EPD7displayEv+0x14e>
    csHigh();
   d8f3e:	4620      	mov	r0, r4
   d8f40:	f7ff fe90 	bl	d8c64 <_ZN12Adafruit_EPD6csHighEv>
   d8f44:	e7e1      	b.n	d8f0a <_ZN12Adafruit_EPD7displayEv+0x130>

000d8f46 <_ZN12Adafruit_EPD8EPD_dataEPKht>:
{
   d8f46:	b570      	push	{r4, r5, r6, lr}
   d8f48:	460c      	mov	r4, r1
   d8f4a:	4615      	mov	r5, r2
   d8f4c:	4606      	mov	r6, r0
  dcHigh();
   d8f4e:	f7ff fe7c 	bl	d8c4a <_ZN12Adafruit_EPD6dcHighEv>
  for (uint16_t i=0; i<len; i++) {
   d8f52:	4425      	add	r5, r4
   d8f54:	42ac      	cmp	r4, r5
   d8f56:	d005      	beq.n	d8f64 <_ZN12Adafruit_EPD8EPD_dataEPKht+0x1e>
    SPItransfer(buf[i]);
   d8f58:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8f5c:	4630      	mov	r0, r6
   d8f5e:	f7ff ff03 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
  for (uint16_t i=0; i<len; i++) {
   d8f62:	e7f7      	b.n	d8f54 <_ZN12Adafruit_EPD8EPD_dataEPKht+0xe>
  csHigh();
   d8f64:	4630      	mov	r0, r6
}
   d8f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  csHigh();
   d8f6a:	f7ff be7b 	b.w	d8c64 <_ZN12Adafruit_EPD6csHighEv>

000d8f6e <_ZN12Adafruit_EPD11EPD_commandEhb>:
uint8_t Adafruit_EPD::EPD_command(uint8_t c, bool end) {
   d8f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8f70:	4604      	mov	r4, r0
   d8f72:	9101      	str	r1, [sp, #4]
   d8f74:	4616      	mov	r6, r2
  csHigh();
   d8f76:	f7ff fe75 	bl	d8c64 <_ZN12Adafruit_EPD6csHighEv>
  dcLow();
   d8f7a:	4620      	mov	r0, r4
   d8f7c:	f7ff fe6b 	bl	d8c56 <_ZN12Adafruit_EPD5dcLowEv>
  csLow();
   d8f80:	4620      	mov	r0, r4
   d8f82:	f7ff fecf 	bl	d8d24 <_ZN12Adafruit_EPD5csLowEv>
  uint8_t data = SPItransfer(c);
   d8f86:	9901      	ldr	r1, [sp, #4]
   d8f88:	4620      	mov	r0, r4
   d8f8a:	f7ff feed 	bl	d8d68 <_ZN12Adafruit_EPD11SPItransferEh>
   d8f8e:	4605      	mov	r5, r0
  if (end) {
   d8f90:	b116      	cbz	r6, d8f98 <_ZN12Adafruit_EPD11EPD_commandEhb+0x2a>
    csHigh();
   d8f92:	4620      	mov	r0, r4
   d8f94:	f7ff fe66 	bl	d8c64 <_ZN12Adafruit_EPD6csHighEv>
}
   d8f98:	4628      	mov	r0, r5
   d8f9a:	b002      	add	sp, #8
   d8f9c:	bd70      	pop	{r4, r5, r6, pc}

000d8f9e <_ZN12Adafruit_EPD11EPD_commandEhPKht>:
{
   d8f9e:	b570      	push	{r4, r5, r6, lr}
   d8fa0:	4604      	mov	r4, r0
   d8fa2:	4615      	mov	r5, r2
   d8fa4:	461e      	mov	r6, r3
  EPD_command(c, false);
   d8fa6:	2200      	movs	r2, #0
   d8fa8:	f7ff ffe1 	bl	d8f6e <_ZN12Adafruit_EPD11EPD_commandEhb>
  EPD_data(buf, len);
   d8fac:	4632      	mov	r2, r6
   d8fae:	4629      	mov	r1, r5
   d8fb0:	4620      	mov	r0, r4
}
   d8fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  EPD_data(buf, len);
   d8fb6:	f7ff bfc6 	b.w	d8f46 <_ZN12Adafruit_EPD8EPD_dataEPKht>
	...

000d8fbc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8fbc:	b508      	push	{r3, lr}
   d8fbe:	4b02      	ldr	r3, [pc, #8]	; (d8fc8 <netdb_freeaddrinfo+0xc>)
   d8fc0:	681b      	ldr	r3, [r3, #0]
   d8fc2:	689b      	ldr	r3, [r3, #8]
   d8fc4:	9301      	str	r3, [sp, #4]
   d8fc6:	bd08      	pop	{r3, pc}
   d8fc8:	00030268 	.word	0x00030268

000d8fcc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8fcc:	b508      	push	{r3, lr}
   d8fce:	4b02      	ldr	r3, [pc, #8]	; (d8fd8 <netdb_getaddrinfo+0xc>)
   d8fd0:	681b      	ldr	r3, [r3, #0]
   d8fd2:	68db      	ldr	r3, [r3, #12]
   d8fd4:	9301      	str	r3, [sp, #4]
   d8fd6:	bd08      	pop	{r3, pc}
   d8fd8:	00030268 	.word	0x00030268

000d8fdc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8fdc:	b508      	push	{r3, lr}
   d8fde:	4b02      	ldr	r3, [pc, #8]	; (d8fe8 <HAL_Pin_Mode+0xc>)
   d8fe0:	681b      	ldr	r3, [r3, #0]
   d8fe2:	689b      	ldr	r3, [r3, #8]
   d8fe4:	9301      	str	r3, [sp, #4]
   d8fe6:	bd08      	pop	{r3, pc}
   d8fe8:	0003022c 	.word	0x0003022c

000d8fec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8fec:	b508      	push	{r3, lr}
   d8fee:	4b02      	ldr	r3, [pc, #8]	; (d8ff8 <HAL_Get_Pin_Mode+0xc>)
   d8ff0:	681b      	ldr	r3, [r3, #0]
   d8ff2:	68db      	ldr	r3, [r3, #12]
   d8ff4:	9301      	str	r3, [sp, #4]
   d8ff6:	bd08      	pop	{r3, pc}
   d8ff8:	0003022c 	.word	0x0003022c

000d8ffc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d8ffc:	b508      	push	{r3, lr}
   d8ffe:	4b02      	ldr	r3, [pc, #8]	; (d9008 <HAL_GPIO_Write+0xc>)
   d9000:	681b      	ldr	r3, [r3, #0]
   d9002:	691b      	ldr	r3, [r3, #16]
   d9004:	9301      	str	r3, [sp, #4]
   d9006:	bd08      	pop	{r3, pc}
   d9008:	0003022c 	.word	0x0003022c

000d900c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d900c:	b508      	push	{r3, lr}
   d900e:	4b02      	ldr	r3, [pc, #8]	; (d9018 <HAL_GPIO_Read+0xc>)
   d9010:	681b      	ldr	r3, [r3, #0]
   d9012:	695b      	ldr	r3, [r3, #20]
   d9014:	9301      	str	r3, [sp, #4]
   d9016:	bd08      	pop	{r3, pc}
   d9018:	0003022c 	.word	0x0003022c

000d901c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d901c:	b508      	push	{r3, lr}
   d901e:	4b02      	ldr	r3, [pc, #8]	; (d9028 <HAL_RNG_GetRandomNumber+0xc>)
   d9020:	681b      	ldr	r3, [r3, #0]
   d9022:	685b      	ldr	r3, [r3, #4]
   d9024:	9301      	str	r3, [sp, #4]
   d9026:	bd08      	pop	{r3, pc}
   d9028:	00030218 	.word	0x00030218

000d902c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d902c:	b508      	push	{r3, lr}
   d902e:	4b02      	ldr	r3, [pc, #8]	; (d9038 <HAL_Delay_Microseconds+0xc>)
   d9030:	681b      	ldr	r3, [r3, #0]
   d9032:	68db      	ldr	r3, [r3, #12]
   d9034:	9301      	str	r3, [sp, #4]
   d9036:	bd08      	pop	{r3, pc}
   d9038:	00030218 	.word	0x00030218

000d903c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d903c:	b508      	push	{r3, lr}
   d903e:	4b02      	ldr	r3, [pc, #8]	; (d9048 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d9040:	681b      	ldr	r3, [r3, #0]
   d9042:	691b      	ldr	r3, [r3, #16]
   d9044:	9301      	str	r3, [sp, #4]
   d9046:	bd08      	pop	{r3, pc}
   d9048:	00030218 	.word	0x00030218

000d904c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d904c:	b508      	push	{r3, lr}
   d904e:	4b02      	ldr	r3, [pc, #8]	; (d9058 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d9050:	681b      	ldr	r3, [r3, #0]
   d9052:	695b      	ldr	r3, [r3, #20]
   d9054:	9301      	str	r3, [sp, #4]
   d9056:	bd08      	pop	{r3, pc}
   d9058:	00030218 	.word	0x00030218

000d905c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d905c:	b508      	push	{r3, lr}
   d905e:	4b02      	ldr	r3, [pc, #8]	; (d9068 <HAL_EEPROM_Init+0xc>)
   d9060:	681b      	ldr	r3, [r3, #0]
   d9062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9064:	9301      	str	r3, [sp, #4]
   d9066:	bd08      	pop	{r3, pc}
   d9068:	00030218 	.word	0x00030218

000d906c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d906c:	b508      	push	{r3, lr}
   d906e:	4b02      	ldr	r3, [pc, #8]	; (d9078 <HAL_EEPROM_Get+0xc>)
   d9070:	681b      	ldr	r3, [r3, #0]
   d9072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9074:	9301      	str	r3, [sp, #4]
   d9076:	bd08      	pop	{r3, pc}
   d9078:	00030218 	.word	0x00030218

000d907c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d907c:	b508      	push	{r3, lr}
   d907e:	4b02      	ldr	r3, [pc, #8]	; (d9088 <HAL_EEPROM_Put+0xc>)
   d9080:	681b      	ldr	r3, [r3, #0]
   d9082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9084:	9301      	str	r3, [sp, #4]
   d9086:	bd08      	pop	{r3, pc}
   d9088:	00030218 	.word	0x00030218

000d908c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d908c:	b508      	push	{r3, lr}
   d908e:	4b02      	ldr	r3, [pc, #8]	; (d9098 <hal_rtc_time_is_valid+0xc>)
   d9090:	681b      	ldr	r3, [r3, #0]
   d9092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9094:	9301      	str	r3, [sp, #4]
   d9096:	bd08      	pop	{r3, pc}
   d9098:	00030218 	.word	0x00030218

000d909c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d909c:	b508      	push	{r3, lr}
   d909e:	4b02      	ldr	r3, [pc, #8]	; (d90a8 <hal_timer_millis+0xc>)
   d90a0:	681b      	ldr	r3, [r3, #0]
   d90a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d90a4:	9301      	str	r3, [sp, #4]
   d90a6:	bd08      	pop	{r3, pc}
   d90a8:	00030218 	.word	0x00030218

000d90ac <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d90ac:	b508      	push	{r3, lr}
   d90ae:	4b02      	ldr	r3, [pc, #8]	; (d90b8 <hal_rtc_get_time+0xc>)
   d90b0:	681b      	ldr	r3, [r3, #0]
   d90b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d90b4:	9301      	str	r3, [sp, #4]
   d90b6:	bd08      	pop	{r3, pc}
   d90b8:	00030218 	.word	0x00030218

000d90bc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d90bc:	b508      	push	{r3, lr}
   d90be:	4b02      	ldr	r3, [pc, #8]	; (d90c8 <hal_ble_stack_init+0xc>)
   d90c0:	681b      	ldr	r3, [r3, #0]
   d90c2:	689b      	ldr	r3, [r3, #8]
   d90c4:	9301      	str	r3, [sp, #4]
   d90c6:	bd08      	pop	{r3, pc}
   d90c8:	00030278 	.word	0x00030278

000d90cc <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d90cc:	b508      	push	{r3, lr}
   d90ce:	4b02      	ldr	r3, [pc, #8]	; (d90d8 <hal_ble_gap_set_advertising_data+0xc>)
   d90d0:	681b      	ldr	r3, [r3, #0]
   d90d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d90d4:	9301      	str	r3, [sp, #4]
   d90d6:	bd08      	pop	{r3, pc}
   d90d8:	00030278 	.word	0x00030278

000d90dc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d90dc:	b508      	push	{r3, lr}
   d90de:	4b02      	ldr	r3, [pc, #8]	; (d90e8 <hal_ble_gap_set_scan_response_data+0xc>)
   d90e0:	681b      	ldr	r3, [r3, #0]
   d90e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d90e4:	9301      	str	r3, [sp, #4]
   d90e6:	bd08      	pop	{r3, pc}
   d90e8:	00030278 	.word	0x00030278

000d90ec <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d90ec:	b508      	push	{r3, lr}
   d90ee:	4b02      	ldr	r3, [pc, #8]	; (d90f8 <hal_ble_gap_start_advertising+0xc>)
   d90f0:	681b      	ldr	r3, [r3, #0]
   d90f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d90f4:	9301      	str	r3, [sp, #4]
   d90f6:	bd08      	pop	{r3, pc}
   d90f8:	00030278 	.word	0x00030278

000d90fc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d90fc:	b508      	push	{r3, lr}
   d90fe:	4b03      	ldr	r3, [pc, #12]	; (d910c <hal_ble_gap_disconnect+0x10>)
   d9100:	681b      	ldr	r3, [r3, #0]
   d9102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d9106:	9301      	str	r3, [sp, #4]
   d9108:	bd08      	pop	{r3, pc}
   d910a:	0000      	.short	0x0000
   d910c:	00030278 	.word	0x00030278

000d9110 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d9110:	b508      	push	{r3, lr}
   d9112:	4b03      	ldr	r3, [pc, #12]	; (d9120 <hal_ble_gatt_server_add_service+0x10>)
   d9114:	681b      	ldr	r3, [r3, #0]
   d9116:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d911a:	9301      	str	r3, [sp, #4]
   d911c:	bd08      	pop	{r3, pc}
   d911e:	0000      	.short	0x0000
   d9120:	00030278 	.word	0x00030278

000d9124 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d9124:	b508      	push	{r3, lr}
   d9126:	4b03      	ldr	r3, [pc, #12]	; (d9134 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d9128:	681b      	ldr	r3, [r3, #0]
   d912a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d912e:	9301      	str	r3, [sp, #4]
   d9130:	bd08      	pop	{r3, pc}
   d9132:	0000      	.short	0x0000
   d9134:	00030278 	.word	0x00030278

000d9138 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d9138:	b508      	push	{r3, lr}
   d913a:	4b03      	ldr	r3, [pc, #12]	; (d9148 <hal_ble_gatt_client_write_with_response+0x10>)
   d913c:	681b      	ldr	r3, [r3, #0]
   d913e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d9142:	9301      	str	r3, [sp, #4]
   d9144:	bd08      	pop	{r3, pc}
   d9146:	0000      	.short	0x0000
   d9148:	00030278 	.word	0x00030278

000d914c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d914c:	b508      	push	{r3, lr}
   d914e:	4b03      	ldr	r3, [pc, #12]	; (d915c <hal_ble_gatt_client_write_without_response+0x10>)
   d9150:	681b      	ldr	r3, [r3, #0]
   d9152:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d9156:	9301      	str	r3, [sp, #4]
   d9158:	bd08      	pop	{r3, pc}
   d915a:	0000      	.short	0x0000
   d915c:	00030278 	.word	0x00030278

000d9160 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d9160:	b508      	push	{r3, lr}
   d9162:	4b03      	ldr	r3, [pc, #12]	; (d9170 <hal_ble_gatt_server_add_characteristic+0x10>)
   d9164:	681b      	ldr	r3, [r3, #0]
   d9166:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d916a:	9301      	str	r3, [sp, #4]
   d916c:	bd08      	pop	{r3, pc}
   d916e:	0000      	.short	0x0000
   d9170:	00030278 	.word	0x00030278

000d9174 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d9174:	b508      	push	{r3, lr}
   d9176:	4b03      	ldr	r3, [pc, #12]	; (d9184 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d9178:	681b      	ldr	r3, [r3, #0]
   d917a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d917e:	9301      	str	r3, [sp, #4]
   d9180:	bd08      	pop	{r3, pc}
   d9182:	0000      	.short	0x0000
   d9184:	00030278 	.word	0x00030278

000d9188 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d9188:	b508      	push	{r3, lr}
   d918a:	4b03      	ldr	r3, [pc, #12]	; (d9198 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d918c:	681b      	ldr	r3, [r3, #0]
   d918e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d9192:	9301      	str	r3, [sp, #4]
   d9194:	bd08      	pop	{r3, pc}
   d9196:	0000      	.short	0x0000
   d9198:	00030278 	.word	0x00030278

000d919c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d919c:	b508      	push	{r3, lr}
   d919e:	4b03      	ldr	r3, [pc, #12]	; (d91ac <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d91a0:	681b      	ldr	r3, [r3, #0]
   d91a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d91a6:	9301      	str	r3, [sp, #4]
   d91a8:	bd08      	pop	{r3, pc}
   d91aa:	0000      	.short	0x0000
   d91ac:	00030278 	.word	0x00030278

000d91b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d91b0:	b508      	push	{r3, lr}
   d91b2:	4b02      	ldr	r3, [pc, #8]	; (d91bc <os_mutex_recursive_create+0xc>)
   d91b4:	681b      	ldr	r3, [r3, #0]
   d91b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d91b8:	9301      	str	r3, [sp, #4]
   d91ba:	bd08      	pop	{r3, pc}
   d91bc:	00030248 	.word	0x00030248

000d91c0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d91c0:	b508      	push	{r3, lr}
   d91c2:	4b02      	ldr	r3, [pc, #8]	; (d91cc <os_mutex_recursive_destroy+0xc>)
   d91c4:	681b      	ldr	r3, [r3, #0]
   d91c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d91c8:	9301      	str	r3, [sp, #4]
   d91ca:	bd08      	pop	{r3, pc}
   d91cc:	00030248 	.word	0x00030248

000d91d0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d91d0:	b508      	push	{r3, lr}
   d91d2:	4b02      	ldr	r3, [pc, #8]	; (d91dc <os_mutex_recursive_lock+0xc>)
   d91d4:	681b      	ldr	r3, [r3, #0]
   d91d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d91d8:	9301      	str	r3, [sp, #4]
   d91da:	bd08      	pop	{r3, pc}
   d91dc:	00030248 	.word	0x00030248

000d91e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d91e0:	b508      	push	{r3, lr}
   d91e2:	4b02      	ldr	r3, [pc, #8]	; (d91ec <os_mutex_recursive_unlock+0xc>)
   d91e4:	681b      	ldr	r3, [r3, #0]
   d91e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d91e8:	9301      	str	r3, [sp, #4]
   d91ea:	bd08      	pop	{r3, pc}
   d91ec:	00030248 	.word	0x00030248

000d91f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d91f0:	b508      	push	{r3, lr}
   d91f2:	4b02      	ldr	r3, [pc, #8]	; (d91fc <inet_inet_ntop+0xc>)
   d91f4:	681b      	ldr	r3, [r3, #0]
   d91f6:	695b      	ldr	r3, [r3, #20]
   d91f8:	9301      	str	r3, [sp, #4]
   d91fa:	bd08      	pop	{r3, pc}
   d91fc:	00030264 	.word	0x00030264

000d9200 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d9200:	b508      	push	{r3, lr}
   d9202:	4b02      	ldr	r3, [pc, #8]	; (d920c <hal_usart_init+0xc>)
   d9204:	681b      	ldr	r3, [r3, #0]
   d9206:	681b      	ldr	r3, [r3, #0]
   d9208:	9301      	str	r3, [sp, #4]
   d920a:	bd08      	pop	{r3, pc}
   d920c:	0003023c 	.word	0x0003023c

000d9210 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d9210:	b508      	push	{r3, lr}
   d9212:	4b02      	ldr	r3, [pc, #8]	; (d921c <hal_usart_write+0xc>)
   d9214:	681b      	ldr	r3, [r3, #0]
   d9216:	68db      	ldr	r3, [r3, #12]
   d9218:	9301      	str	r3, [sp, #4]
   d921a:	bd08      	pop	{r3, pc}
   d921c:	0003023c 	.word	0x0003023c

000d9220 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d9220:	b508      	push	{r3, lr}
   d9222:	4b02      	ldr	r3, [pc, #8]	; (d922c <hal_usart_available+0xc>)
   d9224:	681b      	ldr	r3, [r3, #0]
   d9226:	691b      	ldr	r3, [r3, #16]
   d9228:	9301      	str	r3, [sp, #4]
   d922a:	bd08      	pop	{r3, pc}
   d922c:	0003023c 	.word	0x0003023c

000d9230 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d9230:	b508      	push	{r3, lr}
   d9232:	4b02      	ldr	r3, [pc, #8]	; (d923c <hal_usart_read+0xc>)
   d9234:	681b      	ldr	r3, [r3, #0]
   d9236:	695b      	ldr	r3, [r3, #20]
   d9238:	9301      	str	r3, [sp, #4]
   d923a:	bd08      	pop	{r3, pc}
   d923c:	0003023c 	.word	0x0003023c

000d9240 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d9240:	b508      	push	{r3, lr}
   d9242:	4b02      	ldr	r3, [pc, #8]	; (d924c <hal_usart_peek+0xc>)
   d9244:	681b      	ldr	r3, [r3, #0]
   d9246:	699b      	ldr	r3, [r3, #24]
   d9248:	9301      	str	r3, [sp, #4]
   d924a:	bd08      	pop	{r3, pc}
   d924c:	0003023c 	.word	0x0003023c

000d9250 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d9250:	b508      	push	{r3, lr}
   d9252:	4b02      	ldr	r3, [pc, #8]	; (d925c <hal_usart_flush+0xc>)
   d9254:	681b      	ldr	r3, [r3, #0]
   d9256:	69db      	ldr	r3, [r3, #28]
   d9258:	9301      	str	r3, [sp, #4]
   d925a:	bd08      	pop	{r3, pc}
   d925c:	0003023c 	.word	0x0003023c

000d9260 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d9260:	b508      	push	{r3, lr}
   d9262:	4b02      	ldr	r3, [pc, #8]	; (d926c <hal_usart_is_enabled+0xc>)
   d9264:	681b      	ldr	r3, [r3, #0]
   d9266:	6a1b      	ldr	r3, [r3, #32]
   d9268:	9301      	str	r3, [sp, #4]
   d926a:	bd08      	pop	{r3, pc}
   d926c:	0003023c 	.word	0x0003023c

000d9270 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d9270:	b508      	push	{r3, lr}
   d9272:	4b02      	ldr	r3, [pc, #8]	; (d927c <hal_usart_available_data_for_write+0xc>)
   d9274:	681b      	ldr	r3, [r3, #0]
   d9276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9278:	9301      	str	r3, [sp, #4]
   d927a:	bd08      	pop	{r3, pc}
   d927c:	0003023c 	.word	0x0003023c

000d9280 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d9280:	b508      	push	{r3, lr}
   d9282:	4b02      	ldr	r3, [pc, #8]	; (d928c <hal_i2c_begin+0xc>)
   d9284:	681b      	ldr	r3, [r3, #0]
   d9286:	68db      	ldr	r3, [r3, #12]
   d9288:	9301      	str	r3, [sp, #4]
   d928a:	bd08      	pop	{r3, pc}
   d928c:	00030228 	.word	0x00030228

000d9290 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d9290:	b508      	push	{r3, lr}
   d9292:	4b02      	ldr	r3, [pc, #8]	; (d929c <hal_i2c_begin_transmission+0xc>)
   d9294:	681b      	ldr	r3, [r3, #0]
   d9296:	699b      	ldr	r3, [r3, #24]
   d9298:	9301      	str	r3, [sp, #4]
   d929a:	bd08      	pop	{r3, pc}
   d929c:	00030228 	.word	0x00030228

000d92a0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d92a0:	b508      	push	{r3, lr}
   d92a2:	4b02      	ldr	r3, [pc, #8]	; (d92ac <hal_i2c_end_transmission+0xc>)
   d92a4:	681b      	ldr	r3, [r3, #0]
   d92a6:	69db      	ldr	r3, [r3, #28]
   d92a8:	9301      	str	r3, [sp, #4]
   d92aa:	bd08      	pop	{r3, pc}
   d92ac:	00030228 	.word	0x00030228

000d92b0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d92b0:	b508      	push	{r3, lr}
   d92b2:	4b02      	ldr	r3, [pc, #8]	; (d92bc <hal_i2c_write+0xc>)
   d92b4:	681b      	ldr	r3, [r3, #0]
   d92b6:	6a1b      	ldr	r3, [r3, #32]
   d92b8:	9301      	str	r3, [sp, #4]
   d92ba:	bd08      	pop	{r3, pc}
   d92bc:	00030228 	.word	0x00030228

000d92c0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d92c0:	b508      	push	{r3, lr}
   d92c2:	4b02      	ldr	r3, [pc, #8]	; (d92cc <hal_i2c_available+0xc>)
   d92c4:	681b      	ldr	r3, [r3, #0]
   d92c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d92c8:	9301      	str	r3, [sp, #4]
   d92ca:	bd08      	pop	{r3, pc}
   d92cc:	00030228 	.word	0x00030228

000d92d0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d92d0:	b508      	push	{r3, lr}
   d92d2:	4b02      	ldr	r3, [pc, #8]	; (d92dc <hal_i2c_read+0xc>)
   d92d4:	681b      	ldr	r3, [r3, #0]
   d92d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d92d8:	9301      	str	r3, [sp, #4]
   d92da:	bd08      	pop	{r3, pc}
   d92dc:	00030228 	.word	0x00030228

000d92e0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d92e0:	b508      	push	{r3, lr}
   d92e2:	4b02      	ldr	r3, [pc, #8]	; (d92ec <hal_i2c_peek+0xc>)
   d92e4:	681b      	ldr	r3, [r3, #0]
   d92e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d92e8:	9301      	str	r3, [sp, #4]
   d92ea:	bd08      	pop	{r3, pc}
   d92ec:	00030228 	.word	0x00030228

000d92f0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d92f0:	b508      	push	{r3, lr}
   d92f2:	4b02      	ldr	r3, [pc, #8]	; (d92fc <hal_i2c_flush+0xc>)
   d92f4:	681b      	ldr	r3, [r3, #0]
   d92f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d92f8:	9301      	str	r3, [sp, #4]
   d92fa:	bd08      	pop	{r3, pc}
   d92fc:	00030228 	.word	0x00030228

000d9300 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d9300:	b508      	push	{r3, lr}
   d9302:	4b02      	ldr	r3, [pc, #8]	; (d930c <hal_i2c_is_enabled+0xc>)
   d9304:	681b      	ldr	r3, [r3, #0]
   d9306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9308:	9301      	str	r3, [sp, #4]
   d930a:	bd08      	pop	{r3, pc}
   d930c:	00030228 	.word	0x00030228

000d9310 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d9310:	b508      	push	{r3, lr}
   d9312:	4b02      	ldr	r3, [pc, #8]	; (d931c <hal_i2c_init+0xc>)
   d9314:	681b      	ldr	r3, [r3, #0]
   d9316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9318:	9301      	str	r3, [sp, #4]
   d931a:	bd08      	pop	{r3, pc}
   d931c:	00030228 	.word	0x00030228

000d9320 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d9320:	b508      	push	{r3, lr}
   d9322:	4b02      	ldr	r3, [pc, #8]	; (d932c <hal_i2c_lock+0xc>)
   d9324:	681b      	ldr	r3, [r3, #0]
   d9326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9328:	9301      	str	r3, [sp, #4]
   d932a:	bd08      	pop	{r3, pc}
   d932c:	00030228 	.word	0x00030228

000d9330 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d9330:	b508      	push	{r3, lr}
   d9332:	4b02      	ldr	r3, [pc, #8]	; (d933c <hal_i2c_unlock+0xc>)
   d9334:	681b      	ldr	r3, [r3, #0]
   d9336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9338:	9301      	str	r3, [sp, #4]
   d933a:	bd08      	pop	{r3, pc}
   d933c:	00030228 	.word	0x00030228

000d9340 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d9340:	b508      	push	{r3, lr}
   d9342:	4b02      	ldr	r3, [pc, #8]	; (d934c <hal_i2c_request_ex+0xc>)
   d9344:	681b      	ldr	r3, [r3, #0]
   d9346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d9348:	9301      	str	r3, [sp, #4]
   d934a:	bd08      	pop	{r3, pc}
   d934c:	00030228 	.word	0x00030228

000d9350 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d9350:	b508      	push	{r3, lr}
   d9352:	4b02      	ldr	r3, [pc, #8]	; (d935c <hal_spi_begin+0xc>)
   d9354:	681b      	ldr	r3, [r3, #0]
   d9356:	681b      	ldr	r3, [r3, #0]
   d9358:	9301      	str	r3, [sp, #4]
   d935a:	bd08      	pop	{r3, pc}
   d935c:	00030230 	.word	0x00030230

000d9360 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d9360:	b508      	push	{r3, lr}
   d9362:	4b02      	ldr	r3, [pc, #8]	; (d936c <hal_spi_transfer+0xc>)
   d9364:	681b      	ldr	r3, [r3, #0]
   d9366:	695b      	ldr	r3, [r3, #20]
   d9368:	9301      	str	r3, [sp, #4]
   d936a:	bd08      	pop	{r3, pc}
   d936c:	00030230 	.word	0x00030230

000d9370 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d9370:	b508      	push	{r3, lr}
   d9372:	4b02      	ldr	r3, [pc, #8]	; (d937c <hal_spi_init+0xc>)
   d9374:	681b      	ldr	r3, [r3, #0]
   d9376:	69db      	ldr	r3, [r3, #28]
   d9378:	9301      	str	r3, [sp, #4]
   d937a:	bd08      	pop	{r3, pc}
   d937c:	00030230 	.word	0x00030230

000d9380 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d9380:	b508      	push	{r3, lr}
   d9382:	4b02      	ldr	r3, [pc, #8]	; (d938c <hal_spi_is_enabled+0xc>)
   d9384:	681b      	ldr	r3, [r3, #0]
   d9386:	6a1b      	ldr	r3, [r3, #32]
   d9388:	9301      	str	r3, [sp, #4]
   d938a:	bd08      	pop	{r3, pc}
   d938c:	00030230 	.word	0x00030230

000d9390 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d9390:	b508      	push	{r3, lr}
   d9392:	4b02      	ldr	r3, [pc, #8]	; (d939c <hal_spi_info+0xc>)
   d9394:	681b      	ldr	r3, [r3, #0]
   d9396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9398:	9301      	str	r3, [sp, #4]
   d939a:	bd08      	pop	{r3, pc}
   d939c:	00030230 	.word	0x00030230

000d93a0 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d93a0:	b508      	push	{r3, lr}
   d93a2:	4b02      	ldr	r3, [pc, #8]	; (d93ac <hal_spi_transfer_dma+0xc>)
   d93a4:	681b      	ldr	r3, [r3, #0]
   d93a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d93a8:	9301      	str	r3, [sp, #4]
   d93aa:	bd08      	pop	{r3, pc}
   d93ac:	00030230 	.word	0x00030230

000d93b0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d93b0:	b508      	push	{r3, lr}
   d93b2:	4b02      	ldr	r3, [pc, #8]	; (d93bc <hal_spi_transfer_dma_status+0xc>)
   d93b4:	681b      	ldr	r3, [r3, #0]
   d93b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d93b8:	9301      	str	r3, [sp, #4]
   d93ba:	bd08      	pop	{r3, pc}
   d93bc:	00030230 	.word	0x00030230

000d93c0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d93c0:	b508      	push	{r3, lr}
   d93c2:	4b02      	ldr	r3, [pc, #8]	; (d93cc <hal_spi_set_settings+0xc>)
   d93c4:	681b      	ldr	r3, [r3, #0]
   d93c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d93c8:	9301      	str	r3, [sp, #4]
   d93ca:	bd08      	pop	{r3, pc}
   d93cc:	00030230 	.word	0x00030230

000d93d0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d93d0:	b508      	push	{r3, lr}
   d93d2:	4b02      	ldr	r3, [pc, #8]	; (d93dc <hal_spi_acquire+0xc>)
   d93d4:	681b      	ldr	r3, [r3, #0]
   d93d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d93d8:	9301      	str	r3, [sp, #4]
   d93da:	bd08      	pop	{r3, pc}
   d93dc:	00030230 	.word	0x00030230

000d93e0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d93e0:	b508      	push	{r3, lr}
   d93e2:	4b02      	ldr	r3, [pc, #8]	; (d93ec <hal_spi_release+0xc>)
   d93e4:	681b      	ldr	r3, [r3, #0]
   d93e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d93e8:	9301      	str	r3, [sp, #4]
   d93ea:	bd08      	pop	{r3, pc}
   d93ec:	00030230 	.word	0x00030230

000d93f0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d93f0:	b508      	push	{r3, lr}
   d93f2:	4b02      	ldr	r3, [pc, #8]	; (d93fc <cellular_signal+0xc>)
   d93f4:	681b      	ldr	r3, [r3, #0]
   d93f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d93f8:	9301      	str	r3, [sp, #4]
   d93fa:	bd08      	pop	{r3, pc}
   d93fc:	00030274 	.word	0x00030274

000d9400 <cellular_set_active_sim>:
#if !HAL_PLATFORM_NCP
DYNALIB_FN(34, hal_cellular, cellular_connect, cellular_result_t(void*))
DYNALIB_FN(35, hal_cellular, cellular_disconnect, cellular_result_t(void*))
#define BASE_CELL_IDX 36 // Base index for all subsequent functions
#else // HAL_PLATFORM_NCP
DYNALIB_FN(34, hal_cellular, cellular_set_active_sim, cellular_result_t(int, void*))
   d9400:	b508      	push	{r3, lr}
   d9402:	4b03      	ldr	r3, [pc, #12]	; (d9410 <cellular_set_active_sim+0x10>)
   d9404:	681b      	ldr	r3, [r3, #0]
   d9406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d940a:	9301      	str	r3, [sp, #4]
   d940c:	bd08      	pop	{r3, pc}
   d940e:	0000      	.short	0x0000
   d9410:	00030274 	.word	0x00030274

000d9414 <cellular_credentials_clear>:
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
   d9414:	b508      	push	{r3, lr}
   d9416:	4b03      	ldr	r3, [pc, #12]	; (d9424 <cellular_credentials_clear+0x10>)
   d9418:	681b      	ldr	r3, [r3, #0]
   d941a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   d941e:	9301      	str	r3, [sp, #4]
   d9420:	bd08      	pop	{r3, pc}
   d9422:	0000      	.short	0x0000
   d9424:	00030274 	.word	0x00030274

000d9428 <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d9428:	b508      	push	{r3, lr}
   d942a:	4b02      	ldr	r3, [pc, #8]	; (d9434 <dct_write_app_data+0xc>)
   d942c:	681b      	ldr	r3, [r3, #0]
   d942e:	685b      	ldr	r3, [r3, #4]
   d9430:	9301      	str	r3, [sp, #4]
   d9432:	bd08      	pop	{r3, pc}
   d9434:	00030258 	.word	0x00030258

000d9438 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d9438:	b508      	push	{r3, lr}
   d943a:	4b02      	ldr	r3, [pc, #8]	; (d9444 <HAL_USB_USART_Init+0xc>)
   d943c:	681b      	ldr	r3, [r3, #0]
   d943e:	681b      	ldr	r3, [r3, #0]
   d9440:	9301      	str	r3, [sp, #4]
   d9442:	bd08      	pop	{r3, pc}
   d9444:	0003024c 	.word	0x0003024c

000d9448 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d9448:	b508      	push	{r3, lr}
   d944a:	4b02      	ldr	r3, [pc, #8]	; (d9454 <HAL_USB_USART_Available_Data+0xc>)
   d944c:	681b      	ldr	r3, [r3, #0]
   d944e:	691b      	ldr	r3, [r3, #16]
   d9450:	9301      	str	r3, [sp, #4]
   d9452:	bd08      	pop	{r3, pc}
   d9454:	0003024c 	.word	0x0003024c

000d9458 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d9458:	b508      	push	{r3, lr}
   d945a:	4b02      	ldr	r3, [pc, #8]	; (d9464 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d945c:	681b      	ldr	r3, [r3, #0]
   d945e:	695b      	ldr	r3, [r3, #20]
   d9460:	9301      	str	r3, [sp, #4]
   d9462:	bd08      	pop	{r3, pc}
   d9464:	0003024c 	.word	0x0003024c

000d9468 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9468:	b508      	push	{r3, lr}
   d946a:	4b02      	ldr	r3, [pc, #8]	; (d9474 <HAL_USB_USART_Receive_Data+0xc>)
   d946c:	681b      	ldr	r3, [r3, #0]
   d946e:	699b      	ldr	r3, [r3, #24]
   d9470:	9301      	str	r3, [sp, #4]
   d9472:	bd08      	pop	{r3, pc}
   d9474:	0003024c 	.word	0x0003024c

000d9478 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9478:	b508      	push	{r3, lr}
   d947a:	4b02      	ldr	r3, [pc, #8]	; (d9484 <HAL_USB_USART_Send_Data+0xc>)
   d947c:	681b      	ldr	r3, [r3, #0]
   d947e:	69db      	ldr	r3, [r3, #28]
   d9480:	9301      	str	r3, [sp, #4]
   d9482:	bd08      	pop	{r3, pc}
   d9484:	0003024c 	.word	0x0003024c

000d9488 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d9488:	b508      	push	{r3, lr}
   d948a:	4b02      	ldr	r3, [pc, #8]	; (d9494 <HAL_USB_USART_Flush_Data+0xc>)
   d948c:	681b      	ldr	r3, [r3, #0]
   d948e:	6a1b      	ldr	r3, [r3, #32]
   d9490:	9301      	str	r3, [sp, #4]
   d9492:	bd08      	pop	{r3, pc}
   d9494:	0003024c 	.word	0x0003024c

000d9498 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d9498:	b508      	push	{r3, lr}
   d949a:	4b02      	ldr	r3, [pc, #8]	; (d94a4 <panic_+0xc>)
   d949c:	681b      	ldr	r3, [r3, #0]
   d949e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d94a0:	9301      	str	r3, [sp, #4]
   d94a2:	bd08      	pop	{r3, pc}
   d94a4:	00030260 	.word	0x00030260

000d94a8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d94a8:	b508      	push	{r3, lr}
   d94aa:	4b02      	ldr	r3, [pc, #8]	; (d94b4 <log_message+0xc>)
   d94ac:	681b      	ldr	r3, [r3, #0]
   d94ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d94b0:	9301      	str	r3, [sp, #4]
   d94b2:	bd08      	pop	{r3, pc}
   d94b4:	00030260 	.word	0x00030260

000d94b8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d94b8:	b508      	push	{r3, lr}
   d94ba:	4b03      	ldr	r3, [pc, #12]	; (d94c8 <diag_get_source+0x10>)
   d94bc:	681b      	ldr	r3, [r3, #0]
   d94be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d94c2:	9301      	str	r3, [sp, #4]
   d94c4:	bd08      	pop	{r3, pc}
   d94c6:	0000      	.short	0x0000
   d94c8:	00030260 	.word	0x00030260

000d94cc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d94cc:	b508      	push	{r3, lr}
   d94ce:	4b02      	ldr	r3, [pc, #8]	; (d94d8 <system_mode+0xc>)
   d94d0:	681b      	ldr	r3, [r3, #0]
   d94d2:	681b      	ldr	r3, [r3, #0]
   d94d4:	9301      	str	r3, [sp, #4]
   d94d6:	bd08      	pop	{r3, pc}
   d94d8:	00030220 	.word	0x00030220

000d94dc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d94dc:	b508      	push	{r3, lr}
   d94de:	4b02      	ldr	r3, [pc, #8]	; (d94e8 <set_system_mode+0xc>)
   d94e0:	681b      	ldr	r3, [r3, #0]
   d94e2:	685b      	ldr	r3, [r3, #4]
   d94e4:	9301      	str	r3, [sp, #4]
   d94e6:	bd08      	pop	{r3, pc}
   d94e8:	00030220 	.word	0x00030220

000d94ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d94ec:	b508      	push	{r3, lr}
   d94ee:	4b02      	ldr	r3, [pc, #8]	; (d94f8 <system_delay_ms+0xc>)
   d94f0:	681b      	ldr	r3, [r3, #0]
   d94f2:	695b      	ldr	r3, [r3, #20]
   d94f4:	9301      	str	r3, [sp, #4]
   d94f6:	bd08      	pop	{r3, pc}
   d94f8:	00030220 	.word	0x00030220

000d94fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d94fc:	b508      	push	{r3, lr}
   d94fe:	4b02      	ldr	r3, [pc, #8]	; (d9508 <system_thread_set_state+0xc>)
   d9500:	681b      	ldr	r3, [r3, #0]
   d9502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9504:	9301      	str	r3, [sp, #4]
   d9506:	bd08      	pop	{r3, pc}
   d9508:	00030220 	.word	0x00030220

000d950c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d950c:	b508      	push	{r3, lr}
   d950e:	4b02      	ldr	r3, [pc, #8]	; (d9518 <application_thread_current+0xc>)
   d9510:	681b      	ldr	r3, [r3, #0]
   d9512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9514:	9301      	str	r3, [sp, #4]
   d9516:	bd08      	pop	{r3, pc}
   d9518:	00030220 	.word	0x00030220

000d951c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d951c:	b508      	push	{r3, lr}
   d951e:	4b02      	ldr	r3, [pc, #8]	; (d9528 <application_thread_invoke+0xc>)
   d9520:	681b      	ldr	r3, [r3, #0]
   d9522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d9524:	9301      	str	r3, [sp, #4]
   d9526:	bd08      	pop	{r3, pc}
   d9528:	00030220 	.word	0x00030220

000d952c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d952c:	b508      	push	{r3, lr}
   d952e:	4b02      	ldr	r3, [pc, #8]	; (d9538 <system_thread_get_state+0xc>)
   d9530:	681b      	ldr	r3, [r3, #0]
   d9532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9534:	9301      	str	r3, [sp, #4]
   d9536:	bd08      	pop	{r3, pc}
   d9538:	00030220 	.word	0x00030220

000d953c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d953c:	b508      	push	{r3, lr}
   d953e:	4b03      	ldr	r3, [pc, #12]	; (d954c <system_ctrl_set_app_request_handler+0x10>)
   d9540:	681b      	ldr	r3, [r3, #0]
   d9542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d9546:	9301      	str	r3, [sp, #4]
   d9548:	bd08      	pop	{r3, pc}
   d954a:	0000      	.short	0x0000
   d954c:	00030220 	.word	0x00030220

000d9550 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d9550:	b508      	push	{r3, lr}
   d9552:	4b03      	ldr	r3, [pc, #12]	; (d9560 <system_ctrl_set_result+0x10>)
   d9554:	681b      	ldr	r3, [r3, #0]
   d9556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d955a:	9301      	str	r3, [sp, #4]
   d955c:	bd08      	pop	{r3, pc}
   d955e:	0000      	.short	0x0000
   d9560:	00030220 	.word	0x00030220

000d9564 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d9564:	b508      	push	{r3, lr}
   d9566:	4b02      	ldr	r3, [pc, #8]	; (d9570 <network_connect+0xc>)
   d9568:	681b      	ldr	r3, [r3, #0]
   d956a:	685b      	ldr	r3, [r3, #4]
   d956c:	9301      	str	r3, [sp, #4]
   d956e:	bd08      	pop	{r3, pc}
   d9570:	00030240 	.word	0x00030240

000d9574 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d9574:	b508      	push	{r3, lr}
   d9576:	4b02      	ldr	r3, [pc, #8]	; (d9580 <network_connecting+0xc>)
   d9578:	681b      	ldr	r3, [r3, #0]
   d957a:	689b      	ldr	r3, [r3, #8]
   d957c:	9301      	str	r3, [sp, #4]
   d957e:	bd08      	pop	{r3, pc}
   d9580:	00030240 	.word	0x00030240

000d9584 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d9584:	b508      	push	{r3, lr}
   d9586:	4b02      	ldr	r3, [pc, #8]	; (d9590 <network_disconnect+0xc>)
   d9588:	681b      	ldr	r3, [r3, #0]
   d958a:	68db      	ldr	r3, [r3, #12]
   d958c:	9301      	str	r3, [sp, #4]
   d958e:	bd08      	pop	{r3, pc}
   d9590:	00030240 	.word	0x00030240

000d9594 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d9594:	b508      	push	{r3, lr}
   d9596:	4b02      	ldr	r3, [pc, #8]	; (d95a0 <network_ready+0xc>)
   d9598:	681b      	ldr	r3, [r3, #0]
   d959a:	691b      	ldr	r3, [r3, #16]
   d959c:	9301      	str	r3, [sp, #4]
   d959e:	bd08      	pop	{r3, pc}
   d95a0:	00030240 	.word	0x00030240

000d95a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d95a4:	b508      	push	{r3, lr}
   d95a6:	4b02      	ldr	r3, [pc, #8]	; (d95b0 <network_on+0xc>)
   d95a8:	681b      	ldr	r3, [r3, #0]
   d95aa:	695b      	ldr	r3, [r3, #20]
   d95ac:	9301      	str	r3, [sp, #4]
   d95ae:	bd08      	pop	{r3, pc}
   d95b0:	00030240 	.word	0x00030240

000d95b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d95b4:	b508      	push	{r3, lr}
   d95b6:	4b02      	ldr	r3, [pc, #8]	; (d95c0 <network_off+0xc>)
   d95b8:	681b      	ldr	r3, [r3, #0]
   d95ba:	699b      	ldr	r3, [r3, #24]
   d95bc:	9301      	str	r3, [sp, #4]
   d95be:	bd08      	pop	{r3, pc}
   d95c0:	00030240 	.word	0x00030240

000d95c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d95c4:	b508      	push	{r3, lr}
   d95c6:	4b02      	ldr	r3, [pc, #8]	; (d95d0 <network_listen+0xc>)
   d95c8:	681b      	ldr	r3, [r3, #0]
   d95ca:	69db      	ldr	r3, [r3, #28]
   d95cc:	9301      	str	r3, [sp, #4]
   d95ce:	bd08      	pop	{r3, pc}
   d95d0:	00030240 	.word	0x00030240

000d95d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d95d4:	b508      	push	{r3, lr}
   d95d6:	4b02      	ldr	r3, [pc, #8]	; (d95e0 <network_listening+0xc>)
   d95d8:	681b      	ldr	r3, [r3, #0]
   d95da:	6a1b      	ldr	r3, [r3, #32]
   d95dc:	9301      	str	r3, [sp, #4]
   d95de:	bd08      	pop	{r3, pc}
   d95e0:	00030240 	.word	0x00030240

000d95e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d95e4:	b508      	push	{r3, lr}
   d95e6:	4b02      	ldr	r3, [pc, #8]	; (d95f0 <network_set_listen_timeout+0xc>)
   d95e8:	681b      	ldr	r3, [r3, #0]
   d95ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d95ec:	9301      	str	r3, [sp, #4]
   d95ee:	bd08      	pop	{r3, pc}
   d95f0:	00030240 	.word	0x00030240

000d95f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d95f4:	b508      	push	{r3, lr}
   d95f6:	4b02      	ldr	r3, [pc, #8]	; (d9600 <network_get_listen_timeout+0xc>)
   d95f8:	681b      	ldr	r3, [r3, #0]
   d95fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d95fc:	9301      	str	r3, [sp, #4]
   d95fe:	bd08      	pop	{r3, pc}
   d9600:	00030240 	.word	0x00030240

000d9604 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d9604:	b508      	push	{r3, lr}
   d9606:	4b02      	ldr	r3, [pc, #8]	; (d9610 <spark_variable+0xc>)
   d9608:	681b      	ldr	r3, [r3, #0]
   d960a:	681b      	ldr	r3, [r3, #0]
   d960c:	9301      	str	r3, [sp, #4]
   d960e:	bd08      	pop	{r3, pc}
   d9610:	00030244 	.word	0x00030244

000d9614 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d9614:	b508      	push	{r3, lr}
   d9616:	4b02      	ldr	r3, [pc, #8]	; (d9620 <spark_function+0xc>)
   d9618:	681b      	ldr	r3, [r3, #0]
   d961a:	685b      	ldr	r3, [r3, #4]
   d961c:	9301      	str	r3, [sp, #4]
   d961e:	bd08      	pop	{r3, pc}
   d9620:	00030244 	.word	0x00030244

000d9624 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d9624:	b508      	push	{r3, lr}
   d9626:	4b02      	ldr	r3, [pc, #8]	; (d9630 <spark_process+0xc>)
   d9628:	681b      	ldr	r3, [r3, #0]
   d962a:	689b      	ldr	r3, [r3, #8]
   d962c:	9301      	str	r3, [sp, #4]
   d962e:	bd08      	pop	{r3, pc}
   d9630:	00030244 	.word	0x00030244

000d9634 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d9634:	b508      	push	{r3, lr}
   d9636:	4b02      	ldr	r3, [pc, #8]	; (d9640 <spark_cloud_flag_connect+0xc>)
   d9638:	681b      	ldr	r3, [r3, #0]
   d963a:	68db      	ldr	r3, [r3, #12]
   d963c:	9301      	str	r3, [sp, #4]
   d963e:	bd08      	pop	{r3, pc}
   d9640:	00030244 	.word	0x00030244

000d9644 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d9644:	b508      	push	{r3, lr}
   d9646:	4b02      	ldr	r3, [pc, #8]	; (d9650 <spark_cloud_flag_connected+0xc>)
   d9648:	681b      	ldr	r3, [r3, #0]
   d964a:	695b      	ldr	r3, [r3, #20]
   d964c:	9301      	str	r3, [sp, #4]
   d964e:	bd08      	pop	{r3, pc}
   d9650:	00030244 	.word	0x00030244

000d9654 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d9654:	b508      	push	{r3, lr}
   d9656:	4b02      	ldr	r3, [pc, #8]	; (d9660 <spark_deviceID+0xc>)
   d9658:	681b      	ldr	r3, [r3, #0]
   d965a:	69db      	ldr	r3, [r3, #28]
   d965c:	9301      	str	r3, [sp, #4]
   d965e:	bd08      	pop	{r3, pc}
   d9660:	00030244 	.word	0x00030244

000d9664 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d9664:	b508      	push	{r3, lr}
   d9666:	4b02      	ldr	r3, [pc, #8]	; (d9670 <spark_send_event+0xc>)
   d9668:	681b      	ldr	r3, [r3, #0]
   d966a:	6a1b      	ldr	r3, [r3, #32]
   d966c:	9301      	str	r3, [sp, #4]
   d966e:	bd08      	pop	{r3, pc}
   d9670:	00030244 	.word	0x00030244

000d9674 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d9674:	b508      	push	{r3, lr}
   d9676:	4b02      	ldr	r3, [pc, #8]	; (d9680 <spark_sync_time+0xc>)
   d9678:	681b      	ldr	r3, [r3, #0]
   d967a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d967c:	9301      	str	r3, [sp, #4]
   d967e:	bd08      	pop	{r3, pc}
   d9680:	00030244 	.word	0x00030244

000d9684 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d9684:	b508      	push	{r3, lr}
   d9686:	4b02      	ldr	r3, [pc, #8]	; (d9690 <spark_sync_time_pending+0xc>)
   d9688:	681b      	ldr	r3, [r3, #0]
   d968a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d968c:	9301      	str	r3, [sp, #4]
   d968e:	bd08      	pop	{r3, pc}
   d9690:	00030244 	.word	0x00030244

000d9694 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d9694:	b508      	push	{r3, lr}
   d9696:	4b02      	ldr	r3, [pc, #8]	; (d96a0 <spark_sync_time_last+0xc>)
   d9698:	681b      	ldr	r3, [r3, #0]
   d969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d969c:	9301      	str	r3, [sp, #4]
   d969e:	bd08      	pop	{r3, pc}
   d96a0:	00030244 	.word	0x00030244

000d96a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d96a4:	b508      	push	{r3, lr}
   d96a6:	4b02      	ldr	r3, [pc, #8]	; (d96b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d96a8:	681b      	ldr	r3, [r3, #0]
   d96aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d96ac:	9301      	str	r3, [sp, #4]
   d96ae:	bd08      	pop	{r3, pc}
   d96b0:	00030244 	.word	0x00030244

000d96b4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d96b4:	b508      	push	{r3, lr}
   d96b6:	4b02      	ldr	r3, [pc, #8]	; (d96c0 <malloc+0xc>)
   d96b8:	681b      	ldr	r3, [r3, #0]
   d96ba:	681b      	ldr	r3, [r3, #0]
   d96bc:	9301      	str	r3, [sp, #4]
   d96be:	bd08      	pop	{r3, pc}
   d96c0:	0003021c 	.word	0x0003021c

000d96c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d96c4:	b508      	push	{r3, lr}
   d96c6:	4b02      	ldr	r3, [pc, #8]	; (d96d0 <free+0xc>)
   d96c8:	681b      	ldr	r3, [r3, #0]
   d96ca:	685b      	ldr	r3, [r3, #4]
   d96cc:	9301      	str	r3, [sp, #4]
   d96ce:	bd08      	pop	{r3, pc}
   d96d0:	0003021c 	.word	0x0003021c

000d96d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d96d4:	b508      	push	{r3, lr}
   d96d6:	4b02      	ldr	r3, [pc, #8]	; (d96e0 <realloc+0xc>)
   d96d8:	681b      	ldr	r3, [r3, #0]
   d96da:	689b      	ldr	r3, [r3, #8]
   d96dc:	9301      	str	r3, [sp, #4]
   d96de:	bd08      	pop	{r3, pc}
   d96e0:	0003021c 	.word	0x0003021c

000d96e4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d96e4:	b508      	push	{r3, lr}
   d96e6:	4b02      	ldr	r3, [pc, #8]	; (d96f0 <sprintf+0xc>)
   d96e8:	681b      	ldr	r3, [r3, #0]
   d96ea:	68db      	ldr	r3, [r3, #12]
   d96ec:	9301      	str	r3, [sp, #4]
   d96ee:	bd08      	pop	{r3, pc}
   d96f0:	0003021c 	.word	0x0003021c

000d96f4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d96f4:	b508      	push	{r3, lr}
   d96f6:	4b02      	ldr	r3, [pc, #8]	; (d9700 <vsnprintf+0xc>)
   d96f8:	681b      	ldr	r3, [r3, #0]
   d96fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d96fc:	9301      	str	r3, [sp, #4]
   d96fe:	bd08      	pop	{r3, pc}
   d9700:	0003021c 	.word	0x0003021c

000d9704 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d9704:	b508      	push	{r3, lr}
   d9706:	4b02      	ldr	r3, [pc, #8]	; (d9710 <abort+0xc>)
   d9708:	681b      	ldr	r3, [r3, #0]
   d970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d970c:	9301      	str	r3, [sp, #4]
   d970e:	bd08      	pop	{r3, pc}
   d9710:	0003021c 	.word	0x0003021c

000d9714 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d9714:	b508      	push	{r3, lr}
   d9716:	4b02      	ldr	r3, [pc, #8]	; (d9720 <_malloc_r+0xc>)
   d9718:	681b      	ldr	r3, [r3, #0]
   d971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d971c:	9301      	str	r3, [sp, #4]
   d971e:	bd08      	pop	{r3, pc}
   d9720:	0003021c 	.word	0x0003021c

000d9724 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d9724:	b508      	push	{r3, lr}
   d9726:	4b02      	ldr	r3, [pc, #8]	; (d9730 <__errno+0xc>)
   d9728:	681b      	ldr	r3, [r3, #0]
   d972a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d972c:	9301      	str	r3, [sp, #4]
   d972e:	bd08      	pop	{r3, pc}
   d9730:	0003021c 	.word	0x0003021c

000d9734 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d9734:	b508      	push	{r3, lr}
   d9736:	4b02      	ldr	r3, [pc, #8]	; (d9740 <newlib_impure_ptr_callback+0xc>)
   d9738:	681b      	ldr	r3, [r3, #0]
   d973a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d973c:	9301      	str	r3, [sp, #4]
   d973e:	bd08      	pop	{r3, pc}
   d9740:	0003021c 	.word	0x0003021c

000d9744 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d9744:	b508      	push	{r3, lr}
   d9746:	4b02      	ldr	r3, [pc, #8]	; (d9750 <localtime_r+0xc>)
   d9748:	681b      	ldr	r3, [r3, #0]
   d974a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d974c:	9301      	str	r3, [sp, #4]
   d974e:	bd08      	pop	{r3, pc}
   d9750:	0003021c 	.word	0x0003021c

000d9754 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9754:	2200      	movs	r2, #0
   d9756:	6840      	ldr	r0, [r0, #4]
   d9758:	4611      	mov	r1, r2
   d975a:	f7ff bf3b 	b.w	d95d4 <network_listening>

000d975e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d975e:	2200      	movs	r2, #0
   d9760:	6840      	ldr	r0, [r0, #4]
   d9762:	4611      	mov	r1, r2
   d9764:	f7ff bf46 	b.w	d95f4 <network_get_listen_timeout>

000d9768 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9768:	6840      	ldr	r0, [r0, #4]
   d976a:	2200      	movs	r2, #0
   d976c:	f7ff bf3a 	b.w	d95e4 <network_set_listen_timeout>

000d9770 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d9770:	6840      	ldr	r0, [r0, #4]
   d9772:	2200      	movs	r2, #0
   d9774:	f081 0101 	eor.w	r1, r1, #1
   d9778:	f7ff bf24 	b.w	d95c4 <network_listen>

000d977c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d977c:	2300      	movs	r3, #0
   d977e:	6840      	ldr	r0, [r0, #4]
   d9780:	461a      	mov	r2, r3
   d9782:	4619      	mov	r1, r3
   d9784:	f7ff bf16 	b.w	d95b4 <network_off>

000d9788 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9788:	2300      	movs	r3, #0
   d978a:	6840      	ldr	r0, [r0, #4]
   d978c:	461a      	mov	r2, r3
   d978e:	4619      	mov	r1, r3
   d9790:	f7ff bf08 	b.w	d95a4 <network_on>

000d9794 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9794:	2200      	movs	r2, #0
   d9796:	6840      	ldr	r0, [r0, #4]
   d9798:	4611      	mov	r1, r2
   d979a:	f7ff befb 	b.w	d9594 <network_ready>

000d979e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d979e:	2200      	movs	r2, #0
   d97a0:	6840      	ldr	r0, [r0, #4]
   d97a2:	4611      	mov	r1, r2
   d97a4:	f7ff bee6 	b.w	d9574 <network_connecting>

000d97a8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d97a8:	6840      	ldr	r0, [r0, #4]
   d97aa:	2200      	movs	r2, #0
   d97ac:	2102      	movs	r1, #2
   d97ae:	f7ff bee9 	b.w	d9584 <network_disconnect>

000d97b2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d97b2:	2300      	movs	r3, #0
   d97b4:	6840      	ldr	r0, [r0, #4]
   d97b6:	461a      	mov	r2, r3
   d97b8:	f7ff bed4 	b.w	d9564 <network_connect>

000d97bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d97bc:	4b02      	ldr	r3, [pc, #8]	; (d97c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d97be:	2203      	movs	r2, #3
   d97c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d97c2:	4a02      	ldr	r2, [pc, #8]	; (d97cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d97c4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d97c6:	4770      	bx	lr
   d97c8:	2003e5c4 	.word	0x2003e5c4
   d97cc:	000df5b0 	.word	0x000df5b0

000d97d0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d97d0:	2100      	movs	r1, #0
   d97d2:	f7ff bdfd 	b.w	d93d0 <hal_spi_acquire>

000d97d6 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d97d6:	2100      	movs	r1, #0
   d97d8:	f7ff be02 	b.w	d93e0 <hal_spi_release>

000d97dc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d97dc:	b510      	push	{r4, lr}
   d97de:	4604      	mov	r4, r0
   d97e0:	4608      	mov	r0, r1
{
    _spi = spi;
   d97e2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d97e4:	f7ff fdc4 	bl	d9370 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d97e8:	2300      	movs	r3, #0
   d97ea:	6063      	str	r3, [r4, #4]
}
   d97ec:	4620      	mov	r0, r4
   d97ee:	bd10      	pop	{r4, pc}

000d97f0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d97f0:	b510      	push	{r4, lr}
   d97f2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d97f4:	7800      	ldrb	r0, [r0, #0]
   d97f6:	f7ff ffeb 	bl	d97d0 <_ZN8SPIClass4lockEv.isra.0>
   d97fa:	b948      	cbnz	r0, d9810 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d97fc:	7820      	ldrb	r0, [r4, #0]
   d97fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d9802:	f7ff fda5 	bl	d9350 <hal_spi_begin>
        unlock();
   d9806:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d980c:	f7ff bfe3 	b.w	d97d6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d9810:	bd10      	pop	{r4, pc}

000d9812 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9812:	7800      	ldrb	r0, [r0, #0]
   d9814:	f7ff bfdf 	b.w	d97d6 <_ZN8SPIClass6unlockEv.isra.0>

000d9818 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9818:	0840      	lsrs	r0, r0, #1
{
   d981a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d981c:	6018      	str	r0, [r3, #0]
   d981e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9820:	6818      	ldr	r0, [r3, #0]
   d9822:	4288      	cmp	r0, r1
   d9824:	b2e5      	uxtb	r5, r4
   d9826:	d906      	bls.n	d9836 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9828:	3401      	adds	r4, #1
   d982a:	2c08      	cmp	r4, #8
   d982c:	d002      	beq.n	d9834 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d982e:	0840      	lsrs	r0, r0, #1
   d9830:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d9832:	e7f5      	b.n	d9820 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9834:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d9836:	4b02      	ldr	r3, [pc, #8]	; (d9840 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9838:	5d5b      	ldrb	r3, [r3, r5]
   d983a:	7013      	strb	r3, [r2, #0]
}
   d983c:	bd30      	pop	{r4, r5, pc}
   d983e:	bf00      	nop
   d9840:	000df5dc 	.word	0x000df5dc

000d9844 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9848:	4606      	mov	r6, r0
   d984a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d984c:	7800      	ldrb	r0, [r0, #0]
{
   d984e:	460d      	mov	r5, r1
    CHECK(lock());
   d9850:	f7ff ffbe 	bl	d97d0 <_ZN8SPIClass4lockEv.isra.0>
   d9854:	2800      	cmp	r0, #0
   d9856:	db1b      	blt.n	d9890 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d9858:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d985a:	2214      	movs	r2, #20
   d985c:	2100      	movs	r1, #0
   d985e:	a809      	add	r0, sp, #36	; 0x24
   d9860:	f004 ffe2 	bl	de828 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9864:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d9866:	2200      	movs	r2, #0
   d9868:	a909      	add	r1, sp, #36	; 0x24
   d986a:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d986c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d9870:	f7ff fd8e 	bl	d9390 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d9874:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d9878:	b113      	cbz	r3, d9880 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d987a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d987e:	b154      	cbz	r4, d9896 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9880:	2700      	movs	r7, #0
   d9882:	46b9      	mov	r9, r7
   d9884:	46b8      	mov	r8, r7
   d9886:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d9888:	792b      	ldrb	r3, [r5, #4]
   d988a:	b15c      	cbz	r4, d98a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d988c:	b1c3      	cbz	r3, d98c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d988e:	2000      	movs	r0, #0
}
   d9890:	b00f      	add	sp, #60	; 0x3c
   d9892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d9896:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d989a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d989e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d98a2:	e7f1      	b.n	d9888 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d98a4:	2b00      	cmp	r3, #0
   d98a6:	d135      	bne.n	d9914 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d98a8:	68ab      	ldr	r3, [r5, #8]
   d98aa:	4543      	cmp	r3, r8
   d98ac:	d108      	bne.n	d98c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d98ae:	f88d 9020 	strb.w	r9, [sp, #32]
   d98b2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d98b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d98ba:	89ab      	ldrh	r3, [r5, #12]
   d98bc:	429a      	cmp	r2, r3
   d98be:	d0e6      	beq.n	d988e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d98c0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d98c2:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d98c4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d98c8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d98ca:	ab04      	add	r3, sp, #16
   d98cc:	f10d 020f 	add.w	r2, sp, #15
   d98d0:	f7ff ffa2 	bl	d9818 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d98d4:	7929      	ldrb	r1, [r5, #4]
   d98d6:	b984      	cbnz	r4, d98fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d98d8:	b989      	cbnz	r1, d98fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d98da:	68ab      	ldr	r3, [r5, #8]
   d98dc:	4543      	cmp	r3, r8
   d98de:	d30e      	bcc.n	d98fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d98e0:	f88d 9020 	strb.w	r9, [sp, #32]
   d98e4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d98e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d98ec:	89ab      	ldrh	r3, [r5, #12]
   d98ee:	429a      	cmp	r2, r3
   d98f0:	d105      	bne.n	d98fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d98f2:	9b04      	ldr	r3, [sp, #16]
   d98f4:	4543      	cmp	r3, r8
   d98f6:	d102      	bne.n	d98fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d98f8:	e7c9      	b.n	d988e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d98fa:	2900      	cmp	r1, #0
   d98fc:	d1f9      	bne.n	d98f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d98fe:	2300      	movs	r3, #0
   d9900:	9301      	str	r3, [sp, #4]
   d9902:	7b6b      	ldrb	r3, [r5, #13]
   d9904:	9300      	str	r3, [sp, #0]
   d9906:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d990a:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d990c:	7830      	ldrb	r0, [r6, #0]
   d990e:	f7ff fd57 	bl	d93c0 <hal_spi_set_settings>
   d9912:	e7bc      	b.n	d988e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9914:	e9cd 4400 	strd	r4, r4, [sp]
   d9918:	4623      	mov	r3, r4
   d991a:	4622      	mov	r2, r4
   d991c:	2101      	movs	r1, #1
   d991e:	e7f5      	b.n	d990c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9920 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9920:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9922:	7800      	ldrb	r0, [r0, #0]
   d9924:	f7ff fd1c 	bl	d9360 <hal_spi_transfer>
}
   d9928:	b2c0      	uxtb	r0, r0
   d992a:	bd08      	pop	{r3, pc}

000d992c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d992c:	b530      	push	{r4, r5, lr}
   d992e:	b087      	sub	sp, #28
   d9930:	4604      	mov	r4, r0
   d9932:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9934:	9500      	str	r5, [sp, #0]
   d9936:	7800      	ldrb	r0, [r0, #0]
   d9938:	f7ff fd32 	bl	d93a0 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d993c:	b93d      	cbnz	r5, d994e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d993e:	7820      	ldrb	r0, [r4, #0]
   d9940:	a902      	add	r1, sp, #8
   d9942:	f7ff fd35 	bl	d93b0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d9946:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d994a:	07db      	lsls	r3, r3, #31
   d994c:	d4f7      	bmi.n	d993e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d994e:	b007      	add	sp, #28
   d9950:	bd30      	pop	{r4, r5, pc}
	...

000d9954 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9954:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9956:	4b09      	ldr	r3, [pc, #36]	; (d997c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9958:	4c09      	ldr	r4, [pc, #36]	; (d9980 <_GLOBAL__sub_I_System+0x2c>)
   d995a:	2202      	movs	r2, #2
   d995c:	2000      	movs	r0, #0
   d995e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9960:	4b08      	ldr	r3, [pc, #32]	; (d9984 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d9962:	6020      	str	r0, [r4, #0]
   d9964:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d9966:	71a0      	strb	r0, [r4, #6]
   d9968:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d996a:	f7ff fdb7 	bl	d94dc <set_system_mode>
SystemClass System;
   d996e:	4620      	mov	r0, r4
   d9970:	4a05      	ldr	r2, [pc, #20]	; (d9988 <_GLOBAL__sub_I_System+0x34>)
   d9972:	4906      	ldr	r1, [pc, #24]	; (d998c <_GLOBAL__sub_I_System+0x38>)
   d9974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9978:	f002 bc8a 	b.w	dc290 <__aeabi_atexit>
   d997c:	2003e5d8 	.word	0x2003e5d8
   d9980:	2003e5cc 	.word	0x2003e5cc
   d9984:	ffff0000 	.word	0xffff0000
   d9988:	2003de20 	.word	0x2003de20
   d998c:	000d4191 	.word	0x000d4191

000d9990 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9990:	b510      	push	{r4, lr}
   d9992:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9994:	f004 ffb1 	bl	de8fa <strlen>
   d9998:	3801      	subs	r0, #1
   d999a:	1823      	adds	r3, r4, r0
   d999c:	4620      	mov	r0, r4
	while(i<j){
   d999e:	4283      	cmp	r3, r0
   d99a0:	d906      	bls.n	d99b0 <_Z11str_reversePc+0x20>
		c = *i;
   d99a2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d99a4:	7819      	ldrb	r1, [r3, #0]
   d99a6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d99aa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d99ae:	e7f6      	b.n	d999e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d99b0:	bd10      	pop	{r4, pc}

000d99b2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d99b2:	b570      	push	{r4, r5, r6, lr}
   d99b4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d99b6:	1e91      	subs	r1, r2, #2
   d99b8:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d99ba:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d99bc:	d822      	bhi.n	d9a04 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d99be:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d99c0:	b16d      	cbz	r5, d99de <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d99c2:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d99c6:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d99ca:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d99cc:	2d09      	cmp	r5, #9
                *ptr += '0';
   d99ce:	bf94      	ite	ls
   d99d0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d99d2:	3157      	addhi	r1, #87	; 0x57
   d99d4:	b2c9      	uxtb	r1, r1
   d99d6:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d99da:	4635      	mov	r5, r6
	while(a){
   d99dc:	e7f0      	b.n	d99c0 <ultoa+0xe>
   d99de:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d99e0:	4423      	add	r3, r4
            *ptr++ = '0';
   d99e2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d99e4:	4293      	cmp	r3, r2
   d99e6:	d902      	bls.n	d99ee <ultoa+0x3c>
            *ptr++ = '0';
   d99e8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d99ec:	e7fa      	b.n	d99e4 <ultoa+0x32>
   d99ee:	1a1a      	subs	r2, r3, r0
   d99f0:	4283      	cmp	r3, r0
   d99f2:	bf38      	it	cc
   d99f4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d99f6:	2300      	movs	r3, #0
   d99f8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d99fa:	4620      	mov	r0, r4
   d99fc:	f7ff ffc8 	bl	d9990 <_Z11str_reversePc>
	return buffer;
   d9a00:	4620      	mov	r0, r4
}
   d9a02:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d9a04:	2000      	movs	r0, #0
   d9a06:	e7fc      	b.n	d9a02 <ultoa+0x50>

000d9a08 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9a08:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9a0a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9a0c:	460c      	mov	r4, r1
   d9a0e:	4615      	mov	r5, r2
	if(a<0){
   d9a10:	da0e      	bge.n	d9a30 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d9a16:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9a1a:	bf14      	ite	ne
   d9a1c:	4258      	negne	r0, r3
   d9a1e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9a20:	2301      	movs	r3, #1
		*buffer = '-';
   d9a22:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d9a24:	462a      	mov	r2, r5
   d9a26:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d9a28:	f7ff ffc3 	bl	d99b2 <ultoa>
	}
	return buffer;
}
   d9a2c:	4620      	mov	r0, r4
   d9a2e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d9a30:	2301      	movs	r3, #1
   d9a32:	e7f9      	b.n	d9a28 <itoa+0x20>

000d9a34 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9a34:	b510      	push	{r4, lr}
   d9a36:	4604      	mov	r4, r0
{
	free(buffer);
   d9a38:	6800      	ldr	r0, [r0, #0]
   d9a3a:	f7ff fe43 	bl	d96c4 <free>
}
   d9a3e:	4620      	mov	r0, r4
   d9a40:	bd10      	pop	{r4, pc}

000d9a42 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9a42:	b510      	push	{r4, lr}
   d9a44:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9a46:	6800      	ldr	r0, [r0, #0]
   d9a48:	b108      	cbz	r0, d9a4e <_ZN6String10invalidateEv+0xc>
   d9a4a:	f7ff fe3b 	bl	d96c4 <free>
	buffer = NULL;
   d9a4e:	2300      	movs	r3, #0
	capacity = len = 0;
   d9a50:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9a54:	6023      	str	r3, [r4, #0]
}
   d9a56:	bd10      	pop	{r4, pc}

000d9a58 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9a58:	b538      	push	{r3, r4, r5, lr}
   d9a5a:	4604      	mov	r4, r0
   d9a5c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9a5e:	6800      	ldr	r0, [r0, #0]
   d9a60:	3101      	adds	r1, #1
   d9a62:	f7ff fe37 	bl	d96d4 <realloc>
	if (newbuffer) {
   d9a66:	b110      	cbz	r0, d9a6e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9a68:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9a6c:	2001      	movs	r0, #1
	}
	return 0;
}
   d9a6e:	bd38      	pop	{r3, r4, r5, pc}

000d9a70 <_ZN6String7reserveEj>:
{
   d9a70:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9a72:	6803      	ldr	r3, [r0, #0]
{
   d9a74:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9a76:	b123      	cbz	r3, d9a82 <_ZN6String7reserveEj+0x12>
   d9a78:	6843      	ldr	r3, [r0, #4]
   d9a7a:	428b      	cmp	r3, r1
   d9a7c:	d301      	bcc.n	d9a82 <_ZN6String7reserveEj+0x12>
   d9a7e:	2001      	movs	r0, #1
}
   d9a80:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9a82:	4620      	mov	r0, r4
   d9a84:	f7ff ffe8 	bl	d9a58 <_ZN6String12changeBufferEj>
   d9a88:	2800      	cmp	r0, #0
   d9a8a:	d0f9      	beq.n	d9a80 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9a8c:	68a3      	ldr	r3, [r4, #8]
   d9a8e:	2b00      	cmp	r3, #0
   d9a90:	d1f5      	bne.n	d9a7e <_ZN6String7reserveEj+0xe>
   d9a92:	6822      	ldr	r2, [r4, #0]
   d9a94:	7013      	strb	r3, [r2, #0]
   d9a96:	e7f2      	b.n	d9a7e <_ZN6String7reserveEj+0xe>

000d9a98 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9a9a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9a9c:	4611      	mov	r1, r2
   d9a9e:	9201      	str	r2, [sp, #4]
{
   d9aa0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9aa2:	f7ff ffe5 	bl	d9a70 <_ZN6String7reserveEj>
   d9aa6:	9a01      	ldr	r2, [sp, #4]
   d9aa8:	b928      	cbnz	r0, d9ab6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9aaa:	4620      	mov	r0, r4
   d9aac:	f7ff ffc9 	bl	d9a42 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9ab0:	4620      	mov	r0, r4
   d9ab2:	b003      	add	sp, #12
   d9ab4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9ab6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9ab8:	4629      	mov	r1, r5
   d9aba:	6820      	ldr	r0, [r4, #0]
   d9abc:	f004 fe8c 	bl	de7d8 <memcpy>
	buffer[len] = 0;
   d9ac0:	6822      	ldr	r2, [r4, #0]
   d9ac2:	68a3      	ldr	r3, [r4, #8]
   d9ac4:	2100      	movs	r1, #0
   d9ac6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9ac8:	e7f2      	b.n	d9ab0 <_ZN6String4copyEPKcj+0x18>

000d9aca <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9aca:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9acc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9ace:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9ad2:	4604      	mov	r4, r0
	len = 0;
   d9ad4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9ad6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9ad8:	b141      	cbz	r1, d9aec <_ZN6StringC1EPKc+0x22>
   d9ada:	4608      	mov	r0, r1
   d9adc:	9101      	str	r1, [sp, #4]
   d9ade:	f004 ff0c 	bl	de8fa <strlen>
   d9ae2:	9901      	ldr	r1, [sp, #4]
   d9ae4:	4602      	mov	r2, r0
   d9ae6:	4620      	mov	r0, r4
   d9ae8:	f7ff ffd6 	bl	d9a98 <_ZN6String4copyEPKcj>
}
   d9aec:	4620      	mov	r0, r4
   d9aee:	b002      	add	sp, #8
   d9af0:	bd10      	pop	{r4, pc}

000d9af2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9af2:	b538      	push	{r3, r4, r5, lr}
   d9af4:	4605      	mov	r5, r0
	if (buffer) {
   d9af6:	6800      	ldr	r0, [r0, #0]
{
   d9af8:	460c      	mov	r4, r1
	if (buffer) {
   d9afa:	b168      	cbz	r0, d9b18 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d9afc:	686a      	ldr	r2, [r5, #4]
   d9afe:	688b      	ldr	r3, [r1, #8]
   d9b00:	429a      	cmp	r2, r3
   d9b02:	d307      	bcc.n	d9b14 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9b04:	6809      	ldr	r1, [r1, #0]
   d9b06:	f004 fed2 	bl	de8ae <strcpy>
			len = rhs.len;
   d9b0a:	68a3      	ldr	r3, [r4, #8]
   d9b0c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9b0e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9b10:	60a3      	str	r3, [r4, #8]
}
   d9b12:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d9b14:	f7ff fdd6 	bl	d96c4 <free>
	buffer = rhs.buffer;
   d9b18:	6823      	ldr	r3, [r4, #0]
   d9b1a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9b1c:	6863      	ldr	r3, [r4, #4]
   d9b1e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9b20:	68a3      	ldr	r3, [r4, #8]
   d9b22:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9b24:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d9b26:	e9c4 3300 	strd	r3, r3, [r4]
   d9b2a:	e7f1      	b.n	d9b10 <_ZN6String4moveERS_+0x1e>

000d9b2c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9b2c:	4288      	cmp	r0, r1
{
   d9b2e:	b510      	push	{r4, lr}
   d9b30:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9b32:	d005      	beq.n	d9b40 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9b34:	680b      	ldr	r3, [r1, #0]
   d9b36:	b12b      	cbz	r3, d9b44 <_ZN6StringaSERKS_+0x18>
   d9b38:	688a      	ldr	r2, [r1, #8]
   d9b3a:	4619      	mov	r1, r3
   d9b3c:	f7ff ffac 	bl	d9a98 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9b40:	4620      	mov	r0, r4
   d9b42:	bd10      	pop	{r4, pc}
	else invalidate();
   d9b44:	f7ff ff7d 	bl	d9a42 <_ZN6String10invalidateEv>
   d9b48:	e7fa      	b.n	d9b40 <_ZN6StringaSERKS_+0x14>

000d9b4a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9b4a:	b510      	push	{r4, lr}
	buffer = NULL;
   d9b4c:	2300      	movs	r3, #0
String::String(const String &value)
   d9b4e:	4604      	mov	r4, r0
	capacity = 0;
   d9b50:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9b54:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9b56:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9b58:	f7ff ffe8 	bl	d9b2c <_ZN6StringaSERKS_>
}
   d9b5c:	4620      	mov	r0, r4
   d9b5e:	bd10      	pop	{r4, pc}

000d9b60 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9b60:	4288      	cmp	r0, r1
{
   d9b62:	b510      	push	{r4, lr}
   d9b64:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9b66:	d001      	beq.n	d9b6c <_ZN6StringaSEOS_+0xc>
   d9b68:	f7ff ffc3 	bl	d9af2 <_ZN6String4moveERS_>
	return *this;
}
   d9b6c:	4620      	mov	r0, r4
   d9b6e:	bd10      	pop	{r4, pc}

000d9b70 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9b70:	b513      	push	{r0, r1, r4, lr}
   d9b72:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9b74:	b159      	cbz	r1, d9b8e <_ZN6StringaSEPKc+0x1e>
   d9b76:	4608      	mov	r0, r1
   d9b78:	9101      	str	r1, [sp, #4]
   d9b7a:	f004 febe 	bl	de8fa <strlen>
   d9b7e:	9901      	ldr	r1, [sp, #4]
   d9b80:	4602      	mov	r2, r0
   d9b82:	4620      	mov	r0, r4
   d9b84:	f7ff ff88 	bl	d9a98 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9b88:	4620      	mov	r0, r4
   d9b8a:	b002      	add	sp, #8
   d9b8c:	bd10      	pop	{r4, pc}
	else invalidate();
   d9b8e:	f7ff ff58 	bl	d9a42 <_ZN6String10invalidateEv>
   d9b92:	e7f9      	b.n	d9b88 <_ZN6StringaSEPKc+0x18>

000d9b94 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d9b94:	b510      	push	{r4, lr}
   d9b96:	4604      	mov	r4, r0
   d9b98:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d9b9a:	2300      	movs	r3, #0
	capacity = 0;
   d9b9c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9ba0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9ba2:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d9ba4:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d9ba6:	a901      	add	r1, sp, #4
   d9ba8:	f7ff ff2e 	bl	d9a08 <itoa>
	*this = buf;
   d9bac:	a901      	add	r1, sp, #4
   d9bae:	4620      	mov	r0, r4
   d9bb0:	f7ff ffde 	bl	d9b70 <_ZN6StringaSEPKc>
}
   d9bb4:	4620      	mov	r0, r4
   d9bb6:	b00a      	add	sp, #40	; 0x28
   d9bb8:	bd10      	pop	{r4, pc}

000d9bba <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9bba:	b570      	push	{r4, r5, r6, lr}
   d9bbc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9bbe:	460e      	mov	r6, r1
   d9bc0:	b909      	cbnz	r1, d9bc6 <_ZN6String6concatEPKcj+0xc>
   d9bc2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9bc4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9bc6:	b16a      	cbz	r2, d9be4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d9bc8:	6884      	ldr	r4, [r0, #8]
   d9bca:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d9bcc:	4621      	mov	r1, r4
   d9bce:	f7ff ff4f 	bl	d9a70 <_ZN6String7reserveEj>
   d9bd2:	2800      	cmp	r0, #0
   d9bd4:	d0f5      	beq.n	d9bc2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9bd6:	6828      	ldr	r0, [r5, #0]
   d9bd8:	68ab      	ldr	r3, [r5, #8]
   d9bda:	4631      	mov	r1, r6
   d9bdc:	4418      	add	r0, r3
   d9bde:	f004 fe66 	bl	de8ae <strcpy>
	len = newlen;
   d9be2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9be4:	2001      	movs	r0, #1
   d9be6:	e7ed      	b.n	d9bc4 <_ZN6String6concatEPKcj+0xa>

000d9be8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9be8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9bea:	688a      	ldr	r2, [r1, #8]
   d9bec:	6809      	ldr	r1, [r1, #0]
{
   d9bee:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9bf0:	f7ff ffe3 	bl	d9bba <_ZN6String6concatEPKcj>
   d9bf4:	b910      	cbnz	r0, d9bfc <_ZplRK15StringSumHelperRK6String+0x14>
   d9bf6:	4620      	mov	r0, r4
   d9bf8:	f7ff ff23 	bl	d9a42 <_ZN6String10invalidateEv>
	return a;
}
   d9bfc:	4620      	mov	r0, r4
   d9bfe:	bd10      	pop	{r4, pc}

000d9c00 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d9c00:	b513      	push	{r0, r1, r4, lr}
   d9c02:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9c04:	b929      	cbnz	r1, d9c12 <_ZplRK15StringSumHelperPKc+0x12>
   d9c06:	4620      	mov	r0, r4
   d9c08:	f7ff ff1b 	bl	d9a42 <_ZN6String10invalidateEv>
	return a;
}
   d9c0c:	4620      	mov	r0, r4
   d9c0e:	b002      	add	sp, #8
   d9c10:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9c12:	4608      	mov	r0, r1
   d9c14:	9101      	str	r1, [sp, #4]
   d9c16:	f004 fe70 	bl	de8fa <strlen>
   d9c1a:	9901      	ldr	r1, [sp, #4]
   d9c1c:	4602      	mov	r2, r0
   d9c1e:	4620      	mov	r0, r4
   d9c20:	f7ff ffcb 	bl	d9bba <_ZN6String6concatEPKcj>
   d9c24:	2800      	cmp	r0, #0
   d9c26:	d0ee      	beq.n	d9c06 <_ZplRK15StringSumHelperPKc+0x6>
   d9c28:	e7f0      	b.n	d9c0c <_ZplRK15StringSumHelperPKc+0xc>

000d9c2a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d9c2a:	b558      	push	{r3, r4, r6, lr}
   d9c2c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d9c2e:	b12a      	cbz	r2, d9c3c <_ZNK6String8getBytesEPhjj+0x12>
   d9c30:	b121      	cbz	r1, d9c3c <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d9c32:	6884      	ldr	r4, [r0, #8]
   d9c34:	429c      	cmp	r4, r3
   d9c36:	d802      	bhi.n	d9c3e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d9c38:	2300      	movs	r3, #0
   d9c3a:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d9c3c:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d9c3e:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d9c40:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d9c42:	6801      	ldr	r1, [r0, #0]
   d9c44:	4294      	cmp	r4, r2
   d9c46:	bf28      	it	cs
   d9c48:	4614      	movcs	r4, r2
   d9c4a:	4419      	add	r1, r3
   d9c4c:	4622      	mov	r2, r4
   d9c4e:	4630      	mov	r0, r6
   d9c50:	f004 fe5b 	bl	de90a <strncpy>
	buf[n] = 0;
   d9c54:	2300      	movs	r3, #0
   d9c56:	5533      	strb	r3, [r6, r4]
   d9c58:	e7f0      	b.n	d9c3c <_ZNK6String8getBytesEPhjj+0x12>

000d9c5a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d9c5a:	6800      	ldr	r0, [r0, #0]
   d9c5c:	b108      	cbz	r0, d9c62 <_ZNK6String5toIntEv+0x8>
   d9c5e:	f004 bd9b 	b.w	de798 <atol>
	return 0;
}
   d9c62:	4770      	bx	lr

000d9c64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d9c64:	4770      	bx	lr

000d9c66 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d9c66:	4770      	bx	lr

000d9c68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d9c68:	4770      	bx	lr

000d9c6a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d9c6a:	4770      	bx	lr

000d9c6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d9c6c:	4b06      	ldr	r3, [pc, #24]	; (d9c88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d9c6e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d9c70:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d9c72:	f100 040c 	add.w	r4, r0, #12
	    ||
   d9c76:	d005      	beq.n	d9c84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d9c78:	4608      	mov	r0, r1
   d9c7a:	f002 fb15 	bl	dc2a8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d9c7e:	2800      	cmp	r0, #0
	return nullptr;
   d9c80:	bf08      	it	eq
   d9c82:	2400      	moveq	r4, #0
      }
   d9c84:	4620      	mov	r0, r4
   d9c86:	bd10      	pop	{r4, pc}
   d9c88:	000df72c 	.word	0x000df72c

000d9c8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d9c8c:	4b06      	ldr	r3, [pc, #24]	; (d9ca8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d9c8e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d9c90:	b510      	push	{r4, lr}
   d9c92:	f100 040c 	add.w	r4, r0, #12
	    ||
   d9c96:	d005      	beq.n	d9ca4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d9c98:	4608      	mov	r0, r1
   d9c9a:	f002 fb05 	bl	dc2a8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d9c9e:	2800      	cmp	r0, #0
	return nullptr;
   d9ca0:	bf08      	it	eq
   d9ca2:	2400      	moveq	r4, #0
      }
   d9ca4:	4620      	mov	r0, r4
   d9ca6:	bd10      	pop	{r4, pc}
   d9ca8:	000df72c 	.word	0x000df72c

000d9cac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d9cac:	4b06      	ldr	r3, [pc, #24]	; (d9cc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d9cae:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d9cb0:	b510      	push	{r4, lr}
   d9cb2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d9cb6:	d005      	beq.n	d9cc4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d9cb8:	4608      	mov	r0, r1
   d9cba:	f002 faf5 	bl	dc2a8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d9cbe:	2800      	cmp	r0, #0
	return nullptr;
   d9cc0:	bf08      	it	eq
   d9cc2:	2400      	moveq	r4, #0
      }
   d9cc4:	4620      	mov	r0, r4
   d9cc6:	bd10      	pop	{r4, pc}
   d9cc8:	000df72c 	.word	0x000df72c

000d9ccc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d9ccc:	3048      	adds	r0, #72	; 0x48
   d9cce:	f7ff beb1 	b.w	d9a34 <_ZN6StringD1Ev>

000d9cd2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d9cd2:	b510      	push	{r4, lr}
   d9cd4:	2160      	movs	r1, #96	; 0x60
   d9cd6:	4604      	mov	r4, r0
   d9cd8:	f002 fadf 	bl	dc29a <_ZdlPvj>
   d9cdc:	4620      	mov	r0, r4
   d9cde:	bd10      	pop	{r4, pc}

000d9ce0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d9ce0:	b510      	push	{r4, lr}
   d9ce2:	2124      	movs	r1, #36	; 0x24
   d9ce4:	4604      	mov	r4, r0
   d9ce6:	f002 fad8 	bl	dc29a <_ZdlPvj>
   d9cea:	4620      	mov	r0, r4
   d9cec:	bd10      	pop	{r4, pc}

000d9cee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d9cee:	b510      	push	{r4, lr}
   d9cf0:	2130      	movs	r1, #48	; 0x30
   d9cf2:	4604      	mov	r4, r0
   d9cf4:	f002 fad1 	bl	dc29a <_ZdlPvj>
   d9cf8:	4620      	mov	r0, r4
   d9cfa:	bd10      	pop	{r4, pc}

000d9cfc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d9cfc:	f7fa b9cf 	b.w	d409e <_ZdlPv>

000d9d00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d9d00:	f7fa b9cd 	b.w	d409e <_ZdlPv>

000d9d04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d9d04:	f7fa b9cb 	b.w	d409e <_ZdlPv>

000d9d08 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9d08:	b510      	push	{r4, lr}
          _M_dispose();
   d9d0a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9d0c:	4604      	mov	r4, r0
          _M_dispose();
   d9d0e:	689b      	ldr	r3, [r3, #8]
   d9d10:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d9d12:	68a3      	ldr	r3, [r4, #8]
   d9d14:	3b01      	subs	r3, #1
   d9d16:	60a3      	str	r3, [r4, #8]
   d9d18:	b92b      	cbnz	r3, d9d26 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d9d1a:	6823      	ldr	r3, [r4, #0]
   d9d1c:	4620      	mov	r0, r4
   d9d1e:	68db      	ldr	r3, [r3, #12]
    }
   d9d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d9d24:	4718      	bx	r3
    }
   d9d26:	bd10      	pop	{r4, pc}

000d9d28 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d9d28:	b510      	push	{r4, lr}
   d9d2a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d9d2c:	6800      	ldr	r0, [r0, #0]
   d9d2e:	b108      	cbz	r0, d9d34 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d9d30:	f7ff fa46 	bl	d91c0 <os_mutex_recursive_destroy>
    }
   d9d34:	4620      	mov	r0, r4
   d9d36:	bd10      	pop	{r4, pc}

000d9d38 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d9d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d9d3a:	2500      	movs	r5, #0
   d9d3c:	1cec      	adds	r4, r5, #3
   d9d3e:	428c      	cmp	r4, r1
   d9d40:	d80d      	bhi.n	d9d5e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        if (buf[i + 1] == adsType) {
   d9d42:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d9d44:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d9d46:	5d87      	ldrb	r7, [r0, r6]
   d9d48:	4297      	cmp	r7, r2
   d9d4a:	d105      	bne.n	d9d58 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            if ((i + adsLen + 1) <= len) {
   d9d4c:	4426      	add	r6, r4
   d9d4e:	42b1      	cmp	r1, r6
   d9d50:	d305      	bcc.n	d9d5e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d9d52:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d9d54:	1c60      	adds	r0, r4, #1
}
   d9d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d9d58:	3401      	adds	r4, #1
   d9d5a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d9d5c:	e7ee      	b.n	d9d3c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d9d5e:	2000      	movs	r0, #0
   d9d60:	e7f9      	b.n	d9d56 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000d9d64 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d9d64:	4a02      	ldr	r2, [pc, #8]	; (d9d70 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d9d66:	2100      	movs	r1, #0
   d9d68:	200a      	movs	r0, #10
   d9d6a:	f7ff bb95 	b.w	d9498 <panic_>
   d9d6e:	bf00      	nop
   d9d70:	000d902d 	.word	0x000d902d

000d9d74 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d9d74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9d78:	b2da      	uxtb	r2, r3
   d9d7a:	2a09      	cmp	r2, #9
   d9d7c:	d801      	bhi.n	d9d82 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d9d7e:	4618      	mov	r0, r3
   d9d80:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d9d82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9d86:	2b05      	cmp	r3, #5
   d9d88:	d801      	bhi.n	d9d8e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d9d8a:	3857      	subs	r0, #87	; 0x57
   d9d8c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d9d8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9d92:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d9d94:	bf94      	ite	ls
   d9d96:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d9d98:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d9d9c:	4770      	bx	lr
	...

000d9da0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d9da0:	b510      	push	{r4, lr}
            locked_(false) {
   d9da2:	2300      	movs	r3, #0
   d9da4:	7003      	strb	r3, [r0, #0]
        mutex_.lock();
   d9da6:	4b04      	ldr	r3, [pc, #16]	; (d9db8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   d9da8:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d9daa:	6818      	ldr	r0, [r3, #0]
   d9dac:	f7ff fa10 	bl	d91d0 <os_mutex_recursive_lock>
        locked_ = true;
   d9db0:	2301      	movs	r3, #1
   d9db2:	7023      	strb	r3, [r4, #0]
    }
   d9db4:	4620      	mov	r0, r4
   d9db6:	bd10      	pop	{r4, pc}
   d9db8:	2003e5e4 	.word	0x2003e5e4

000d9dbc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d9dbc:	b510      	push	{r4, lr}
        if (locked_) {
   d9dbe:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d9dc0:	4604      	mov	r4, r0
        if (locked_) {
   d9dc2:	b11b      	cbz	r3, d9dcc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
        mutex_.unlock();
   d9dc4:	4b02      	ldr	r3, [pc, #8]	; (d9dd0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9dc6:	6818      	ldr	r0, [r3, #0]
   d9dc8:	f7ff fa0a 	bl	d91e0 <os_mutex_recursive_unlock>
    }
   d9dcc:	4620      	mov	r0, r4
   d9dce:	bd10      	pop	{r4, pc}
   d9dd0:	2003e5e4 	.word	0x2003e5e4

000d9dd4 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d9dd4:	2200      	movs	r2, #0
   d9dd6:	6042      	str	r2, [r0, #4]
   d9dd8:	6002      	str	r2, [r0, #0]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d9dda:	7182      	strb	r2, [r0, #6]
}
   d9ddc:	4770      	bx	lr

000d9dde <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d9dde:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d9de0:	7982      	ldrb	r2, [r0, #6]
   d9de2:	798b      	ldrb	r3, [r1, #6]
   d9de4:	429a      	cmp	r2, r3
   d9de6:	d106      	bne.n	d9df6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d9de8:	2206      	movs	r2, #6
   d9dea:	f004 fce7 	bl	de7bc <memcmp>
   d9dee:	fab0 f080 	clz	r0, r0
   d9df2:	0940      	lsrs	r0, r0, #5
}
   d9df4:	bd08      	pop	{r3, pc}
    return false;
   d9df6:	2000      	movs	r0, #0
   d9df8:	e7fc      	b.n	d9df4 <_ZNK8particle10BleAddresseqERKS0_+0x16>
	...

000d9dfc <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d9dfc:	2201      	movs	r2, #1
   d9dfe:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9e00:	4a06      	ldr	r2, [pc, #24]	; (d9e1c <_ZN8particle7BleUuidC1Ev+0x20>)
   d9e02:	6811      	ldr	r1, [r2, #0]
   d9e04:	6001      	str	r1, [r0, #0]
   d9e06:	6851      	ldr	r1, [r2, #4]
   d9e08:	6041      	str	r1, [r0, #4]
   d9e0a:	8911      	ldrh	r1, [r2, #8]
   d9e0c:	7a92      	ldrb	r2, [r2, #10]
   d9e0e:	7282      	strb	r2, [r0, #10]
   d9e10:	2200      	movs	r2, #0
   d9e12:	8101      	strh	r1, [r0, #8]
   d9e14:	f8c0 200b 	str.w	r2, [r0, #11]
   d9e18:	73c2      	strb	r2, [r0, #15]
}
   d9e1a:	4770      	bx	lr
   d9e1c:	000df734 	.word	0x000df734

000d9e20 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d9e20:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d9e22:	690b      	ldr	r3, [r1, #16]
   d9e24:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d9e26:	f101 0210 	add.w	r2, r1, #16
   d9e2a:	4603      	mov	r3, r0
   d9e2c:	f851 4b04 	ldr.w	r4, [r1], #4
   d9e30:	f843 4b04 	str.w	r4, [r3], #4
   d9e34:	4291      	cmp	r1, r2
   d9e36:	d1f9      	bne.n	d9e2c <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d9e38:	bd10      	pop	{r4, pc}

000d9e3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d9e3a:	b510      	push	{r4, lr}
    if (uuid128) {
   d9e3c:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d9e3e:	4604      	mov	r4, r0
    if (uuid128) {
   d9e40:	b1b1      	cbz	r1, d9e70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d9e42:	2a01      	cmp	r2, #1
   d9e44:	f101 0210 	add.w	r2, r1, #16
   d9e48:	d10a      	bne.n	d9e60 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d9e4a:	4601      	mov	r1, r0
   d9e4c:	f853 0b04 	ldr.w	r0, [r3], #4
   d9e50:	f841 0b04 	str.w	r0, [r1], #4
   d9e54:	4293      	cmp	r3, r2
   d9e56:	d1f9      	bne.n	d9e4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d9e58:	2301      	movs	r3, #1
   d9e5a:	6123      	str	r3, [r4, #16]
}
   d9e5c:	4620      	mov	r0, r4
   d9e5e:	bd10      	pop	{r4, pc}
   d9e60:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d9e62:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d9e66:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d9e6a:	429a      	cmp	r2, r3
   d9e6c:	d1f9      	bne.n	d9e62 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d9e6e:	e7f3      	b.n	d9e58 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d9e70:	2210      	movs	r2, #16
   d9e72:	f004 fcd9 	bl	de828 <memset>
   d9e76:	e7f1      	b.n	d9e5c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d9e78 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d9e78:	b538      	push	{r3, r4, r5, lr}
   d9e7a:	4604      	mov	r4, r0
   d9e7c:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d9e7e:	461a      	mov	r2, r3
   d9e80:	f7ff ffdb 	bl	d9e3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d9e84:	81a5      	strh	r5, [r4, #12]
}
   d9e86:	4620      	mov	r0, r4
   d9e88:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9e8c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d9e8c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d9e8e:	6902      	ldr	r2, [r0, #16]
   d9e90:	b922      	cbnz	r2, d9e9c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d9e92:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9e94:	3800      	subs	r0, #0
   d9e96:	bf18      	it	ne
   d9e98:	2001      	movne	r0, #1
}
   d9e9a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9e9c:	4902      	ldr	r1, [pc, #8]	; (d9ea8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d9e9e:	2210      	movs	r2, #16
   d9ea0:	f004 fc8c 	bl	de7bc <memcmp>
   d9ea4:	e7f6      	b.n	d9e94 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d9ea6:	bf00      	nop
   d9ea8:	000df754 	.word	0x000df754

000d9eac <_ZNK8particle7BleUuid4typeEv>:
}
   d9eac:	6900      	ldr	r0, [r0, #16]
   d9eae:	4770      	bx	lr

000d9eb0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d9eb0:	b538      	push	{r3, r4, r5, lr}
   d9eb2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d9eb4:	2214      	movs	r2, #20
   d9eb6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d9eb8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d9eba:	f004 fcb5 	bl	de828 <memset>
    if (type_ == BleUuidType::SHORT) {
   d9ebe:	6923      	ldr	r3, [r4, #16]
   d9ec0:	b93b      	cbnz	r3, d9ed2 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d9ec2:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d9ec4:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d9ec6:	7b23      	ldrb	r3, [r4, #12]
   d9ec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d9ecc:	802b      	strh	r3, [r5, #0]
}
   d9ece:	4628      	mov	r0, r5
   d9ed0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d9ed2:	2301      	movs	r3, #1
   d9ed4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d9ed6:	f104 0210 	add.w	r2, r4, #16
   d9eda:	462b      	mov	r3, r5
   d9edc:	f854 1b04 	ldr.w	r1, [r4], #4
   d9ee0:	f843 1b04 	str.w	r1, [r3], #4
   d9ee4:	4294      	cmp	r4, r2
   d9ee6:	d1f9      	bne.n	d9edc <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d9ee8:	e7f1      	b.n	d9ece <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d9eea <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d9eea:	7b42      	ldrb	r2, [r0, #13]
   d9eec:	7b00      	ldrb	r0, [r0, #12]
}
   d9eee:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d9ef2:	4770      	bx	lr

000d9ef4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d9ef4:	4770      	bx	lr

000d9ef6 <_ZN8particle7BleUuidaSERKS0_>:
BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d9ef6:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d9ef8:	690b      	ldr	r3, [r1, #16]
   d9efa:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d9efc:	f101 0210 	add.w	r2, r1, #16
   d9f00:	4603      	mov	r3, r0
   d9f02:	f851 4b04 	ldr.w	r4, [r1], #4
   d9f06:	f843 4b04 	str.w	r4, [r3], #4
   d9f0a:	4291      	cmp	r1, r2
   d9f0c:	d1f9      	bne.n	d9f02 <_ZN8particle7BleUuidaSERKS0_+0xc>
}
   d9f0e:	bd10      	pop	{r4, pc}

000d9f10 <_ZN8particle7BleUuidaSEPKh>:
BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d9f10:	b510      	push	{r4, lr}
   d9f12:	b086      	sub	sp, #24
   d9f14:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d9f16:	2201      	movs	r2, #1
   d9f18:	a801      	add	r0, sp, #4
   d9f1a:	f7ff ff8e 	bl	d9e3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d9f1e:	a901      	add	r1, sp, #4
   d9f20:	4620      	mov	r0, r4
   d9f22:	f7ff ffe8 	bl	d9ef6 <_ZN8particle7BleUuidaSERKS0_>
}
   d9f26:	b006      	add	sp, #24
   d9f28:	bd10      	pop	{r4, pc}

000d9f2a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d9f2a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d9f2c:	6902      	ldr	r2, [r0, #16]
   d9f2e:	690b      	ldr	r3, [r1, #16]
   d9f30:	429a      	cmp	r2, r3
   d9f32:	d106      	bne.n	d9f42 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d9f34:	2210      	movs	r2, #16
   d9f36:	f004 fc41 	bl	de7bc <memcmp>
   d9f3a:	fab0 f080 	clz	r0, r0
   d9f3e:	0940      	lsrs	r0, r0, #5
}
   d9f40:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d9f42:	2000      	movs	r0, #0
   d9f44:	e7fc      	b.n	d9f40 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d9f48 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d9f48:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d9f4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d9f4e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9f50:	4b32      	ldr	r3, [pc, #200]	; (da01c <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d9f52:	681a      	ldr	r2, [r3, #0]
   d9f54:	6002      	str	r2, [r0, #0]
   d9f56:	685a      	ldr	r2, [r3, #4]
   d9f58:	6042      	str	r2, [r0, #4]
   d9f5a:	2500      	movs	r5, #0
   d9f5c:	891a      	ldrh	r2, [r3, #8]
   d9f5e:	7a9b      	ldrb	r3, [r3, #10]
   d9f60:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d9f62:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d9f64:	7283      	strb	r3, [r0, #10]
   d9f66:	f8c0 500b 	str.w	r5, [r0, #11]
   d9f6a:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d9f6c:	460e      	mov	r6, r1
   d9f6e:	b321      	cbz	r1, d9fba <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d9f70:	2124      	movs	r1, #36	; 0x24
   d9f72:	4630      	mov	r0, r6
   d9f74:	f004 fcdc 	bl	de930 <strnlen>
   d9f78:	2804      	cmp	r0, #4
   d9f7a:	d121      	bne.n	d9fc0 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d9f7c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d9f80:	af01      	add	r7, sp, #4
   d9f82:	1cb5      	adds	r5, r6, #2
   d9f84:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d9f86:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d9f8a:	f7ff fef3 	bl	d9d74 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d9f8e:	f1b0 0800 	subs.w	r8, r0, #0
   d9f92:	db10      	blt.n	d9fb6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d9f94:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d9f98:	f7ff feec 	bl	d9d74 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d9f9c:	2800      	cmp	r0, #0
   d9f9e:	db0a      	blt.n	d9fb6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d9fa0:	3502      	adds	r5, #2
   d9fa2:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d9fa6:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d9fa8:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d9fac:	d1eb      	bne.n	d9f86 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d9fae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d9fb2:	ba5b      	rev16	r3, r3
   d9fb4:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d9fb6:	2300      	movs	r3, #0
   d9fb8:	6123      	str	r3, [r4, #16]
}
   d9fba:	b002      	add	sp, #8
   d9fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d9fc0:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d9fc2:	2124      	movs	r1, #36	; 0x24
   d9fc4:	4630      	mov	r0, r6
   d9fc6:	f004 fcb3 	bl	de930 <strnlen>
   d9fca:	42a8      	cmp	r0, r5
   d9fcc:	d806      	bhi.n	d9fdc <_ZN8particle7BleUuid9constructEPKc+0x94>
   d9fce:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d9fd0:	2300      	movs	r3, #0
    while (len > 0) {
   d9fd2:	42bc      	cmp	r4, r7
   d9fd4:	d0f1      	beq.n	d9fba <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d9fd6:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d9fda:	e7fa      	b.n	d9fd2 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d9fdc:	2f00      	cmp	r7, #0
   d9fde:	d0ec      	beq.n	d9fba <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d9fe0:	5d70      	ldrb	r0, [r6, r5]
   d9fe2:	f7ff fec7 	bl	d9d74 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d9fe6:	0603      	lsls	r3, r0, #24
   d9fe8:	d415      	bmi.n	da016 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d9fea:	0100      	lsls	r0, r0, #4
   d9fec:	3f01      	subs	r7, #1
   d9fee:	fa5f f880 	uxtb.w	r8, r0
   d9ff2:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d9ff6:	2124      	movs	r1, #36	; 0x24
   d9ff8:	4630      	mov	r0, r6
   d9ffa:	f004 fc99 	bl	de930 <strnlen>
   d9ffe:	3501      	adds	r5, #1
   da000:	42a8      	cmp	r0, r5
   da002:	d908      	bls.n	da016 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   da004:	5d70      	ldrb	r0, [r6, r5]
   da006:	f7ff feb5 	bl	d9d74 <_ZN8particle11hexToNibbleEc>
   da00a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   da00c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   da00e:	bfa4      	itt	ge
   da010:	ea40 0008 	orrge.w	r0, r0, r8
   da014:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   da016:	3501      	adds	r5, #1
   da018:	e7d3      	b.n	d9fc2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   da01a:	bf00      	nop
   da01c:	000df734 	.word	0x000df734

000da020 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   da020:	b513      	push	{r0, r1, r4, lr}
   da022:	4604      	mov	r4, r0
   da024:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   da026:	f7ff fee9 	bl	d9dfc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   da02a:	4620      	mov	r0, r4
   da02c:	9901      	ldr	r1, [sp, #4]
   da02e:	f7ff ff8b 	bl	d9f48 <_ZN8particle7BleUuid9constructEPKc>
}
   da032:	4620      	mov	r0, r4
   da034:	b002      	add	sp, #8
   da036:	bd10      	pop	{r4, pc}

000da038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   da038:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   da03c:	4689      	mov	r9, r1
   da03e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   da042:	6a01      	ldr	r1, [r0, #32]
   da044:	4604      	mov	r4, r0
   da046:	461e      	mov	r6, r3
    if (buf == nullptr) {
   da048:	4690      	mov	r8, r2
   da04a:	b332      	cbz	r2, da09a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x62>
    if (offset == nullptr) {
   da04c:	ab01      	add	r3, sp, #4
   da04e:	464a      	mov	r2, r9
   da050:	f7ff fe72 	bl	d9d38 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   da054:	6a25      	ldr	r5, [r4, #32]
   da056:	1cb3      	adds	r3, r6, #2
   da058:	bb1f      	cbnz	r7, da0a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
   da05a:	b310      	cbz	r0, da0a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   da05c:	18ef      	adds	r7, r5, r3
   da05e:	1a3f      	subs	r7, r7, r0
   da060:	2f1f      	cmp	r7, #31
   da062:	d819      	bhi.n	da098 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   da064:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   da068:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   da06c:	eba5 0209 	sub.w	r2, r5, r9
   da070:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   da072:	eb00 0109 	add.w	r1, r0, r9
   da076:	eb06 000a 	add.w	r0, r6, sl
   da07a:	b292      	uxth	r2, r2
   da07c:	4421      	add	r1, r4
   da07e:	4420      	add	r0, r4
   da080:	f004 fbb8 	bl	de7f4 <memmove>
            selfData_[offset] = len + 1;
   da084:	1c73      	adds	r3, r6, #1
   da086:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   da08a:	4632      	mov	r2, r6
   da08c:	4641      	mov	r1, r8
   da08e:	eb04 000a 	add.w	r0, r4, sl
   da092:	f004 fba1 	bl	de7d8 <memcpy>
            selfLen_ = staLen + len + 2;
   da096:	6227      	str	r7, [r4, #32]
    return selfLen_;
   da098:	6a21      	ldr	r1, [r4, #32]
}
   da09a:	4608      	mov	r0, r1
   da09c:	b002      	add	sp, #8
   da09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   da0a2:	442b      	add	r3, r5
   da0a4:	2b1f      	cmp	r3, #31
   da0a6:	d8f7      	bhi.n	da098 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
        selfData_[selfLen_++] = len + 1;
   da0a8:	1c73      	adds	r3, r6, #1
   da0aa:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   da0ac:	1ca8      	adds	r0, r5, #2
   da0ae:	4425      	add	r5, r4
   da0b0:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   da0b2:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   da0b4:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   da0b8:	4641      	mov	r1, r8
   da0ba:	4420      	add	r0, r4
   da0bc:	f004 fb8c 	bl	de7d8 <memcpy>
        selfLen_ += len;
   da0c0:	6a23      	ldr	r3, [r4, #32]
   da0c2:	4433      	add	r3, r6
   da0c4:	6223      	str	r3, [r4, #32]
   da0c6:	e7e7      	b.n	da098 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>

000da0c8 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   da0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da0ca:	4604      	mov	r4, r0
          selfLen_(0) {
   da0cc:	4602      	mov	r2, r0
   da0ce:	f100 011f 	add.w	r1, r0, #31
   da0d2:	2300      	movs	r3, #0
   da0d4:	f802 3b01 	strb.w	r3, [r2], #1
   da0d8:	4291      	cmp	r1, r2
   da0da:	d1fb      	bne.n	da0d4 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   da0dc:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   da0de:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   da0e0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   da0e2:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   da0e4:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   da0e8:	4619      	mov	r1, r3
   da0ea:	f10d 020f 	add.w	r2, sp, #15
   da0ee:	4620      	mov	r0, r4
   da0f0:	f7ff ffa2 	bl	da038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   da0f4:	4620      	mov	r0, r4
   da0f6:	b004      	add	sp, #16
   da0f8:	bd10      	pop	{r4, pc}

000da0fa <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   da0fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da0fc:	460a      	mov	r2, r1
   da0fe:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   da100:	2114      	movs	r1, #20
   da102:	4610      	mov	r0, r2
   da104:	9203      	str	r2, [sp, #12]
   da106:	f004 fc13 	bl	de930 <strnlen>
   da10a:	2100      	movs	r1, #0
   da10c:	4603      	mov	r3, r0
   da10e:	9100      	str	r1, [sp, #0]
   da110:	9a03      	ldr	r2, [sp, #12]
   da112:	2109      	movs	r1, #9
   da114:	4620      	mov	r0, r4
   da116:	f7ff ff8f 	bl	da038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   da11a:	b004      	add	sp, #16
   da11c:	bd10      	pop	{r4, pc}

000da11e <_ZN8particle18BleAdvertisingData15appendLocalNameERK6String>:
    return appendLocalName(name.c_str());
   da11e:	6809      	ldr	r1, [r1, #0]
   da120:	f7ff bfeb 	b.w	da0fa <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>

000da124 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   da124:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   da126:	9300      	str	r3, [sp, #0]
   da128:	4613      	mov	r3, r2
   da12a:	460a      	mov	r2, r1
   da12c:	21ff      	movs	r1, #255	; 0xff
   da12e:	f7ff ff83 	bl	da038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   da132:	b003      	add	sp, #12
   da134:	f85d fb04 	ldr.w	pc, [sp], #4

000da138 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   da138:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   da13a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   da13c:	460e      	mov	r6, r1
   da13e:	ab01      	add	r3, sp, #4
   da140:	6a01      	ldr	r1, [r0, #32]
   da142:	4604      	mov	r4, r0
   da144:	f7ff fdf8 	bl	d9d38 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   da148:	4605      	mov	r5, r0
   da14a:	b178      	cbz	r0, da16c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   da14c:	9801      	ldr	r0, [sp, #4]
   da14e:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   da150:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   da152:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   da154:	4421      	add	r1, r4
   da156:	1b52      	subs	r2, r2, r5
   da158:	4420      	add	r0, r4
   da15a:	f004 fb3d 	bl	de7d8 <memcpy>
        selfLen_ -= len;
   da15e:	6a20      	ldr	r0, [r4, #32]
   da160:	1b40      	subs	r0, r0, r5
   da162:	6220      	str	r0, [r4, #32]
        remove(type);
   da164:	4631      	mov	r1, r6
   da166:	4620      	mov	r0, r4
   da168:	f7ff ffe6 	bl	da138 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   da16c:	b002      	add	sp, #8
   da16e:	bd70      	pop	{r4, r5, r6, pc}

000da170 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   da170:	b538      	push	{r3, r4, r5, lr}
              context_(nullptr) {
   da172:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da176:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   da178:	4604      	mov	r4, r0
              context_(nullptr) {
   da17a:	8043      	strh	r3, [r0, #2]
   da17c:	220e      	movs	r2, #14
   da17e:	4629      	mov	r1, r5
   da180:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   da182:	7105      	strb	r5, [r0, #4]
   da184:	3006      	adds	r0, #6
   da186:	f004 fb4f 	bl	de828 <memset>
   da18a:	f104 0014 	add.w	r0, r4, #20
   da18e:	f7ff fe35 	bl	d9dfc <_ZN8particle7BleUuidC1Ev>
   da192:	f104 0028 	add.w	r0, r4, #40	; 0x28
   da196:	f7ff fe31 	bl	d9dfc <_ZN8particle7BleUuidC1Ev>
   da19a:	4904      	ldr	r1, [pc, #16]	; (da1ac <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   da19c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   da1a0:	f7ff fc93 	bl	d9aca <_ZN6StringC1EPKc>
   da1a4:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
    }
   da1a8:	4620      	mov	r0, r4
   da1aa:	bd38      	pop	{r3, r4, r5, pc}
   da1ac:	000ded09 	.word	0x000ded09

000da1b0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   da1b0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   da1b2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   da1b6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   da1ba:	4293      	cmp	r3, r2
   da1bc:	4618      	mov	r0, r3
   da1be:	d006      	beq.n	da1ce <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   da1c0:	6804      	ldr	r4, [r0, #0]
   da1c2:	8824      	ldrh	r4, [r4, #0]
   da1c4:	428c      	cmp	r4, r1
   da1c6:	f103 0308 	add.w	r3, r3, #8
   da1ca:	d1f6      	bne.n	da1ba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   da1cc:	bd10      	pop	{r4, pc}
        return nullptr;
   da1ce:	2000      	movs	r0, #0
   da1d0:	e7fc      	b.n	da1cc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000da1d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   da1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   da1d6:	4606      	mov	r6, r0
   da1d8:	b085      	sub	sp, #20
   da1da:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   da1dc:	460d      	mov	r5, r1
   da1de:	2900      	cmp	r1, #0
   da1e0:	d050      	beq.n	da284 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   da1e2:	2a00      	cmp	r2, #0
   da1e4:	d04e      	beq.n	da284 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    int subscribe(bool enable) const;

    void onDataReceived(BleOnDataReceivedCallback callback, void* context);

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   da1e6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   da1e8:	7823      	ldrb	r3, [r4, #0]
   da1ea:	2af4      	cmp	r2, #244	; 0xf4
   da1ec:	bf28      	it	cs
   da1ee:	22f4      	movcs	r2, #244	; 0xf4
   da1f0:	b343      	cbz	r3, da244 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   da1f2:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   da1f4:	0798      	lsls	r0, r3, #30
   da1f6:	d509      	bpl.n	da20c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   da1f8:	89a0      	ldrh	r0, [r4, #12]
   da1fa:	9203      	str	r2, [sp, #12]
   da1fc:	2300      	movs	r3, #0
   da1fe:	f7fe ff91 	bl	d9124 <hal_ble_gatt_server_set_characteristic_value>
   da202:	2800      	cmp	r0, #0
   da204:	9a03      	ldr	r2, [sp, #12]
   da206:	da03      	bge.n	da210 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   da208:	b005      	add	sp, #20
   da20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   da20c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   da210:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   da212:	7923      	ldrb	r3, [r4, #4]
   da214:	06d9      	lsls	r1, r3, #27
   da216:	d509      	bpl.n	da22c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   da218:	2f01      	cmp	r7, #1
   da21a:	d007      	beq.n	da22c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   da21c:	89a0      	ldrh	r0, [r4, #12]
   da21e:	2300      	movs	r3, #0
   da220:	4629      	mov	r1, r5
}
   da222:	b005      	add	sp, #20
   da224:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   da228:	f7fe bfae 	b.w	d9188 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   da22c:	069b      	lsls	r3, r3, #26
   da22e:	d5eb      	bpl.n	da208 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   da230:	2f02      	cmp	r7, #2
   da232:	d0e9      	beq.n	da208 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   da234:	89a0      	ldrh	r0, [r4, #12]
   da236:	2300      	movs	r3, #0
   da238:	4629      	mov	r1, r5
}
   da23a:	b005      	add	sp, #20
   da23c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   da240:	f7fe bfac 	b.w	d919c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   da244:	8860      	ldrh	r0, [r4, #2]
   da246:	f64f 71ff 	movw	r1, #65535	; 0xffff
   da24a:	4288      	cmp	r0, r1
   da24c:	d01c      	beq.n	da288 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   da24e:	7921      	ldrb	r1, [r4, #4]
   da250:	074e      	lsls	r6, r1, #29
   da252:	d501      	bpl.n	da258 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   da254:	2f01      	cmp	r7, #1
   da256:	d104      	bne.n	da262 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   da258:	070b      	lsls	r3, r1, #28
   da25a:	d409      	bmi.n	da270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   da25c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   da260:	e7d2      	b.n	da208 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   da262:	89a1      	ldrh	r1, [r4, #12]
   da264:	9300      	str	r3, [sp, #0]
   da266:	4613      	mov	r3, r2
   da268:	462a      	mov	r2, r5
   da26a:	f7fe ff6f 	bl	d914c <hal_ble_gatt_client_write_without_response>
   da26e:	e7cb      	b.n	da208 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   da270:	2f02      	cmp	r7, #2
   da272:	d0f3      	beq.n	da25c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   da274:	2300      	movs	r3, #0
   da276:	89a1      	ldrh	r1, [r4, #12]
   da278:	9300      	str	r3, [sp, #0]
   da27a:	4613      	mov	r3, r2
   da27c:	462a      	mov	r2, r5
   da27e:	f7fe ff5b 	bl	d9138 <hal_ble_gatt_client_write_with_response>
   da282:	e7c1      	b.n	da208 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   da284:	4802      	ldr	r0, [pc, #8]	; (da290 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   da286:	e7bf      	b.n	da208 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   da288:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   da28c:	e7bc      	b.n	da208 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   da28e:	bf00      	nop
   da290:	fffffef2 	.word	0xfffffef2

000da294 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   da294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   da298:	f04f 0800 	mov.w	r8, #0
   da29c:	f8c0 8000 	str.w	r8, [r0]
   da2a0:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da2a2:	2024      	movs	r0, #36	; 0x24
   da2a4:	460f      	mov	r7, r1
   da2a6:	f7f9 fef6 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   da2aa:	1e04      	subs	r4, r0, #0
   da2ac:	f104 060c 	add.w	r6, r4, #12
   da2b0:	d00d      	beq.n	da2ce <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   da2b2:	2301      	movs	r3, #1
   da2b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   da2b8:	4b07      	ldr	r3, [pc, #28]	; (da2d8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   da2ba:	6023      	str	r3, [r4, #0]
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   da2bc:	4630      	mov	r0, r6
   da2be:	f7ff fd9d 	bl	d9dfc <_ZN8particle7BleUuidC1Ev>
   da2c2:	f8c4 8020 	str.w	r8, [r4, #32]
        uuid_ = svcUuid;
   da2c6:	4639      	mov	r1, r7
   da2c8:	4630      	mov	r0, r6
   da2ca:	f7ff fe14 	bl	d9ef6 <_ZN8particle7BleUuidaSERKS0_>
	  __p = __pi->_M_ptr();
   da2ce:	e9c5 6400 	strd	r6, r4, [r5]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   da2d2:	4628      	mov	r0, r5
   da2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da2d8:	000df6fc 	.word	0x000df6fc

000da2dc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   da2dc:	b538      	push	{r3, r4, r5, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   da2de:	2400      	movs	r4, #0
   da2e0:	6004      	str	r4, [r0, #0]
   da2e2:	4605      	mov	r5, r0
   da2e4:	2030      	movs	r0, #48	; 0x30
   da2e6:	f7f9 fed6 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   da2ea:	4603      	mov	r3, r0
   da2ec:	b188      	cbz	r0, da312 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   da2ee:	2201      	movs	r2, #1
   da2f0:	e9c0 2201 	strd	r2, r2, [r0, #4]
	: _M_impl(__a)
   da2f4:	4a09      	ldr	r2, [pc, #36]	; (da31c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   da2f6:	6002      	str	r2, [r0, #0]
              characteristicsDiscovered_(false) {
   da2f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   da2fc:	8182      	strh	r2, [r0, #12]
   da2fe:	300e      	adds	r0, #14
   da300:	f7ff fd68 	bl	d9dd4 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   da304:	e9c3 4406 	strd	r4, r4, [r3, #24]
   da308:	e9c3 4408 	strd	r4, r4, [r3, #32]
   da30c:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
   da310:	82dc      	strh	r4, [r3, #22]
	  _M_pi = __pi;
   da312:	606b      	str	r3, [r5, #4]
   da314:	330c      	adds	r3, #12
	  __p = __pi->_M_ptr();
   da316:	602b      	str	r3, [r5, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   da318:	4628      	mov	r0, r5
   da31a:	bd38      	pop	{r3, r4, r5, pc}
   da31c:	000df718 	.word	0x000df718

000da320 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
    return impl()->address();
   da320:	6809      	ldr	r1, [r1, #0]
   da322:	f851 2f02 	ldr.w	r2, [r1, #2]!
   da326:	6002      	str	r2, [r0, #0]
   da328:	684a      	ldr	r2, [r1, #4]
   da32a:	6042      	str	r2, [r0, #4]
}
   da32c:	4770      	bx	lr

000da32e <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   da32e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da330:	460b      	mov	r3, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   da332:	6801      	ldr	r1, [r0, #0]
   da334:	681a      	ldr	r2, [r3, #0]
   da336:	8809      	ldrh	r1, [r1, #0]
   da338:	8812      	ldrh	r2, [r2, #0]
   da33a:	4291      	cmp	r1, r2
   da33c:	d10c      	bne.n	da358 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   da33e:	4601      	mov	r1, r0
   da340:	4668      	mov	r0, sp
   da342:	f7ff ffed 	bl	da320 <_ZNK8particle13BlePeerDevice7addressEv>
   da346:	a802      	add	r0, sp, #8
   da348:	4619      	mov	r1, r3
   da34a:	f7ff ffe9 	bl	da320 <_ZNK8particle13BlePeerDevice7addressEv>
   da34e:	a902      	add	r1, sp, #8
   da350:	4668      	mov	r0, sp
   da352:	f7ff fd44 	bl	d9dde <_ZNK8particle10BleAddresseqERKS0_>
   da356:	b900      	cbnz	r0, da35a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   da358:	2000      	movs	r0, #0
}
   da35a:	b005      	add	sp, #20
   da35c:	f85d fb04 	ldr.w	pc, [sp], #4

000da360 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   da360:	b510      	push	{r4, lr}
   da362:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   da364:	2034      	movs	r0, #52	; 0x34
   da366:	f7f9 fe96 	bl	d4096 <_Znwj>
   da36a:	4601      	mov	r1, r0
   da36c:	b168      	cbz	r0, da38a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
   da36e:	2300      	movs	r3, #0
   da370:	e9c0 3300 	strd	r3, r3, [r0]
   da374:	e9c0 3302 	strd	r3, r3, [r0, #8]
   da378:	e9c0 3304 	strd	r3, r3, [r0, #16]
   da37c:	e9c0 3306 	strd	r3, r3, [r0, #24]
              disconnectedContext_(nullptr) {
   da380:	e9c0 3308 	strd	r3, r3, [r0, #32]
   da384:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
   da388:	6303      	str	r3, [r0, #48]	; 0x30
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   da38a:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   da38c:	b919      	cbnz	r1, da396 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   da38e:	4a0a      	ldr	r2, [pc, #40]	; (da3b8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   da390:	200a      	movs	r0, #10
   da392:	f7ff f881 	bl	d9498 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   da396:	2000      	movs	r0, #0
   da398:	f7fe fe90 	bl	d90bc <hal_ble_stack_init>
   da39c:	b120      	cbz	r0, da3a8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   da39e:	4a06      	ldr	r2, [pc, #24]	; (da3b8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   da3a0:	2100      	movs	r1, #0
   da3a2:	200a      	movs	r0, #10
   da3a4:	f7ff f878 	bl	d9498 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   da3a8:	6821      	ldr	r1, [r4, #0]
   da3aa:	4804      	ldr	r0, [pc, #16]	; (da3bc <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   da3ac:	2200      	movs	r2, #0
   da3ae:	f7fe fee1 	bl	d9174 <hal_ble_set_callback_on_periph_link_events>
}
   da3b2:	4620      	mov	r0, r4
   da3b4:	bd10      	pop	{r4, pc}
   da3b6:	bf00      	nop
   da3b8:	000d902d 	.word	0x000d902d
   da3bc:	000da7d9 	.word	0x000da7d9

000da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   da3c0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   da3c2:	4c0b      	ldr	r4, [pc, #44]	; (da3f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   da3c4:	7823      	ldrb	r3, [r4, #0]
   da3c6:	f3bf 8f5b 	dmb	ish
   da3ca:	07db      	lsls	r3, r3, #31
   da3cc:	d40e      	bmi.n	da3ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   da3ce:	4620      	mov	r0, r4
   da3d0:	f7f9 fe72 	bl	d40b8 <__cxa_guard_acquire>
   da3d4:	b150      	cbz	r0, da3ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   da3d6:	4807      	ldr	r0, [pc, #28]	; (da3f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   da3d8:	f7ff ffc2 	bl	da360 <_ZN8particle14BleLocalDeviceC1Ev>
   da3dc:	4620      	mov	r0, r4
   da3de:	f7f9 fe70 	bl	d40c2 <__cxa_guard_release>
   da3e2:	4a05      	ldr	r2, [pc, #20]	; (da3f8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   da3e4:	4905      	ldr	r1, [pc, #20]	; (da3fc <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   da3e6:	4803      	ldr	r0, [pc, #12]	; (da3f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   da3e8:	f001 ff52 	bl	dc290 <__aeabi_atexit>
    return instance;
}
   da3ec:	4801      	ldr	r0, [pc, #4]	; (da3f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   da3ee:	bd10      	pop	{r4, pc}
   da3f0:	2003e5dc 	.word	0x2003e5dc
   da3f4:	2003e5e8 	.word	0x2003e5e8
   da3f8:	2003de20 	.word	0x2003de20
   da3fc:	000da5c9 	.word	0x000da5c9

000da400 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   da400:	b570      	push	{r4, r5, r6, lr}
    switch (event->type) {
   da402:	6803      	ldr	r3, [r0, #0]
   da404:	3b09      	subs	r3, #9
   da406:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   da408:	b08a      	sub	sp, #40	; 0x28
   da40a:	4604      	mov	r4, r0
   da40c:	460d      	mov	r5, r1
    switch (event->type) {
   da40e:	d812      	bhi.n	da436 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   da410:	f7ff ffd6 	bl	da3c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   da414:	88a1      	ldrh	r1, [r4, #4]
   da416:	6800      	ldr	r0, [r0, #0]
   da418:	f7ff feca 	bl	da1b0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   da41c:	4602      	mov	r2, r0
   da41e:	b960      	cbnz	r0, da43a <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x3a>
                LOG(ERROR, "Peer device is missing!");
   da420:	2320      	movs	r3, #32
   da422:	e9cd 3002 	strd	r3, r0, [sp, #8]
   da426:	4b09      	ldr	r3, [pc, #36]	; (da44c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   da428:	9300      	str	r3, [sp, #0]
   da42a:	4909      	ldr	r1, [pc, #36]	; (da450 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x50>)
   da42c:	4603      	mov	r3, r0
   da42e:	aa02      	add	r2, sp, #8
   da430:	2032      	movs	r0, #50	; 0x32
   da432:	f7ff f839 	bl	d94a8 <log_message>
}
   da436:	b00a      	add	sp, #40	; 0x28
   da438:	bd70      	pop	{r4, r5, r6, pc}
            if (impl->callback_) {
   da43a:	6cee      	ldr	r6, [r5, #76]	; 0x4c
   da43c:	2e00      	cmp	r6, #0
   da43e:	d0fa      	beq.n	da436 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   da440:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
   da444:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   da446:	47b0      	blx	r6
}
   da448:	e7f5      	b.n	da436 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
   da44a:	bf00      	nop
   da44c:	000df60b 	.word	0x000df60b
   da450:	000df5e4 	.word	0x000df5e4

000da454 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   da454:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   da456:	a801      	add	r0, sp, #4
   da458:	f7ff fca2 	bl	d9da0 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   da45c:	2000      	movs	r0, #0
   da45e:	f7fe fe2d 	bl	d90bc <hal_ble_stack_init>
   da462:	4604      	mov	r4, r0
    WiringBleLock lk;
   da464:	a801      	add	r0, sp, #4
   da466:	f7ff fca9 	bl	d9dbc <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
}
   da46a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   da46e:	b002      	add	sp, #8
   da470:	bd10      	pop	{r4, pc}

000da472 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   da472:	4608      	mov	r0, r1
   da474:	b911      	cbnz	r1, da47c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   da476:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   da478:	f7fe be28 	b.w	d90cc <hal_ble_gap_set_advertising_data>
   da47c:	6a09      	ldr	r1, [r1, #32]
   da47e:	2200      	movs	r2, #0
   da480:	e7fa      	b.n	da478 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000da482 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   da482:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   da484:	4608      	mov	r0, r1
   da486:	b929      	cbnz	r1, da494 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   da488:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   da48a:	b003      	add	sp, #12
   da48c:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   da490:	f7fe be24 	b.w	d90dc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   da494:	2101      	movs	r1, #1
   da496:	9001      	str	r0, [sp, #4]
   da498:	f7ff fe4e 	bl	da138 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   da49c:	9801      	ldr	r0, [sp, #4]
   da49e:	2200      	movs	r2, #0
   da4a0:	6a01      	ldr	r1, [r0, #32]
   da4a2:	e7f2      	b.n	da48a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000da4a4 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   da4a4:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   da4a6:	a801      	add	r0, sp, #4
   da4a8:	f7ff fc7a 	bl	d9da0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   da4ac:	2000      	movs	r0, #0
   da4ae:	f7fe fe1d 	bl	d90ec <hal_ble_gap_start_advertising>
   da4b2:	4604      	mov	r4, r0
    WiringBleLock lk;
   da4b4:	a801      	add	r0, sp, #4
   da4b6:	f7ff fc81 	bl	d9dbc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   da4ba:	4620      	mov	r0, r4
   da4bc:	b002      	add	sp, #8
   da4be:	bd10      	pop	{r4, pc}

000da4c0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   da4c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da4c2:	4605      	mov	r5, r0
    WiringBleLock lk;
   da4c4:	a803      	add	r0, sp, #12
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   da4c6:	9101      	str	r1, [sp, #4]
   da4c8:	4616      	mov	r6, r2
    WiringBleLock lk;
   da4ca:	f7ff fc69 	bl	d9da0 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   da4ce:	9901      	ldr	r1, [sp, #4]
   da4d0:	4628      	mov	r0, r5
   da4d2:	f7ff ffce 	bl	da472 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   da4d6:	1e04      	subs	r4, r0, #0
   da4d8:	db09      	blt.n	da4ee <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    CHECK(setScanResponseData(scanResponse));
   da4da:	4631      	mov	r1, r6
   da4dc:	4628      	mov	r0, r5
   da4de:	f7ff ffd0 	bl	da482 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   da4e2:	1e04      	subs	r4, r0, #0
   da4e4:	db03      	blt.n	da4ee <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    return advertise();
   da4e6:	4628      	mov	r0, r5
   da4e8:	f7ff ffdc 	bl	da4a4 <_ZNK8particle14BleLocalDevice9advertiseEv>
   da4ec:	4604      	mov	r4, r0
    WiringBleLock lk;
   da4ee:	a803      	add	r0, sp, #12
   da4f0:	f7ff fc64 	bl	d9dbc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   da4f4:	4620      	mov	r0, r4
   da4f6:	b004      	add	sp, #16
   da4f8:	bd70      	pop	{r4, r5, r6, pc}

000da4fa <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   da4fa:	6803      	ldr	r3, [r0, #0]
   da4fc:	69d8      	ldr	r0, [r3, #28]
}
   da4fe:	2800      	cmp	r0, #0
   da500:	bfd4      	ite	le
   da502:	2000      	movle	r0, #0
   da504:	2001      	movgt	r0, #1
   da506:	4770      	bx	lr

000da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   da508:	680b      	ldr	r3, [r1, #0]
   da50a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   da50c:	b113      	cbz	r3, da514 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   da50e:	685a      	ldr	r2, [r3, #4]
   da510:	3201      	adds	r2, #1
   da512:	605a      	str	r2, [r3, #4]
      }
   da514:	4770      	bx	lr

000da516 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   da516:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da518:	f851 3b04 	ldr.w	r3, [r1], #4
   da51c:	4604      	mov	r4, r0
   da51e:	f840 3b04 	str.w	r3, [r0], #4
   da522:	f7ff fff1 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   da526:	6823      	ldr	r3, [r4, #0]
   da528:	b90b      	cbnz	r3, da52e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   da52a:	f7ff fc1b 	bl	d9d64 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   da52e:	4620      	mov	r0, r4
   da530:	bd10      	pop	{r4, pc}

000da532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   da532:	b510      	push	{r4, lr}
   da534:	f851 3b04 	ldr.w	r3, [r1], #4
   da538:	4604      	mov	r4, r0
   da53a:	f840 3b04 	str.w	r3, [r0], #4
   da53e:	f7ff ffe3 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   da542:	4620      	mov	r0, r4
   da544:	bd10      	pop	{r4, pc}

000da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   da546:	b510      	push	{r4, lr}
   da548:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   da54a:	6800      	ldr	r0, [r0, #0]
   da54c:	b128      	cbz	r0, da55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   da54e:	6843      	ldr	r3, [r0, #4]
   da550:	3b01      	subs	r3, #1
   da552:	6043      	str	r3, [r0, #4]
   da554:	b90b      	cbnz	r3, da55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   da556:	f7ff fbd7 	bl	d9d08 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   da55a:	4620      	mov	r0, r4
   da55c:	bd10      	pop	{r4, pc}

000da55e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   da55e:	b510      	push	{r4, lr}
   da560:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   da562:	3004      	adds	r0, #4
   da564:	f7ff ffef 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da568:	4620      	mov	r0, r4
   da56a:	bd10      	pop	{r4, pc}

000da56c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da56c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da56e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   da572:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da574:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   da578:	42ae      	cmp	r6, r5
   da57a:	d004      	beq.n	da586 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   da57c:	1d28      	adds	r0, r5, #4
   da57e:	f7ff ffe2 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da582:	3508      	adds	r5, #8
   da584:	e7f8      	b.n	da578 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   da586:	6820      	ldr	r0, [r4, #0]
   da588:	f7ff f89c 	bl	d96c4 <free>
}
   da58c:	4620      	mov	r0, r4
   da58e:	bd70      	pop	{r4, r5, r6, pc}

000da590 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da590:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da592:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   da596:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da598:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   da59c:	42ae      	cmp	r6, r5
   da59e:	d004      	beq.n	da5aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   da5a0:	1d28      	adds	r0, r5, #4
   da5a2:	f7ff ffd0 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da5a6:	3508      	adds	r5, #8
   da5a8:	e7f8      	b.n	da59c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   da5aa:	6820      	ldr	r0, [r4, #0]
   da5ac:	f7ff f88a 	bl	d96c4 <free>
}
   da5b0:	4620      	mov	r0, r4
   da5b2:	bd70      	pop	{r4, r5, r6, pc}

000da5b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   da5b4:	b510      	push	{r4, lr}
   da5b6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   da5b8:	3024      	adds	r0, #36	; 0x24
   da5ba:	f7ff ffe9 	bl	da590 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   da5be:	f104 0018 	add.w	r0, r4, #24
   da5c2:	f7ff ffd3 	bl	da56c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   da5c6:	bd10      	pop	{r4, pc}

000da5c8 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   da5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   da5ca:	6804      	ldr	r4, [r0, #0]
   da5cc:	4606      	mov	r6, r0
   da5ce:	b1c4      	cbz	r4, da602 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    destruct(data_, data_ + size_);
   da5d0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   da5d4:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   da5d8:	42af      	cmp	r7, r5
   da5da:	d004      	beq.n	da5e6 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      ~__shared_ptr() = default;
   da5dc:	1d28      	adds	r0, r5, #4
   da5de:	f7ff ffb2 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da5e2:	3508      	adds	r5, #8
   da5e4:	e7f8      	b.n	da5d8 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
    ::free(ptr);
   da5e6:	69a0      	ldr	r0, [r4, #24]
   da5e8:	f7ff f86c 	bl	d96c4 <free>
    ~BleLocalDeviceImpl() = default;
   da5ec:	f104 000c 	add.w	r0, r4, #12
   da5f0:	f7ff ffce 	bl	da590 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   da5f4:	4620      	mov	r0, r4
   da5f6:	f7ff ffb9 	bl	da56c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   da5fa:	2134      	movs	r1, #52	; 0x34
   da5fc:	4620      	mov	r0, r4
   da5fe:	f001 fe4c 	bl	dc29a <_ZdlPvj>
   da602:	4630      	mov	r0, r6
   da604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000da608 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   da608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da60c:	b085      	sub	sp, #20
   da60e:	4680      	mov	r8, r0
   da610:	4699      	mov	r9, r3
   da612:	2060      	movs	r0, #96	; 0x60
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   da614:	2300      	movs	r3, #0
   da616:	460d      	mov	r5, r1
   da618:	4616      	mov	r6, r2
   da61a:	9300      	str	r3, [sp, #0]
   da61c:	f7f9 fd3b 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   da620:	1e04      	subs	r4, r0, #0
   da622:	f104 070c 	add.w	r7, r4, #12
   da626:	d01c      	beq.n	da662 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5a>
	: _M_impl(__a)
   da628:	4b1c      	ldr	r3, [pc, #112]	; (da69c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   da62a:	6023      	str	r3, [r4, #0]
      : _M_use_count(1), _M_weak_count(1) { }
   da62c:	2201      	movs	r2, #1
   da62e:	e9c4 2201 	strd	r2, r2, [r4, #4]
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   da632:	7836      	ldrb	r6, [r6, #0]
            : BleCharacteristicImpl() {
   da634:	4638      	mov	r0, r7
   da636:	f7ff fd9b 	bl	da170 <_ZN8particle21BleCharacteristicImplC1Ev>
        description_ = desc;
   da63a:	4629      	mov	r1, r5
        properties_ = properties;
   da63c:	7426      	strb	r6, [r4, #16]
        description_ = desc;
   da63e:	f104 0048 	add.w	r0, r4, #72	; 0x48
   da642:	f7ff fa95 	bl	d9b70 <_ZN6StringaSEPKc>
        callback_ = callback;
   da646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da648:	65a3      	str	r3, [r4, #88]	; 0x58
        context_ = context;
   da64a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da64c:	65e3      	str	r3, [r4, #92]	; 0x5c
        charUuid_ = charUuid;
   da64e:	4649      	mov	r1, r9
   da650:	f104 0020 	add.w	r0, r4, #32
   da654:	f7ff fc4f 	bl	d9ef6 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   da658:	990c      	ldr	r1, [sp, #48]	; 0x30
   da65a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   da65e:	f7ff fc4a 	bl	d9ef6 <_ZN8particle7BleUuidaSERKS0_>
	__r._M_pi = _M_pi;
   da662:	2300      	movs	r3, #0
	__r._M_ptr = 0;
   da664:	e9cd 3300 	strd	r3, r3, [sp]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   da668:	f8d8 3000 	ldr.w	r3, [r8]
   da66c:	9302      	str	r3, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da66e:	f8c8 7000 	str.w	r7, [r8]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da672:	f8d8 3004 	ldr.w	r3, [r8, #4]
	__r._M_pi = _M_pi;
   da676:	f8c8 4004 	str.w	r4, [r8, #4]
      ~__shared_ptr() = default;
   da67a:	a803      	add	r0, sp, #12
	_M_pi = __tmp;
   da67c:	9303      	str	r3, [sp, #12]
      ~__shared_ptr() = default;
   da67e:	f7ff ff62 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da682:	a801      	add	r0, sp, #4
   da684:	f7ff ff5f 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   da688:	f8d8 1000 	ldr.w	r1, [r8]
   da68c:	b919      	cbnz	r1, da696 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8e>
        SPARK_ASSERT(false);
   da68e:	4a04      	ldr	r2, [pc, #16]	; (da6a0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x98>)
   da690:	200a      	movs	r0, #10
   da692:	f7fe ff01 	bl	d9498 <panic_>
}
   da696:	b005      	add	sp, #20
   da698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da69c:	000df6e0 	.word	0x000df6e0
   da6a0:	000d902d 	.word	0x000d902d

000da6a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   da6a4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da6a8:	4606      	mov	r6, r0
   da6aa:	460c      	mov	r4, r1
   da6ac:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   da6ae:	d918      	bls.n	da6e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   da6b0:	4290      	cmp	r0, r2
   da6b2:	d217      	bcs.n	da6e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            --end;
   da6b4:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   da6b8:	f1a1 0708 	sub.w	r7, r1, #8
   da6bc:	1a69      	subs	r1, r5, r1
   da6be:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   da6c0:	42af      	cmp	r7, r5
   da6c2:	d020      	beq.n	da706 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   da6c4:	1d2e      	adds	r6, r5, #4
                new(dest) T(std::move(*end));
   da6c6:	b134      	cbz	r4, da6d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da6c8:	4620      	mov	r0, r4
   da6ca:	682b      	ldr	r3, [r5, #0]
   da6cc:	f840 3b04 	str.w	r3, [r0], #4
   da6d0:	4631      	mov	r1, r6
   da6d2:	f7ff ff19 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   da6d6:	4630      	mov	r0, r6
   da6d8:	f7ff ff35 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   da6dc:	3d08      	subs	r5, #8
   da6de:	3c08      	subs	r4, #8
   da6e0:	e7ee      	b.n	da6c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   da6e2:	d010      	beq.n	da706 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
            for (; p != end; ++p, ++dest) {
   da6e4:	42ac      	cmp	r4, r5
   da6e6:	d00e      	beq.n	da706 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
   da6e8:	1d27      	adds	r7, r4, #4
                new(dest) T(std::move(*p));
   da6ea:	b136      	cbz	r6, da6fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da6ec:	4630      	mov	r0, r6
   da6ee:	6823      	ldr	r3, [r4, #0]
   da6f0:	f840 3b04 	str.w	r3, [r0], #4
   da6f4:	4639      	mov	r1, r7
   da6f6:	f7ff ff07 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   da6fa:	4638      	mov	r0, r7
   da6fc:	f7ff ff23 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   da700:	3408      	adds	r4, #8
   da702:	3608      	adds	r6, #8
   da704:	e7ee      	b.n	da6e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
    }
   da706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da708 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   da70c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da710:	4605      	mov	r5, r0
   da712:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   da714:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   da718:	42a7      	cmp	r7, r4
   da71a:	d01a      	beq.n	da752 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
            if (*p == value) {
   da71c:	4641      	mov	r1, r8
   da71e:	4620      	mov	r0, r4
   da720:	f7ff fe05 	bl	da32e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   da724:	4606      	mov	r6, r0
   da726:	b908      	cbnz	r0, da72c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
        for (; p != end; ++p) {
   da728:	3408      	adds	r4, #8
   da72a:	e7f5      	b.n	da718 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   da72c:	b19c      	cbz	r4, da756 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4e>
   da72e:	1d20      	adds	r0, r4, #4
   da730:	f7ff ff09 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   da734:	e9d5 3200 	ldrd	r3, r2, [r5]
   da738:	f104 0108 	add.w	r1, r4, #8
   da73c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   da740:	4620      	mov	r0, r4
   da742:	f7ff ffaf 	bl	da6a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   da746:	686b      	ldr	r3, [r5, #4]
   da748:	3b01      	subs	r3, #1
   da74a:	606b      	str	r3, [r5, #4]
}
   da74c:	4630      	mov	r0, r6
   da74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   da752:	2600      	movs	r6, #0
   da754:	e7fa      	b.n	da74c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>
   da756:	4626      	mov	r6, r4
   da758:	e7f8      	b.n	da74c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>

000da75a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   da75a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da75c:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da75e:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   da762:	6847      	ldr	r7, [r0, #4]
   da764:	9300      	str	r3, [sp, #0]
   da766:	a801      	add	r0, sp, #4
   da768:	f7ff fece 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da76c:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
   da770:	429e      	cmp	r6, r3
   da772:	db12      	blt.n	da79a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x40>
   da774:	3601      	adds	r6, #1
        if (n > 0) {
   da776:	2e00      	cmp	r6, #0
   da778:	dd2c      	ble.n	da7d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x7a>
    return ::malloc(size);
   da77a:	00f0      	lsls	r0, r6, #3
   da77c:	f7fe ff9a 	bl	d96b4 <malloc>
            if (!d) {
   da780:	4605      	mov	r5, r0
   da782:	b308      	cbz	r0, da7c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
            move(d, data_, data_ + size_);
   da784:	e9d4 1200 	ldrd	r1, r2, [r4]
   da788:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   da78c:	f7ff ff8a 	bl	da6a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   da790:	6820      	ldr	r0, [r4, #0]
   da792:	f7fe ff97 	bl	d96c4 <free>
        data_ = d;
   da796:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   da798:	60a6      	str	r6, [r4, #8]
    T* const p = data_ + i;
   da79a:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   da79c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   da79e:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   da7a2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   da7a6:	4629      	mov	r1, r5
   da7a8:	f105 0008 	add.w	r0, r5, #8
   da7ac:	f7ff ff7a 	bl	da6a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   da7b0:	b135      	cbz	r5, da7c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
   da7b2:	9b00      	ldr	r3, [sp, #0]
   da7b4:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   da7b8:	a901      	add	r1, sp, #4
   da7ba:	1d28      	adds	r0, r5, #4
   da7bc:	f7ff fea4 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   da7c0:	6863      	ldr	r3, [r4, #4]
   da7c2:	3301      	adds	r3, #1
   da7c4:	6063      	str	r3, [r4, #4]
    return true;
   da7c6:	2501      	movs	r5, #1
      ~__shared_ptr() = default;
   da7c8:	a801      	add	r0, sp, #4
   da7ca:	f7ff febc 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da7ce:	4628      	mov	r0, r5
   da7d0:	b003      	add	sp, #12
   da7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   da7d4:	2500      	movs	r5, #0
   da7d6:	e7db      	b.n	da790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x36>

000da7d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   da7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da7dc:	4604      	mov	r4, r0
   da7de:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   da7e0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   da7e2:	460d      	mov	r5, r1
        WiringBleLock lk;
   da7e4:	f7ff fadc 	bl	d9da0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   da7e8:	6823      	ldr	r3, [r4, #0]
   da7ea:	2b03      	cmp	r3, #3
   da7ec:	d007      	beq.n	da7fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x26>
   da7ee:	2b04      	cmp	r3, #4
   da7f0:	d048      	beq.n	da884 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
        WiringBleLock lk;
   da7f2:	a803      	add	r0, sp, #12
   da7f4:	f7ff fae2 	bl	d9dbc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   da7f8:	b00e      	add	sp, #56	; 0x38
   da7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                BlePeerDevice peer;
   da7fe:	a804      	add	r0, sp, #16
   da800:	f7ff fd6c 	bl	da2dc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   da804:	9b04      	ldr	r3, [sp, #16]
   da806:	8922      	ldrh	r2, [r4, #8]
   da808:	801a      	strh	r2, [r3, #0]
    address_ = addr;
   da80a:	6862      	ldr	r2, [r4, #4]
        return impl_.get();
   da80c:	9904      	ldr	r1, [sp, #16]
   da80e:	f852 3f08 	ldr.w	r3, [r2, #8]!
   da812:	f8c1 3002 	str.w	r3, [r1, #2]
   da816:	6853      	ldr	r3, [r2, #4]
   da818:	f8c1 3006 	str.w	r3, [r1, #6]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da81c:	a807      	add	r0, sp, #28
   da81e:	9b04      	ldr	r3, [sp, #16]
   da820:	9306      	str	r3, [sp, #24]
   da822:	a905      	add	r1, sp, #20
   da824:	f7ff fe70 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
                if (!impl->peers_.append(peer)) {
   da828:	a906      	add	r1, sp, #24
   da82a:	f105 0018 	add.w	r0, r5, #24
   da82e:	f7ff ff94 	bl	da75a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   da832:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   da834:	a807      	add	r0, sp, #28
   da836:	f7ff fe86 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da83a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   da83c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   da83e:	b98c      	cbnz	r4, da864 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    LOG(ERROR, "Failed to append peer Central device.");
   da840:	4b33      	ldr	r3, [pc, #204]	; (da910 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   da842:	4934      	ldr	r1, [pc, #208]	; (da914 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   da844:	9300      	str	r3, [sp, #0]
   da846:	2032      	movs	r0, #50	; 0x32
   da848:	4623      	mov	r3, r4
   da84a:	aa06      	add	r2, sp, #24
   da84c:	9407      	str	r4, [sp, #28]
   da84e:	f7fe fe2b 	bl	d94a8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   da852:	9b04      	ldr	r3, [sp, #16]
   da854:	4621      	mov	r1, r4
   da856:	8818      	ldrh	r0, [r3, #0]
   da858:	f7fe fc50 	bl	d90fc <hal_ble_gap_disconnect>
   da85c:	a805      	add	r0, sp, #20
   da85e:	f7ff fe72 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da862:	e7c6      	b.n	da7f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
                LOG(TRACE, "Connected by Central device.");
   da864:	4a2c      	ldr	r2, [pc, #176]	; (da918 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   da866:	9200      	str	r2, [sp, #0]
   da868:	2300      	movs	r3, #0
   da86a:	492a      	ldr	r1, [pc, #168]	; (da914 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   da86c:	9307      	str	r3, [sp, #28]
   da86e:	aa06      	add	r2, sp, #24
   da870:	2001      	movs	r0, #1
   da872:	f7fe fe19 	bl	d94a8 <log_message>
                if (impl->connectedCb_) {
   da876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da878:	2b00      	cmp	r3, #0
   da87a:	d0ef      	beq.n	da85c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                    impl->connectedCb_(peer, impl->connectedContext_);
   da87c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   da87e:	a804      	add	r0, sp, #16
   da880:	4798      	blx	r3
   da882:	e7eb      	b.n	da85c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   da884:	8921      	ldrh	r1, [r4, #8]
   da886:	4628      	mov	r0, r5
   da888:	f7ff fc92 	bl	da1b0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   da88c:	4606      	mov	r6, r0
   da88e:	2800      	cmp	r0, #0
   da890:	d0af      	beq.n	da7f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   da892:	6804      	ldr	r4, [r0, #0]
    return data_ + size_;
   da894:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   da898:	f64f 72ff 	movw	r2, #65535	; 0xffff
   da89c:	8022      	strh	r2, [r4, #0]
   da89e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   da8a2:	4299      	cmp	r1, r3
   da8a4:	d003      	beq.n	da8ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
        return impl_.get();
   da8a6:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   da8aa:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics_) {
   da8ac:	e7f9      	b.n	da8a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
    destruct(data_, data_ + size_);
   da8ae:	e9d4 7303 	ldrd	r7, r3, [r4, #12]
   da8b2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   da8b6:	45b8      	cmp	r8, r7
   da8b8:	d004      	beq.n	da8c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   da8ba:	1d38      	adds	r0, r7, #4
   da8bc:	f7ff fe43 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da8c0:	3708      	adds	r7, #8
   da8c2:	e7f8      	b.n	da8b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
    size_ = 0;
   da8c4:	2300      	movs	r3, #0
   da8c6:	6123      	str	r3, [r4, #16]
    destruct(data_, data_ + size_);
   da8c8:	e9d4 7306 	ldrd	r7, r3, [r4, #24]
   da8cc:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   da8d0:	45b8      	cmp	r8, r7
   da8d2:	d004      	beq.n	da8de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x106>
   da8d4:	1d38      	adds	r0, r7, #4
   da8d6:	f7ff fe36 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da8da:	3708      	adds	r7, #8
   da8dc:	e7f8      	b.n	da8d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf8>
    size_ = 0;
   da8de:	2300      	movs	r3, #0
   da8e0:	61e3      	str	r3, [r4, #28]
        servicesDiscovered_ = false;
   da8e2:	8163      	strh	r3, [r4, #10]
                    if (impl->disconnectedCb_) {
   da8e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   da8e6:	b113      	cbz	r3, da8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   da8e8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   da8ea:	4630      	mov	r0, r6
   da8ec:	4798      	blx	r3
                    LOG(TRACE, "Disconnected by remote device.");
   da8ee:	2300      	movs	r3, #0
   da8f0:	2220      	movs	r2, #32
   da8f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   da8f6:	4a09      	ldr	r2, [pc, #36]	; (da91c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   da8f8:	9200      	str	r2, [sp, #0]
   da8fa:	4906      	ldr	r1, [pc, #24]	; (da914 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   da8fc:	aa06      	add	r2, sp, #24
   da8fe:	2001      	movs	r0, #1
   da900:	f7fe fdd2 	bl	d94a8 <log_message>
                    impl->peers_.removeOne(*peer);
   da904:	4631      	mov	r1, r6
   da906:	f105 0018 	add.w	r0, r5, #24
   da90a:	f7ff fefd 	bl	da708 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   da90e:	e770      	b.n	da7f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   da910:	000df623 	.word	0x000df623
   da914:	000df5e4 	.word	0x000df5e4
   da918:	000df649 	.word	0x000df649
   da91c:	000df666 	.word	0x000df666

000da920 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   da920:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da924:	4604      	mov	r4, r0
   da926:	460d      	mov	r5, r1
   da928:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da92a:	d914      	bls.n	da956 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   da92c:	4290      	cmp	r0, r2
   da92e:	d213      	bcs.n	da958 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   da930:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   da934:	1a75      	subs	r5, r6, r1
   da936:	f1a1 0708 	sub.w	r7, r1, #8
   da93a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   da93c:	42b7      	cmp	r7, r6
   da93e:	d018      	beq.n	da972 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   da940:	b11c      	cbz	r4, da94a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   da942:	4631      	mov	r1, r6
   da944:	4620      	mov	r0, r4
   da946:	f7ff fdf4 	bl	da532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   da94a:	1d30      	adds	r0, r6, #4
   da94c:	f7ff fdfb 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   da950:	3e08      	subs	r6, #8
   da952:	3c08      	subs	r4, #8
   da954:	e7f2      	b.n	da93c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   da956:	d00c      	beq.n	da972 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   da958:	42b5      	cmp	r5, r6
   da95a:	d00a      	beq.n	da972 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   da95c:	b11c      	cbz	r4, da966 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   da95e:	4629      	mov	r1, r5
   da960:	4620      	mov	r0, r4
   da962:	f7ff fde6 	bl	da532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   da966:	1d28      	adds	r0, r5, #4
   da968:	f7ff fded 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   da96c:	3508      	adds	r5, #8
   da96e:	3408      	adds	r4, #8
   da970:	e7f2      	b.n	da958 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   da972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da974 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   da974:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   da976:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   da978:	4605      	mov	r5, r0
        if (n > 0) {
   da97a:	dd11      	ble.n	da9a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   da97c:	00f0      	lsls	r0, r6, #3
   da97e:	f7fe fe99 	bl	d96b4 <malloc>
            if (!d) {
   da982:	4604      	mov	r4, r0
   da984:	b158      	cbz	r0, da99e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   da986:	e9d5 1200 	ldrd	r1, r2, [r5]
   da98a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   da98e:	f7ff ffc7 	bl	da920 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   da992:	6828      	ldr	r0, [r5, #0]
   da994:	f7fe fe96 	bl	d96c4 <free>
        data_ = d;
   da998:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   da99a:	60ae      	str	r6, [r5, #8]
        return true;
   da99c:	2001      	movs	r0, #1
    }
   da99e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   da9a0:	2400      	movs	r4, #0
   da9a2:	e7f6      	b.n	da992 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000da9a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   da9a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da9a6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   da9a8:	6845      	ldr	r5, [r0, #4]
   da9aa:	4668      	mov	r0, sp
   da9ac:	f7ff fdc1 	bl	da532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da9b0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   da9b4:	4299      	cmp	r1, r3
   da9b6:	da10      	bge.n	da9da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   da9b8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   da9ba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   da9bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   da9c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   da9c4:	4629      	mov	r1, r5
   da9c6:	f105 0008 	add.w	r0, r5, #8
   da9ca:	f7ff ffa9 	bl	da920 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   da9ce:	b98d      	cbnz	r5, da9f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   da9d0:	6863      	ldr	r3, [r4, #4]
   da9d2:	3301      	adds	r3, #1
   da9d4:	6063      	str	r3, [r4, #4]
    return true;
   da9d6:	2601      	movs	r6, #1
   da9d8:	e006      	b.n	da9e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da9da:	3101      	adds	r1, #1
   da9dc:	4620      	mov	r0, r4
   da9de:	f7ff ffc9 	bl	da974 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   da9e2:	4606      	mov	r6, r0
   da9e4:	2800      	cmp	r0, #0
   da9e6:	d1e7      	bne.n	da9b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   da9e8:	a801      	add	r0, sp, #4
   da9ea:	f7ff fdac 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da9ee:	4630      	mov	r0, r6
   da9f0:	b002      	add	sp, #8
   da9f2:	bd70      	pop	{r4, r5, r6, pc}
   da9f4:	4669      	mov	r1, sp
   da9f6:	4628      	mov	r0, r5
   da9f8:	f7ff fd9b 	bl	da532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   da9fc:	e7e8      	b.n	da9d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000da9fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   da9fe:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   daa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daa02:	4604      	mov	r4, r0
   daa04:	460d      	mov	r5, r1
   daa06:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   daa08:	d914      	bls.n	daa34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   daa0a:	4290      	cmp	r0, r2
   daa0c:	d213      	bcs.n	daa36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   daa0e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   daa12:	1a75      	subs	r5, r6, r1
   daa14:	f1a1 0708 	sub.w	r7, r1, #8
   daa18:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   daa1a:	42b7      	cmp	r7, r6
   daa1c:	d018      	beq.n	daa50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   daa1e:	b11c      	cbz	r4, daa28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   daa20:	4631      	mov	r1, r6
   daa22:	4620      	mov	r0, r4
   daa24:	f7ff fd77 	bl	da516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   daa28:	1d30      	adds	r0, r6, #4
   daa2a:	f7ff fd8c 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   daa2e:	3e08      	subs	r6, #8
   daa30:	3c08      	subs	r4, #8
   daa32:	e7f2      	b.n	daa1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   daa34:	d00c      	beq.n	daa50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   daa36:	42b5      	cmp	r5, r6
   daa38:	d00a      	beq.n	daa50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   daa3a:	b11c      	cbz	r4, daa44 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   daa3c:	4629      	mov	r1, r5
   daa3e:	4620      	mov	r0, r4
   daa40:	f7ff fd69 	bl	da516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   daa44:	1d28      	adds	r0, r5, #4
   daa46:	f7ff fd7e 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   daa4a:	3508      	adds	r5, #8
   daa4c:	3408      	adds	r4, #8
   daa4e:	e7f2      	b.n	daa36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   daa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000daa52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   daa52:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   daa54:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   daa56:	4605      	mov	r5, r0
        if (n > 0) {
   daa58:	dd11      	ble.n	daa7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   daa5a:	00f0      	lsls	r0, r6, #3
   daa5c:	f7fe fe2a 	bl	d96b4 <malloc>
            if (!d) {
   daa60:	4604      	mov	r4, r0
   daa62:	b158      	cbz	r0, daa7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   daa64:	e9d5 1200 	ldrd	r1, r2, [r5]
   daa68:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   daa6c:	f7ff ffc7 	bl	da9fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   daa70:	6828      	ldr	r0, [r5, #0]
   daa72:	f7fe fe27 	bl	d96c4 <free>
        data_ = d;
   daa76:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   daa78:	60ae      	str	r6, [r5, #8]
        return true;
   daa7a:	2001      	movs	r0, #1
    }
   daa7c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   daa7e:	2400      	movs	r4, #0
   daa80:	e7f6      	b.n	daa70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000daa82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   daa82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   daa84:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   daa86:	6845      	ldr	r5, [r0, #4]
   daa88:	4668      	mov	r0, sp
   daa8a:	f7ff fd44 	bl	da516 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   daa8e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   daa92:	4299      	cmp	r1, r3
   daa94:	da10      	bge.n	daab8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   daa96:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   daa98:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   daa9a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   daa9e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   daaa2:	4629      	mov	r1, r5
   daaa4:	f105 0008 	add.w	r0, r5, #8
   daaa8:	f7ff ffa9 	bl	da9fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   daaac:	b98d      	cbnz	r5, daad2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   daaae:	6863      	ldr	r3, [r4, #4]
   daab0:	3301      	adds	r3, #1
   daab2:	6063      	str	r3, [r4, #4]
    return true;
   daab4:	2601      	movs	r6, #1
   daab6:	e006      	b.n	daac6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   daab8:	3101      	adds	r1, #1
   daaba:	4620      	mov	r0, r4
   daabc:	f7ff ffc9 	bl	daa52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   daac0:	4606      	mov	r6, r0
   daac2:	2800      	cmp	r0, #0
   daac4:	d1e7      	bne.n	daa96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   daac6:	a801      	add	r0, sp, #4
   daac8:	f7ff fd3d 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   daacc:	4630      	mov	r0, r6
   daace:	b002      	add	sp, #8
   daad0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   daad2:	4669      	mov	r1, sp
   daad4:	4628      	mov	r0, r5
   daad6:	f7ff fd1e 	bl	da516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   daada:	e7e8      	b.n	daaae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000daadc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   daadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daae0:	4616      	mov	r6, r2
   daae2:	b0a1      	sub	sp, #132	; 0x84
   daae4:	4680      	mov	r8, r0
    WiringBleLock lk;
   daae6:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   daae8:	460d      	mov	r5, r1
    WiringBleLock lk;
   daaea:	f7ff f959 	bl	d9da0 <_ZN8particle3ble13WiringBleLockC1Ev>
   daaee:	6834      	ldr	r4, [r6, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   daaf0:	7923      	ldrb	r3, [r4, #4]
   daaf2:	b953      	cbnz	r3, dab0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   daaf4:	4631      	mov	r1, r6
   daaf6:	4640      	mov	r0, r8
   daaf8:	f7ff fd0d 	bl	da516 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   daafc:	a80a      	add	r0, sp, #40	; 0x28
   daafe:	f7ff f95d 	bl	d9dbc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   dab02:	4640      	mov	r0, r8
   dab04:	b021      	add	sp, #132	; 0x84
   dab06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   dab0a:	682b      	ldr	r3, [r5, #0]
    return data_ + size_;
   dab0c:	e9d3 7303 	ldrd	r7, r3, [r3, #12]
   dab10:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   dab14:	9303      	str	r3, [sp, #12]
   dab16:	f104 0928 	add.w	r9, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   dab1a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   dab1e:	9b03      	ldr	r3, [sp, #12]
   dab20:	429f      	cmp	r7, r3
   dab22:	d021      	beq.n	dab68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   dab24:	f8d7 a000 	ldr.w	sl, [r7]
        if (charUuid_ == impl.charUuid_ &&
   dab28:	4658      	mov	r0, fp
   dab2a:	f10a 0114 	add.w	r1, sl, #20
   dab2e:	f7ff f9fc 	bl	d9f2a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   dab32:	b1b8      	cbz	r0, dab64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   dab34:	f10a 0128 	add.w	r1, sl, #40	; 0x28
   dab38:	4648      	mov	r0, r9
   dab3a:	f7ff f9f6 	bl	d9f2a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   dab3e:	b188      	cbz	r0, dab64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   dab40:	6823      	ldr	r3, [r4, #0]
   dab42:	f8da 2000 	ldr.w	r2, [sl]
   dab46:	4053      	eors	r3, r2
   dab48:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   dab4c:	d10a      	bne.n	dab64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   dab4e:	2220      	movs	r2, #32
   dab50:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   dab54:	4a58      	ldr	r2, [pc, #352]	; (dacb8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1dc>)
   dab56:	9200      	str	r2, [sp, #0]
   dab58:	aa15      	add	r2, sp, #84	; 0x54
   dab5a:	4958      	ldr	r1, [pc, #352]	; (dacbc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e0>)
   dab5c:	2032      	movs	r0, #50	; 0x32
   dab5e:	f7fe fca3 	bl	d94a8 <log_message>
   dab62:	e7c7      	b.n	daaf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   dab64:	3708      	adds	r7, #8
   dab66:	e7da      	b.n	dab1e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   dab68:	4648      	mov	r0, r9
   dab6a:	f7ff f98f 	bl	d9e8c <_ZNK8particle7BleUuid7isValidEv>
   dab6e:	b918      	cbnz	r0, dab78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   dab70:	4953      	ldr	r1, [pc, #332]	; (dacc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
   dab72:	4648      	mov	r0, r9
   dab74:	f7ff f9cc 	bl	d9f10 <_ZN8particle7BleUuidaSEPKh>
   dab78:	682b      	ldr	r3, [r5, #0]
   dab7a:	e9d3 7300 	ldrd	r7, r3, [r3]
   dab7e:	eb07 0bc3 	add.w	fp, r7, r3, lsl #3
    for (auto& svc : impl()->services()) {
   dab82:	455f      	cmp	r7, fp
   dab84:	46ba      	mov	sl, r7
        BleService svc(charImpl->svcUUID());
   dab86:	4649      	mov	r1, r9
    for (auto& svc : impl()->services()) {
   dab88:	d06a      	beq.n	dac60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x184>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   dab8a:	f857 0b08 	ldr.w	r0, [r7], #8
   dab8e:	f7ff f9cc 	bl	d9f2a <_ZNK8particle7BleUuideqERKS0_>
   dab92:	2800      	cmp	r0, #0
   dab94:	d0f5      	beq.n	dab82 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xa6>
        if (!charUuid_.isValid()) {
   dab96:	f104 0714 	add.w	r7, r4, #20
   dab9a:	4638      	mov	r0, r7
   dab9c:	f7ff f976 	bl	d9e8c <_ZNK8particle7BleUuid7isValidEv>
   daba0:	b968      	cbnz	r0, dabbe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xe2>
            defaultUuidCharCount_++;
   daba2:	4b48      	ldr	r3, [pc, #288]	; (dacc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e8>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   daba4:	4946      	ldr	r1, [pc, #280]	; (dacc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
            defaultUuidCharCount_++;
   daba6:	881a      	ldrh	r2, [r3, #0]
   daba8:	3201      	adds	r2, #1
   dabaa:	b292      	uxth	r2, r2
   dabac:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   dabae:	a815      	add	r0, sp, #84	; 0x54
   dabb0:	2301      	movs	r3, #1
   dabb2:	f7ff f961 	bl	d9e78 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   dabb6:	a915      	add	r1, sp, #84	; 0x54
   dabb8:	4638      	mov	r0, r7
   dabba:	f7ff f99c 	bl	d9ef6 <_ZN8particle7BleUuidaSERKS0_>
    hal_ble_char_init_t charInit = {};
   dabbe:	2228      	movs	r2, #40	; 0x28
   dabc0:	2100      	movs	r1, #0
   dabc2:	a816      	add	r0, sp, #88	; 0x58
   dabc4:	f003 fe30 	bl	de828 <memset>
    charInit.version = BLE_API_VERSION;
   dabc8:	4b3f      	ldr	r3, [pc, #252]	; (dacc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ec>)
   dabca:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   dabcc:	4639      	mov	r1, r7
   dabce:	a804      	add	r0, sp, #16
   dabd0:	f7ff f96e 	bl	d9eb0 <_ZN8particle7BleUuid7halUUIDEv>
   dabd4:	ab04      	add	r3, sp, #16
   dabd6:	aa18      	add	r2, sp, #96	; 0x60
   dabd8:	f10d 0c20 	add.w	ip, sp, #32
   dabdc:	6818      	ldr	r0, [r3, #0]
   dabde:	6859      	ldr	r1, [r3, #4]
   dabe0:	4617      	mov	r7, r2
   dabe2:	c703      	stmia	r7!, {r0, r1}
   dabe4:	3308      	adds	r3, #8
   dabe6:	4563      	cmp	r3, ip
   dabe8:	463a      	mov	r2, r7
   dabea:	d1f7      	bne.n	dabdc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x100>
   dabec:	6818      	ldr	r0, [r3, #0]
   dabee:	6038      	str	r0, [r7, #0]
    charInit.properties = charImpl->properties().value();
   dabf0:	7923      	ldrb	r3, [r4, #4]
   dabf2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   dabf6:	f8da 3000 	ldr.w	r3, [sl]
   dabfa:	8a9b      	ldrh	r3, [r3, #20]
   dabfc:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   dac00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dac02:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   dac04:	4b31      	ldr	r3, [pc, #196]	; (daccc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f0>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   dac06:	2200      	movs	r2, #0
   dac08:	1da1      	adds	r1, r4, #6
   dac0a:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   dac0c:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   dac10:	f7fe faa6 	bl	d9160 <hal_ble_gatt_server_add_characteristic>
   dac14:	2800      	cmp	r0, #0
   dac16:	f47f af6d 	bne.w	daaf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    charImpl->local() = true;
   dac1a:	2301      	movs	r3, #1
   dac1c:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   dac1e:	682c      	ldr	r4, [r5, #0]
    if(!impl()->characteristics().append(characteristic)) {
   dac20:	4631      	mov	r1, r6
        return characteristics_;
   dac22:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   dac24:	a80d      	add	r0, sp, #52	; 0x34
   dac26:	f7ff fc76 	bl	da516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   dac2a:	4620      	mov	r0, r4
   dac2c:	a90d      	add	r1, sp, #52	; 0x34
   dac2e:	f7ff ff28 	bl	daa82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   dac32:	4604      	mov	r4, r0
   dac34:	a80e      	add	r0, sp, #56	; 0x38
   dac36:	f7ff fc86 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dac3a:	2c00      	cmp	r4, #0
   dac3c:	f47f af5a 	bne.w	daaf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   dac40:	2320      	movs	r3, #32
   dac42:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   dac46:	4b22      	ldr	r3, [pc, #136]	; (dacd0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   dac48:	9300      	str	r3, [sp, #0]
   dac4a:	aa0d      	add	r2, sp, #52	; 0x34
   dac4c:	4623      	mov	r3, r4
   dac4e:	e784      	b.n	dab5a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   dac50:	4631      	mov	r1, r6
   dac52:	4640      	mov	r0, r8
   dac54:	f7ff fc5f 	bl	da516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   dac58:	a80c      	add	r0, sp, #48	; 0x30
   dac5a:	f7ff fc74 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dac5e:	e74d      	b.n	daafc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   dac60:	a80b      	add	r0, sp, #44	; 0x2c
   dac62:	f7ff fb17 	bl	da294 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   dac66:	4649      	mov	r1, r9
   dac68:	a815      	add	r0, sp, #84	; 0x54
   dac6a:	f7ff f921 	bl	d9eb0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   dac6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dac70:	2300      	movs	r3, #0
   dac72:	3214      	adds	r2, #20
   dac74:	a915      	add	r1, sp, #84	; 0x54
   dac76:	2001      	movs	r0, #1
   dac78:	f7fe fa4a 	bl	d9110 <hal_ble_gatt_server_add_service>
   dac7c:	2800      	cmp	r0, #0
   dac7e:	d1e7      	bne.n	dac50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
        return services_;
   dac80:	682f      	ldr	r7, [r5, #0]
   dac82:	a90b      	add	r1, sp, #44	; 0x2c
   dac84:	a80d      	add	r0, sp, #52	; 0x34
   dac86:	f7ff fc54 	bl	da532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   dac8a:	4638      	mov	r0, r7
   dac8c:	a90d      	add	r1, sp, #52	; 0x34
   dac8e:	f7ff fe89 	bl	da9a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   dac92:	4607      	mov	r7, r0
   dac94:	a80e      	add	r0, sp, #56	; 0x38
   dac96:	f7ff fc56 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dac9a:	2f00      	cmp	r7, #0
   dac9c:	d0d8      	beq.n	dac50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
   dac9e:	682a      	ldr	r2, [r5, #0]
    return data_[size_ - 1];
   daca0:	6853      	ldr	r3, [r2, #4]
   daca2:	6812      	ldr	r2, [r2, #0]
   daca4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   daca8:	3b01      	subs	r3, #1
   dacaa:	a80c      	add	r0, sp, #48	; 0x30
   dacac:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
   dacb0:	f7ff fc49 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dacb4:	e76f      	b.n	dab96 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xba>
   dacb6:	bf00      	nop
   dacb8:	000df685 	.word	0x000df685
   dacbc:	000df5e4 	.word	0x000df5e4
   dacc0:	000df744 	.word	0x000df744
   dacc4:	2003e5e0 	.word	0x2003e5e0
   dacc8:	002c0001 	.word	0x002c0001
   daccc:	000da401 	.word	0x000da401
   dacd0:	000df6b0 	.word	0x000df6b0

000dacd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   dacd4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   dacd6:	4c06      	ldr	r4, [pc, #24]	; (dacf0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   dacd8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   dacda:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   dacdc:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   dacde:	f7fe fa67 	bl	d91b0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   dace2:	4620      	mov	r0, r4
   dace4:	4a03      	ldr	r2, [pc, #12]	; (dacf4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   dace6:	4904      	ldr	r1, [pc, #16]	; (dacf8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   dace8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   dacec:	f001 bad0 	b.w	dc290 <__aeabi_atexit>
   dacf0:	2003e5e4 	.word	0x2003e5e4
   dacf4:	2003de20 	.word	0x2003de20
   dacf8:	000d9d29 	.word	0x000d9d29

000dacfc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dacfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dacfe:	4606      	mov	r6, r0
   dad00:	460d      	mov	r5, r1
  size_t n = 0;
   dad02:	188f      	adds	r7, r1, r2
   dad04:	2400      	movs	r4, #0
  while (size--) {
   dad06:	42bd      	cmp	r5, r7
   dad08:	d00c      	beq.n	dad24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dad0a:	6833      	ldr	r3, [r6, #0]
   dad0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   dad10:	689b      	ldr	r3, [r3, #8]
   dad12:	4630      	mov	r0, r6
   dad14:	4798      	blx	r3
     if (chunk>=0)
   dad16:	1e03      	subs	r3, r0, #0
   dad18:	db01      	blt.n	dad1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dad1a:	441c      	add	r4, r3
  while (size--) {
   dad1c:	e7f3      	b.n	dad06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dad1e:	2c00      	cmp	r4, #0
   dad20:	bf08      	it	eq
   dad22:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   dad24:	4620      	mov	r0, r4
   dad26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dad28 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   dad28:	b508      	push	{r3, lr}
  return write(str);
   dad2a:	f7fc fe55 	bl	d79d8 <_ZN5Print5writeEPKc>
}
   dad2e:	bd08      	pop	{r3, pc}

000dad30 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   dad30:	6803      	ldr	r3, [r0, #0]
   dad32:	689b      	ldr	r3, [r3, #8]
   dad34:	4718      	bx	r3

000dad36 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dad36:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dad38:	210d      	movs	r1, #13
{
   dad3a:	4605      	mov	r5, r0
  size_t n = print('\r');
   dad3c:	f7ff fff8 	bl	dad30 <_ZN5Print5printEc>
  n += print('\n');
   dad40:	210a      	movs	r1, #10
  size_t n = print('\r');
   dad42:	4604      	mov	r4, r0
  n += print('\n');
   dad44:	4628      	mov	r0, r5
   dad46:	f7ff fff3 	bl	dad30 <_ZN5Print5printEc>
  return n;
}
   dad4a:	4420      	add	r0, r4
   dad4c:	bd38      	pop	{r3, r4, r5, pc}

000dad4e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   dad4e:	b538      	push	{r3, r4, r5, lr}
   dad50:	4605      	mov	r5, r0
  return write(str);
   dad52:	f7fc fe41 	bl	d79d8 <_ZN5Print5writeEPKc>
   dad56:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   dad58:	4628      	mov	r0, r5
   dad5a:	f7ff ffec 	bl	dad36 <_ZN5Print7printlnEv>
  return n;
}
   dad5e:	4420      	add	r0, r4
   dad60:	bd38      	pop	{r3, r4, r5, pc}

000dad62 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dad62:	b530      	push	{r4, r5, lr}
   dad64:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dad66:	2300      	movs	r3, #0
   dad68:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dad6c:	2a01      	cmp	r2, #1
   dad6e:	bf98      	it	ls
   dad70:	220a      	movls	r2, #10
   dad72:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   dad74:	460d      	mov	r5, r1
   dad76:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   dad7a:	fb01 5312 	mls	r3, r1, r2, r5
   dad7e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dad82:	2b09      	cmp	r3, #9
   dad84:	bf94      	ite	ls
   dad86:	3330      	addls	r3, #48	; 0x30
   dad88:	3337      	addhi	r3, #55	; 0x37
   dad8a:	b2db      	uxtb	r3, r3
  } while(n);
   dad8c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dad8e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   dad92:	d9ef      	bls.n	dad74 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   dad94:	4621      	mov	r1, r4
   dad96:	f7fc fe1f 	bl	d79d8 <_ZN5Print5writeEPKc>
}
   dad9a:	b00b      	add	sp, #44	; 0x2c
   dad9c:	bd30      	pop	{r4, r5, pc}
	...

000dada0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   dada0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dada4:	ec55 4b10 	vmov	r4, r5, d0
   dada8:	4606      	mov	r6, r0
   dadaa:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   dadac:	ee10 2a10 	vmov	r2, s0
   dadb0:	ee10 0a10 	vmov	r0, s0
   dadb4:	462b      	mov	r3, r5
   dadb6:	4629      	mov	r1, r5
   dadb8:	f003 f97e 	bl	de0b8 <__aeabi_dcmpun>
   dadbc:	b140      	cbz	r0, dadd0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   dadbe:	4953      	ldr	r1, [pc, #332]	; (daf0c <_ZN5Print10printFloatEdh+0x16c>)
   dadc0:	4630      	mov	r0, r6
   dadc2:	f7fc fe09 	bl	d79d8 <_ZN5Print5writeEPKc>
   dadc6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   dadc8:	4650      	mov	r0, sl
   dadca:	b003      	add	sp, #12
   dadcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   dadd0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   dadd4:	4b4e      	ldr	r3, [pc, #312]	; (daf10 <_ZN5Print10printFloatEdh+0x170>)
   dadd6:	f04f 32ff 	mov.w	r2, #4294967295
   dadda:	4620      	mov	r0, r4
   daddc:	4649      	mov	r1, r9
   dadde:	f003 f96b 	bl	de0b8 <__aeabi_dcmpun>
   dade2:	b948      	cbnz	r0, dadf8 <_ZN5Print10printFloatEdh+0x58>
   dade4:	4b4a      	ldr	r3, [pc, #296]	; (daf10 <_ZN5Print10printFloatEdh+0x170>)
   dade6:	f04f 32ff 	mov.w	r2, #4294967295
   dadea:	4620      	mov	r0, r4
   dadec:	4649      	mov	r1, r9
   dadee:	f003 f945 	bl	de07c <__aeabi_dcmple>
   dadf2:	b908      	cbnz	r0, dadf8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   dadf4:	4947      	ldr	r1, [pc, #284]	; (daf14 <_ZN5Print10printFloatEdh+0x174>)
   dadf6:	e7e3      	b.n	dadc0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   dadf8:	4b47      	ldr	r3, [pc, #284]	; (daf18 <_ZN5Print10printFloatEdh+0x178>)
   dadfa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dadfe:	4620      	mov	r0, r4
   dae00:	4629      	mov	r1, r5
   dae02:	f003 f94f 	bl	de0a4 <__aeabi_dcmpgt>
   dae06:	b108      	cbz	r0, dae0c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   dae08:	4944      	ldr	r1, [pc, #272]	; (daf1c <_ZN5Print10printFloatEdh+0x17c>)
   dae0a:	e7d9      	b.n	dadc0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   dae0c:	4b44      	ldr	r3, [pc, #272]	; (daf20 <_ZN5Print10printFloatEdh+0x180>)
   dae0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dae12:	4620      	mov	r0, r4
   dae14:	4629      	mov	r1, r5
   dae16:	f003 f927 	bl	de068 <__aeabi_dcmplt>
   dae1a:	2800      	cmp	r0, #0
   dae1c:	d1f4      	bne.n	dae08 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   dae1e:	2200      	movs	r2, #0
   dae20:	2300      	movs	r3, #0
   dae22:	4620      	mov	r0, r4
   dae24:	4629      	mov	r1, r5
   dae26:	f003 f91f 	bl	de068 <__aeabi_dcmplt>
   dae2a:	b1d0      	cbz	r0, dae62 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   dae2c:	212d      	movs	r1, #45	; 0x2d
   dae2e:	4630      	mov	r0, r6
   dae30:	f7ff ff7e 	bl	dad30 <_ZN5Print5printEc>
     number = -number;
   dae34:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   dae38:	4682      	mov	sl, r0
     number = -number;
   dae3a:	461d      	mov	r5, r3
  double rounding = 0.5;
   dae3c:	4939      	ldr	r1, [pc, #228]	; (daf24 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   dae3e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; daf2c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   dae42:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   dae46:	2000      	movs	r0, #0
    rounding /= 10.0;
   dae48:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   dae4c:	fa5f f38b 	uxtb.w	r3, fp
   dae50:	429f      	cmp	r7, r3
   dae52:	d908      	bls.n	dae66 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   dae54:	4642      	mov	r2, r8
   dae56:	464b      	mov	r3, r9
   dae58:	f002 ffbe 	bl	dddd8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   dae5c:	f10b 0b01 	add.w	fp, fp, #1
   dae60:	e7f4      	b.n	dae4c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   dae62:	4682      	mov	sl, r0
   dae64:	e7ea      	b.n	dae3c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   dae66:	4622      	mov	r2, r4
   dae68:	462b      	mov	r3, r5
   dae6a:	f002 fcd5 	bl	dd818 <__adddf3>
   dae6e:	460d      	mov	r5, r1
   dae70:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   dae72:	f003 f95f 	bl	de134 <__aeabi_d2uiz>
   dae76:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   dae78:	f002 fe0a 	bl	dda90 <__aeabi_ui2d>
   dae7c:	4602      	mov	r2, r0
   dae7e:	460b      	mov	r3, r1
   dae80:	4620      	mov	r0, r4
   dae82:	4629      	mov	r1, r5
   dae84:	f002 fcc6 	bl	dd814 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   dae88:	220a      	movs	r2, #10
   dae8a:	4604      	mov	r4, r0
   dae8c:	460d      	mov	r5, r1
   dae8e:	4630      	mov	r0, r6
   dae90:	4641      	mov	r1, r8
   dae92:	f7ff ff66 	bl	dad62 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   dae96:	4482      	add	sl, r0
  if (digits > 0) {
   dae98:	b127      	cbz	r7, daea4 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   dae9a:	4923      	ldr	r1, [pc, #140]	; (daf28 <_ZN5Print10printFloatEdh+0x188>)
   dae9c:	4630      	mov	r0, r6
   dae9e:	f7fc fd9b 	bl	d79d8 <_ZN5Print5writeEPKc>
    n += print(".");
   daea2:	4482      	add	sl, r0
    remainder *= 10.0;
   daea4:	f8df 9084 	ldr.w	r9, [pc, #132]	; daf2c <_ZN5Print10printFloatEdh+0x18c>
   daea8:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   daeac:	3f01      	subs	r7, #1
   daeae:	b2ff      	uxtb	r7, r7
   daeb0:	2fff      	cmp	r7, #255	; 0xff
   daeb2:	d089      	beq.n	dadc8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   daeb4:	4642      	mov	r2, r8
   daeb6:	464b      	mov	r3, r9
   daeb8:	4620      	mov	r0, r4
   daeba:	4629      	mov	r1, r5
   daebc:	f002 fe62 	bl	ddb84 <__aeabi_dmul>
   daec0:	4604      	mov	r4, r0
   daec2:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   daec4:	f003 f90e 	bl	de0e4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   daec8:	f1b0 0b00 	subs.w	fp, r0, #0
   daecc:	da1a      	bge.n	daf04 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   daece:	212d      	movs	r1, #45	; 0x2d
   daed0:	4630      	mov	r0, r6
   daed2:	f7ff ff2d 	bl	dad30 <_ZN5Print5printEc>
            val = -n;
   daed6:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   daeda:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   daedc:	220a      	movs	r2, #10
   daede:	4630      	mov	r0, r6
   daee0:	9301      	str	r3, [sp, #4]
   daee2:	f7ff ff3e 	bl	dad62 <_ZN5Print11printNumberEmh>
   daee6:	9b01      	ldr	r3, [sp, #4]
   daee8:	4418      	add	r0, r3
    n += print(toPrint);
   daeea:	4482      	add	sl, r0
    remainder -= toPrint;
   daeec:	4658      	mov	r0, fp
   daeee:	f002 fddf 	bl	ddab0 <__aeabi_i2d>
   daef2:	4602      	mov	r2, r0
   daef4:	460b      	mov	r3, r1
   daef6:	4620      	mov	r0, r4
   daef8:	4629      	mov	r1, r5
   daefa:	f002 fc8b 	bl	dd814 <__aeabi_dsub>
   daefe:	4604      	mov	r4, r0
   daf00:	460d      	mov	r5, r1
  while (digits-- > 0)
   daf02:	e7d3      	b.n	daeac <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   daf04:	4659      	mov	r1, fp
        size_t t = 0;
   daf06:	2300      	movs	r3, #0
   daf08:	e7e8      	b.n	daedc <_ZN5Print10printFloatEdh+0x13c>
   daf0a:	bf00      	nop
   daf0c:	000df764 	.word	0x000df764
   daf10:	7fefffff 	.word	0x7fefffff
   daf14:	000df768 	.word	0x000df768
   daf18:	41efffff 	.word	0x41efffff
   daf1c:	000df76c 	.word	0x000df76c
   daf20:	c1efffff 	.word	0xc1efffff
   daf24:	3fe00000 	.word	0x3fe00000
   daf28:	000df6d5 	.word	0x000df6d5
   daf2c:	40240000 	.word	0x40240000

000daf30 <_ZN5Print5printEfi>:
{
   daf30:	b538      	push	{r3, r4, r5, lr}
   daf32:	4604      	mov	r4, r0
   daf34:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   daf38:	b2cd      	uxtb	r5, r1
   daf3a:	f002 fdcb 	bl	ddad4 <__aeabi_f2d>
   daf3e:	ec41 0b10 	vmov	d0, r0, r1
   daf42:	4629      	mov	r1, r5
   daf44:	4620      	mov	r0, r4
}
   daf46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   daf4a:	f7ff bf29 	b.w	dada0 <_ZN5Print10printFloatEdh>

000daf4e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   daf4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daf52:	b086      	sub	sp, #24
   daf54:	af00      	add	r7, sp, #0
   daf56:	4605      	mov	r5, r0
   daf58:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   daf5a:	1d38      	adds	r0, r7, #4
   daf5c:	2114      	movs	r1, #20
{
   daf5e:	4614      	mov	r4, r2
    va_copy(args2, args);
   daf60:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   daf62:	f7fe fbc7 	bl	d96f4 <vsnprintf>

    if (n<bufsize)
   daf66:	2813      	cmp	r0, #19
   daf68:	d80e      	bhi.n	daf88 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   daf6a:	1d39      	adds	r1, r7, #4
   daf6c:	4628      	mov	r0, r5
   daf6e:	f7fc fd33 	bl	d79d8 <_ZN5Print5writeEPKc>
   daf72:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   daf74:	b11e      	cbz	r6, daf7e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   daf76:	4628      	mov	r0, r5
   daf78:	f7ff fedd 	bl	dad36 <_ZN5Print7printlnEv>
   daf7c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   daf7e:	4620      	mov	r0, r4
   daf80:	3718      	adds	r7, #24
   daf82:	46bd      	mov	sp, r7
   daf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   daf88:	f100 0308 	add.w	r3, r0, #8
   daf8c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   daf90:	46e8      	mov	r8, sp
        char bigger[n+1];
   daf92:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   daf96:	4622      	mov	r2, r4
   daf98:	1c41      	adds	r1, r0, #1
   daf9a:	683b      	ldr	r3, [r7, #0]
   daf9c:	4668      	mov	r0, sp
   daf9e:	f7fe fba9 	bl	d96f4 <vsnprintf>
  return write(str);
   dafa2:	4669      	mov	r1, sp
   dafa4:	4628      	mov	r0, r5
   dafa6:	f7fc fd17 	bl	d79d8 <_ZN5Print5writeEPKc>
   dafaa:	4604      	mov	r4, r0
   dafac:	46c5      	mov	sp, r8
   dafae:	e7e1      	b.n	daf74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000dafb0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   dafb0:	4b01      	ldr	r3, [pc, #4]	; (dafb8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dafb2:	4a02      	ldr	r2, [pc, #8]	; (dafbc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dafb4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   dafb6:	4770      	bx	lr
   dafb8:	2003e5ec 	.word	0x2003e5ec
   dafbc:	000df770 	.word	0x000df770

000dafc0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dafc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   dafc4:	4a15      	ldr	r2, [pc, #84]	; (db01c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dafc6:	f8df 8060 	ldr.w	r8, [pc, #96]	; db028 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   dafca:	e9d2 3200 	ldrd	r3, r2, [r2]
   dafce:	18c0      	adds	r0, r0, r3
   dafd0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   dafd4:	4a12      	ldr	r2, [pc, #72]	; (db020 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   dafd6:	e9d2 3200 	ldrd	r3, r2, [r2]
   dafda:	18c6      	adds	r6, r0, r3
   dafdc:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   dafe0:	e9d8 2300 	ldrd	r2, r3, [r8]
   dafe4:	42bb      	cmp	r3, r7
   dafe6:	bf08      	it	eq
   dafe8:	42b2      	cmpeq	r2, r6
{
   dafea:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   dafec:	d013      	beq.n	db016 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   dafee:	a903      	add	r1, sp, #12
   daff0:	4668      	mov	r0, sp
   daff2:	e9cd 6700 	strd	r6, r7, [sp]
   daff6:	f7fe fba5 	bl	d9744 <localtime_r>
	calendar_time.tm_year += 1900;
   daffa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   daffc:	4d09      	ldr	r5, [pc, #36]	; (db024 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   daffe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db002:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   db004:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db00a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db00c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   db00e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db012:	6823      	ldr	r3, [r4, #0]
   db014:	602b      	str	r3, [r5, #0]
    }
}
   db016:	b00c      	add	sp, #48	; 0x30
   db018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db01c:	2003e620 	.word	0x2003e620
   db020:	2003e618 	.word	0x2003e618
   db024:	2003e5f4 	.word	0x2003e5f4
   db028:	2003e628 	.word	0x2003e628

000db02c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   db02c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   db02e:	2000      	movs	r0, #0
   db030:	f7fe fb28 	bl	d9684 <spark_sync_time_pending>
   db034:	b128      	cbz	r0, db042 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   db036:	f7fe fb05 	bl	d9644 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   db03a:	f080 0001 	eor.w	r0, r0, #1
   db03e:	b2c0      	uxtb	r0, r0
    }
   db040:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   db042:	2001      	movs	r0, #1
   db044:	e7fc      	b.n	db040 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000db048 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   db048:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db04a:	f7ff ffb9 	bl	dafc0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   db04e:	4b02      	ldr	r3, [pc, #8]	; (db058 <_ZN9TimeClass5monthEx+0x10>)
   db050:	6918      	ldr	r0, [r3, #16]
}
   db052:	3001      	adds	r0, #1
   db054:	bd08      	pop	{r3, pc}
   db056:	bf00      	nop
   db058:	2003e5f4 	.word	0x2003e5f4

000db05c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   db05c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   db05e:	2000      	movs	r0, #0
   db060:	f7fe f814 	bl	d908c <hal_rtc_time_is_valid>
    if (rtcstate)
   db064:	4604      	mov	r4, r0
   db066:	b9a0      	cbnz	r0, db092 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   db068:	f7fe fa30 	bl	d94cc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   db06c:	2801      	cmp	r0, #1
   db06e:	d110      	bne.n	db092 <_ZN9TimeClass7isValidEv+0x36>
   db070:	4620      	mov	r0, r4
   db072:	f7fe fa5b 	bl	d952c <system_thread_get_state>
   db076:	b960      	cbnz	r0, db092 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   db078:	f7ff ffd8 	bl	db02c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   db07c:	b910      	cbnz	r0, db084 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   db07e:	f7fe fad1 	bl	d9624 <spark_process>
        while (_while() && !_condition()) {
   db082:	e7f9      	b.n	db078 <_ZN9TimeClass7isValidEv+0x1c>
   db084:	f7ff ffd2 	bl	db02c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   db088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   db08c:	2000      	movs	r0, #0
   db08e:	f7fd bffd 	b.w	d908c <hal_rtc_time_is_valid>
}
   db092:	4620      	mov	r0, r4
   db094:	bd10      	pop	{r4, pc}

000db096 <_ZN9TimeClass3nowEv>:
{
   db096:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   db098:	f7ff ffe0 	bl	db05c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   db09c:	2210      	movs	r2, #16
   db09e:	2100      	movs	r1, #0
   db0a0:	4668      	mov	r0, sp
   db0a2:	f003 fbc1 	bl	de828 <memset>
    hal_rtc_get_time(&tv, nullptr);
   db0a6:	2100      	movs	r1, #0
   db0a8:	4668      	mov	r0, sp
   db0aa:	f7fd ffff 	bl	d90ac <hal_rtc_get_time>
}
   db0ae:	9800      	ldr	r0, [sp, #0]
   db0b0:	b005      	add	sp, #20
   db0b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db0b8 <_ZN9TimeClass4hourEv>:
{
   db0b8:	b508      	push	{r3, lr}
	return hour(now());
   db0ba:	f7ff ffec 	bl	db096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db0be:	17c1      	asrs	r1, r0, #31
   db0c0:	f7ff ff7e 	bl	dafc0 <_ZL22Refresh_UnixTime_Cachex>
}
   db0c4:	4b01      	ldr	r3, [pc, #4]	; (db0cc <_ZN9TimeClass4hourEv+0x14>)
   db0c6:	6898      	ldr	r0, [r3, #8]
   db0c8:	bd08      	pop	{r3, pc}
   db0ca:	bf00      	nop
   db0cc:	2003e5f4 	.word	0x2003e5f4

000db0d0 <_ZN9TimeClass6minuteEv>:
{
   db0d0:	b508      	push	{r3, lr}
	return minute(now());
   db0d2:	f7ff ffe0 	bl	db096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db0d6:	17c1      	asrs	r1, r0, #31
   db0d8:	f7ff ff72 	bl	dafc0 <_ZL22Refresh_UnixTime_Cachex>
}
   db0dc:	4b01      	ldr	r3, [pc, #4]	; (db0e4 <_ZN9TimeClass6minuteEv+0x14>)
   db0de:	6858      	ldr	r0, [r3, #4]
   db0e0:	bd08      	pop	{r3, pc}
   db0e2:	bf00      	nop
   db0e4:	2003e5f4 	.word	0x2003e5f4

000db0e8 <_ZN9TimeClass6secondEv>:
{
   db0e8:	b508      	push	{r3, lr}
	return second(now());
   db0ea:	f7ff ffd4 	bl	db096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db0ee:	17c1      	asrs	r1, r0, #31
   db0f0:	f7ff ff66 	bl	dafc0 <_ZL22Refresh_UnixTime_Cachex>
}
   db0f4:	4b01      	ldr	r3, [pc, #4]	; (db0fc <_ZN9TimeClass6secondEv+0x14>)
   db0f6:	6818      	ldr	r0, [r3, #0]
   db0f8:	bd08      	pop	{r3, pc}
   db0fa:	bf00      	nop
   db0fc:	2003e5f4 	.word	0x2003e5f4

000db100 <_ZN9TimeClass3dayEv>:
{
   db100:	b508      	push	{r3, lr}
	return day(now());
   db102:	f7ff ffc8 	bl	db096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db106:	17c1      	asrs	r1, r0, #31
   db108:	f7ff ff5a 	bl	dafc0 <_ZL22Refresh_UnixTime_Cachex>
}
   db10c:	4b01      	ldr	r3, [pc, #4]	; (db114 <_ZN9TimeClass3dayEv+0x14>)
   db10e:	68d8      	ldr	r0, [r3, #12]
   db110:	bd08      	pop	{r3, pc}
   db112:	bf00      	nop
   db114:	2003e5f4 	.word	0x2003e5f4

000db118 <_ZN9TimeClass5monthEv>:
{
   db118:	b508      	push	{r3, lr}
	return month(now());
   db11a:	f7ff ffbc 	bl	db096 <_ZN9TimeClass3nowEv>
}
   db11e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   db122:	17c1      	asrs	r1, r0, #31
   db124:	f7ff bf90 	b.w	db048 <_ZN9TimeClass5monthEx>

000db128 <_ZN9TimeClass4yearEv>:
{
   db128:	b508      	push	{r3, lr}
	return year(now());
   db12a:	f7ff ffb4 	bl	db096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db12e:	17c1      	asrs	r1, r0, #31
   db130:	f7ff ff46 	bl	dafc0 <_ZL22Refresh_UnixTime_Cachex>
}
   db134:	4b01      	ldr	r3, [pc, #4]	; (db13c <_ZN9TimeClass4yearEv+0x14>)
   db136:	6958      	ldr	r0, [r3, #20]
   db138:	bd08      	pop	{r3, pc}
   db13a:	bf00      	nop
   db13c:	2003e5f4 	.word	0x2003e5f4

000db140 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   db140:	4b02      	ldr	r3, [pc, #8]	; (db14c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   db142:	681a      	ldr	r2, [r3, #0]
   db144:	4b02      	ldr	r3, [pc, #8]	; (db150 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   db146:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   db148:	4770      	bx	lr
   db14a:	bf00      	nop
   db14c:	2003ddb0 	.word	0x2003ddb0
   db150:	2003e5f0 	.word	0x2003e5f0

000db154 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   db154:	2100      	movs	r1, #0
   db156:	f7fe b9c9 	b.w	d94ec <system_delay_ms>

000db15a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   db15a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   db15c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   db15e:	4604      	mov	r4, r0
      if (_M_manager)
   db160:	b113      	cbz	r3, db168 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db162:	2203      	movs	r2, #3
   db164:	4601      	mov	r1, r0
   db166:	4798      	blx	r3
    }
   db168:	4620      	mov	r0, r4
   db16a:	bd10      	pop	{r4, pc}

000db16c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   db16c:	b510      	push	{r4, lr}
   db16e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   db170:	f7ff fff3 	bl	db15a <_ZNSt14_Function_baseD1Ev>
   db174:	4620      	mov	r0, r4
   db176:	bd10      	pop	{r4, pc}

000db178 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   db178:	b513      	push	{r0, r1, r4, lr}
   db17a:	460b      	mov	r3, r1
   db17c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db17e:	e9d0 0100 	ldrd	r0, r1, [r0]
   db182:	466c      	mov	r4, sp
   db184:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   db188:	e893 0003 	ldmia.w	r3, {r0, r1}
   db18c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   db190:	e894 0003 	ldmia.w	r4, {r0, r1}
   db194:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   db198:	b002      	add	sp, #8
   db19a:	bd10      	pop	{r4, pc}

000db19c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   db19c:	4803      	ldr	r0, [pc, #12]	; (db1ac <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   db19e:	4a04      	ldr	r2, [pc, #16]	; (db1b0 <_GLOBAL__sub_I_RGB+0x14>)
   db1a0:	4904      	ldr	r1, [pc, #16]	; (db1b4 <_GLOBAL__sub_I_RGB+0x18>)
   db1a2:	2300      	movs	r3, #0
   db1a4:	6083      	str	r3, [r0, #8]
   db1a6:	f001 b873 	b.w	dc290 <__aeabi_atexit>
   db1aa:	bf00      	nop
   db1ac:	2003e630 	.word	0x2003e630
   db1b0:	2003de20 	.word	0x2003de20
   db1b4:	000db16d 	.word	0x000db16d

000db1b8 <_ZN14CellularSignalD1Ev>:
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   db1b8:	4770      	bx	lr

000db1ba <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   db1ba:	7d00      	ldrb	r0, [r0, #20]
   db1bc:	4770      	bx	lr

000db1be <_ZN14CellularSignalD0Ev>:
   db1be:	b510      	push	{r4, lr}
   db1c0:	2128      	movs	r1, #40	; 0x28
   db1c2:	4604      	mov	r4, r0
   db1c4:	f001 f869 	bl	dc29a <_ZdlPvj>
   db1c8:	4620      	mov	r0, r4
   db1ca:	bd10      	pop	{r4, pc}

000db1cc <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   db1cc:	7d03      	ldrb	r3, [r0, #20]
   db1ce:	b17b      	cbz	r3, db1f0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   db1d0:	69c3      	ldr	r3, [r0, #28]
   db1d2:	2b00      	cmp	r3, #0
   db1d4:	db0c      	blt.n	db1f0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   db1d6:	ee07 3a90 	vmov	s15, r3
   db1da:	ed9f 7a07 	vldr	s14, [pc, #28]	; db1f8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   db1de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db1e2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db1e6:	eddf 7a05 	vldr	s15, [pc, #20]	; db1fc <_ZNK14CellularSignal11getStrengthEv+0x30>
   db1ea:	ee20 0a27 	vmul.f32	s0, s0, s15
   db1ee:	4770      	bx	lr
    }

    return -1.0f;
   db1f0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   db1f4:	4770      	bx	lr
   db1f6:	bf00      	nop
   db1f8:	477fff00 	.word	0x477fff00
   db1fc:	42c80000 	.word	0x42c80000

000db200 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   db200:	7d03      	ldrb	r3, [r0, #20]
   db202:	b163      	cbz	r3, db21e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   db204:	6983      	ldr	r3, [r0, #24]
   db206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db20a:	d008      	beq.n	db21e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   db20c:	ee07 3a90 	vmov	s15, r3
   db210:	ed9f 7a04 	vldr	s14, [pc, #16]	; db224 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   db214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db218:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db21c:	4770      	bx	lr
    }

    return 0.0f;
   db21e:	ed9f 0a02 	vldr	s0, [pc, #8]	; db228 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   db222:	4770      	bx	lr
   db224:	42c80000 	.word	0x42c80000
   db228:	00000000 	.word	0x00000000

000db22c <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   db22c:	7d03      	ldrb	r3, [r0, #20]
   db22e:	b17b      	cbz	r3, db250 <_ZNK14CellularSignal10getQualityEv+0x24>
   db230:	6a43      	ldr	r3, [r0, #36]	; 0x24
   db232:	2b00      	cmp	r3, #0
   db234:	db0c      	blt.n	db250 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   db236:	ee07 3a90 	vmov	s15, r3
   db23a:	ed9f 7a07 	vldr	s14, [pc, #28]	; db258 <_ZNK14CellularSignal10getQualityEv+0x2c>
   db23e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db242:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db246:	eddf 7a05 	vldr	s15, [pc, #20]	; db25c <_ZNK14CellularSignal10getQualityEv+0x30>
   db24a:	ee20 0a27 	vmul.f32	s0, s0, s15
   db24e:	4770      	bx	lr
    }

    return -1.0f;
   db250:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   db254:	4770      	bx	lr
   db256:	bf00      	nop
   db258:	477fff00 	.word	0x477fff00
   db25c:	42c80000 	.word	0x42c80000

000db260 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   db260:	7d03      	ldrb	r3, [r0, #20]
   db262:	b163      	cbz	r3, db27e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   db264:	6a03      	ldr	r3, [r0, #32]
   db266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db26a:	d008      	beq.n	db27e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   db26c:	ee07 3a90 	vmov	s15, r3
   db270:	ed9f 7a04 	vldr	s14, [pc, #16]	; db284 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   db274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db278:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db27c:	4770      	bx	lr
    }

    return 0.0f;
   db27e:	ed9f 0a02 	vldr	s0, [pc, #8]	; db288 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   db282:	4770      	bx	lr
   db284:	42c80000 	.word	0x42c80000
   db288:	00000000 	.word	0x00000000

000db28c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
size_t Print::print(T n, int base)
   db28c:	b570      	push	{r4, r5, r6, lr}
        if (n < 0 && base == 10) {
   db28e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   db290:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   db292:	da0a      	bge.n	db2aa <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   db294:	212d      	movs	r1, #45	; 0x2d
   db296:	f7ff fd4b 	bl	dad30 <_ZN5Print5printEc>
            val = -n;
   db29a:	4261      	negs	r1, r4
            t = print('-');
   db29c:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   db29e:	220a      	movs	r2, #10
   db2a0:	4630      	mov	r0, r6
   db2a2:	f7ff fd5e 	bl	dad62 <_ZN5Print11printNumberEmh>
    }
}
   db2a6:	4428      	add	r0, r5
   db2a8:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   db2aa:	4621      	mov	r1, r4
        size_t t = 0;
   db2ac:	2500      	movs	r5, #0
   db2ae:	e7f6      	b.n	db29e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000db2b0 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   db2b0:	b570      	push	{r4, r5, r6, lr}
   db2b2:	460c      	mov	r4, r1
   db2b4:	4605      	mov	r5, r0
   db2b6:	6881      	ldr	r1, [r0, #8]
   db2b8:	4620      	mov	r0, r4
   db2ba:	f7ff ffe7 	bl	db28c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   db2be:	212c      	movs	r1, #44	; 0x2c
   db2c0:	4606      	mov	r6, r0
   db2c2:	4620      	mov	r0, r4
   db2c4:	f7ff fd34 	bl	dad30 <_ZN5Print5printEc>
   db2c8:	68e9      	ldr	r1, [r5, #12]
   db2ca:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   db2cc:	4620      	mov	r0, r4
   db2ce:	f7ff ffdd 	bl	db28c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   db2d2:	4430      	add	r0, r6
   db2d4:	bd70      	pop	{r4, r5, r6, pc}

000db2d6 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   db2d6:	f1a0 0004 	sub.w	r0, r0, #4
   db2da:	f7ff bfe9 	b.w	db2b0 <_ZNK14CellularSignal7printToER5Print>

000db2de <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   db2de:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   db2e0:	460d      	mov	r5, r1
   db2e2:	f100 0410 	add.w	r4, r0, #16
   db2e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db2e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db2ea:	e895 0003 	ldmia.w	r5, {r0, r1}
   db2ee:	e884 0003 	stmia.w	r4, {r0, r1}
}
   db2f2:	2001      	movs	r0, #1
   db2f4:	bd30      	pop	{r4, r5, pc}

000db2f6 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   db2f6:	6800      	ldr	r0, [r0, #0]
   db2f8:	f000 bdff 	b.w	dbefa <_ZN7TwoWire4lockEv>

000db2fc <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   db2fc:	b510      	push	{r4, lr}
   db2fe:	4604      	mov	r4, r0
      lock_(_lock) {
   db300:	6001      	str	r1, [r0, #0]
   db302:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   db304:	b10a      	cbz	r2, db30a <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   db306:	f7ff fff6 	bl	db2f6 <_ZN9FuelGauge4lockEv>
}
   db30a:	4620      	mov	r0, r4
   db30c:	bd10      	pop	{r4, pc}

000db30e <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   db30e:	b513      	push	{r0, r1, r4, lr}
   db310:	4604      	mov	r4, r0
   db312:	9101      	str	r1, [sp, #4]
            return &Wire1;
   db314:	f000 ff94 	bl	dc240 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   db318:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   db31a:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   db31c:	4620      	mov	r0, r4
   db31e:	f7ff ffed 	bl	db2fc <_ZN9FuelGaugeC1ER7TwoWireb>
}
   db322:	4620      	mov	r0, r4
   db324:	b002      	add	sp, #8
   db326:	bd10      	pop	{r4, pc}

000db328 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   db328:	6800      	ldr	r0, [r0, #0]
   db32a:	f000 bdef 	b.w	dbf0c <_ZN7TwoWire6unlockEv>

000db32e <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   db32e:	b510      	push	{r4, lr}
    if (lock_) {
   db330:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   db332:	4604      	mov	r4, r0
    if (lock_) {
   db334:	b10b      	cbz	r3, db33a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   db336:	f7ff fff7 	bl	db328 <_ZN9FuelGauge6unlockEv>
}
   db33a:	4620      	mov	r0, r4
   db33c:	bd10      	pop	{r4, pc}
	...

000db340 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db340:	4b01      	ldr	r3, [pc, #4]	; (db348 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db342:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db344:	4770      	bx	lr
   db346:	bf00      	nop
   db348:	2003ddb8 	.word	0x2003ddb8

000db34c <serialEventRun>:
{
   db34c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db34e:	4b0b      	ldr	r3, [pc, #44]	; (db37c <serialEventRun+0x30>)
   db350:	b143      	cbz	r3, db364 <serialEventRun+0x18>
   db352:	f000 fc15 	bl	dbb80 <_Z16_fetch_usbserialv>
   db356:	6803      	ldr	r3, [r0, #0]
   db358:	691b      	ldr	r3, [r3, #16]
   db35a:	4798      	blx	r3
   db35c:	2800      	cmp	r0, #0
   db35e:	dd01      	ble.n	db364 <serialEventRun+0x18>
        serialEvent();
   db360:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db364:	4b06      	ldr	r3, [pc, #24]	; (db380 <serialEventRun+0x34>)
   db366:	b143      	cbz	r3, db37a <serialEventRun+0x2e>
   db368:	f000 fd0e 	bl	dbd88 <_Z22__fetch_global_Serial1v>
   db36c:	6803      	ldr	r3, [r0, #0]
   db36e:	691b      	ldr	r3, [r3, #16]
   db370:	4798      	blx	r3
   db372:	2800      	cmp	r0, #0
   db374:	dd01      	ble.n	db37a <serialEventRun+0x2e>
        serialEvent1();
   db376:	f3af 8000 	nop.w
}
   db37a:	bd08      	pop	{r3, pc}
	...

000db384 <_post_loop>:
{
   db384:	b508      	push	{r3, lr}
	serialEventRun();
   db386:	f7ff ffe1 	bl	db34c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db38a:	f7fd fe5f 	bl	d904c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db38e:	4b01      	ldr	r3, [pc, #4]	; (db394 <_post_loop+0x10>)
   db390:	6018      	str	r0, [r3, #0]
}
   db392:	bd08      	pop	{r3, pc}
   db394:	2003e7b8 	.word	0x2003e7b8

000db398 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db398:	4802      	ldr	r0, [pc, #8]	; (db3a4 <_Z33system_initialize_user_backup_ramv+0xc>)
   db39a:	4a03      	ldr	r2, [pc, #12]	; (db3a8 <_Z33system_initialize_user_backup_ramv+0x10>)
   db39c:	4903      	ldr	r1, [pc, #12]	; (db3ac <_Z33system_initialize_user_backup_ramv+0x14>)
   db39e:	1a12      	subs	r2, r2, r0
   db3a0:	f003 ba1a 	b.w	de7d8 <memcpy>
   db3a4:	2003f400 	.word	0x2003f400
   db3a8:	2003f404 	.word	0x2003f404
   db3ac:	000dfb28 	.word	0x000dfb28

000db3b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db3b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db3b2:	2300      	movs	r3, #0
   db3b4:	9300      	str	r3, [sp, #0]
   db3b6:	461a      	mov	r2, r3
   db3b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db3bc:	f7fe f8c8 	bl	d9550 <system_ctrl_set_result>
}
   db3c0:	b003      	add	sp, #12
   db3c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db3c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db3c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db3ca:	8843      	ldrh	r3, [r0, #2]
   db3cc:	2b0a      	cmp	r3, #10
   db3ce:	d008      	beq.n	db3e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db3d0:	2b50      	cmp	r3, #80	; 0x50
   db3d2:	d10b      	bne.n	db3ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db3d4:	4b09      	ldr	r3, [pc, #36]	; (db3fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db3d6:	681b      	ldr	r3, [r3, #0]
   db3d8:	b14b      	cbz	r3, db3ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db3da:	b003      	add	sp, #12
   db3dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db3e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db3e2:	f7ff ffe5 	bl	db3b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db3e6:	b003      	add	sp, #12
   db3e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db3ec:	2300      	movs	r3, #0
   db3ee:	9300      	str	r3, [sp, #0]
   db3f0:	461a      	mov	r2, r3
   db3f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db3f6:	f7fe f8ab 	bl	d9550 <system_ctrl_set_result>
}
   db3fa:	e7f4      	b.n	db3e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db3fc:	2003e644 	.word	0x2003e644

000db400 <module_user_init_hook>:
{
   db400:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db402:	4c12      	ldr	r4, [pc, #72]	; (db44c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db404:	4812      	ldr	r0, [pc, #72]	; (db450 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db406:	4d13      	ldr	r5, [pc, #76]	; (db454 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db408:	2100      	movs	r1, #0
   db40a:	f7fe f993 	bl	d9734 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db40e:	6823      	ldr	r3, [r4, #0]
   db410:	42ab      	cmp	r3, r5
   db412:	4b11      	ldr	r3, [pc, #68]	; (db458 <module_user_init_hook+0x58>)
   db414:	bf0c      	ite	eq
   db416:	2201      	moveq	r2, #1
   db418:	2200      	movne	r2, #0
   db41a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db41c:	d002      	beq.n	db424 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   db41e:	f7ff ffbb 	bl	db398 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   db422:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db424:	f7fd fdfa 	bl	d901c <HAL_RNG_GetRandomNumber>
   db428:	4604      	mov	r4, r0
    srand(seed);
   db42a:	f003 fa05 	bl	de838 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db42e:	4b0b      	ldr	r3, [pc, #44]	; (db45c <module_user_init_hook+0x5c>)
   db430:	b113      	cbz	r3, db438 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   db432:	4620      	mov	r0, r4
   db434:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db438:	2100      	movs	r1, #0
   db43a:	4808      	ldr	r0, [pc, #32]	; (db45c <module_user_init_hook+0x5c>)
   db43c:	f7fe f932 	bl	d96a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db444:	4806      	ldr	r0, [pc, #24]	; (db460 <module_user_init_hook+0x60>)
   db446:	2100      	movs	r1, #0
   db448:	f7fe b878 	b.w	d953c <system_ctrl_set_app_request_handler>
   db44c:	2003f400 	.word	0x2003f400
   db450:	000db341 	.word	0x000db341
   db454:	9a271c1e 	.word	0x9a271c1e
   db458:	2003e640 	.word	0x2003e640
   db45c:	00000000 	.word	0x00000000
   db460:	000db3c9 	.word	0x000db3c9

000db464 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   db464:	4770      	bx	lr

000db466 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   db466:	2000      	movs	r0, #0
   db468:	4770      	bx	lr

000db46a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   db46a:	b510      	push	{r4, lr}
   db46c:	2110      	movs	r1, #16
   db46e:	4604      	mov	r4, r0
   db470:	f000 ff13 	bl	dc29a <_ZdlPvj>
   db474:	4620      	mov	r0, r4
   db476:	bd10      	pop	{r4, pc}

000db478 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   db478:	b508      	push	{r3, lr}
      { delete this; }
   db47a:	f7ff fff6 	bl	db46a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   db47e:	bd08      	pop	{r3, pc}

000db480 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   db480:	b530      	push	{r4, r5, lr}
        type_(type) {
   db482:	2200      	movs	r2, #0
   db484:	f64f 749c 	movw	r4, #65436	; 0xff9c
   db488:	6002      	str	r2, [r0, #0]
   db48a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   db48c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   db48e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   db490:	680c      	ldr	r4, [r1, #0]
   db492:	8085      	strh	r5, [r0, #4]
   db494:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   db496:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   db498:	bd30      	pop	{r4, r5, pc}

000db49a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   db49a:	b510      	push	{r4, lr}
   db49c:	4604      	mov	r4, r0
    free((void*)msg_);
   db49e:	6800      	ldr	r0, [r0, #0]
   db4a0:	f7fe f910 	bl	d96c4 <free>
}
   db4a4:	4620      	mov	r0, r4
   db4a6:	bd10      	pop	{r4, pc}

000db4a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   db4a8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   db4aa:	68c4      	ldr	r4, [r0, #12]
   db4ac:	b1f4      	cbz	r4, db4ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   db4ae:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   db4b0:	2b02      	cmp	r3, #2
   db4b2:	d103      	bne.n	db4bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   db4b4:	f104 000c 	add.w	r0, r4, #12
   db4b8:	f7ff ffef 	bl	db49a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   db4bc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   db4be:	b135      	cbz	r5, db4ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   db4c0:	4628      	mov	r0, r5
   db4c2:	f7ff fe4a 	bl	db15a <_ZNSt14_Function_baseD1Ev>
   db4c6:	2110      	movs	r1, #16
   db4c8:	4628      	mov	r0, r5
   db4ca:	f000 fee6 	bl	dc29a <_ZdlPvj>
   db4ce:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   db4d0:	b135      	cbz	r5, db4e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   db4d2:	4628      	mov	r0, r5
   db4d4:	f7ff fe41 	bl	db15a <_ZNSt14_Function_baseD1Ev>
   db4d8:	2110      	movs	r1, #16
   db4da:	4628      	mov	r0, r5
   db4dc:	f000 fedd 	bl	dc29a <_ZdlPvj>
   db4e0:	4620      	mov	r0, r4
   db4e2:	2114      	movs	r1, #20
   db4e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db4e8:	f000 bed7 	b.w	dc29a <_ZdlPvj>
   db4ec:	bd38      	pop	{r3, r4, r5, pc}

000db4ee <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   db4ee:	b510      	push	{r4, lr}
   db4f0:	b088      	sub	sp, #32
   db4f2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   db4f4:	4668      	mov	r0, sp
   db4f6:	f7fe fae8 	bl	d9aca <_ZN6StringC1EPKc>
    return (*fn)(p);
   db4fa:	4669      	mov	r1, sp
   db4fc:	a804      	add	r0, sp, #16
   db4fe:	f7fe fb24 	bl	d9b4a <_ZN6StringC1ERKS_>
   db502:	a804      	add	r0, sp, #16
   db504:	47a0      	blx	r4
   db506:	4604      	mov	r4, r0
   db508:	a804      	add	r0, sp, #16
   db50a:	f7fe fa93 	bl	d9a34 <_ZN6StringD1Ev>
    String p(param);
   db50e:	4668      	mov	r0, sp
   db510:	f7fe fa90 	bl	d9a34 <_ZN6StringD1Ev>
}
   db514:	4620      	mov	r0, r4
   db516:	b008      	add	sp, #32
   db518:	bd10      	pop	{r4, pc}

000db51a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   db51a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   db51c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   db51e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   db522:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   db524:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   db526:	461a      	mov	r2, r3
   db528:	4669      	mov	r1, sp
   db52a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   db52c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   db530:	f8ad 4000 	strh.w	r4, [sp]
   db534:	f7fe f86e 	bl	d9614 <spark_function>
}
   db538:	b004      	add	sp, #16
   db53a:	bd10      	pop	{r4, pc}

000db53c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   db53c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db53e:	460e      	mov	r6, r1
   db540:	4604      	mov	r4, r0
   db542:	f856 3b04 	ldr.w	r3, [r6], #4
   db546:	9300      	str	r3, [sp, #0]
   db548:	460d      	mov	r5, r1
   db54a:	a801      	add	r0, sp, #4
   db54c:	4631      	mov	r1, r6
   db54e:	f7fe ffdb 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   db552:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   db554:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   db556:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   db558:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   db55a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   db55c:	2300      	movs	r3, #0
   db55e:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   db560:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   db562:	f7fe fff0 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db566:	4630      	mov	r0, r6
   db568:	f7fe ffed 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   db56c:	4628      	mov	r0, r5
   db56e:	2108      	movs	r1, #8
   db570:	f000 fe93 	bl	dc29a <_ZdlPvj>
        return p;
    }
   db574:	4620      	mov	r0, r4
   db576:	b002      	add	sp, #8
   db578:	bd70      	pop	{r4, r5, r6, pc}

000db57a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   db57a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   db57c:	b510      	push	{r4, lr}
      if (_M_empty())
   db57e:	b90a      	cbnz	r2, db584 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   db580:	f000 fe8f 	bl	dc2a2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   db584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db588:	68c3      	ldr	r3, [r0, #12]
   db58a:	4718      	bx	r3

000db58c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db58c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   db58e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   db590:	f100 0110 	add.w	r1, r0, #16
   db594:	f7ff fff1 	bl	db57a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   db598:	bd08      	pop	{r3, pc}

000db59a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   db59a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   db59c:	b510      	push	{r4, lr}
      if (_M_empty())
   db59e:	b90a      	cbnz	r2, db5a4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   db5a0:	f000 fe7f 	bl	dc2a2 <_ZSt25__throw_bad_function_callv>
    }
   db5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db5a8:	68c3      	ldr	r3, [r0, #12]
   db5aa:	4718      	bx	r3

000db5ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db5ac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   db5ae:	6800      	ldr	r0, [r0, #0]
   db5b0:	f100 0110 	add.w	r1, r0, #16
   db5b4:	f7ff fff1 	bl	db59a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   db5b8:	bd08      	pop	{r3, pc}
	...

000db5bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   db5bc:	b538      	push	{r3, r4, r5, lr}
   db5be:	2300      	movs	r3, #0
   db5c0:	4604      	mov	r4, r0
   db5c2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db5c4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   db5c6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db5c8:	f7f8 fd65 	bl	d4096 <_Znwj>
   db5cc:	b128      	cbz	r0, db5da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   db5ce:	2301      	movs	r3, #1
   db5d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   db5d4:	4b02      	ldr	r3, [pc, #8]	; (db5e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   db5d6:	6003      	str	r3, [r0, #0]
   db5d8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db5da:	6020      	str	r0, [r4, #0]
	}
   db5dc:	4620      	mov	r0, r4
   db5de:	bd38      	pop	{r3, r4, r5, pc}
   db5e0:	000df7cc 	.word	0x000df7cc

000db5e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   db5e4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db5e6:	2300      	movs	r3, #0
   db5e8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db5ea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db5ec:	4604      	mov	r4, r0
   db5ee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db5f0:	b12b      	cbz	r3, db5fe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db5f2:	2202      	movs	r2, #2
   db5f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db5f6:	68eb      	ldr	r3, [r5, #12]
   db5f8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db5fa:	68ab      	ldr	r3, [r5, #8]
   db5fc:	60a3      	str	r3, [r4, #8]
    }
   db5fe:	4620      	mov	r0, r4
   db600:	bd38      	pop	{r3, r4, r5, pc}
	...

000db604 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   db604:	b5f0      	push	{r4, r5, r6, r7, lr}
   db606:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   db608:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   db60a:	4668      	mov	r0, sp
   db60c:	f7ff ff38 	bl	db480 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   db610:	f04f 0302 	mov.w	r3, #2
   db614:	e8d4 2f4f 	ldrexb	r2, [r4]
   db618:	2a00      	cmp	r2, #0
   db61a:	d103      	bne.n	db624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   db61c:	e8c4 3f41 	strexb	r1, r3, [r4]
   db620:	2900      	cmp	r1, #0
   db622:	d1f7      	bne.n	db614 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   db624:	d125      	bne.n	db672 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   db626:	f104 050c 	add.w	r5, r4, #12
   db62a:	4669      	mov	r1, sp
   db62c:	4628      	mov	r0, r5
   db62e:	f7ff ff27 	bl	db480 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   db632:	f3bf 8f5b 	dmb	ish
   db636:	2301      	movs	r3, #1
   db638:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   db63a:	2000      	movs	r0, #0
   db63c:	f104 0308 	add.w	r3, r4, #8
   db640:	f3bf 8f5b 	dmb	ish
   db644:	e853 6f00 	ldrex	r6, [r3]
   db648:	e843 0200 	strex	r2, r0, [r3]
   db64c:	2a00      	cmp	r2, #0
   db64e:	d1f9      	bne.n	db644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   db650:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   db654:	b16e      	cbz	r6, db672 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   db656:	f7fd ff59 	bl	d950c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   db65a:	b178      	cbz	r0, db67c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   db65c:	4629      	mov	r1, r5
   db65e:	4630      	mov	r0, r6
   db660:	f7ff ff8b 	bl	db57a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   db664:	4630      	mov	r0, r6
   db666:	f7ff fd78 	bl	db15a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   db66a:	2110      	movs	r1, #16
   db66c:	4630      	mov	r0, r6
   db66e:	f000 fe14 	bl	dc29a <_ZdlPvj>
        p_->setError(std::move(error));
   db672:	4668      	mov	r0, sp
   db674:	f7ff ff11 	bl	db49a <_ZN8particle5ErrorD1Ev>
    }
   db678:	b009      	add	sp, #36	; 0x24
   db67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   db67c:	4631      	mov	r1, r6
   db67e:	a802      	add	r0, sp, #8
   db680:	f7ff ffb0 	bl	db5e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   db684:	68e0      	ldr	r0, [r4, #12]
   db686:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db68a:	b108      	cbz	r0, db690 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   db68c:	f003 f918 	bl	de8c0 <strdup>
        type_(type) {
   db690:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   db692:	2010      	movs	r0, #16
   db694:	f8ad 501c 	strh.w	r5, [sp, #28]
   db698:	f7f8 fcfd 	bl	d4096 <_Znwj>
   db69c:	4605      	mov	r5, r0
   db69e:	b1e8      	cbz	r0, db6dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   db6a0:	2700      	movs	r7, #0
   db6a2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db6a4:	2018      	movs	r0, #24
   db6a6:	f7f8 fcf6 	bl	d4096 <_Znwj>
   db6aa:	4604      	mov	r4, r0
   db6ac:	b188      	cbz	r0, db6d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   db6ae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   db6b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   db6b2:	a802      	add	r0, sp, #8
   db6b4:	f7ff fd60 	bl	db178 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db6b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   db6ba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db6bc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db6be:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   db6c0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   db6c2:	a906      	add	r1, sp, #24
   db6c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db6c6:	60e3      	str	r3, [r4, #12]
   db6c8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   db6cc:	9205      	str	r2, [sp, #20]
   db6ce:	f7ff fed7 	bl	db480 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   db6d2:	4b08      	ldr	r3, [pc, #32]	; (db6f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   db6d4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   db6d6:	4b08      	ldr	r3, [pc, #32]	; (db6f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db6d8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   db6da:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   db6dc:	a806      	add	r0, sp, #24
   db6de:	f7ff fedc 	bl	db49a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   db6e2:	a802      	add	r0, sp, #8
   db6e4:	f7ff fd39 	bl	db15a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   db6e8:	2200      	movs	r2, #0
   db6ea:	4629      	mov	r1, r5
   db6ec:	4803      	ldr	r0, [pc, #12]	; (db6fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   db6ee:	f7fd ff15 	bl	d951c <application_thread_invoke>
   db6f2:	e7b7      	b.n	db664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   db6f4:	000db58d 	.word	0x000db58d
   db6f8:	000db825 	.word	0x000db825
   db6fc:	000dbddd 	.word	0x000dbddd

000db700 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   db700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db704:	b08a      	sub	sp, #40	; 0x28
   db706:	4605      	mov	r5, r0
   db708:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   db70c:	460c      	mov	r4, r1
   db70e:	4617      	mov	r7, r2
   db710:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   db712:	f7fd ff97 	bl	d9644 <spark_cloud_flag_connected>
   db716:	ae07      	add	r6, sp, #28
    if (!connected()) {
   db718:	4682      	mov	sl, r0
   db71a:	bb38      	cbnz	r0, db76c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   db71c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   db720:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   db722:	a905      	add	r1, sp, #20
   db724:	4630      	mov	r0, r6
   db726:	f8ad 3018 	strh.w	r3, [sp, #24]
   db72a:	f7ff fea9 	bl	db480 <_ZN8particle5ErrorC1EOS0_>
   db72e:	2014      	movs	r0, #20
   db730:	f7f8 fcb1 	bl	d4096 <_Znwj>
   db734:	4604      	mov	r4, r0
   db736:	b148      	cbz	r0, db74c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   db738:	2302      	movs	r3, #2
   db73a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db73c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   db73e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db742:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   db744:	4631      	mov	r1, r6
   db746:	300c      	adds	r0, #12
   db748:	f7ff fe9a 	bl	db480 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db74c:	4628      	mov	r0, r5
	: __shared_count(__p)
   db74e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db750:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   db754:	f7ff ff32 	bl	db5bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   db758:	4630      	mov	r0, r6
   db75a:	f7ff fe9e 	bl	db49a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   db75e:	a805      	add	r0, sp, #20
   db760:	f7ff fe9b 	bl	db49a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   db764:	4628      	mov	r0, r5
   db766:	b00a      	add	sp, #40	; 0x28
   db768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   db76c:	230c      	movs	r3, #12
   db76e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   db772:	2014      	movs	r0, #20
   db774:	e9cd aa08 	strd	sl, sl, [sp, #32]
   db778:	9307      	str	r3, [sp, #28]
   db77a:	f7f8 fc8c 	bl	d4096 <_Znwj>
   db77e:	4601      	mov	r1, r0
   db780:	b128      	cbz	r0, db78e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   db782:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   db786:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db78a:	f880 a001 	strb.w	sl, [r0, #1]
   db78e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db790:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   db792:	f7ff ff13 	bl	db5bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   db796:	4b22      	ldr	r3, [pc, #136]	; (db820 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   db798:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   db79a:	2008      	movs	r0, #8
   db79c:	f7f8 fc7b 	bl	d4096 <_Znwj>
   db7a0:	4682      	mov	sl, r0
   db7a2:	b128      	cbz	r0, db7b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db7a4:	9b03      	ldr	r3, [sp, #12]
   db7a6:	f840 3b04 	str.w	r3, [r0], #4
   db7aa:	a904      	add	r1, sp, #16
   db7ac:	f7fe feac 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db7b0:	9600      	str	r6, [sp, #0]
   db7b2:	fa5f f389 	uxtb.w	r3, r9
   db7b6:	4642      	mov	r2, r8
   db7b8:	4639      	mov	r1, r7
   db7ba:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   db7bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db7c0:	f7fd ff50 	bl	d9664 <spark_send_event>
   db7c4:	b9b8      	cbnz	r0, db7f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   db7c6:	9b03      	ldr	r3, [sp, #12]
   db7c8:	785b      	ldrb	r3, [r3, #1]
   db7ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   db7ce:	b993      	cbnz	r3, db7f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   db7d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   db7d4:	a905      	add	r1, sp, #20
   db7d6:	a803      	add	r0, sp, #12
   db7d8:	9205      	str	r2, [sp, #20]
   db7da:	f8ad 3018 	strh.w	r3, [sp, #24]
   db7de:	f7ff ff11 	bl	db604 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db7e2:	a805      	add	r0, sp, #20
   db7e4:	f7ff fe59 	bl	db49a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   db7e8:	a805      	add	r0, sp, #20
   db7ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   db7ec:	f7ff fea6 	bl	db53c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   db7f0:	a806      	add	r0, sp, #24
   db7f2:	f7fe fea8 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db7f6:	9b03      	ldr	r3, [sp, #12]
   db7f8:	9305      	str	r3, [sp, #20]
   db7fa:	a904      	add	r1, sp, #16
   db7fc:	a806      	add	r0, sp, #24
   db7fe:	f7fe fe83 	bl	da508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   db802:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   db804:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   db806:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   db808:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   db80a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   db80c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   db80e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   db810:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   db812:	f7fe fe98 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db816:	a804      	add	r0, sp, #16
   db818:	f7fe fe95 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   db81c:	e7a2      	b.n	db764 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   db81e:	bf00      	nop
   db820:	000db8e9 	.word	0x000db8e9

000db824 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   db824:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db828:	4605      	mov	r5, r0
	  switch (__op)
   db82a:	d007      	beq.n	db83c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   db82c:	2a03      	cmp	r2, #3
   db82e:	d018      	beq.n	db862 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   db830:	2a01      	cmp	r2, #1
   db832:	d101      	bne.n	db838 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db834:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db836:	6003      	str	r3, [r0, #0]
	}
   db838:	2000      	movs	r0, #0
   db83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db83c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   db83e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db840:	f7f8 fc29 	bl	d4096 <_Znwj>
   db844:	4604      	mov	r4, r0
   db846:	b150      	cbz	r0, db85e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   db848:	4631      	mov	r1, r6
   db84a:	f7ff fecb 	bl	db5e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   db84e:	6930      	ldr	r0, [r6, #16]
   db850:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db854:	b108      	cbz	r0, db85a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   db856:	f003 f833 	bl	de8c0 <strdup>
        type_(type) {
   db85a:	6120      	str	r0, [r4, #16]
   db85c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   db85e:	602c      	str	r4, [r5, #0]
	}
   db860:	e7ea      	b.n	db838 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db862:	6804      	ldr	r4, [r0, #0]
   db864:	2c00      	cmp	r4, #0
   db866:	d0e7      	beq.n	db838 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   db868:	f104 0010 	add.w	r0, r4, #16
   db86c:	f7ff fe15 	bl	db49a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   db870:	4620      	mov	r0, r4
   db872:	f7ff fc72 	bl	db15a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   db876:	2118      	movs	r1, #24
   db878:	4620      	mov	r0, r4
   db87a:	f000 fd0e 	bl	dc29a <_ZdlPvj>
   db87e:	e7db      	b.n	db838 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000db880 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   db880:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db882:	2300      	movs	r3, #0
   db884:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db886:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db888:	4604      	mov	r4, r0
   db88a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db88c:	b12b      	cbz	r3, db89a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db88e:	2202      	movs	r2, #2
   db890:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db892:	68eb      	ldr	r3, [r5, #12]
   db894:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db896:	68ab      	ldr	r3, [r5, #8]
   db898:	60a3      	str	r3, [r4, #8]
    }
   db89a:	4620      	mov	r0, r4
   db89c:	bd38      	pop	{r3, r4, r5, pc}

000db89e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   db89e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db8a0:	b570      	push	{r4, r5, r6, lr}
   db8a2:	4604      	mov	r4, r0
	  switch (__op)
   db8a4:	d007      	beq.n	db8b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   db8a6:	2a03      	cmp	r2, #3
   db8a8:	d012      	beq.n	db8d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   db8aa:	2a01      	cmp	r2, #1
   db8ac:	d101      	bne.n	db8b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db8ae:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db8b0:	6003      	str	r3, [r0, #0]
	}
   db8b2:	2000      	movs	r0, #0
   db8b4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db8b6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   db8b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db8ba:	f7f8 fbec 	bl	d4096 <_Znwj>
   db8be:	4605      	mov	r5, r0
   db8c0:	b120      	cbz	r0, db8cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   db8c2:	4631      	mov	r1, r6
   db8c4:	f7ff ffdc 	bl	db880 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   db8c8:	7c33      	ldrb	r3, [r6, #16]
   db8ca:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   db8cc:	6025      	str	r5, [r4, #0]
	}
   db8ce:	e7f0      	b.n	db8b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db8d0:	6804      	ldr	r4, [r0, #0]
   db8d2:	2c00      	cmp	r4, #0
   db8d4:	d0ed      	beq.n	db8b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   db8d6:	4620      	mov	r0, r4
   db8d8:	f7ff fc3f 	bl	db15a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   db8dc:	2114      	movs	r1, #20
   db8de:	4620      	mov	r0, r4
   db8e0:	f000 fcdb 	bl	dc29a <_ZdlPvj>
   db8e4:	e7e5      	b.n	db8b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000db8e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   db8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   db8ea:	b089      	sub	sp, #36	; 0x24
   db8ec:	4604      	mov	r4, r0
   db8ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   db8f0:	a801      	add	r0, sp, #4
   db8f2:	4611      	mov	r1, r2
   db8f4:	f7ff fe22 	bl	db53c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   db8f8:	b1a4      	cbz	r4, db924 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   db8fa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db8fc:	b11d      	cbz	r5, db906 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   db8fe:	4628      	mov	r0, r5
   db900:	f002 ffde 	bl	de8c0 <strdup>
   db904:	4605      	mov	r5, r0
   db906:	a801      	add	r0, sp, #4
   db908:	a903      	add	r1, sp, #12
        type_(type) {
   db90a:	9503      	str	r5, [sp, #12]
   db90c:	f8ad 4010 	strh.w	r4, [sp, #16]
   db910:	f7ff fe78 	bl	db604 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db914:	a803      	add	r0, sp, #12
   db916:	f7ff fdc0 	bl	db49a <_ZN8particle5ErrorD1Ev>
   db91a:	a802      	add	r0, sp, #8
   db91c:	f7fe fe13 	bl	da546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   db920:	b009      	add	sp, #36	; 0x24
   db922:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   db924:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   db926:	2301      	movs	r3, #1
   db928:	e8d5 2f4f 	ldrexb	r2, [r5]
   db92c:	2a00      	cmp	r2, #0
   db92e:	d103      	bne.n	db938 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   db930:	e8c5 3f41 	strexb	r1, r3, [r5]
   db934:	2900      	cmp	r1, #0
   db936:	d1f7      	bne.n	db928 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   db938:	d1ef      	bne.n	db91a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   db93a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   db93c:	f3bf 8f5b 	dmb	ish
   db940:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   db942:	1d2b      	adds	r3, r5, #4
   db944:	f3bf 8f5b 	dmb	ish
   db948:	e853 6f00 	ldrex	r6, [r3]
   db94c:	e843 4200 	strex	r2, r4, [r3]
   db950:	2a00      	cmp	r2, #0
   db952:	d1f9      	bne.n	db948 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   db954:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   db958:	2e00      	cmp	r6, #0
   db95a:	d0de      	beq.n	db91a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   db95c:	4620      	mov	r0, r4
   db95e:	f7fd fdd5 	bl	d950c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   db962:	4607      	mov	r7, r0
   db964:	b160      	cbz	r0, db980 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   db966:	f105 010c 	add.w	r1, r5, #12
   db96a:	4630      	mov	r0, r6
   db96c:	f7ff fe15 	bl	db59a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   db970:	4630      	mov	r0, r6
   db972:	f7ff fbf2 	bl	db15a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   db976:	2110      	movs	r1, #16
   db978:	4630      	mov	r0, r6
   db97a:	f000 fc8e 	bl	dc29a <_ZdlPvj>
   db97e:	e7cc      	b.n	db91a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   db980:	4631      	mov	r1, r6
   db982:	a803      	add	r0, sp, #12
   db984:	f7ff ff7c 	bl	db880 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   db988:	7b2b      	ldrb	r3, [r5, #12]
   db98a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   db98e:	2010      	movs	r0, #16
   db990:	f7f8 fb81 	bl	d4096 <_Znwj>
   db994:	4605      	mov	r5, r0
   db996:	b1d0      	cbz	r0, db9ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   db998:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db99a:	2014      	movs	r0, #20
   db99c:	f7f8 fb7b 	bl	d4096 <_Znwj>
   db9a0:	4604      	mov	r4, r0
   db9a2:	b178      	cbz	r0, db9c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   db9a4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   db9a6:	4601      	mov	r1, r0
   db9a8:	a803      	add	r0, sp, #12
   db9aa:	f7ff fbe5 	bl	db178 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db9ae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   db9b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db9b2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db9b4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   db9b6:	9205      	str	r2, [sp, #20]
   db9b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db9ba:	60e3      	str	r3, [r4, #12]
   db9bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   db9c0:	9206      	str	r2, [sp, #24]
   db9c2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   db9c4:	4b06      	ldr	r3, [pc, #24]	; (db9e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   db9c6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   db9c8:	4b06      	ldr	r3, [pc, #24]	; (db9e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db9ca:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   db9cc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   db9ce:	a803      	add	r0, sp, #12
   db9d0:	f7ff fbc3 	bl	db15a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   db9d4:	2200      	movs	r2, #0
   db9d6:	4629      	mov	r1, r5
   db9d8:	4803      	ldr	r0, [pc, #12]	; (db9e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   db9da:	f7fd fd9f 	bl	d951c <application_thread_invoke>
   db9de:	e7c7      	b.n	db970 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   db9e0:	000db5ad 	.word	0x000db5ad
   db9e4:	000db89f 	.word	0x000db89f
   db9e8:	000dbddd 	.word	0x000dbddd

000db9ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   db9ec:	4770      	bx	lr

000db9ee <_ZN9IPAddressD0Ev>:
   db9ee:	b510      	push	{r4, lr}
   db9f0:	2118      	movs	r1, #24
   db9f2:	4604      	mov	r4, r0
   db9f4:	f000 fc51 	bl	dc29a <_ZdlPvj>
   db9f8:	4620      	mov	r0, r4
   db9fa:	bd10      	pop	{r4, pc}

000db9fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   db9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   db9fe:	7d03      	ldrb	r3, [r0, #20]
   dba00:	2b06      	cmp	r3, #6
{
   dba02:	b08d      	sub	sp, #52	; 0x34
   dba04:	460e      	mov	r6, r1
   dba06:	f100 0704 	add.w	r7, r0, #4
   dba0a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   dba0e:	d012      	beq.n	dba36 <_ZNK9IPAddress7printToER5Print+0x3a>
   dba10:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   dba14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dba18:	220a      	movs	r2, #10
   dba1a:	4630      	mov	r0, r6
   dba1c:	f7ff f9a1 	bl	dad62 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dba20:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dba22:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   dba24:	d019      	beq.n	dba5a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   dba26:	2c00      	cmp	r4, #0
   dba28:	d0f4      	beq.n	dba14 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   dba2a:	212e      	movs	r1, #46	; 0x2e
   dba2c:	4630      	mov	r0, r6
   dba2e:	f7ff f97f 	bl	dad30 <_ZN5Print5printEc>
   dba32:	4404      	add	r4, r0
   dba34:	e7ee      	b.n	dba14 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dba36:	232f      	movs	r3, #47	; 0x2f
   dba38:	466a      	mov	r2, sp
   dba3a:	4639      	mov	r1, r7
   dba3c:	200a      	movs	r0, #10
		buf[0] = 0;
   dba3e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dba42:	f7fd fbd5 	bl	d91f0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   dba46:	4668      	mov	r0, sp
   dba48:	f002 ff57 	bl	de8fa <strlen>
   dba4c:	6833      	ldr	r3, [r6, #0]
   dba4e:	4602      	mov	r2, r0
   dba50:	68db      	ldr	r3, [r3, #12]
   dba52:	4669      	mov	r1, sp
   dba54:	4630      	mov	r0, r6
   dba56:	4798      	blx	r3
   dba58:	4604      	mov	r4, r0
    }
    return n;
}
   dba5a:	4620      	mov	r0, r4
   dba5c:	b00d      	add	sp, #52	; 0x34
   dba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dba60 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   dba60:	b510      	push	{r4, lr}
   dba62:	4b05      	ldr	r3, [pc, #20]	; (dba78 <_ZN9IPAddressC1Ev+0x18>)
   dba64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dba66:	2211      	movs	r2, #17
   dba68:	f840 3b04 	str.w	r3, [r0], #4
   dba6c:	2100      	movs	r1, #0
   dba6e:	f002 fedb 	bl	de828 <memset>
}
   dba72:	4620      	mov	r0, r4
   dba74:	bd10      	pop	{r4, pc}
   dba76:	bf00      	nop
   dba78:	000df7e8 	.word	0x000df7e8

000dba7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dba7c:	4603      	mov	r3, r0
   dba7e:	4a07      	ldr	r2, [pc, #28]	; (dba9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dba80:	b510      	push	{r4, lr}
   dba82:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dba86:	f101 0210 	add.w	r2, r1, #16
   dba8a:	f851 4b04 	ldr.w	r4, [r1], #4
   dba8e:	f843 4b04 	str.w	r4, [r3], #4
   dba92:	4291      	cmp	r1, r2
   dba94:	d1f9      	bne.n	dba8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dba96:	780a      	ldrb	r2, [r1, #0]
   dba98:	701a      	strb	r2, [r3, #0]
}
   dba9a:	bd10      	pop	{r4, pc}
   dba9c:	000df7e8 	.word	0x000df7e8

000dbaa0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dbaa0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dbaa2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dbaa6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dbaaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dbaae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dbab2:	2304      	movs	r3, #4
   dbab4:	6041      	str	r1, [r0, #4]
   dbab6:	7503      	strb	r3, [r0, #20]
}
   dbab8:	bd10      	pop	{r4, pc}

000dbaba <_ZN9IPAddressaSEPKh>:
{
   dbaba:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dbabc:	78cb      	ldrb	r3, [r1, #3]
   dbabe:	9300      	str	r3, [sp, #0]
   dbac0:	788b      	ldrb	r3, [r1, #2]
   dbac2:	784a      	ldrb	r2, [r1, #1]
   dbac4:	7809      	ldrb	r1, [r1, #0]
   dbac6:	f7ff ffeb 	bl	dbaa0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dbaca:	b002      	add	sp, #8
   dbacc:	bd10      	pop	{r4, pc}

000dbace <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dbace:	7441      	strb	r1, [r0, #17]
}
   dbad0:	4770      	bx	lr

000dbad2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dbad2:	4770      	bx	lr

000dbad4 <_ZN9USBSerial4readEv>:
{
   dbad4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dbad6:	2100      	movs	r1, #0
   dbad8:	7c00      	ldrb	r0, [r0, #16]
   dbada:	f7fd fcc5 	bl	d9468 <HAL_USB_USART_Receive_Data>
}
   dbade:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbae2:	bd08      	pop	{r3, pc}

000dbae4 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   dbae4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dbae6:	2101      	movs	r1, #1
   dbae8:	7c00      	ldrb	r0, [r0, #16]
   dbaea:	f7fd fcbd 	bl	d9468 <HAL_USB_USART_Receive_Data>
}
   dbaee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbaf2:	bd08      	pop	{r3, pc}

000dbaf4 <_ZN9USBSerial17availableForWriteEv>:
{
   dbaf4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dbaf6:	7c00      	ldrb	r0, [r0, #16]
   dbaf8:	f7fd fcae 	bl	d9458 <HAL_USB_USART_Available_Data_For_Write>
}
   dbafc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbb00:	bd08      	pop	{r3, pc}

000dbb02 <_ZN9USBSerial9availableEv>:
{
   dbb02:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dbb04:	7c00      	ldrb	r0, [r0, #16]
   dbb06:	f7fd fc9f 	bl	d9448 <HAL_USB_USART_Available_Data>
}
   dbb0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbb0e:	bd08      	pop	{r3, pc}

000dbb10 <_ZN9USBSerial5writeEh>:
{
   dbb10:	b513      	push	{r0, r1, r4, lr}
   dbb12:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dbb14:	7c00      	ldrb	r0, [r0, #16]
{
   dbb16:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dbb18:	f7fd fc9e 	bl	d9458 <HAL_USB_USART_Available_Data_For_Write>
   dbb1c:	2800      	cmp	r0, #0
   dbb1e:	9901      	ldr	r1, [sp, #4]
   dbb20:	dc01      	bgt.n	dbb26 <_ZN9USBSerial5writeEh+0x16>
   dbb22:	7c60      	ldrb	r0, [r4, #17]
   dbb24:	b120      	cbz	r0, dbb30 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dbb26:	7c20      	ldrb	r0, [r4, #16]
   dbb28:	f7fd fca6 	bl	d9478 <HAL_USB_USART_Send_Data>
   dbb2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   dbb30:	b002      	add	sp, #8
   dbb32:	bd10      	pop	{r4, pc}

000dbb34 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   dbb34:	7c00      	ldrb	r0, [r0, #16]
   dbb36:	f7fd bca7 	b.w	d9488 <HAL_USB_USART_Flush_Data>

000dbb3a <_ZN9USBSerialD0Ev>:
   dbb3a:	b510      	push	{r4, lr}
   dbb3c:	2114      	movs	r1, #20
   dbb3e:	4604      	mov	r4, r0
   dbb40:	f000 fbab 	bl	dc29a <_ZdlPvj>
   dbb44:	4620      	mov	r0, r4
   dbb46:	bd10      	pop	{r4, pc}

000dbb48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dbb48:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dbb4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dbb4e:	4604      	mov	r4, r0
   dbb50:	4608      	mov	r0, r1
   dbb52:	2100      	movs	r1, #0
   dbb54:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dbb58:	4b04      	ldr	r3, [pc, #16]	; (dbb6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dbb5a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   dbb5c:	2301      	movs	r3, #1
  _serial = serial;
   dbb5e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dbb60:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   dbb62:	4611      	mov	r1, r2
   dbb64:	f7fd fc68 	bl	d9438 <HAL_USB_USART_Init>
}
   dbb68:	4620      	mov	r0, r4
   dbb6a:	bd10      	pop	{r4, pc}
   dbb6c:	000df7fc 	.word	0x000df7fc

000dbb70 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dbb70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dbb72:	2214      	movs	r2, #20
{
   dbb74:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dbb76:	2100      	movs	r1, #0
   dbb78:	f002 fe56 	bl	de828 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dbb7c:	4620      	mov	r0, r4
   dbb7e:	bd10      	pop	{r4, pc}

000dbb80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dbb80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbb82:	4c10      	ldr	r4, [pc, #64]	; (dbbc4 <_Z16_fetch_usbserialv+0x44>)
{
   dbb84:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dbb86:	a803      	add	r0, sp, #12
   dbb88:	f7ff fff2 	bl	dbb70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbb8c:	7821      	ldrb	r1, [r4, #0]
   dbb8e:	f3bf 8f5b 	dmb	ish
   dbb92:	f011 0101 	ands.w	r1, r1, #1
   dbb96:	d111      	bne.n	dbbbc <_Z16_fetch_usbserialv+0x3c>
   dbb98:	4620      	mov	r0, r4
   dbb9a:	9101      	str	r1, [sp, #4]
   dbb9c:	f7f8 fa8c 	bl	d40b8 <__cxa_guard_acquire>
   dbba0:	9901      	ldr	r1, [sp, #4]
   dbba2:	b158      	cbz	r0, dbbbc <_Z16_fetch_usbserialv+0x3c>
   dbba4:	aa03      	add	r2, sp, #12
   dbba6:	4808      	ldr	r0, [pc, #32]	; (dbbc8 <_Z16_fetch_usbserialv+0x48>)
   dbba8:	f7ff ffce 	bl	dbb48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dbbac:	4620      	mov	r0, r4
   dbbae:	f7f8 fa88 	bl	d40c2 <__cxa_guard_release>
   dbbb2:	4a06      	ldr	r2, [pc, #24]	; (dbbcc <_Z16_fetch_usbserialv+0x4c>)
   dbbb4:	4906      	ldr	r1, [pc, #24]	; (dbbd0 <_Z16_fetch_usbserialv+0x50>)
   dbbb6:	4804      	ldr	r0, [pc, #16]	; (dbbc8 <_Z16_fetch_usbserialv+0x48>)
   dbbb8:	f000 fb6a 	bl	dc290 <__aeabi_atexit>
	return _usbserial;
}
   dbbbc:	4802      	ldr	r0, [pc, #8]	; (dbbc8 <_Z16_fetch_usbserialv+0x48>)
   dbbbe:	b008      	add	sp, #32
   dbbc0:	bd10      	pop	{r4, pc}
   dbbc2:	bf00      	nop
   dbbc4:	2003e648 	.word	0x2003e648
   dbbc8:	2003e64c 	.word	0x2003e64c
   dbbcc:	2003de20 	.word	0x2003de20
   dbbd0:	000dbad3 	.word	0x000dbad3

000dbbd4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   dbbd4:	2200      	movs	r2, #0
   dbbd6:	6840      	ldr	r0, [r0, #4]
   dbbd8:	4611      	mov	r1, r2
   dbbda:	f7fd bcdb 	b.w	d9594 <network_ready>

000dbbde <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   dbbde:	2200      	movs	r2, #0
   dbbe0:	6840      	ldr	r0, [r0, #4]
   dbbe2:	4611      	mov	r1, r2
   dbbe4:	f7fd bcf6 	b.w	d95d4 <network_listening>

000dbbe8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dbbe8:	2200      	movs	r2, #0
   dbbea:	6840      	ldr	r0, [r0, #4]
   dbbec:	4611      	mov	r1, r2
   dbbee:	f7fd bd01 	b.w	d95f4 <network_get_listen_timeout>

000dbbf2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dbbf2:	6840      	ldr	r0, [r0, #4]
   dbbf4:	2200      	movs	r2, #0
   dbbf6:	f7fd bcf5 	b.w	d95e4 <network_set_listen_timeout>

000dbbfa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dbbfa:	6840      	ldr	r0, [r0, #4]
   dbbfc:	2200      	movs	r2, #0
   dbbfe:	f081 0101 	eor.w	r1, r1, #1
   dbc02:	f7fd bcdf 	b.w	d95c4 <network_listen>

000dbc06 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dbc06:	2300      	movs	r3, #0
   dbc08:	6840      	ldr	r0, [r0, #4]
   dbc0a:	461a      	mov	r2, r3
   dbc0c:	4619      	mov	r1, r3
   dbc0e:	f7fd bcd1 	b.w	d95b4 <network_off>

000dbc12 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dbc12:	2300      	movs	r3, #0
   dbc14:	6840      	ldr	r0, [r0, #4]
   dbc16:	461a      	mov	r2, r3
   dbc18:	4619      	mov	r1, r3
   dbc1a:	f7fd bcc3 	b.w	d95a4 <network_on>

000dbc1e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dbc1e:	2200      	movs	r2, #0
   dbc20:	6840      	ldr	r0, [r0, #4]
   dbc22:	4611      	mov	r1, r2
   dbc24:	f7fd bca6 	b.w	d9574 <network_connecting>

000dbc28 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dbc28:	6840      	ldr	r0, [r0, #4]
   dbc2a:	2200      	movs	r2, #0
   dbc2c:	2102      	movs	r1, #2
   dbc2e:	f7fd bca9 	b.w	d9584 <network_disconnect>

000dbc32 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dbc32:	2300      	movs	r3, #0
   dbc34:	6840      	ldr	r0, [r0, #4]
   dbc36:	461a      	mov	r2, r3
   dbc38:	f7fd bc94 	b.w	d9564 <network_connect>

000dbc3c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   dbc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    CellularSignal() {}
   dbc3e:	4b1b      	ldr	r3, [pc, #108]	; (dbcac <_ZN5spark13CellularClass4RSSIEv+0x70>)
   dbc40:	6003      	str	r3, [r0, #0]
   dbc42:	2500      	movs	r5, #0
   dbc44:	460f      	mov	r7, r1
   dbc46:	3328      	adds	r3, #40	; 0x28
   dbc48:	2618      	movs	r6, #24
   dbc4a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dbc4e:	b089      	sub	sp, #36	; 0x24
   dbc50:	6043      	str	r3, [r0, #4]
   dbc52:	4632      	mov	r2, r6
   dbc54:	4629      	mov	r1, r5
   dbc56:	4604      	mov	r4, r0
   dbc58:	3010      	adds	r0, #16
   dbc5a:	f002 fde5 	bl	de828 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   dbc5e:	6878      	ldr	r0, [r7, #4]
   dbc60:	462a      	mov	r2, r5
   dbc62:	4629      	mov	r1, r5
   dbc64:	f7fd fc96 	bl	d9594 <network_ready>
   dbc68:	b918      	cbnz	r0, dbc72 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   dbc6a:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   dbc6c:	4620      	mov	r0, r4
   dbc6e:	b009      	add	sp, #36	; 0x24
   dbc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   dbc72:	4629      	mov	r1, r5
   dbc74:	4632      	mov	r2, r6
   dbc76:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   dbc78:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   dbc7c:	f002 fdd4 	bl	de828 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dbc80:	a902      	add	r1, sp, #8
   dbc82:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   dbc84:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dbc88:	f7fd fbb2 	bl	d93f0 <cellular_signal>
   dbc8c:	b110      	cbz	r0, dbc94 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   dbc8e:	2301      	movs	r3, #1
   dbc90:	60a3      	str	r3, [r4, #8]
            return sig;
   dbc92:	e7eb      	b.n	dbc6c <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   dbc94:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   dbc96:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   dbc98:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   dbc9a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   dbc9c:	b90b      	cbnz	r3, dbca2 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   dbc9e:	2302      	movs	r3, #2
   dbca0:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   dbca2:	a902      	add	r1, sp, #8
   dbca4:	4620      	mov	r0, r4
   dbca6:	f7ff fb1a 	bl	db2de <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   dbcaa:	e7df      	b.n	dbc6c <_ZN5spark13CellularClass4RSSIEv+0x30>
   dbcac:	000df798 	.word	0x000df798

000dbcb0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   dbcb0:	4b08      	ldr	r3, [pc, #32]	; (dbcd4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   dbcb2:	b510      	push	{r4, lr}
   dbcb4:	2428      	movs	r4, #40	; 0x28
   dbcb6:	4622      	mov	r2, r4
   dbcb8:	4618      	mov	r0, r3
   dbcba:	2100      	movs	r1, #0
   dbcbc:	f002 fdb4 	bl	de828 <memset>
   dbcc0:	4b05      	ldr	r3, [pc, #20]	; (dbcd8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   dbcc2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   dbcc4:	f04f 32ff 	mov.w	r2, #4294967295
   dbcc8:	6042      	str	r2, [r0, #4]
   dbcca:	2204      	movs	r2, #4
   dbccc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   dbcce:	4a03      	ldr	r2, [pc, #12]	; (dbcdc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   dbcd0:	601a      	str	r2, [r3, #0]
   dbcd2:	bd10      	pop	{r4, pc}
   dbcd4:	2003e668 	.word	0x2003e668
   dbcd8:	2003e660 	.word	0x2003e660
   dbcdc:	000df82c 	.word	0x000df82c

000dbce0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   dbce0:	4770      	bx	lr

000dbce2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dbce2:	7441      	strb	r1, [r0, #17]
}
   dbce4:	4770      	bx	lr

000dbce6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   dbce6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   dbce8:	7c00      	ldrb	r0, [r0, #16]
   dbcea:	f7fd fac1 	bl	d9270 <hal_usart_available_data_for_write>
}
   dbcee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbcf2:	bd08      	pop	{r3, pc}

000dbcf4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dbcf4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dbcf6:	7c00      	ldrb	r0, [r0, #16]
   dbcf8:	f7fd fa92 	bl	d9220 <hal_usart_available>
}
   dbcfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbd00:	bd08      	pop	{r3, pc}

000dbd02 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dbd02:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dbd04:	7c00      	ldrb	r0, [r0, #16]
   dbd06:	f7fd fa9b 	bl	d9240 <hal_usart_peek>
}
   dbd0a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbd0e:	bd08      	pop	{r3, pc}

000dbd10 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dbd10:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dbd12:	7c00      	ldrb	r0, [r0, #16]
   dbd14:	f7fd fa8c 	bl	d9230 <hal_usart_read>
}
   dbd18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbd1c:	bd08      	pop	{r3, pc}

000dbd1e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   dbd1e:	7c00      	ldrb	r0, [r0, #16]
   dbd20:	f7fd ba96 	b.w	d9250 <hal_usart_flush>

000dbd24 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dbd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dbd26:	7c45      	ldrb	r5, [r0, #17]
{
   dbd28:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dbd2a:	b12d      	cbz	r5, dbd38 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   dbd2c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dbd2e:	b003      	add	sp, #12
   dbd30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   dbd34:	f7fd ba6c 	b.w	d9210 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dbd38:	7c00      	ldrb	r0, [r0, #16]
   dbd3a:	9101      	str	r1, [sp, #4]
   dbd3c:	f7fd fa98 	bl	d9270 <hal_usart_available_data_for_write>
   dbd40:	2800      	cmp	r0, #0
   dbd42:	9901      	ldr	r1, [sp, #4]
   dbd44:	dcf2      	bgt.n	dbd2c <_ZN11USARTSerial5writeEh+0x8>
}
   dbd46:	4628      	mov	r0, r5
   dbd48:	b003      	add	sp, #12
   dbd4a:	bd30      	pop	{r4, r5, pc}

000dbd4c <_ZN11USARTSerialD0Ev>:
   dbd4c:	b510      	push	{r4, lr}
   dbd4e:	2114      	movs	r1, #20
   dbd50:	4604      	mov	r4, r0
   dbd52:	f000 faa2 	bl	dc29a <_ZdlPvj>
   dbd56:	4620      	mov	r0, r4
   dbd58:	bd10      	pop	{r4, pc}
	...

000dbd5c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   dbd5c:	b510      	push	{r4, lr}
   dbd5e:	f04f 0c00 	mov.w	ip, #0
   dbd62:	4604      	mov	r4, r0
   dbd64:	4608      	mov	r0, r1
   dbd66:	4611      	mov	r1, r2
   dbd68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dbd6c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   dbd70:	4a04      	ldr	r2, [pc, #16]	; (dbd84 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   dbd72:	6022      	str	r2, [r4, #0]
  _blocking = true;
   dbd74:	2201      	movs	r2, #1
  _serial = serial;
   dbd76:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dbd78:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   dbd7a:	461a      	mov	r2, r3
   dbd7c:	f7fd fa40 	bl	d9200 <hal_usart_init>
}
   dbd80:	4620      	mov	r0, r4
   dbd82:	bd10      	pop	{r4, pc}
   dbd84:	000df860 	.word	0x000df860

000dbd88 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   dbd88:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dbd8a:	4c0e      	ldr	r4, [pc, #56]	; (dbdc4 <_Z22__fetch_global_Serial1v+0x3c>)
   dbd8c:	7821      	ldrb	r1, [r4, #0]
   dbd8e:	f3bf 8f5b 	dmb	ish
   dbd92:	f011 0101 	ands.w	r1, r1, #1
   dbd96:	d112      	bne.n	dbdbe <_Z22__fetch_global_Serial1v+0x36>
   dbd98:	4620      	mov	r0, r4
   dbd9a:	9101      	str	r1, [sp, #4]
   dbd9c:	f7f8 f98c 	bl	d40b8 <__cxa_guard_acquire>
   dbda0:	9901      	ldr	r1, [sp, #4]
   dbda2:	b160      	cbz	r0, dbdbe <_Z22__fetch_global_Serial1v+0x36>
   dbda4:	4a08      	ldr	r2, [pc, #32]	; (dbdc8 <_Z22__fetch_global_Serial1v+0x40>)
   dbda6:	4b09      	ldr	r3, [pc, #36]	; (dbdcc <_Z22__fetch_global_Serial1v+0x44>)
   dbda8:	4809      	ldr	r0, [pc, #36]	; (dbdd0 <_Z22__fetch_global_Serial1v+0x48>)
   dbdaa:	f7ff ffd7 	bl	dbd5c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   dbdae:	4620      	mov	r0, r4
   dbdb0:	f7f8 f987 	bl	d40c2 <__cxa_guard_release>
   dbdb4:	4a07      	ldr	r2, [pc, #28]	; (dbdd4 <_Z22__fetch_global_Serial1v+0x4c>)
   dbdb6:	4908      	ldr	r1, [pc, #32]	; (dbdd8 <_Z22__fetch_global_Serial1v+0x50>)
   dbdb8:	4805      	ldr	r0, [pc, #20]	; (dbdd0 <_Z22__fetch_global_Serial1v+0x48>)
   dbdba:	f000 fa69 	bl	dc290 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dbdbe:	4804      	ldr	r0, [pc, #16]	; (dbdd0 <_Z22__fetch_global_Serial1v+0x48>)
   dbdc0:	b002      	add	sp, #8
   dbdc2:	bd10      	pop	{r4, pc}
   dbdc4:	2003e690 	.word	0x2003e690
   dbdc8:	2003e694 	.word	0x2003e694
   dbdcc:	2003e718 	.word	0x2003e718
   dbdd0:	2003e79c 	.word	0x2003e79c
   dbdd4:	2003de20 	.word	0x2003de20
   dbdd8:	000dbce1 	.word	0x000dbce1

000dbddc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dbddc:	b510      	push	{r4, lr}
      if (_M_empty())
   dbdde:	6883      	ldr	r3, [r0, #8]
   dbde0:	4604      	mov	r4, r0
   dbde2:	b90b      	cbnz	r3, dbde8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dbde4:	f000 fa5d 	bl	dc2a2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbde8:	68c3      	ldr	r3, [r0, #12]
   dbdea:	4798      	blx	r3
      if (_M_manager)
   dbdec:	68a3      	ldr	r3, [r4, #8]
   dbdee:	b11b      	cbz	r3, dbdf8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dbdf0:	2203      	movs	r2, #3
   dbdf2:	4621      	mov	r1, r4
   dbdf4:	4620      	mov	r0, r4
   dbdf6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dbdf8:	4620      	mov	r0, r4
   dbdfa:	2110      	movs	r1, #16
}
   dbdfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   dbe00:	f000 ba4b 	b.w	dc29a <_ZdlPvj>

000dbe04 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   dbe04:	4770      	bx	lr

000dbe06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dbe06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbe08:	4606      	mov	r6, r0
   dbe0a:	4615      	mov	r5, r2
   dbe0c:	460c      	mov	r4, r1
   dbe0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dbe10:	42bc      	cmp	r4, r7
   dbe12:	d006      	beq.n	dbe22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dbe14:	6833      	ldr	r3, [r6, #0]
   dbe16:	f814 1b01 	ldrb.w	r1, [r4], #1
   dbe1a:	689b      	ldr	r3, [r3, #8]
   dbe1c:	4630      	mov	r0, r6
   dbe1e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   dbe20:	e7f6      	b.n	dbe10 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   dbe22:	4628      	mov	r0, r5
   dbe24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dbe26 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   dbe26:	7c00      	ldrb	r0, [r0, #16]
   dbe28:	2200      	movs	r2, #0
   dbe2a:	f7fd ba41 	b.w	d92b0 <hal_i2c_write>

000dbe2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   dbe2e:	7c00      	ldrb	r0, [r0, #16]
   dbe30:	2100      	movs	r1, #0
   dbe32:	f7fd ba45 	b.w	d92c0 <hal_i2c_available>

000dbe36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   dbe36:	7c00      	ldrb	r0, [r0, #16]
   dbe38:	2100      	movs	r1, #0
   dbe3a:	f7fd ba49 	b.w	d92d0 <hal_i2c_read>

000dbe3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   dbe3e:	7c00      	ldrb	r0, [r0, #16]
   dbe40:	2100      	movs	r1, #0
   dbe42:	f7fd ba4d 	b.w	d92e0 <hal_i2c_peek>

000dbe46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   dbe46:	7c00      	ldrb	r0, [r0, #16]
   dbe48:	2100      	movs	r1, #0
   dbe4a:	f7fd ba51 	b.w	d92f0 <hal_i2c_flush>

000dbe4e <_ZN7TwoWireD0Ev>:
   dbe4e:	b510      	push	{r4, lr}
   dbe50:	2114      	movs	r1, #20
   dbe52:	4604      	mov	r4, r0
   dbe54:	f000 fa21 	bl	dc29a <_ZdlPvj>
   dbe58:	4620      	mov	r0, r4
   dbe5a:	bd10      	pop	{r4, pc}

000dbe5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   dbe5c:	b510      	push	{r4, lr}
   dbe5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dbe62:	4604      	mov	r4, r0
   dbe64:	4608      	mov	r0, r1
   dbe66:	2100      	movs	r1, #0
   dbe68:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dbe6c:	4b03      	ldr	r3, [pc, #12]	; (dbe7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   dbe6e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   dbe70:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   dbe72:	4611      	mov	r1, r2
   dbe74:	f7fd fa4c 	bl	d9310 <hal_i2c_init>
}
   dbe78:	4620      	mov	r0, r4
   dbe7a:	bd10      	pop	{r4, pc}
   dbe7c:	000df890 	.word	0x000df890

000dbe80 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dbe80:	2300      	movs	r3, #0
   dbe82:	7c00      	ldrb	r0, [r0, #16]
   dbe84:	461a      	mov	r2, r3
   dbe86:	4619      	mov	r1, r3
   dbe88:	f7fd b9fa 	b.w	d9280 <hal_i2c_begin>

000dbe8c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   dbe8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   dbe8e:	2200      	movs	r2, #0
   dbe90:	2314      	movs	r3, #20
   dbe92:	e9cd 2201 	strd	r2, r2, [sp, #4]
   dbe96:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   dbe9a:	780b      	ldrb	r3, [r1, #0]
   dbe9c:	f88d 3008 	strb.w	r3, [sp, #8]
   dbea0:	684b      	ldr	r3, [r1, #4]
   dbea2:	9303      	str	r3, [sp, #12]
   dbea4:	68cb      	ldr	r3, [r1, #12]
   dbea6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   dbea8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   dbeaa:	7a0b      	ldrb	r3, [r1, #8]
   dbeac:	9305      	str	r3, [sp, #20]
   dbeae:	a901      	add	r1, sp, #4
   dbeb0:	f7fd fa46 	bl	d9340 <hal_i2c_request_ex>
}
   dbeb4:	b007      	add	sp, #28
   dbeb6:	f85d fb04 	ldr.w	pc, [sp], #4

000dbeba <_ZN7TwoWire11requestFromEhjh>:
{
   dbeba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   dbebc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dbebe:	f88d 1000 	strb.w	r1, [sp]
   dbec2:	f04f 0164 	mov.w	r1, #100	; 0x64
   dbec6:	9103      	str	r1, [sp, #12]
   dbec8:	bf18      	it	ne
   dbeca:	2301      	movne	r3, #1
   dbecc:	4669      	mov	r1, sp
    size_ = size;
   dbece:	9201      	str	r2, [sp, #4]
   dbed0:	f88d 3008 	strb.w	r3, [sp, #8]
   dbed4:	f7ff ffda 	bl	dbe8c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   dbed8:	b005      	add	sp, #20
   dbeda:	f85d fb04 	ldr.w	pc, [sp], #4

000dbede <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   dbede:	2301      	movs	r3, #1
   dbee0:	f7ff bfeb 	b.w	dbeba <_ZN7TwoWire11requestFromEhjh>

000dbee4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   dbee4:	7c00      	ldrb	r0, [r0, #16]
   dbee6:	2200      	movs	r2, #0
   dbee8:	f7fd b9d2 	b.w	d9290 <hal_i2c_begin_transmission>

000dbeec <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   dbeec:	7c00      	ldrb	r0, [r0, #16]
   dbeee:	2200      	movs	r2, #0
   dbef0:	f7fd b9d6 	b.w	d92a0 <hal_i2c_end_transmission>

000dbef4 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   dbef4:	2101      	movs	r1, #1
   dbef6:	f7ff bff9 	b.w	dbeec <_ZN7TwoWire15endTransmissionEh>

000dbefa <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   dbefa:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   dbefc:	2100      	movs	r1, #0
   dbefe:	7c00      	ldrb	r0, [r0, #16]
   dbf00:	f7fd fa0e 	bl	d9320 <hal_i2c_lock>
}
   dbf04:	fab0 f080 	clz	r0, r0
   dbf08:	0940      	lsrs	r0, r0, #5
   dbf0a:	bd08      	pop	{r3, pc}

000dbf0c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dbf0c:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   dbf0e:	2100      	movs	r1, #0
   dbf10:	7c00      	ldrb	r0, [r0, #16]
   dbf12:	f7fd fa0d 	bl	d9330 <hal_i2c_unlock>
}
   dbf16:	fab0 f080 	clz	r0, r0
   dbf1a:	0940      	lsrs	r0, r0, #5
   dbf1c:	bd08      	pop	{r3, pc}

000dbf1e <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dbf1e:	2300      	movs	r3, #0
   dbf20:	6840      	ldr	r0, [r0, #4]
   dbf22:	461a      	mov	r2, r3
   dbf24:	f7fd bb1e 	b.w	d9564 <network_connect>

000dbf28 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dbf28:	6840      	ldr	r0, [r0, #4]
   dbf2a:	2200      	movs	r2, #0
   dbf2c:	2102      	movs	r1, #2
   dbf2e:	f7fd bb29 	b.w	d9584 <network_disconnect>

000dbf32 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dbf32:	2200      	movs	r2, #0
   dbf34:	6840      	ldr	r0, [r0, #4]
   dbf36:	4611      	mov	r1, r2
   dbf38:	f7fd bb1c 	b.w	d9574 <network_connecting>

000dbf3c <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dbf3c:	2200      	movs	r2, #0
   dbf3e:	6840      	ldr	r0, [r0, #4]
   dbf40:	4611      	mov	r1, r2
   dbf42:	f7fd bb27 	b.w	d9594 <network_ready>

000dbf46 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dbf46:	2300      	movs	r3, #0
   dbf48:	6840      	ldr	r0, [r0, #4]
   dbf4a:	461a      	mov	r2, r3
   dbf4c:	4619      	mov	r1, r3
   dbf4e:	f7fd bb29 	b.w	d95a4 <network_on>

000dbf52 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dbf52:	2300      	movs	r3, #0
   dbf54:	6840      	ldr	r0, [r0, #4]
   dbf56:	461a      	mov	r2, r3
   dbf58:	4619      	mov	r1, r3
   dbf5a:	f7fd bb2b 	b.w	d95b4 <network_off>

000dbf5e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dbf5e:	6840      	ldr	r0, [r0, #4]
   dbf60:	2200      	movs	r2, #0
   dbf62:	f081 0101 	eor.w	r1, r1, #1
   dbf66:	f7fd bb2d 	b.w	d95c4 <network_listen>

000dbf6a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dbf6a:	6840      	ldr	r0, [r0, #4]
   dbf6c:	2200      	movs	r2, #0
   dbf6e:	f7fd bb39 	b.w	d95e4 <network_set_listen_timeout>

000dbf72 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dbf72:	2200      	movs	r2, #0
   dbf74:	6840      	ldr	r0, [r0, #4]
   dbf76:	4611      	mov	r1, r2
   dbf78:	f7fd bb3c 	b.w	d95f4 <network_get_listen_timeout>

000dbf7c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dbf7c:	2200      	movs	r2, #0
   dbf7e:	6840      	ldr	r0, [r0, #4]
   dbf80:	4611      	mov	r1, r2
   dbf82:	f7fd bb27 	b.w	d95d4 <network_listening>

000dbf86 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dbf86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dbf8a:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   dbf8c:	b095      	sub	sp, #84	; 0x54
   dbf8e:	4616      	mov	r6, r2
   dbf90:	460d      	mov	r5, r1
   dbf92:	4607      	mov	r7, r0
    IPAddress addr;
   dbf94:	f7ff fd64 	bl	dba60 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   dbf98:	4621      	mov	r1, r4
   dbf9a:	2218      	movs	r2, #24
   dbf9c:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   dbf9e:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dbfa0:	f002 fc42 	bl	de828 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dbfa4:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   dbfa6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dbfaa:	4621      	mov	r1, r4
   dbfac:	466b      	mov	r3, sp
   dbfae:	aa0c      	add	r2, sp, #48	; 0x30
   dbfb0:	4630      	mov	r0, r6
   dbfb2:	f7fd f80b 	bl	d8fcc <netdb_getaddrinfo>
    if (!r) {
   dbfb6:	4604      	mov	r4, r0
   dbfb8:	2800      	cmp	r0, #0
   dbfba:	d146      	bne.n	dc04a <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dbfbc:	4602      	mov	r2, r0
   dbfbe:	2101      	movs	r1, #1
   dbfc0:	6868      	ldr	r0, [r5, #4]
   dbfc2:	f7fd fae7 	bl	d9594 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dbfc6:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dbfc8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dbfca:	4622      	mov	r2, r4
   dbfcc:	6868      	ldr	r0, [r5, #4]
   dbfce:	f7fd fae1 	bl	d9594 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dbfd2:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dbfd4:	4681      	mov	r9, r0
        bool ok = false;
   dbfd6:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dbfd8:	2e00      	cmp	r6, #0
   dbfda:	d036      	beq.n	dc04a <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   dbfdc:	2900      	cmp	r1, #0
   dbfde:	d134      	bne.n	dc04a <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dbfe0:	6873      	ldr	r3, [r6, #4]
   dbfe2:	2b02      	cmp	r3, #2
   dbfe4:	d003      	beq.n	dbfee <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   dbfe6:	2b0a      	cmp	r3, #10
   dbfe8:	d00b      	beq.n	dc002 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dbfea:	69f6      	ldr	r6, [r6, #28]
   dbfec:	e7f4      	b.n	dbfd8 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   dbfee:	f1b8 0f00 	cmp.w	r8, #0
   dbff2:	d004      	beq.n	dbffe <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dbff4:	6971      	ldr	r1, [r6, #20]
   dbff6:	4638      	mov	r0, r7
   dbff8:	3104      	adds	r1, #4
   dbffa:	f7ff fd5e 	bl	dbaba <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   dbffe:	4641      	mov	r1, r8
   dc000:	e7f3      	b.n	dbfea <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   dc002:	f1b9 0f00 	cmp.w	r9, #0
   dc006:	d101      	bne.n	dc00c <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   dc008:	4649      	mov	r1, r9
   dc00a:	e7ee      	b.n	dbfea <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dc00c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dc00e:	2210      	movs	r2, #16
   dc010:	a801      	add	r0, sp, #4
   dc012:	f002 fc09 	bl	de828 <memset>
                    a.v = 6;
   dc016:	2306      	movs	r3, #6
   dc018:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dc01c:	ad01      	add	r5, sp, #4
   dc01e:	f104 0308 	add.w	r3, r4, #8
   dc022:	3418      	adds	r4, #24
   dc024:	6818      	ldr	r0, [r3, #0]
   dc026:	6859      	ldr	r1, [r3, #4]
   dc028:	462a      	mov	r2, r5
   dc02a:	c203      	stmia	r2!, {r0, r1}
   dc02c:	3308      	adds	r3, #8
   dc02e:	42a3      	cmp	r3, r4
   dc030:	4615      	mov	r5, r2
   dc032:	d1f7      	bne.n	dc024 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   dc034:	a901      	add	r1, sp, #4
   dc036:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   dc038:	ad07      	add	r5, sp, #28
   dc03a:	f7ff fd1f 	bl	dba7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dc03e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc040:	1d3c      	adds	r4, r7, #4
   dc042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc044:	682b      	ldr	r3, [r5, #0]
   dc046:	7023      	strb	r3, [r4, #0]
   dc048:	e7de      	b.n	dc008 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dc04a:	9800      	ldr	r0, [sp, #0]
   dc04c:	f7fc ffb6 	bl	d8fbc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dc050:	4638      	mov	r0, r7
   dc052:	b015      	add	sp, #84	; 0x54
   dc054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dc058 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dc058:	4b02      	ldr	r3, [pc, #8]	; (dc064 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dc05a:	4a03      	ldr	r2, [pc, #12]	; (dc068 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dc05c:	601a      	str	r2, [r3, #0]
   dc05e:	2200      	movs	r2, #0
   dc060:	605a      	str	r2, [r3, #4]

} // spark
   dc062:	4770      	bx	lr
   dc064:	2003e7b0 	.word	0x2003e7b0
   dc068:	000df8b8 	.word	0x000df8b8

000dc06c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   dc06c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   dc06e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   dc070:	d902      	bls.n	dc078 <pinAvailable+0xc>
    return false;
   dc072:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   dc074:	b002      	add	sp, #8
   dc076:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   dc078:	f1a0 030b 	sub.w	r3, r0, #11
   dc07c:	2b02      	cmp	r3, #2
   dc07e:	d81a      	bhi.n	dc0b6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dc080:	4c17      	ldr	r4, [pc, #92]	; (dc0e0 <pinAvailable+0x74>)
   dc082:	7821      	ldrb	r1, [r4, #0]
   dc084:	f3bf 8f5b 	dmb	ish
   dc088:	f011 0101 	ands.w	r1, r1, #1
   dc08c:	d10b      	bne.n	dc0a6 <pinAvailable+0x3a>
   dc08e:	4620      	mov	r0, r4
   dc090:	9101      	str	r1, [sp, #4]
   dc092:	f7f8 f811 	bl	d40b8 <__cxa_guard_acquire>
   dc096:	9901      	ldr	r1, [sp, #4]
   dc098:	b128      	cbz	r0, dc0a6 <pinAvailable+0x3a>
   dc09a:	4812      	ldr	r0, [pc, #72]	; (dc0e4 <pinAvailable+0x78>)
   dc09c:	f7fd fb9e 	bl	d97dc <_ZN8SPIClassC1E19hal_spi_interface_t>
   dc0a0:	4620      	mov	r0, r4
   dc0a2:	f7f8 f80e 	bl	d40c2 <__cxa_guard_release>
   dc0a6:	4b0f      	ldr	r3, [pc, #60]	; (dc0e4 <pinAvailable+0x78>)
   dc0a8:	7818      	ldrb	r0, [r3, #0]
   dc0aa:	f7fd f969 	bl	d9380 <hal_spi_is_enabled>
   dc0ae:	2800      	cmp	r0, #0
   dc0b0:	d1df      	bne.n	dc072 <pinAvailable+0x6>
  return true; // 'pin' is available
   dc0b2:	2001      	movs	r0, #1
   dc0b4:	e7de      	b.n	dc074 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   dc0b6:	2801      	cmp	r0, #1
   dc0b8:	d809      	bhi.n	dc0ce <pinAvailable+0x62>
   dc0ba:	f000 f899 	bl	dc1f0 <_Z19__fetch_global_Wirev>
   dc0be:	2100      	movs	r1, #0
   dc0c0:	7c00      	ldrb	r0, [r0, #16]
   dc0c2:	f7fd f91d 	bl	d9300 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   dc0c6:	f080 0001 	eor.w	r0, r0, #1
   dc0ca:	b2c0      	uxtb	r0, r0
   dc0cc:	e7d2      	b.n	dc074 <pinAvailable+0x8>
   dc0ce:	3809      	subs	r0, #9
   dc0d0:	2801      	cmp	r0, #1
   dc0d2:	d8ee      	bhi.n	dc0b2 <pinAvailable+0x46>
   dc0d4:	f7ff fe58 	bl	dbd88 <_Z22__fetch_global_Serial1v>
   dc0d8:	7c00      	ldrb	r0, [r0, #16]
   dc0da:	f7fd f8c1 	bl	d9260 <hal_usart_is_enabled>
   dc0de:	e7f2      	b.n	dc0c6 <pinAvailable+0x5a>
   dc0e0:	2003de24 	.word	0x2003de24
   dc0e4:	2003de28 	.word	0x2003de28

000dc0e8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dc0e8:	2823      	cmp	r0, #35	; 0x23
{
   dc0ea:	b538      	push	{r3, r4, r5, lr}
   dc0ec:	4604      	mov	r4, r0
   dc0ee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dc0f0:	d80a      	bhi.n	dc108 <pinMode+0x20>
   dc0f2:	29ff      	cmp	r1, #255	; 0xff
   dc0f4:	d008      	beq.n	dc108 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   dc0f6:	f7ff ffb9 	bl	dc06c <pinAvailable>
   dc0fa:	b128      	cbz	r0, dc108 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   dc0fc:	4629      	mov	r1, r5
   dc0fe:	4620      	mov	r0, r4
}
   dc100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   dc104:	f7fc bf6a 	b.w	d8fdc <HAL_Pin_Mode>
}
   dc108:	bd38      	pop	{r3, r4, r5, pc}

000dc10a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dc10a:	b538      	push	{r3, r4, r5, lr}
   dc10c:	4604      	mov	r4, r0
   dc10e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dc110:	f7fc ff6c 	bl	d8fec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dc114:	28ff      	cmp	r0, #255	; 0xff
   dc116:	d010      	beq.n	dc13a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   dc118:	2806      	cmp	r0, #6
   dc11a:	d804      	bhi.n	dc126 <digitalWrite+0x1c>
   dc11c:	234d      	movs	r3, #77	; 0x4d
   dc11e:	fa23 f000 	lsr.w	r0, r3, r0
   dc122:	07c3      	lsls	r3, r0, #31
   dc124:	d409      	bmi.n	dc13a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dc126:	4620      	mov	r0, r4
   dc128:	f7ff ffa0 	bl	dc06c <pinAvailable>
   dc12c:	b128      	cbz	r0, dc13a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dc12e:	4629      	mov	r1, r5
   dc130:	4620      	mov	r0, r4
}
   dc132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   dc136:	f7fc bf61 	b.w	d8ffc <HAL_GPIO_Write>
}
   dc13a:	bd38      	pop	{r3, r4, r5, pc}

000dc13c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dc13c:	b510      	push	{r4, lr}
   dc13e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dc140:	f7fc ff54 	bl	d8fec <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   dc144:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   dc146:	b2db      	uxtb	r3, r3
   dc148:	2b01      	cmp	r3, #1
   dc14a:	d908      	bls.n	dc15e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dc14c:	4620      	mov	r0, r4
   dc14e:	f7ff ff8d 	bl	dc06c <pinAvailable>
   dc152:	b120      	cbz	r0, dc15e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dc154:	4620      	mov	r0, r4
}
   dc156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   dc15a:	f7fc bf57 	b.w	d900c <HAL_GPIO_Read>
}
   dc15e:	2000      	movs	r0, #0
   dc160:	bd10      	pop	{r4, pc}
	...

000dc164 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   dc164:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   dc166:	4c08      	ldr	r4, [pc, #32]	; (dc188 <_Z21__fetch_global_EEPROMv+0x24>)
   dc168:	7823      	ldrb	r3, [r4, #0]
   dc16a:	f3bf 8f5b 	dmb	ish
   dc16e:	07db      	lsls	r3, r3, #31
   dc170:	d408      	bmi.n	dc184 <_Z21__fetch_global_EEPROMv+0x20>
   dc172:	4620      	mov	r0, r4
   dc174:	f7f7 ffa0 	bl	d40b8 <__cxa_guard_acquire>
   dc178:	b120      	cbz	r0, dc184 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   dc17a:	f7fc ff6f 	bl	d905c <HAL_EEPROM_Init>
   dc17e:	4620      	mov	r0, r4
   dc180:	f7f7 ff9f 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   dc184:	4801      	ldr	r0, [pc, #4]	; (dc18c <_Z21__fetch_global_EEPROMv+0x28>)
   dc186:	bd10      	pop	{r4, pc}
   dc188:	2003e7bc 	.word	0x2003e7bc
   dc18c:	2003e7c0 	.word	0x2003e7c0

000dc190 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   dc190:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   dc192:	2300      	movs	r3, #0
   dc194:	2520      	movs	r5, #32
   dc196:	8043      	strh	r3, [r0, #2]
   dc198:	2314      	movs	r3, #20
{
   dc19a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   dc19c:	8003      	strh	r3, [r0, #0]
   dc19e:	6085      	str	r5, [r0, #8]
   dc1a0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dc1a2:	4906      	ldr	r1, [pc, #24]	; (dc1bc <_Z17acquireWireBufferv+0x2c>)
   dc1a4:	4628      	mov	r0, r5
   dc1a6:	f000 f87a 	bl	dc29e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dc1aa:	4904      	ldr	r1, [pc, #16]	; (dc1bc <_Z17acquireWireBufferv+0x2c>)
	};
   dc1ac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dc1ae:	4628      	mov	r0, r5
   dc1b0:	f000 f875 	bl	dc29e <_ZnajRKSt9nothrow_t>
	};
   dc1b4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   dc1b6:	4620      	mov	r0, r4
   dc1b8:	bd38      	pop	{r3, r4, r5, pc}
   dc1ba:	bf00      	nop
   dc1bc:	000df8e4 	.word	0x000df8e4

000dc1c0 <_Z18acquireWire1Bufferv>:
   dc1c0:	b538      	push	{r3, r4, r5, lr}
   dc1c2:	2300      	movs	r3, #0
   dc1c4:	2520      	movs	r5, #32
   dc1c6:	8043      	strh	r3, [r0, #2]
   dc1c8:	2314      	movs	r3, #20
   dc1ca:	4604      	mov	r4, r0
   dc1cc:	8003      	strh	r3, [r0, #0]
   dc1ce:	6085      	str	r5, [r0, #8]
   dc1d0:	6105      	str	r5, [r0, #16]
   dc1d2:	4906      	ldr	r1, [pc, #24]	; (dc1ec <_Z18acquireWire1Bufferv+0x2c>)
   dc1d4:	4628      	mov	r0, r5
   dc1d6:	f000 f862 	bl	dc29e <_ZnajRKSt9nothrow_t>
   dc1da:	4904      	ldr	r1, [pc, #16]	; (dc1ec <_Z18acquireWire1Bufferv+0x2c>)
   dc1dc:	6060      	str	r0, [r4, #4]
   dc1de:	4628      	mov	r0, r5
   dc1e0:	f000 f85d 	bl	dc29e <_ZnajRKSt9nothrow_t>
   dc1e4:	60e0      	str	r0, [r4, #12]
   dc1e6:	4620      	mov	r0, r4
   dc1e8:	bd38      	pop	{r3, r4, r5, pc}
   dc1ea:	bf00      	nop
   dc1ec:	000df8e4 	.word	0x000df8e4

000dc1f0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dc1f0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dc1f2:	4d0f      	ldr	r5, [pc, #60]	; (dc230 <_Z19__fetch_global_Wirev+0x40>)
   dc1f4:	7829      	ldrb	r1, [r5, #0]
   dc1f6:	f3bf 8f5b 	dmb	ish
   dc1fa:	f011 0401 	ands.w	r4, r1, #1
{
   dc1fe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dc200:	d113      	bne.n	dc22a <_Z19__fetch_global_Wirev+0x3a>
   dc202:	4628      	mov	r0, r5
   dc204:	f7f7 ff58 	bl	d40b8 <__cxa_guard_acquire>
   dc208:	b178      	cbz	r0, dc22a <_Z19__fetch_global_Wirev+0x3a>
   dc20a:	a801      	add	r0, sp, #4
   dc20c:	f7ff ffc0 	bl	dc190 <_Z17acquireWireBufferv>
   dc210:	aa01      	add	r2, sp, #4
   dc212:	4621      	mov	r1, r4
   dc214:	4807      	ldr	r0, [pc, #28]	; (dc234 <_Z19__fetch_global_Wirev+0x44>)
   dc216:	f7ff fe21 	bl	dbe5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dc21a:	4628      	mov	r0, r5
   dc21c:	f7f7 ff51 	bl	d40c2 <__cxa_guard_release>
   dc220:	4a05      	ldr	r2, [pc, #20]	; (dc238 <_Z19__fetch_global_Wirev+0x48>)
   dc222:	4906      	ldr	r1, [pc, #24]	; (dc23c <_Z19__fetch_global_Wirev+0x4c>)
   dc224:	4803      	ldr	r0, [pc, #12]	; (dc234 <_Z19__fetch_global_Wirev+0x44>)
   dc226:	f000 f833 	bl	dc290 <__aeabi_atexit>
	return wire;
}
   dc22a:	4802      	ldr	r0, [pc, #8]	; (dc234 <_Z19__fetch_global_Wirev+0x44>)
   dc22c:	b007      	add	sp, #28
   dc22e:	bd30      	pop	{r4, r5, pc}
   dc230:	2003e7c4 	.word	0x2003e7c4
   dc234:	2003e7cc 	.word	0x2003e7cc
   dc238:	2003de20 	.word	0x2003de20
   dc23c:	000dbe05 	.word	0x000dbe05

000dc240 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dc240:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dc242:	4c0f      	ldr	r4, [pc, #60]	; (dc280 <_Z20__fetch_global_Wire1v+0x40>)
   dc244:	7823      	ldrb	r3, [r4, #0]
   dc246:	f3bf 8f5b 	dmb	ish
   dc24a:	07db      	lsls	r3, r3, #31
{
   dc24c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dc24e:	d413      	bmi.n	dc278 <_Z20__fetch_global_Wire1v+0x38>
   dc250:	4620      	mov	r0, r4
   dc252:	f7f7 ff31 	bl	d40b8 <__cxa_guard_acquire>
   dc256:	b178      	cbz	r0, dc278 <_Z20__fetch_global_Wire1v+0x38>
   dc258:	a801      	add	r0, sp, #4
   dc25a:	f7ff ffb1 	bl	dc1c0 <_Z18acquireWire1Bufferv>
   dc25e:	aa01      	add	r2, sp, #4
   dc260:	2101      	movs	r1, #1
   dc262:	4808      	ldr	r0, [pc, #32]	; (dc284 <_Z20__fetch_global_Wire1v+0x44>)
   dc264:	f7ff fdfa 	bl	dbe5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dc268:	4620      	mov	r0, r4
   dc26a:	f7f7 ff2a 	bl	d40c2 <__cxa_guard_release>
   dc26e:	4a06      	ldr	r2, [pc, #24]	; (dc288 <_Z20__fetch_global_Wire1v+0x48>)
   dc270:	4906      	ldr	r1, [pc, #24]	; (dc28c <_Z20__fetch_global_Wire1v+0x4c>)
   dc272:	4804      	ldr	r0, [pc, #16]	; (dc284 <_Z20__fetch_global_Wire1v+0x44>)
   dc274:	f000 f80c 	bl	dc290 <__aeabi_atexit>
	return wire;
}
   dc278:	4802      	ldr	r0, [pc, #8]	; (dc284 <_Z20__fetch_global_Wire1v+0x44>)
   dc27a:	b006      	add	sp, #24
   dc27c:	bd10      	pop	{r4, pc}
   dc27e:	bf00      	nop
   dc280:	2003e7c8 	.word	0x2003e7c8
   dc284:	2003e7e0 	.word	0x2003e7e0
   dc288:	2003de20 	.word	0x2003de20
   dc28c:	000dbe05 	.word	0x000dbe05

000dc290 <__aeabi_atexit>:
   dc290:	460b      	mov	r3, r1
   dc292:	4601      	mov	r1, r0
   dc294:	4618      	mov	r0, r3
   dc296:	f002 ba83 	b.w	de7a0 <__cxa_atexit>

000dc29a <_ZdlPvj>:
   dc29a:	f7f7 bf00 	b.w	d409e <_ZdlPv>

000dc29e <_ZnajRKSt9nothrow_t>:
   dc29e:	f7f7 befc 	b.w	d409a <_Znaj>

000dc2a2 <_ZSt25__throw_bad_function_callv>:
   dc2a2:	b508      	push	{r3, lr}
   dc2a4:	f7fd fa2e 	bl	d9704 <abort>

000dc2a8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   dc2a8:	4901      	ldr	r1, [pc, #4]	; (dc2b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   dc2aa:	f000 b8f9 	b.w	dc4a0 <_ZNKSt9type_infoeqERKS_>
   dc2ae:	bf00      	nop
   dc2b0:	000df900 	.word	0x000df900

000dc2b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   dc2b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   dc2b6:	2400      	movs	r4, #0
   dc2b8:	2310      	movs	r3, #16
   dc2ba:	e9cd 3402 	strd	r3, r4, [sp, #8]
   dc2be:	6803      	ldr	r3, [r0, #0]
   dc2c0:	9400      	str	r4, [sp, #0]
   dc2c2:	699e      	ldr	r6, [r3, #24]
   dc2c4:	f88d 4004 	strb.w	r4, [sp, #4]
   dc2c8:	4615      	mov	r5, r2
   dc2ca:	466b      	mov	r3, sp
   dc2cc:	6812      	ldr	r2, [r2, #0]
   dc2ce:	47b0      	blx	r6
   dc2d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   dc2d4:	f003 0306 	and.w	r3, r3, #6
   dc2d8:	2b06      	cmp	r3, #6
   dc2da:	bf03      	ittte	eq
   dc2dc:	9b00      	ldreq	r3, [sp, #0]
   dc2de:	602b      	streq	r3, [r5, #0]
   dc2e0:	2001      	moveq	r0, #1
   dc2e2:	4620      	movne	r0, r4
   dc2e4:	b004      	add	sp, #16
   dc2e6:	bd70      	pop	{r4, r5, r6, pc}

000dc2e8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   dc2e8:	9800      	ldr	r0, [sp, #0]
   dc2ea:	4290      	cmp	r0, r2
   dc2ec:	bf14      	ite	ne
   dc2ee:	2001      	movne	r0, #1
   dc2f0:	2006      	moveq	r0, #6
   dc2f2:	4770      	bx	lr

000dc2f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   dc2f4:	b510      	push	{r4, lr}
   dc2f6:	4b03      	ldr	r3, [pc, #12]	; (dc304 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   dc2f8:	6003      	str	r3, [r0, #0]
   dc2fa:	4604      	mov	r4, r0
   dc2fc:	f000 f8cd 	bl	dc49a <_ZNSt9type_infoD1Ev>
   dc300:	4620      	mov	r0, r4
   dc302:	bd10      	pop	{r4, pc}
   dc304:	000df940 	.word	0x000df940

000dc308 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   dc308:	b510      	push	{r4, lr}
   dc30a:	4604      	mov	r4, r0
   dc30c:	f7ff fff2 	bl	dc2f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   dc310:	4620      	mov	r0, r4
   dc312:	2108      	movs	r1, #8
   dc314:	f7ff ffc1 	bl	dc29a <_ZdlPvj>
   dc318:	4620      	mov	r0, r4
   dc31a:	bd10      	pop	{r4, pc}

000dc31c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   dc31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc320:	461f      	mov	r7, r3
   dc322:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   dc326:	f8dd 8018 	ldr.w	r8, [sp, #24]
   dc32a:	4598      	cmp	r8, r3
   dc32c:	4606      	mov	r6, r0
   dc32e:	4615      	mov	r5, r2
   dc330:	d107      	bne.n	dc342 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   dc332:	9907      	ldr	r1, [sp, #28]
   dc334:	f000 f8b4 	bl	dc4a0 <_ZNKSt9type_infoeqERKS_>
   dc338:	b118      	cbz	r0, dc342 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   dc33a:	7165      	strb	r5, [r4, #5]
   dc33c:	2000      	movs	r0, #0
   dc33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc342:	4639      	mov	r1, r7
   dc344:	4630      	mov	r0, r6
   dc346:	f000 f8ab 	bl	dc4a0 <_ZNKSt9type_infoeqERKS_>
   dc34a:	2800      	cmp	r0, #0
   dc34c:	d0f6      	beq.n	dc33c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   dc34e:	2301      	movs	r3, #1
   dc350:	f8c4 8000 	str.w	r8, [r4]
   dc354:	7125      	strb	r5, [r4, #4]
   dc356:	71a3      	strb	r3, [r4, #6]
   dc358:	e7f0      	b.n	dc33c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000dc35a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   dc35a:	b538      	push	{r3, r4, r5, lr}
   dc35c:	4615      	mov	r5, r2
   dc35e:	461c      	mov	r4, r3
   dc360:	f000 f89e 	bl	dc4a0 <_ZNKSt9type_infoeqERKS_>
   dc364:	b120      	cbz	r0, dc370 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   dc366:	2308      	movs	r3, #8
   dc368:	60e3      	str	r3, [r4, #12]
   dc36a:	2306      	movs	r3, #6
   dc36c:	6025      	str	r5, [r4, #0]
   dc36e:	7123      	strb	r3, [r4, #4]
   dc370:	bd38      	pop	{r3, r4, r5, pc}

000dc372 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   dc372:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dc374:	4605      	mov	r5, r0
   dc376:	460c      	mov	r4, r1
   dc378:	9201      	str	r2, [sp, #4]
   dc37a:	461e      	mov	r6, r3
   dc37c:	f000 f890 	bl	dc4a0 <_ZNKSt9type_infoeqERKS_>
   dc380:	b950      	cbnz	r0, dc398 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   dc382:	2e03      	cmp	r6, #3
   dc384:	d808      	bhi.n	dc398 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   dc386:	6823      	ldr	r3, [r4, #0]
   dc388:	9a01      	ldr	r2, [sp, #4]
   dc38a:	695b      	ldr	r3, [r3, #20]
   dc38c:	4629      	mov	r1, r5
   dc38e:	4620      	mov	r0, r4
   dc390:	b002      	add	sp, #8
   dc392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dc396:	4718      	bx	r3
   dc398:	b002      	add	sp, #8
   dc39a:	bd70      	pop	{r4, r5, r6, pc}

000dc39c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   dc39c:	b510      	push	{r4, lr}
   dc39e:	4b03      	ldr	r3, [pc, #12]	; (dc3ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   dc3a0:	6003      	str	r3, [r0, #0]
   dc3a2:	4604      	mov	r4, r0
   dc3a4:	f7ff ffa6 	bl	dc2f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   dc3a8:	4620      	mov	r0, r4
   dc3aa:	bd10      	pop	{r4, pc}
   dc3ac:	000df9a0 	.word	0x000df9a0

000dc3b0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   dc3b0:	b510      	push	{r4, lr}
   dc3b2:	4604      	mov	r4, r0
   dc3b4:	f7ff fff2 	bl	dc39c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   dc3b8:	4620      	mov	r0, r4
   dc3ba:	210c      	movs	r1, #12
   dc3bc:	f7ff ff6d 	bl	dc29a <_ZdlPvj>
   dc3c0:	4620      	mov	r0, r4
   dc3c2:	bd10      	pop	{r4, pc}

000dc3c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   dc3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   dc3c6:	9f08      	ldr	r7, [sp, #32]
   dc3c8:	4297      	cmp	r7, r2
   dc3ca:	4605      	mov	r5, r0
   dc3cc:	460e      	mov	r6, r1
   dc3ce:	4614      	mov	r4, r2
   dc3d0:	d00a      	beq.n	dc3e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   dc3d2:	68a8      	ldr	r0, [r5, #8]
   dc3d4:	6802      	ldr	r2, [r0, #0]
   dc3d6:	9708      	str	r7, [sp, #32]
   dc3d8:	6a15      	ldr	r5, [r2, #32]
   dc3da:	4631      	mov	r1, r6
   dc3dc:	4622      	mov	r2, r4
   dc3de:	46ac      	mov	ip, r5
   dc3e0:	b003      	add	sp, #12
   dc3e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dc3e6:	4760      	bx	ip
   dc3e8:	4619      	mov	r1, r3
   dc3ea:	9301      	str	r3, [sp, #4]
   dc3ec:	f000 f858 	bl	dc4a0 <_ZNKSt9type_infoeqERKS_>
   dc3f0:	9b01      	ldr	r3, [sp, #4]
   dc3f2:	2800      	cmp	r0, #0
   dc3f4:	d0ed      	beq.n	dc3d2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   dc3f6:	2006      	movs	r0, #6
   dc3f8:	b003      	add	sp, #12
   dc3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc3fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   dc3fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc400:	460d      	mov	r5, r1
   dc402:	4619      	mov	r1, r3
   dc404:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   dc408:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   dc40c:	4681      	mov	r9, r0
   dc40e:	4617      	mov	r7, r2
   dc410:	4698      	mov	r8, r3
   dc412:	f000 f845 	bl	dc4a0 <_ZNKSt9type_infoeqERKS_>
   dc416:	b190      	cbz	r0, dc43e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   dc418:	2d00      	cmp	r5, #0
   dc41a:	6034      	str	r4, [r6, #0]
   dc41c:	7137      	strb	r7, [r6, #4]
   dc41e:	db09      	blt.n	dc434 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   dc420:	1961      	adds	r1, r4, r5
   dc422:	458a      	cmp	sl, r1
   dc424:	bf0c      	ite	eq
   dc426:	2106      	moveq	r1, #6
   dc428:	2101      	movne	r1, #1
   dc42a:	71b1      	strb	r1, [r6, #6]
   dc42c:	2000      	movs	r0, #0
   dc42e:	b001      	add	sp, #4
   dc430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc434:	3502      	adds	r5, #2
   dc436:	d1f9      	bne.n	dc42c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   dc438:	2301      	movs	r3, #1
   dc43a:	71b3      	strb	r3, [r6, #6]
   dc43c:	e7f6      	b.n	dc42c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   dc43e:	4554      	cmp	r4, sl
   dc440:	d106      	bne.n	dc450 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   dc442:	4659      	mov	r1, fp
   dc444:	4648      	mov	r0, r9
   dc446:	f000 f82b 	bl	dc4a0 <_ZNKSt9type_infoeqERKS_>
   dc44a:	b108      	cbz	r0, dc450 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   dc44c:	7177      	strb	r7, [r6, #5]
   dc44e:	e7ed      	b.n	dc42c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   dc450:	f8d9 0008 	ldr.w	r0, [r9, #8]
   dc454:	6803      	ldr	r3, [r0, #0]
   dc456:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   dc45a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   dc45e:	69dc      	ldr	r4, [r3, #28]
   dc460:	463a      	mov	r2, r7
   dc462:	4643      	mov	r3, r8
   dc464:	4629      	mov	r1, r5
   dc466:	46a4      	mov	ip, r4
   dc468:	b001      	add	sp, #4
   dc46a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc46e:	4760      	bx	ip

000dc470 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   dc470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc474:	4607      	mov	r7, r0
   dc476:	460c      	mov	r4, r1
   dc478:	4615      	mov	r5, r2
   dc47a:	461e      	mov	r6, r3
   dc47c:	f7ff ff6d 	bl	dc35a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   dc480:	b948      	cbnz	r0, dc496 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   dc482:	68b8      	ldr	r0, [r7, #8]
   dc484:	6803      	ldr	r3, [r0, #0]
   dc486:	699f      	ldr	r7, [r3, #24]
   dc488:	462a      	mov	r2, r5
   dc48a:	4633      	mov	r3, r6
   dc48c:	4621      	mov	r1, r4
   dc48e:	46bc      	mov	ip, r7
   dc490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   dc494:	4760      	bx	ip
   dc496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc49a <_ZNSt9type_infoD1Ev>:
   dc49a:	4770      	bx	lr

000dc49c <_ZNKSt9type_info14__is_pointer_pEv>:
   dc49c:	2000      	movs	r0, #0
   dc49e:	4770      	bx	lr

000dc4a0 <_ZNKSt9type_infoeqERKS_>:
   dc4a0:	4281      	cmp	r1, r0
   dc4a2:	b508      	push	{r3, lr}
   dc4a4:	d00e      	beq.n	dc4c4 <_ZNKSt9type_infoeqERKS_+0x24>
   dc4a6:	6840      	ldr	r0, [r0, #4]
   dc4a8:	7803      	ldrb	r3, [r0, #0]
   dc4aa:	2b2a      	cmp	r3, #42	; 0x2a
   dc4ac:	d00c      	beq.n	dc4c8 <_ZNKSt9type_infoeqERKS_+0x28>
   dc4ae:	6849      	ldr	r1, [r1, #4]
   dc4b0:	780b      	ldrb	r3, [r1, #0]
   dc4b2:	2b2a      	cmp	r3, #42	; 0x2a
   dc4b4:	bf08      	it	eq
   dc4b6:	3101      	addeq	r1, #1
   dc4b8:	f002 f9ef 	bl	de89a <strcmp>
   dc4bc:	fab0 f080 	clz	r0, r0
   dc4c0:	0940      	lsrs	r0, r0, #5
   dc4c2:	bd08      	pop	{r3, pc}
   dc4c4:	2001      	movs	r0, #1
   dc4c6:	e7fc      	b.n	dc4c2 <_ZNKSt9type_infoeqERKS_+0x22>
   dc4c8:	2000      	movs	r0, #0
   dc4ca:	e7fa      	b.n	dc4c2 <_ZNKSt9type_infoeqERKS_+0x22>
   dc4cc:	0000      	movs	r0, r0
	...

000dc4d0 <pow>:
   dc4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc4d4:	ed2d 8b02 	vpush	{d8}
   dc4d8:	b08d      	sub	sp, #52	; 0x34
   dc4da:	ec57 6b10 	vmov	r6, r7, d0
   dc4de:	ec55 4b11 	vmov	r4, r5, d1
   dc4e2:	f000 f9ad 	bl	dc840 <__ieee754_pow>
   dc4e6:	4bae      	ldr	r3, [pc, #696]	; (dc7a0 <pow+0x2d0>)
   dc4e8:	eeb0 8a40 	vmov.f32	s16, s0
   dc4ec:	eef0 8a60 	vmov.f32	s17, s1
   dc4f0:	f993 9000 	ldrsb.w	r9, [r3]
   dc4f4:	f1b9 3fff 	cmp.w	r9, #4294967295
   dc4f8:	d037      	beq.n	dc56a <pow+0x9a>
   dc4fa:	4622      	mov	r2, r4
   dc4fc:	462b      	mov	r3, r5
   dc4fe:	4620      	mov	r0, r4
   dc500:	4629      	mov	r1, r5
   dc502:	f001 fdd9 	bl	de0b8 <__aeabi_dcmpun>
   dc506:	4683      	mov	fp, r0
   dc508:	bb78      	cbnz	r0, dc56a <pow+0x9a>
   dc50a:	4632      	mov	r2, r6
   dc50c:	463b      	mov	r3, r7
   dc50e:	4630      	mov	r0, r6
   dc510:	4639      	mov	r1, r7
   dc512:	f001 fdd1 	bl	de0b8 <__aeabi_dcmpun>
   dc516:	4680      	mov	r8, r0
   dc518:	2800      	cmp	r0, #0
   dc51a:	f040 8093 	bne.w	dc644 <pow+0x174>
   dc51e:	f04f 0a00 	mov.w	sl, #0
   dc522:	f04f 0b00 	mov.w	fp, #0
   dc526:	4630      	mov	r0, r6
   dc528:	4639      	mov	r1, r7
   dc52a:	4652      	mov	r2, sl
   dc52c:	465b      	mov	r3, fp
   dc52e:	f001 fd91 	bl	de054 <__aeabi_dcmpeq>
   dc532:	b318      	cbz	r0, dc57c <pow+0xac>
   dc534:	4652      	mov	r2, sl
   dc536:	465b      	mov	r3, fp
   dc538:	4620      	mov	r0, r4
   dc53a:	4629      	mov	r1, r5
   dc53c:	f001 fd8a 	bl	de054 <__aeabi_dcmpeq>
   dc540:	9000      	str	r0, [sp, #0]
   dc542:	2800      	cmp	r0, #0
   dc544:	d057      	beq.n	dc5f6 <pow+0x126>
   dc546:	4b97      	ldr	r3, [pc, #604]	; (dc7a4 <pow+0x2d4>)
   dc548:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   dc54c:	2201      	movs	r2, #1
   dc54e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dc552:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dc556:	e9cd ab08 	strd	sl, fp, [sp, #32]
   dc55a:	9202      	str	r2, [sp, #8]
   dc55c:	9303      	str	r3, [sp, #12]
   dc55e:	f1b9 0f00 	cmp.w	r9, #0
   dc562:	f000 8089 	beq.w	dc678 <pow+0x1a8>
   dc566:	ed9f 8b8a 	vldr	d8, [pc, #552]	; dc790 <pow+0x2c0>
   dc56a:	eeb0 0a48 	vmov.f32	s0, s16
   dc56e:	eef0 0a68 	vmov.f32	s1, s17
   dc572:	b00d      	add	sp, #52	; 0x34
   dc574:	ecbd 8b02 	vpop	{d8}
   dc578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc57c:	eeb0 0a48 	vmov.f32	s0, s16
   dc580:	eef0 0a68 	vmov.f32	s1, s17
   dc584:	f001 f804 	bl	dd590 <finite>
   dc588:	4680      	mov	r8, r0
   dc58a:	2800      	cmp	r0, #0
   dc58c:	f000 8082 	beq.w	dc694 <pow+0x1c4>
   dc590:	f04f 0800 	mov.w	r8, #0
   dc594:	f04f 0900 	mov.w	r9, #0
   dc598:	ec51 0b18 	vmov	r0, r1, d8
   dc59c:	4642      	mov	r2, r8
   dc59e:	464b      	mov	r3, r9
   dc5a0:	f001 fd58 	bl	de054 <__aeabi_dcmpeq>
   dc5a4:	2800      	cmp	r0, #0
   dc5a6:	d0e0      	beq.n	dc56a <pow+0x9a>
   dc5a8:	ec47 6b10 	vmov	d0, r6, r7
   dc5ac:	f000 fff0 	bl	dd590 <finite>
   dc5b0:	2800      	cmp	r0, #0
   dc5b2:	d0da      	beq.n	dc56a <pow+0x9a>
   dc5b4:	ec45 4b10 	vmov	d0, r4, r5
   dc5b8:	f000 ffea 	bl	dd590 <finite>
   dc5bc:	2800      	cmp	r0, #0
   dc5be:	d0d4      	beq.n	dc56a <pow+0x9a>
   dc5c0:	4b77      	ldr	r3, [pc, #476]	; (dc7a0 <pow+0x2d0>)
   dc5c2:	4a78      	ldr	r2, [pc, #480]	; (dc7a4 <pow+0x2d4>)
   dc5c4:	f993 3000 	ldrsb.w	r3, [r3]
   dc5c8:	9203      	str	r2, [sp, #12]
   dc5ca:	2104      	movs	r1, #4
   dc5cc:	2200      	movs	r2, #0
   dc5ce:	2b02      	cmp	r3, #2
   dc5d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dc5d4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dc5d8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dc5dc:	9102      	str	r1, [sp, #8]
   dc5de:	920a      	str	r2, [sp, #40]	; 0x28
   dc5e0:	d004      	beq.n	dc5ec <pow+0x11c>
   dc5e2:	a802      	add	r0, sp, #8
   dc5e4:	f000 ffe0 	bl	dd5a8 <matherr>
   dc5e8:	2800      	cmp	r0, #0
   dc5ea:	d14a      	bne.n	dc682 <pow+0x1b2>
   dc5ec:	f7fd f89a 	bl	d9724 <__errno>
   dc5f0:	2322      	movs	r3, #34	; 0x22
   dc5f2:	6003      	str	r3, [r0, #0]
   dc5f4:	e045      	b.n	dc682 <pow+0x1b2>
   dc5f6:	ec45 4b10 	vmov	d0, r4, r5
   dc5fa:	f000 ffc9 	bl	dd590 <finite>
   dc5fe:	2800      	cmp	r0, #0
   dc600:	d0b3      	beq.n	dc56a <pow+0x9a>
   dc602:	4652      	mov	r2, sl
   dc604:	465b      	mov	r3, fp
   dc606:	4620      	mov	r0, r4
   dc608:	4629      	mov	r1, r5
   dc60a:	f001 fd2d 	bl	de068 <__aeabi_dcmplt>
   dc60e:	2800      	cmp	r0, #0
   dc610:	d0ab      	beq.n	dc56a <pow+0x9a>
   dc612:	4b63      	ldr	r3, [pc, #396]	; (dc7a0 <pow+0x2d0>)
   dc614:	9900      	ldr	r1, [sp, #0]
   dc616:	4a63      	ldr	r2, [pc, #396]	; (dc7a4 <pow+0x2d4>)
   dc618:	f993 3000 	ldrsb.w	r3, [r3]
   dc61c:	910a      	str	r1, [sp, #40]	; 0x28
   dc61e:	2101      	movs	r1, #1
   dc620:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dc624:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dc628:	e9cd 1202 	strd	r1, r2, [sp, #8]
   dc62c:	2b00      	cmp	r3, #0
   dc62e:	d16f      	bne.n	dc710 <pow+0x240>
   dc630:	e9cd ab08 	strd	sl, fp, [sp, #32]
   dc634:	a802      	add	r0, sp, #8
   dc636:	f000 ffb7 	bl	dd5a8 <matherr>
   dc63a:	2800      	cmp	r0, #0
   dc63c:	d06e      	beq.n	dc71c <pow+0x24c>
   dc63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc640:	b32b      	cbz	r3, dc68e <pow+0x1be>
   dc642:	e020      	b.n	dc686 <pow+0x1b6>
   dc644:	2200      	movs	r2, #0
   dc646:	2300      	movs	r3, #0
   dc648:	4620      	mov	r0, r4
   dc64a:	4629      	mov	r1, r5
   dc64c:	f001 fd02 	bl	de054 <__aeabi_dcmpeq>
   dc650:	2800      	cmp	r0, #0
   dc652:	d08a      	beq.n	dc56a <pow+0x9a>
   dc654:	ed9f 8b4e 	vldr	d8, [pc, #312]	; dc790 <pow+0x2c0>
   dc658:	4b52      	ldr	r3, [pc, #328]	; (dc7a4 <pow+0x2d4>)
   dc65a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   dc65e:	2201      	movs	r2, #1
   dc660:	f1b9 0f02 	cmp.w	r9, #2
   dc664:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dc668:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dc66c:	ed8d 8b08 	vstr	d8, [sp, #32]
   dc670:	9202      	str	r2, [sp, #8]
   dc672:	9303      	str	r3, [sp, #12]
   dc674:	f43f af79 	beq.w	dc56a <pow+0x9a>
   dc678:	a802      	add	r0, sp, #8
   dc67a:	f000 ff95 	bl	dd5a8 <matherr>
   dc67e:	2800      	cmp	r0, #0
   dc680:	d051      	beq.n	dc726 <pow+0x256>
   dc682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc684:	b11b      	cbz	r3, dc68e <pow+0x1be>
   dc686:	f7fd f84d 	bl	d9724 <__errno>
   dc68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc68c:	6003      	str	r3, [r0, #0]
   dc68e:	ed9d 8b08 	vldr	d8, [sp, #32]
   dc692:	e76a      	b.n	dc56a <pow+0x9a>
   dc694:	ec47 6b10 	vmov	d0, r6, r7
   dc698:	f000 ff7a 	bl	dd590 <finite>
   dc69c:	2800      	cmp	r0, #0
   dc69e:	f43f af77 	beq.w	dc590 <pow+0xc0>
   dc6a2:	ec45 4b10 	vmov	d0, r4, r5
   dc6a6:	f000 ff73 	bl	dd590 <finite>
   dc6aa:	2800      	cmp	r0, #0
   dc6ac:	f43f af70 	beq.w	dc590 <pow+0xc0>
   dc6b0:	ec53 2b18 	vmov	r2, r3, d8
   dc6b4:	ee18 0a10 	vmov	r0, s16
   dc6b8:	4619      	mov	r1, r3
   dc6ba:	f001 fcfd 	bl	de0b8 <__aeabi_dcmpun>
   dc6be:	4b38      	ldr	r3, [pc, #224]	; (dc7a0 <pow+0x2d0>)
   dc6c0:	2800      	cmp	r0, #0
   dc6c2:	f040 8096 	bne.w	dc7f2 <pow+0x322>
   dc6c6:	f993 8000 	ldrsb.w	r8, [r3]
   dc6ca:	900a      	str	r0, [sp, #40]	; 0x28
   dc6cc:	2303      	movs	r3, #3
   dc6ce:	9302      	str	r3, [sp, #8]
   dc6d0:	4b34      	ldr	r3, [pc, #208]	; (dc7a4 <pow+0x2d4>)
   dc6d2:	9303      	str	r3, [sp, #12]
   dc6d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dc6d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dc6dc:	f1b8 0f00 	cmp.w	r8, #0
   dc6e0:	d126      	bne.n	dc730 <pow+0x260>
   dc6e2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; dc7b4 <pow+0x2e4>
   dc6e6:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   dc6ea:	4652      	mov	r2, sl
   dc6ec:	465b      	mov	r3, fp
   dc6ee:	4630      	mov	r0, r6
   dc6f0:	4639      	mov	r1, r7
   dc6f2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dc6f6:	f001 fcb7 	bl	de068 <__aeabi_dcmplt>
   dc6fa:	bb48      	cbnz	r0, dc750 <pow+0x280>
   dc6fc:	a802      	add	r0, sp, #8
   dc6fe:	f000 ff53 	bl	dd5a8 <matherr>
   dc702:	2800      	cmp	r0, #0
   dc704:	d19b      	bne.n	dc63e <pow+0x16e>
   dc706:	f7fd f80d 	bl	d9724 <__errno>
   dc70a:	2322      	movs	r3, #34	; 0x22
   dc70c:	6003      	str	r3, [r0, #0]
   dc70e:	e796      	b.n	dc63e <pow+0x16e>
   dc710:	4925      	ldr	r1, [pc, #148]	; (dc7a8 <pow+0x2d8>)
   dc712:	2000      	movs	r0, #0
   dc714:	2b02      	cmp	r3, #2
   dc716:	e9cd 0108 	strd	r0, r1, [sp, #32]
   dc71a:	d18b      	bne.n	dc634 <pow+0x164>
   dc71c:	f7fd f802 	bl	d9724 <__errno>
   dc720:	2321      	movs	r3, #33	; 0x21
   dc722:	6003      	str	r3, [r0, #0]
   dc724:	e78b      	b.n	dc63e <pow+0x16e>
   dc726:	f7fc fffd 	bl	d9724 <__errno>
   dc72a:	2321      	movs	r3, #33	; 0x21
   dc72c:	6003      	str	r3, [r0, #0]
   dc72e:	e7a8      	b.n	dc682 <pow+0x1b2>
   dc730:	ed9f 7b19 	vldr	d7, [pc, #100]	; dc798 <pow+0x2c8>
   dc734:	4652      	mov	r2, sl
   dc736:	465b      	mov	r3, fp
   dc738:	4630      	mov	r0, r6
   dc73a:	4639      	mov	r1, r7
   dc73c:	ed8d 7b08 	vstr	d7, [sp, #32]
   dc740:	f001 fc92 	bl	de068 <__aeabi_dcmplt>
   dc744:	2800      	cmp	r0, #0
   dc746:	d137      	bne.n	dc7b8 <pow+0x2e8>
   dc748:	f1b8 0f02 	cmp.w	r8, #2
   dc74c:	d0db      	beq.n	dc706 <pow+0x236>
   dc74e:	e7d5      	b.n	dc6fc <pow+0x22c>
   dc750:	4b16      	ldr	r3, [pc, #88]	; (dc7ac <pow+0x2dc>)
   dc752:	2200      	movs	r2, #0
   dc754:	4620      	mov	r0, r4
   dc756:	4629      	mov	r1, r5
   dc758:	f001 fa14 	bl	ddb84 <__aeabi_dmul>
   dc75c:	4602      	mov	r2, r0
   dc75e:	460b      	mov	r3, r1
   dc760:	ec43 2b10 	vmov	d0, r2, r3
   dc764:	e9cd 2300 	strd	r2, r3, [sp]
   dc768:	f000 ff2a 	bl	dd5c0 <rint>
   dc76c:	e9dd 2300 	ldrd	r2, r3, [sp]
   dc770:	ec51 0b10 	vmov	r0, r1, d0
   dc774:	f001 fc6e 	bl	de054 <__aeabi_dcmpeq>
   dc778:	2800      	cmp	r0, #0
   dc77a:	d136      	bne.n	dc7ea <pow+0x31a>
   dc77c:	4b0c      	ldr	r3, [pc, #48]	; (dc7b0 <pow+0x2e0>)
   dc77e:	4908      	ldr	r1, [pc, #32]	; (dc7a0 <pow+0x2d0>)
   dc780:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dc784:	e9cd 2308 	strd	r2, r3, [sp, #32]
   dc788:	f991 8000 	ldrsb.w	r8, [r1]
   dc78c:	e7dc      	b.n	dc748 <pow+0x278>
   dc78e:	bf00      	nop
   dc790:	00000000 	.word	0x00000000
   dc794:	3ff00000 	.word	0x3ff00000
   dc798:	00000000 	.word	0x00000000
   dc79c:	7ff00000 	.word	0x7ff00000
   dc7a0:	2003ddb4 	.word	0x2003ddb4
   dc7a4:	000df9dc 	.word	0x000df9dc
   dc7a8:	fff00000 	.word	0xfff00000
   dc7ac:	3fe00000 	.word	0x3fe00000
   dc7b0:	c7efffff 	.word	0xc7efffff
   dc7b4:	47efffff 	.word	0x47efffff
   dc7b8:	4b1c      	ldr	r3, [pc, #112]	; (dc82c <pow+0x35c>)
   dc7ba:	2200      	movs	r2, #0
   dc7bc:	4620      	mov	r0, r4
   dc7be:	4629      	mov	r1, r5
   dc7c0:	f001 f9e0 	bl	ddb84 <__aeabi_dmul>
   dc7c4:	4602      	mov	r2, r0
   dc7c6:	460b      	mov	r3, r1
   dc7c8:	ec43 2b10 	vmov	d0, r2, r3
   dc7cc:	e9cd 2300 	strd	r2, r3, [sp]
   dc7d0:	f000 fef6 	bl	dd5c0 <rint>
   dc7d4:	e9dd 2300 	ldrd	r2, r3, [sp]
   dc7d8:	ec51 0b10 	vmov	r0, r1, d0
   dc7dc:	f001 fc3a 	bl	de054 <__aeabi_dcmpeq>
   dc7e0:	b918      	cbnz	r0, dc7ea <pow+0x31a>
   dc7e2:	4b13      	ldr	r3, [pc, #76]	; (dc830 <pow+0x360>)
   dc7e4:	2200      	movs	r2, #0
   dc7e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   dc7ea:	4b12      	ldr	r3, [pc, #72]	; (dc834 <pow+0x364>)
   dc7ec:	f993 8000 	ldrsb.w	r8, [r3]
   dc7f0:	e7aa      	b.n	dc748 <pow+0x278>
   dc7f2:	f993 9000 	ldrsb.w	r9, [r3]
   dc7f6:	4b10      	ldr	r3, [pc, #64]	; (dc838 <pow+0x368>)
   dc7f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   dc7fc:	2201      	movs	r2, #1
   dc7fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dc802:	e9cd 4506 	strd	r4, r5, [sp, #24]
   dc806:	e9cd 2302 	strd	r2, r3, [sp, #8]
   dc80a:	f1b9 0f00 	cmp.w	r9, #0
   dc80e:	f43f af0f 	beq.w	dc630 <pow+0x160>
   dc812:	4652      	mov	r2, sl
   dc814:	465b      	mov	r3, fp
   dc816:	4650      	mov	r0, sl
   dc818:	4659      	mov	r1, fp
   dc81a:	f001 fadd 	bl	dddd8 <__aeabi_ddiv>
   dc81e:	f1b9 0f02 	cmp.w	r9, #2
   dc822:	e9cd 0108 	strd	r0, r1, [sp, #32]
   dc826:	f43f af79 	beq.w	dc71c <pow+0x24c>
   dc82a:	e703      	b.n	dc634 <pow+0x164>
   dc82c:	3fe00000 	.word	0x3fe00000
   dc830:	fff00000 	.word	0xfff00000
   dc834:	2003ddb4 	.word	0x2003ddb4
   dc838:	000df9dc 	.word	0x000df9dc
   dc83c:	00000000 	.word	0x00000000

000dc840 <__ieee754_pow>:
   dc840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc844:	ec57 6b11 	vmov	r6, r7, d1
   dc848:	ed2d 8b0a 	vpush	{d8-d12}
   dc84c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   dc850:	ea5a 0206 	orrs.w	r2, sl, r6
   dc854:	b089      	sub	sp, #36	; 0x24
   dc856:	d03d      	beq.n	dc8d4 <__ieee754_pow+0x94>
   dc858:	ec55 4b10 	vmov	r4, r5, d0
   dc85c:	4976      	ldr	r1, [pc, #472]	; (dca38 <__ieee754_pow+0x1f8>)
   dc85e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   dc862:	4588      	cmp	r8, r1
   dc864:	ee10 2a10 	vmov	r2, s0
   dc868:	46a9      	mov	r9, r5
   dc86a:	dc2c      	bgt.n	dc8c6 <__ieee754_pow+0x86>
   dc86c:	ee11 3a10 	vmov	r3, s2
   dc870:	46bb      	mov	fp, r7
   dc872:	d03a      	beq.n	dc8ea <__ieee754_pow+0xaa>
   dc874:	458a      	cmp	sl, r1
   dc876:	dc26      	bgt.n	dc8c6 <__ieee754_pow+0x86>
   dc878:	496f      	ldr	r1, [pc, #444]	; (dca38 <__ieee754_pow+0x1f8>)
   dc87a:	458a      	cmp	sl, r1
   dc87c:	d021      	beq.n	dc8c2 <__ieee754_pow+0x82>
   dc87e:	f1b9 0f00 	cmp.w	r9, #0
   dc882:	db3d      	blt.n	dc900 <__ieee754_pow+0xc0>
   dc884:	2100      	movs	r1, #0
   dc886:	9103      	str	r1, [sp, #12]
   dc888:	2b00      	cmp	r3, #0
   dc88a:	d155      	bne.n	dc938 <__ieee754_pow+0xf8>
   dc88c:	4b6a      	ldr	r3, [pc, #424]	; (dca38 <__ieee754_pow+0x1f8>)
   dc88e:	459a      	cmp	sl, r3
   dc890:	f000 80a8 	beq.w	dc9e4 <__ieee754_pow+0x1a4>
   dc894:	4b69      	ldr	r3, [pc, #420]	; (dca3c <__ieee754_pow+0x1fc>)
   dc896:	459a      	cmp	sl, r3
   dc898:	f000 80b6 	beq.w	dca08 <__ieee754_pow+0x1c8>
   dc89c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   dc8a0:	f000 8501 	beq.w	dd2a6 <__ieee754_pow+0xa66>
   dc8a4:	4b66      	ldr	r3, [pc, #408]	; (dca40 <__ieee754_pow+0x200>)
   dc8a6:	459b      	cmp	fp, r3
   dc8a8:	d146      	bne.n	dc938 <__ieee754_pow+0xf8>
   dc8aa:	f1b9 0f00 	cmp.w	r9, #0
   dc8ae:	db43      	blt.n	dc938 <__ieee754_pow+0xf8>
   dc8b0:	ec45 4b10 	vmov	d0, r4, r5
   dc8b4:	b009      	add	sp, #36	; 0x24
   dc8b6:	ecbd 8b0a 	vpop	{d8-d12}
   dc8ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8be:	f000 bd99 	b.w	dd3f4 <__ieee754_sqrt>
   dc8c2:	2b00      	cmp	r3, #0
   dc8c4:	d0db      	beq.n	dc87e <__ieee754_pow+0x3e>
   dc8c6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   dc8ca:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   dc8ce:	ea58 0302 	orrs.w	r3, r8, r2
   dc8d2:	d10d      	bne.n	dc8f0 <__ieee754_pow+0xb0>
   dc8d4:	ed9f 7b54 	vldr	d7, [pc, #336]	; dca28 <__ieee754_pow+0x1e8>
   dc8d8:	ed8d 7b00 	vstr	d7, [sp]
   dc8dc:	ed9d 0b00 	vldr	d0, [sp]
   dc8e0:	b009      	add	sp, #36	; 0x24
   dc8e2:	ecbd 8b0a 	vpop	{d8-d12}
   dc8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc8ea:	b90c      	cbnz	r4, dc8f0 <__ieee754_pow+0xb0>
   dc8ec:	45c2      	cmp	sl, r8
   dc8ee:	ddc3      	ble.n	dc878 <__ieee754_pow+0x38>
   dc8f0:	4854      	ldr	r0, [pc, #336]	; (dca44 <__ieee754_pow+0x204>)
   dc8f2:	b009      	add	sp, #36	; 0x24
   dc8f4:	ecbd 8b0a 	vpop	{d8-d12}
   dc8f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8fc:	f000 be58 	b.w	dd5b0 <nan>
   dc900:	4951      	ldr	r1, [pc, #324]	; (dca48 <__ieee754_pow+0x208>)
   dc902:	458a      	cmp	sl, r1
   dc904:	f300 8087 	bgt.w	dca16 <__ieee754_pow+0x1d6>
   dc908:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   dc90c:	458a      	cmp	sl, r1
   dc90e:	dd0f      	ble.n	dc930 <__ieee754_pow+0xf0>
   dc910:	ea4f 512a 	mov.w	r1, sl, asr #20
   dc914:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   dc918:	2914      	cmp	r1, #20
   dc91a:	f340 84ce 	ble.w	dd2ba <__ieee754_pow+0xa7a>
   dc91e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   dc922:	fa23 f001 	lsr.w	r0, r3, r1
   dc926:	fa00 f101 	lsl.w	r1, r0, r1
   dc92a:	4299      	cmp	r1, r3
   dc92c:	f000 8520 	beq.w	dd370 <__ieee754_pow+0xb30>
   dc930:	2100      	movs	r1, #0
   dc932:	9103      	str	r1, [sp, #12]
   dc934:	2b00      	cmp	r3, #0
   dc936:	d0ad      	beq.n	dc894 <__ieee754_pow+0x54>
   dc938:	ec45 4b10 	vmov	d0, r4, r5
   dc93c:	9206      	str	r2, [sp, #24]
   dc93e:	f000 fe1d 	bl	dd57c <fabs>
   dc942:	9a06      	ldr	r2, [sp, #24]
   dc944:	ed8d 0b00 	vstr	d0, [sp]
   dc948:	bb5a      	cbnz	r2, dc9a2 <__ieee754_pow+0x162>
   dc94a:	f1b8 0f00 	cmp.w	r8, #0
   dc94e:	d004      	beq.n	dc95a <__ieee754_pow+0x11a>
   dc950:	4b3a      	ldr	r3, [pc, #232]	; (dca3c <__ieee754_pow+0x1fc>)
   dc952:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   dc956:	429a      	cmp	r2, r3
   dc958:	d123      	bne.n	dc9a2 <__ieee754_pow+0x162>
   dc95a:	f1bb 0f00 	cmp.w	fp, #0
   dc95e:	da07      	bge.n	dc970 <__ieee754_pow+0x130>
   dc960:	e9dd 2300 	ldrd	r2, r3, [sp]
   dc964:	4935      	ldr	r1, [pc, #212]	; (dca3c <__ieee754_pow+0x1fc>)
   dc966:	2000      	movs	r0, #0
   dc968:	f001 fa36 	bl	dddd8 <__aeabi_ddiv>
   dc96c:	e9cd 0100 	strd	r0, r1, [sp]
   dc970:	f1b9 0f00 	cmp.w	r9, #0
   dc974:	dab2      	bge.n	dc8dc <__ieee754_pow+0x9c>
   dc976:	9b03      	ldr	r3, [sp, #12]
   dc978:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   dc97c:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   dc980:	ea58 0303 	orrs.w	r3, r8, r3
   dc984:	f040 84be 	bne.w	dd304 <__ieee754_pow+0xac4>
   dc988:	e9dd 2300 	ldrd	r2, r3, [sp]
   dc98c:	4610      	mov	r0, r2
   dc98e:	4619      	mov	r1, r3
   dc990:	f000 ff40 	bl	dd814 <__aeabi_dsub>
   dc994:	4602      	mov	r2, r0
   dc996:	460b      	mov	r3, r1
   dc998:	f001 fa1e 	bl	dddd8 <__aeabi_ddiv>
   dc99c:	e9cd 0100 	strd	r0, r1, [sp]
   dc9a0:	e79c      	b.n	dc8dc <__ieee754_pow+0x9c>
   dc9a2:	9a03      	ldr	r2, [sp, #12]
   dc9a4:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   dc9a8:	3b01      	subs	r3, #1
   dc9aa:	9306      	str	r3, [sp, #24]
   dc9ac:	4313      	orrs	r3, r2
   dc9ae:	d035      	beq.n	dca1c <__ieee754_pow+0x1dc>
   dc9b0:	4b26      	ldr	r3, [pc, #152]	; (dca4c <__ieee754_pow+0x20c>)
   dc9b2:	459a      	cmp	sl, r3
   dc9b4:	dd4e      	ble.n	dca54 <__ieee754_pow+0x214>
   dc9b6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   dc9ba:	459a      	cmp	sl, r3
   dc9bc:	4b24      	ldr	r3, [pc, #144]	; (dca50 <__ieee754_pow+0x210>)
   dc9be:	f340 83ed 	ble.w	dd19c <__ieee754_pow+0x95c>
   dc9c2:	4598      	cmp	r8, r3
   dc9c4:	f340 836b 	ble.w	dd09e <__ieee754_pow+0x85e>
   dc9c8:	f1bb 0f00 	cmp.w	fp, #0
   dc9cc:	f340 836b 	ble.w	dd0a6 <__ieee754_pow+0x866>
   dc9d0:	a317      	add	r3, pc, #92	; (adr r3, dca30 <__ieee754_pow+0x1f0>)
   dc9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc9d6:	4610      	mov	r0, r2
   dc9d8:	4619      	mov	r1, r3
   dc9da:	f001 f8d3 	bl	ddb84 <__aeabi_dmul>
   dc9de:	e9cd 0100 	strd	r0, r1, [sp]
   dc9e2:	e77b      	b.n	dc8dc <__ieee754_pow+0x9c>
   dc9e4:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   dc9e8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   dc9ec:	4313      	orrs	r3, r2
   dc9ee:	f43f af71 	beq.w	dc8d4 <__ieee754_pow+0x94>
   dc9f2:	4b17      	ldr	r3, [pc, #92]	; (dca50 <__ieee754_pow+0x210>)
   dc9f4:	4598      	cmp	r8, r3
   dc9f6:	f340 8388 	ble.w	dd10a <__ieee754_pow+0x8ca>
   dc9fa:	f1bb 0f00 	cmp.w	fp, #0
   dc9fe:	f2c0 8352 	blt.w	dd0a6 <__ieee754_pow+0x866>
   dca02:	e9cd 6700 	strd	r6, r7, [sp]
   dca06:	e769      	b.n	dc8dc <__ieee754_pow+0x9c>
   dca08:	f1bb 0f00 	cmp.w	fp, #0
   dca0c:	f2c0 8441 	blt.w	dd292 <__ieee754_pow+0xa52>
   dca10:	e9cd 4500 	strd	r4, r5, [sp]
   dca14:	e762      	b.n	dc8dc <__ieee754_pow+0x9c>
   dca16:	2102      	movs	r1, #2
   dca18:	9103      	str	r1, [sp, #12]
   dca1a:	e735      	b.n	dc888 <__ieee754_pow+0x48>
   dca1c:	4622      	mov	r2, r4
   dca1e:	462b      	mov	r3, r5
   dca20:	e7b4      	b.n	dc98c <__ieee754_pow+0x14c>
   dca22:	bf00      	nop
   dca24:	f3af 8000 	nop.w
   dca28:	00000000 	.word	0x00000000
   dca2c:	3ff00000 	.word	0x3ff00000
   dca30:	8800759c 	.word	0x8800759c
   dca34:	7e37e43c 	.word	0x7e37e43c
   dca38:	7ff00000 	.word	0x7ff00000
   dca3c:	3ff00000 	.word	0x3ff00000
   dca40:	3fe00000 	.word	0x3fe00000
   dca44:	000df9e0 	.word	0x000df9e0
   dca48:	433fffff 	.word	0x433fffff
   dca4c:	41e00000 	.word	0x41e00000
   dca50:	3fefffff 	.word	0x3fefffff
   dca54:	4be4      	ldr	r3, [pc, #912]	; (dcde8 <__ieee754_pow+0x5a8>)
   dca56:	ea09 0303 	and.w	r3, r9, r3
   dca5a:	2b00      	cmp	r3, #0
   dca5c:	f040 8416 	bne.w	dd28c <__ieee754_pow+0xa4c>
   dca60:	e9dd 0100 	ldrd	r0, r1, [sp]
   dca64:	4be1      	ldr	r3, [pc, #900]	; (dcdec <__ieee754_pow+0x5ac>)
   dca66:	2200      	movs	r2, #0
   dca68:	f001 f88c 	bl	ddb84 <__aeabi_dmul>
   dca6c:	e9cd 0100 	strd	r0, r1, [sp]
   dca70:	f8dd 8004 	ldr.w	r8, [sp, #4]
   dca74:	f06f 0034 	mvn.w	r0, #52	; 0x34
   dca78:	ea4f 5328 	mov.w	r3, r8, asr #20
   dca7c:	49dc      	ldr	r1, [pc, #880]	; (dcdf0 <__ieee754_pow+0x5b0>)
   dca7e:	f3c8 0213 	ubfx	r2, r8, #0, #20
   dca82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   dca86:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   dca8a:	1818      	adds	r0, r3, r0
   dca8c:	428a      	cmp	r2, r1
   dca8e:	9007      	str	r0, [sp, #28]
   dca90:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   dca94:	f340 83e9 	ble.w	dd26a <__ieee754_pow+0xa2a>
   dca98:	4bd6      	ldr	r3, [pc, #856]	; (dcdf4 <__ieee754_pow+0x5b4>)
   dca9a:	429a      	cmp	r2, r3
   dca9c:	f340 843e 	ble.w	dd31c <__ieee754_pow+0xadc>
   dcaa0:	ed9f 7bbb 	vldr	d7, [pc, #748]	; dcd90 <__ieee754_pow+0x550>
   dcaa4:	eeb0 ba47 	vmov.f32	s22, s14
   dcaa8:	eef0 ba67 	vmov.f32	s23, s15
   dcaac:	eeb0 ca47 	vmov.f32	s24, s14
   dcab0:	eef0 ca67 	vmov.f32	s25, s15
   dcab4:	ed9f 7bb8 	vldr	d7, [pc, #736]	; dcd98 <__ieee754_pow+0x558>
   dcab8:	3001      	adds	r0, #1
   dcaba:	ec54 3b17 	vmov	r3, r4, d7
   dcabe:	9007      	str	r0, [sp, #28]
   dcac0:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   dcac4:	f04f 0900 	mov.w	r9, #0
   dcac8:	e9dd ab00 	ldrd	sl, fp, [sp]
   dcacc:	ec44 3b18 	vmov	d8, r3, r4
   dcad0:	461a      	mov	r2, r3
   dcad2:	4650      	mov	r0, sl
   dcad4:	4623      	mov	r3, r4
   dcad6:	4641      	mov	r1, r8
   dcad8:	f000 fe9c 	bl	dd814 <__aeabi_dsub>
   dcadc:	ec53 2b18 	vmov	r2, r3, d8
   dcae0:	4604      	mov	r4, r0
   dcae2:	460d      	mov	r5, r1
   dcae4:	4650      	mov	r0, sl
   dcae6:	4641      	mov	r1, r8
   dcae8:	f000 fe96 	bl	dd818 <__adddf3>
   dcaec:	4602      	mov	r2, r0
   dcaee:	460b      	mov	r3, r1
   dcaf0:	2000      	movs	r0, #0
   dcaf2:	49c1      	ldr	r1, [pc, #772]	; (dcdf8 <__ieee754_pow+0x5b8>)
   dcaf4:	f001 f970 	bl	dddd8 <__aeabi_ddiv>
   dcaf8:	ec45 4b1a 	vmov	d10, r4, r5
   dcafc:	ec41 0b19 	vmov	d9, r0, r1
   dcb00:	ec51 0b1a 	vmov	r0, r1, d10
   dcb04:	ec53 2b19 	vmov	r2, r3, d9
   dcb08:	f001 f83c 	bl	ddb84 <__aeabi_dmul>
   dcb0c:	46c3      	mov	fp, r8
   dcb0e:	ea4f 0868 	mov.w	r8, r8, asr #1
   dcb12:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   dcb16:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   dcb1a:	eb03 0509 	add.w	r5, r3, r9
   dcb1e:	460a      	mov	r2, r1
   dcb20:	2300      	movs	r3, #0
   dcb22:	4601      	mov	r1, r0
   dcb24:	e9cd 1200 	strd	r1, r2, [sp]
   dcb28:	9300      	str	r3, [sp, #0]
   dcb2a:	e9dd 8900 	ldrd	r8, r9, [sp]
   dcb2e:	2400      	movs	r4, #0
   dcb30:	e9cd 1204 	strd	r1, r2, [sp, #16]
   dcb34:	462b      	mov	r3, r5
   dcb36:	4622      	mov	r2, r4
   dcb38:	4640      	mov	r0, r8
   dcb3a:	4649      	mov	r1, r9
   dcb3c:	f001 f822 	bl	ddb84 <__aeabi_dmul>
   dcb40:	4602      	mov	r2, r0
   dcb42:	460b      	mov	r3, r1
   dcb44:	ec51 0b1a 	vmov	r0, r1, d10
   dcb48:	f000 fe64 	bl	dd814 <__aeabi_dsub>
   dcb4c:	ec41 0b17 	vmov	d7, r0, r1
   dcb50:	ec53 2b18 	vmov	r2, r3, d8
   dcb54:	4620      	mov	r0, r4
   dcb56:	4629      	mov	r1, r5
   dcb58:	ec55 4b17 	vmov	r4, r5, d7
   dcb5c:	f000 fe5a 	bl	dd814 <__aeabi_dsub>
   dcb60:	4602      	mov	r2, r0
   dcb62:	460b      	mov	r3, r1
   dcb64:	4650      	mov	r0, sl
   dcb66:	4659      	mov	r1, fp
   dcb68:	f000 fe54 	bl	dd814 <__aeabi_dsub>
   dcb6c:	4642      	mov	r2, r8
   dcb6e:	464b      	mov	r3, r9
   dcb70:	f001 f808 	bl	ddb84 <__aeabi_dmul>
   dcb74:	4602      	mov	r2, r0
   dcb76:	460b      	mov	r3, r1
   dcb78:	4620      	mov	r0, r4
   dcb7a:	4629      	mov	r1, r5
   dcb7c:	f000 fe4a 	bl	dd814 <__aeabi_dsub>
   dcb80:	ec53 2b19 	vmov	r2, r3, d9
   dcb84:	f000 fffe 	bl	ddb84 <__aeabi_dmul>
   dcb88:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dcb8c:	4604      	mov	r4, r0
   dcb8e:	460d      	mov	r5, r1
   dcb90:	4652      	mov	r2, sl
   dcb92:	465b      	mov	r3, fp
   dcb94:	4650      	mov	r0, sl
   dcb96:	4659      	mov	r1, fp
   dcb98:	f000 fff4 	bl	ddb84 <__aeabi_dmul>
   dcb9c:	a380      	add	r3, pc, #512	; (adr r3, dcda0 <__ieee754_pow+0x560>)
   dcb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcba2:	ec45 4b1a 	vmov	d10, r4, r5
   dcba6:	4604      	mov	r4, r0
   dcba8:	460d      	mov	r5, r1
   dcbaa:	f000 ffeb 	bl	ddb84 <__aeabi_dmul>
   dcbae:	a37e      	add	r3, pc, #504	; (adr r3, dcda8 <__ieee754_pow+0x568>)
   dcbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcbb4:	f000 fe30 	bl	dd818 <__adddf3>
   dcbb8:	4622      	mov	r2, r4
   dcbba:	462b      	mov	r3, r5
   dcbbc:	f000 ffe2 	bl	ddb84 <__aeabi_dmul>
   dcbc0:	a37b      	add	r3, pc, #492	; (adr r3, dcdb0 <__ieee754_pow+0x570>)
   dcbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcbc6:	f000 fe27 	bl	dd818 <__adddf3>
   dcbca:	4622      	mov	r2, r4
   dcbcc:	462b      	mov	r3, r5
   dcbce:	f000 ffd9 	bl	ddb84 <__aeabi_dmul>
   dcbd2:	a379      	add	r3, pc, #484	; (adr r3, dcdb8 <__ieee754_pow+0x578>)
   dcbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcbd8:	f000 fe1e 	bl	dd818 <__adddf3>
   dcbdc:	4622      	mov	r2, r4
   dcbde:	462b      	mov	r3, r5
   dcbe0:	f000 ffd0 	bl	ddb84 <__aeabi_dmul>
   dcbe4:	a376      	add	r3, pc, #472	; (adr r3, dcdc0 <__ieee754_pow+0x580>)
   dcbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcbea:	f000 fe15 	bl	dd818 <__adddf3>
   dcbee:	4622      	mov	r2, r4
   dcbf0:	462b      	mov	r3, r5
   dcbf2:	f000 ffc7 	bl	ddb84 <__aeabi_dmul>
   dcbf6:	a374      	add	r3, pc, #464	; (adr r3, dcdc8 <__ieee754_pow+0x588>)
   dcbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcbfc:	f000 fe0c 	bl	dd818 <__adddf3>
   dcc00:	4622      	mov	r2, r4
   dcc02:	462b      	mov	r3, r5
   dcc04:	4604      	mov	r4, r0
   dcc06:	460d      	mov	r5, r1
   dcc08:	4610      	mov	r0, r2
   dcc0a:	4619      	mov	r1, r3
   dcc0c:	f000 ffba 	bl	ddb84 <__aeabi_dmul>
   dcc10:	4602      	mov	r2, r0
   dcc12:	460b      	mov	r3, r1
   dcc14:	4620      	mov	r0, r4
   dcc16:	4629      	mov	r1, r5
   dcc18:	f000 ffb4 	bl	ddb84 <__aeabi_dmul>
   dcc1c:	4642      	mov	r2, r8
   dcc1e:	4604      	mov	r4, r0
   dcc20:	460d      	mov	r5, r1
   dcc22:	464b      	mov	r3, r9
   dcc24:	4650      	mov	r0, sl
   dcc26:	4659      	mov	r1, fp
   dcc28:	e9cd ab04 	strd	sl, fp, [sp, #16]
   dcc2c:	f000 fdf4 	bl	dd818 <__adddf3>
   dcc30:	ec53 2b1a 	vmov	r2, r3, d10
   dcc34:	f000 ffa6 	bl	ddb84 <__aeabi_dmul>
   dcc38:	4622      	mov	r2, r4
   dcc3a:	462b      	mov	r3, r5
   dcc3c:	f000 fdec 	bl	dd818 <__adddf3>
   dcc40:	4642      	mov	r2, r8
   dcc42:	4604      	mov	r4, r0
   dcc44:	460d      	mov	r5, r1
   dcc46:	464b      	mov	r3, r9
   dcc48:	4640      	mov	r0, r8
   dcc4a:	4649      	mov	r1, r9
   dcc4c:	f000 ff9a 	bl	ddb84 <__aeabi_dmul>
   dcc50:	ec45 4b19 	vmov	d9, r4, r5
   dcc54:	4b69      	ldr	r3, [pc, #420]	; (dcdfc <__ieee754_pow+0x5bc>)
   dcc56:	2200      	movs	r2, #0
   dcc58:	4682      	mov	sl, r0
   dcc5a:	468b      	mov	fp, r1
   dcc5c:	f000 fddc 	bl	dd818 <__adddf3>
   dcc60:	ec53 2b19 	vmov	r2, r3, d9
   dcc64:	f000 fdd8 	bl	dd818 <__adddf3>
   dcc68:	9c00      	ldr	r4, [sp, #0]
   dcc6a:	460d      	mov	r5, r1
   dcc6c:	4622      	mov	r2, r4
   dcc6e:	462b      	mov	r3, r5
   dcc70:	4640      	mov	r0, r8
   dcc72:	4649      	mov	r1, r9
   dcc74:	f000 ff86 	bl	ddb84 <__aeabi_dmul>
   dcc78:	4b60      	ldr	r3, [pc, #384]	; (dcdfc <__ieee754_pow+0x5bc>)
   dcc7a:	4680      	mov	r8, r0
   dcc7c:	4689      	mov	r9, r1
   dcc7e:	2200      	movs	r2, #0
   dcc80:	4620      	mov	r0, r4
   dcc82:	4629      	mov	r1, r5
   dcc84:	f000 fdc6 	bl	dd814 <__aeabi_dsub>
   dcc88:	4652      	mov	r2, sl
   dcc8a:	465b      	mov	r3, fp
   dcc8c:	f000 fdc2 	bl	dd814 <__aeabi_dsub>
   dcc90:	4602      	mov	r2, r0
   dcc92:	460b      	mov	r3, r1
   dcc94:	ec51 0b19 	vmov	r0, r1, d9
   dcc98:	f000 fdbc 	bl	dd814 <__aeabi_dsub>
   dcc9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dcca0:	f000 ff70 	bl	ddb84 <__aeabi_dmul>
   dcca4:	ec49 8b18 	vmov	d8, r8, r9
   dcca8:	4622      	mov	r2, r4
   dccaa:	4680      	mov	r8, r0
   dccac:	4689      	mov	r9, r1
   dccae:	462b      	mov	r3, r5
   dccb0:	ec51 0b1a 	vmov	r0, r1, d10
   dccb4:	f000 ff66 	bl	ddb84 <__aeabi_dmul>
   dccb8:	4602      	mov	r2, r0
   dccba:	460b      	mov	r3, r1
   dccbc:	4640      	mov	r0, r8
   dccbe:	4649      	mov	r1, r9
   dccc0:	f000 fdaa 	bl	dd818 <__adddf3>
   dccc4:	4682      	mov	sl, r0
   dccc6:	468b      	mov	fp, r1
   dccc8:	4652      	mov	r2, sl
   dccca:	465b      	mov	r3, fp
   dcccc:	ec51 0b18 	vmov	r0, r1, d8
   dccd0:	f000 fda2 	bl	dd818 <__adddf3>
   dccd4:	9c00      	ldr	r4, [sp, #0]
   dccd6:	a33e      	add	r3, pc, #248	; (adr r3, dcdd0 <__ieee754_pow+0x590>)
   dccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dccdc:	4620      	mov	r0, r4
   dccde:	460d      	mov	r5, r1
   dcce0:	f000 ff50 	bl	ddb84 <__aeabi_dmul>
   dcce4:	ec53 2b18 	vmov	r2, r3, d8
   dcce8:	4680      	mov	r8, r0
   dccea:	4689      	mov	r9, r1
   dccec:	4620      	mov	r0, r4
   dccee:	4629      	mov	r1, r5
   dccf0:	f000 fd90 	bl	dd814 <__aeabi_dsub>
   dccf4:	4602      	mov	r2, r0
   dccf6:	460b      	mov	r3, r1
   dccf8:	4650      	mov	r0, sl
   dccfa:	4659      	mov	r1, fp
   dccfc:	f000 fd8a 	bl	dd814 <__aeabi_dsub>
   dcd00:	a335      	add	r3, pc, #212	; (adr r3, dcdd8 <__ieee754_pow+0x598>)
   dcd02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcd06:	f000 ff3d 	bl	ddb84 <__aeabi_dmul>
   dcd0a:	ec49 8b19 	vmov	d9, r8, r9
   dcd0e:	a334      	add	r3, pc, #208	; (adr r3, dcde0 <__ieee754_pow+0x5a0>)
   dcd10:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcd14:	4680      	mov	r8, r0
   dcd16:	4689      	mov	r9, r1
   dcd18:	4620      	mov	r0, r4
   dcd1a:	4629      	mov	r1, r5
   dcd1c:	f000 ff32 	bl	ddb84 <__aeabi_dmul>
   dcd20:	4602      	mov	r2, r0
   dcd22:	460b      	mov	r3, r1
   dcd24:	4640      	mov	r0, r8
   dcd26:	4649      	mov	r1, r9
   dcd28:	f000 fd76 	bl	dd818 <__adddf3>
   dcd2c:	ec53 2b1c 	vmov	r2, r3, d12
   dcd30:	f000 fd72 	bl	dd818 <__adddf3>
   dcd34:	4682      	mov	sl, r0
   dcd36:	9807      	ldr	r0, [sp, #28]
   dcd38:	468b      	mov	fp, r1
   dcd3a:	f000 feb9 	bl	ddab0 <__aeabi_i2d>
   dcd3e:	4652      	mov	r2, sl
   dcd40:	4680      	mov	r8, r0
   dcd42:	4689      	mov	r9, r1
   dcd44:	465b      	mov	r3, fp
   dcd46:	ec51 0b19 	vmov	r0, r1, d9
   dcd4a:	f000 fd65 	bl	dd818 <__adddf3>
   dcd4e:	ec53 2b1b 	vmov	r2, r3, d11
   dcd52:	f000 fd61 	bl	dd818 <__adddf3>
   dcd56:	4642      	mov	r2, r8
   dcd58:	464b      	mov	r3, r9
   dcd5a:	f000 fd5d 	bl	dd818 <__adddf3>
   dcd5e:	9c00      	ldr	r4, [sp, #0]
   dcd60:	4642      	mov	r2, r8
   dcd62:	464b      	mov	r3, r9
   dcd64:	4620      	mov	r0, r4
   dcd66:	460d      	mov	r5, r1
   dcd68:	f000 fd54 	bl	dd814 <__aeabi_dsub>
   dcd6c:	ec53 2b1b 	vmov	r2, r3, d11
   dcd70:	f000 fd50 	bl	dd814 <__aeabi_dsub>
   dcd74:	ec53 2b19 	vmov	r2, r3, d9
   dcd78:	f000 fd4c 	bl	dd814 <__aeabi_dsub>
   dcd7c:	4602      	mov	r2, r0
   dcd7e:	460b      	mov	r3, r1
   dcd80:	4650      	mov	r0, sl
   dcd82:	4659      	mov	r1, fp
   dcd84:	f000 fd46 	bl	dd814 <__aeabi_dsub>
   dcd88:	4682      	mov	sl, r0
   dcd8a:	468b      	mov	fp, r1
   dcd8c:	e038      	b.n	dce00 <__ieee754_pow+0x5c0>
   dcd8e:	bf00      	nop
	...
   dcd9c:	3ff00000 	.word	0x3ff00000
   dcda0:	4a454eef 	.word	0x4a454eef
   dcda4:	3fca7e28 	.word	0x3fca7e28
   dcda8:	93c9db65 	.word	0x93c9db65
   dcdac:	3fcd864a 	.word	0x3fcd864a
   dcdb0:	a91d4101 	.word	0xa91d4101
   dcdb4:	3fd17460 	.word	0x3fd17460
   dcdb8:	518f264d 	.word	0x518f264d
   dcdbc:	3fd55555 	.word	0x3fd55555
   dcdc0:	db6fabff 	.word	0xdb6fabff
   dcdc4:	3fdb6db6 	.word	0x3fdb6db6
   dcdc8:	33333303 	.word	0x33333303
   dcdcc:	3fe33333 	.word	0x3fe33333
   dcdd0:	e0000000 	.word	0xe0000000
   dcdd4:	3feec709 	.word	0x3feec709
   dcdd8:	dc3a03fd 	.word	0xdc3a03fd
   dcddc:	3feec709 	.word	0x3feec709
   dcde0:	145b01f5 	.word	0x145b01f5
   dcde4:	be3e2fe0 	.word	0xbe3e2fe0
   dcde8:	7ff00000 	.word	0x7ff00000
   dcdec:	43400000 	.word	0x43400000
   dcdf0:	0003988e 	.word	0x0003988e
   dcdf4:	000bb679 	.word	0x000bb679
   dcdf8:	3ff00000 	.word	0x3ff00000
   dcdfc:	40080000 	.word	0x40080000
   dce00:	9b03      	ldr	r3, [sp, #12]
   dce02:	9a06      	ldr	r2, [sp, #24]
   dce04:	3b01      	subs	r3, #1
   dce06:	4313      	orrs	r3, r2
   dce08:	f040 8178 	bne.w	dd0fc <__ieee754_pow+0x8bc>
   dce0c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; dd120 <__ieee754_pow+0x8e0>
   dce10:	eeb0 9a47 	vmov.f32	s18, s14
   dce14:	eef0 9a67 	vmov.f32	s19, s15
   dce18:	2300      	movs	r3, #0
   dce1a:	e9cd 6700 	strd	r6, r7, [sp]
   dce1e:	9300      	str	r3, [sp, #0]
   dce20:	e9dd 8900 	ldrd	r8, r9, [sp]
   dce24:	4630      	mov	r0, r6
   dce26:	4642      	mov	r2, r8
   dce28:	4639      	mov	r1, r7
   dce2a:	464b      	mov	r3, r9
   dce2c:	f000 fcf2 	bl	dd814 <__aeabi_dsub>
   dce30:	4622      	mov	r2, r4
   dce32:	462b      	mov	r3, r5
   dce34:	f000 fea6 	bl	ddb84 <__aeabi_dmul>
   dce38:	4632      	mov	r2, r6
   dce3a:	463b      	mov	r3, r7
   dce3c:	4606      	mov	r6, r0
   dce3e:	460f      	mov	r7, r1
   dce40:	4650      	mov	r0, sl
   dce42:	4659      	mov	r1, fp
   dce44:	f000 fe9e 	bl	ddb84 <__aeabi_dmul>
   dce48:	4602      	mov	r2, r0
   dce4a:	460b      	mov	r3, r1
   dce4c:	4630      	mov	r0, r6
   dce4e:	4639      	mov	r1, r7
   dce50:	f000 fce2 	bl	dd818 <__adddf3>
   dce54:	4642      	mov	r2, r8
   dce56:	4682      	mov	sl, r0
   dce58:	468b      	mov	fp, r1
   dce5a:	464b      	mov	r3, r9
   dce5c:	4620      	mov	r0, r4
   dce5e:	4629      	mov	r1, r5
   dce60:	f000 fe90 	bl	ddb84 <__aeabi_dmul>
   dce64:	4606      	mov	r6, r0
   dce66:	460f      	mov	r7, r1
   dce68:	463b      	mov	r3, r7
   dce6a:	4650      	mov	r0, sl
   dce6c:	4659      	mov	r1, fp
   dce6e:	4632      	mov	r2, r6
   dce70:	f000 fcd2 	bl	dd818 <__adddf3>
   dce74:	4bc4      	ldr	r3, [pc, #784]	; (dd188 <__ieee754_pow+0x948>)
   dce76:	4299      	cmp	r1, r3
   dce78:	4604      	mov	r4, r0
   dce7a:	460d      	mov	r5, r1
   dce7c:	4688      	mov	r8, r1
   dce7e:	f340 8117 	ble.w	dd0b0 <__ieee754_pow+0x870>
   dce82:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   dce86:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   dce8a:	4303      	orrs	r3, r0
   dce8c:	f040 822a 	bne.w	dd2e4 <__ieee754_pow+0xaa4>
   dce90:	a3a5      	add	r3, pc, #660	; (adr r3, dd128 <__ieee754_pow+0x8e8>)
   dce92:	e9d3 2300 	ldrd	r2, r3, [r3]
   dce96:	4650      	mov	r0, sl
   dce98:	4659      	mov	r1, fp
   dce9a:	f000 fcbd 	bl	dd818 <__adddf3>
   dce9e:	4632      	mov	r2, r6
   dcea0:	ec41 0b18 	vmov	d8, r0, r1
   dcea4:	463b      	mov	r3, r7
   dcea6:	4620      	mov	r0, r4
   dcea8:	4629      	mov	r1, r5
   dceaa:	f000 fcb3 	bl	dd814 <__aeabi_dsub>
   dceae:	4602      	mov	r2, r0
   dceb0:	460b      	mov	r3, r1
   dceb2:	ec51 0b18 	vmov	r0, r1, d8
   dceb6:	f001 f8f5 	bl	de0a4 <__aeabi_dcmpgt>
   dceba:	2800      	cmp	r0, #0
   dcebc:	f040 8212 	bne.w	dd2e4 <__ieee754_pow+0xaa4>
   dcec0:	f3c8 530a 	ubfx	r3, r8, #20, #11
   dcec4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   dcec8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   dcecc:	fa42 f303 	asr.w	r3, r2, r3
   dced0:	4443      	add	r3, r8
   dced2:	49ae      	ldr	r1, [pc, #696]	; (dd18c <__ieee754_pow+0x94c>)
   dced4:	f3c3 520a 	ubfx	r2, r3, #20, #11
   dced8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   dcedc:	fa41 fc02 	asr.w	ip, r1, r2
   dcee0:	f3c3 0513 	ubfx	r5, r3, #0, #20
   dcee4:	ea23 010c 	bic.w	r1, r3, ip
   dcee8:	f1c2 0414 	rsb	r4, r2, #20
   dceec:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   dcef0:	f1b8 0f00 	cmp.w	r8, #0
   dcef4:	460b      	mov	r3, r1
   dcef6:	fa45 f104 	asr.w	r1, r5, r4
   dcefa:	9103      	str	r1, [sp, #12]
   dcefc:	f04f 0000 	mov.w	r0, #0
   dcf00:	bfb8      	it	lt
   dcf02:	4249      	neglt	r1, r1
   dcf04:	4602      	mov	r2, r0
   dcf06:	bfb8      	it	lt
   dcf08:	9103      	strlt	r1, [sp, #12]
   dcf0a:	4630      	mov	r0, r6
   dcf0c:	4639      	mov	r1, r7
   dcf0e:	f000 fc81 	bl	dd814 <__aeabi_dsub>
   dcf12:	4606      	mov	r6, r0
   dcf14:	460f      	mov	r7, r1
   dcf16:	463b      	mov	r3, r7
   dcf18:	4650      	mov	r0, sl
   dcf1a:	4659      	mov	r1, fp
   dcf1c:	4632      	mov	r2, r6
   dcf1e:	f000 fc7b 	bl	dd818 <__adddf3>
   dcf22:	9b03      	ldr	r3, [sp, #12]
   dcf24:	051b      	lsls	r3, r3, #20
   dcf26:	9300      	str	r3, [sp, #0]
   dcf28:	460d      	mov	r5, r1
   dcf2a:	2400      	movs	r4, #0
   dcf2c:	a380      	add	r3, pc, #512	; (adr r3, dd130 <__ieee754_pow+0x8f0>)
   dcf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf32:	4620      	mov	r0, r4
   dcf34:	4629      	mov	r1, r5
   dcf36:	f000 fe25 	bl	ddb84 <__aeabi_dmul>
   dcf3a:	4632      	mov	r2, r6
   dcf3c:	4680      	mov	r8, r0
   dcf3e:	4689      	mov	r9, r1
   dcf40:	463b      	mov	r3, r7
   dcf42:	4620      	mov	r0, r4
   dcf44:	4629      	mov	r1, r5
   dcf46:	f000 fc65 	bl	dd814 <__aeabi_dsub>
   dcf4a:	4602      	mov	r2, r0
   dcf4c:	460b      	mov	r3, r1
   dcf4e:	4650      	mov	r0, sl
   dcf50:	4659      	mov	r1, fp
   dcf52:	f000 fc5f 	bl	dd814 <__aeabi_dsub>
   dcf56:	a378      	add	r3, pc, #480	; (adr r3, dd138 <__ieee754_pow+0x8f8>)
   dcf58:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf5c:	f000 fe12 	bl	ddb84 <__aeabi_dmul>
   dcf60:	a377      	add	r3, pc, #476	; (adr r3, dd140 <__ieee754_pow+0x900>)
   dcf62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf66:	4606      	mov	r6, r0
   dcf68:	460f      	mov	r7, r1
   dcf6a:	4620      	mov	r0, r4
   dcf6c:	4629      	mov	r1, r5
   dcf6e:	f000 fe09 	bl	ddb84 <__aeabi_dmul>
   dcf72:	4602      	mov	r2, r0
   dcf74:	460b      	mov	r3, r1
   dcf76:	4630      	mov	r0, r6
   dcf78:	4639      	mov	r1, r7
   dcf7a:	f000 fc4d 	bl	dd818 <__adddf3>
   dcf7e:	4606      	mov	r6, r0
   dcf80:	460f      	mov	r7, r1
   dcf82:	4632      	mov	r2, r6
   dcf84:	463b      	mov	r3, r7
   dcf86:	4640      	mov	r0, r8
   dcf88:	4649      	mov	r1, r9
   dcf8a:	f000 fc45 	bl	dd818 <__adddf3>
   dcf8e:	4642      	mov	r2, r8
   dcf90:	464b      	mov	r3, r9
   dcf92:	4604      	mov	r4, r0
   dcf94:	460d      	mov	r5, r1
   dcf96:	f000 fc3d 	bl	dd814 <__aeabi_dsub>
   dcf9a:	4602      	mov	r2, r0
   dcf9c:	460b      	mov	r3, r1
   dcf9e:	4630      	mov	r0, r6
   dcfa0:	4639      	mov	r1, r7
   dcfa2:	f000 fc37 	bl	dd814 <__aeabi_dsub>
   dcfa6:	4622      	mov	r2, r4
   dcfa8:	4682      	mov	sl, r0
   dcfaa:	468b      	mov	fp, r1
   dcfac:	462b      	mov	r3, r5
   dcfae:	4620      	mov	r0, r4
   dcfb0:	4629      	mov	r1, r5
   dcfb2:	f000 fde7 	bl	ddb84 <__aeabi_dmul>
   dcfb6:	a364      	add	r3, pc, #400	; (adr r3, dd148 <__ieee754_pow+0x908>)
   dcfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcfbc:	4606      	mov	r6, r0
   dcfbe:	460f      	mov	r7, r1
   dcfc0:	f000 fde0 	bl	ddb84 <__aeabi_dmul>
   dcfc4:	a362      	add	r3, pc, #392	; (adr r3, dd150 <__ieee754_pow+0x910>)
   dcfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcfca:	f000 fc23 	bl	dd814 <__aeabi_dsub>
   dcfce:	4632      	mov	r2, r6
   dcfd0:	463b      	mov	r3, r7
   dcfd2:	f000 fdd7 	bl	ddb84 <__aeabi_dmul>
   dcfd6:	a360      	add	r3, pc, #384	; (adr r3, dd158 <__ieee754_pow+0x918>)
   dcfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcfdc:	f000 fc1c 	bl	dd818 <__adddf3>
   dcfe0:	4632      	mov	r2, r6
   dcfe2:	463b      	mov	r3, r7
   dcfe4:	f000 fdce 	bl	ddb84 <__aeabi_dmul>
   dcfe8:	a35d      	add	r3, pc, #372	; (adr r3, dd160 <__ieee754_pow+0x920>)
   dcfea:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcfee:	f000 fc11 	bl	dd814 <__aeabi_dsub>
   dcff2:	4632      	mov	r2, r6
   dcff4:	463b      	mov	r3, r7
   dcff6:	f000 fdc5 	bl	ddb84 <__aeabi_dmul>
   dcffa:	a35b      	add	r3, pc, #364	; (adr r3, dd168 <__ieee754_pow+0x928>)
   dcffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd000:	f000 fc0a 	bl	dd818 <__adddf3>
   dd004:	4632      	mov	r2, r6
   dd006:	463b      	mov	r3, r7
   dd008:	f000 fdbc 	bl	ddb84 <__aeabi_dmul>
   dd00c:	4602      	mov	r2, r0
   dd00e:	460b      	mov	r3, r1
   dd010:	4620      	mov	r0, r4
   dd012:	4629      	mov	r1, r5
   dd014:	f000 fbfe 	bl	dd814 <__aeabi_dsub>
   dd018:	4606      	mov	r6, r0
   dd01a:	460f      	mov	r7, r1
   dd01c:	4632      	mov	r2, r6
   dd01e:	463b      	mov	r3, r7
   dd020:	4620      	mov	r0, r4
   dd022:	4629      	mov	r1, r5
   dd024:	f000 fdae 	bl	ddb84 <__aeabi_dmul>
   dd028:	2200      	movs	r2, #0
   dd02a:	4680      	mov	r8, r0
   dd02c:	4689      	mov	r9, r1
   dd02e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dd032:	4630      	mov	r0, r6
   dd034:	4639      	mov	r1, r7
   dd036:	f000 fbed 	bl	dd814 <__aeabi_dsub>
   dd03a:	4602      	mov	r2, r0
   dd03c:	460b      	mov	r3, r1
   dd03e:	4640      	mov	r0, r8
   dd040:	4649      	mov	r1, r9
   dd042:	f000 fec9 	bl	dddd8 <__aeabi_ddiv>
   dd046:	4652      	mov	r2, sl
   dd048:	4606      	mov	r6, r0
   dd04a:	460f      	mov	r7, r1
   dd04c:	465b      	mov	r3, fp
   dd04e:	4620      	mov	r0, r4
   dd050:	4629      	mov	r1, r5
   dd052:	f000 fd97 	bl	ddb84 <__aeabi_dmul>
   dd056:	4652      	mov	r2, sl
   dd058:	465b      	mov	r3, fp
   dd05a:	f000 fbdd 	bl	dd818 <__adddf3>
   dd05e:	4602      	mov	r2, r0
   dd060:	460b      	mov	r3, r1
   dd062:	4630      	mov	r0, r6
   dd064:	4639      	mov	r1, r7
   dd066:	f000 fbd5 	bl	dd814 <__aeabi_dsub>
   dd06a:	4622      	mov	r2, r4
   dd06c:	462b      	mov	r3, r5
   dd06e:	f000 fbd1 	bl	dd814 <__aeabi_dsub>
   dd072:	4602      	mov	r2, r0
   dd074:	460b      	mov	r3, r1
   dd076:	2000      	movs	r0, #0
   dd078:	4945      	ldr	r1, [pc, #276]	; (dd190 <__ieee754_pow+0x950>)
   dd07a:	f000 fbcb 	bl	dd814 <__aeabi_dsub>
   dd07e:	460b      	mov	r3, r1
   dd080:	9900      	ldr	r1, [sp, #0]
   dd082:	4419      	add	r1, r3
   dd084:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dd088:	4602      	mov	r2, r0
   dd08a:	f2c0 8169 	blt.w	dd360 <__ieee754_pow+0xb20>
   dd08e:	4610      	mov	r0, r2
   dd090:	ec53 2b19 	vmov	r2, r3, d9
   dd094:	f000 fd76 	bl	ddb84 <__aeabi_dmul>
   dd098:	e9cd 0100 	strd	r0, r1, [sp]
   dd09c:	e41e      	b.n	dc8dc <__ieee754_pow+0x9c>
   dd09e:	f1bb 0f00 	cmp.w	fp, #0
   dd0a2:	f6ff ac95 	blt.w	dc9d0 <__ieee754_pow+0x190>
   dd0a6:	ed9f 7b32 	vldr	d7, [pc, #200]	; dd170 <__ieee754_pow+0x930>
   dd0aa:	ed8d 7b00 	vstr	d7, [sp]
   dd0ae:	e415      	b.n	dc8dc <__ieee754_pow+0x9c>
   dd0b0:	f8df c0e4 	ldr.w	ip, [pc, #228]	; dd198 <__ieee754_pow+0x958>
   dd0b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dd0b8:	4563      	cmp	r3, ip
   dd0ba:	f340 810b 	ble.w	dd2d4 <__ieee754_pow+0xa94>
   dd0be:	4b35      	ldr	r3, [pc, #212]	; (dd194 <__ieee754_pow+0x954>)
   dd0c0:	440b      	add	r3, r1
   dd0c2:	4303      	orrs	r3, r0
   dd0c4:	d10a      	bne.n	dd0dc <__ieee754_pow+0x89c>
   dd0c6:	4632      	mov	r2, r6
   dd0c8:	463b      	mov	r3, r7
   dd0ca:	f000 fba3 	bl	dd814 <__aeabi_dsub>
   dd0ce:	4652      	mov	r2, sl
   dd0d0:	465b      	mov	r3, fp
   dd0d2:	f000 ffdd 	bl	de090 <__aeabi_dcmpge>
   dd0d6:	2800      	cmp	r0, #0
   dd0d8:	f43f aef2 	beq.w	dcec0 <__ieee754_pow+0x680>
   dd0dc:	a326      	add	r3, pc, #152	; (adr r3, dd178 <__ieee754_pow+0x938>)
   dd0de:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd0e2:	ec51 0b19 	vmov	r0, r1, d9
   dd0e6:	f000 fd4d 	bl	ddb84 <__aeabi_dmul>
   dd0ea:	a323      	add	r3, pc, #140	; (adr r3, dd178 <__ieee754_pow+0x938>)
   dd0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd0f0:	f000 fd48 	bl	ddb84 <__aeabi_dmul>
   dd0f4:	e9cd 0100 	strd	r0, r1, [sp]
   dd0f8:	f7ff bbf0 	b.w	dc8dc <__ieee754_pow+0x9c>
   dd0fc:	ed9f 7b20 	vldr	d7, [pc, #128]	; dd180 <__ieee754_pow+0x940>
   dd100:	eeb0 9a47 	vmov.f32	s18, s14
   dd104:	eef0 9a67 	vmov.f32	s19, s15
   dd108:	e686      	b.n	dce18 <__ieee754_pow+0x5d8>
   dd10a:	f1bb 0f00 	cmp.w	fp, #0
   dd10e:	daca      	bge.n	dd0a6 <__ieee754_pow+0x866>
   dd110:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   dd114:	9600      	str	r6, [sp, #0]
   dd116:	9301      	str	r3, [sp, #4]
   dd118:	f7ff bbe0 	b.w	dc8dc <__ieee754_pow+0x9c>
   dd11c:	f3af 8000 	nop.w
   dd120:	00000000 	.word	0x00000000
   dd124:	bff00000 	.word	0xbff00000
   dd128:	652b82fe 	.word	0x652b82fe
   dd12c:	3c971547 	.word	0x3c971547
   dd130:	00000000 	.word	0x00000000
   dd134:	3fe62e43 	.word	0x3fe62e43
   dd138:	fefa39ef 	.word	0xfefa39ef
   dd13c:	3fe62e42 	.word	0x3fe62e42
   dd140:	0ca86c39 	.word	0x0ca86c39
   dd144:	be205c61 	.word	0xbe205c61
   dd148:	72bea4d0 	.word	0x72bea4d0
   dd14c:	3e663769 	.word	0x3e663769
   dd150:	c5d26bf1 	.word	0xc5d26bf1
   dd154:	3ebbbd41 	.word	0x3ebbbd41
   dd158:	af25de2c 	.word	0xaf25de2c
   dd15c:	3f11566a 	.word	0x3f11566a
   dd160:	16bebd93 	.word	0x16bebd93
   dd164:	3f66c16c 	.word	0x3f66c16c
   dd168:	5555553e 	.word	0x5555553e
   dd16c:	3fc55555 	.word	0x3fc55555
	...
   dd178:	c2f8f359 	.word	0xc2f8f359
   dd17c:	01a56e1f 	.word	0x01a56e1f
   dd180:	00000000 	.word	0x00000000
   dd184:	3ff00000 	.word	0x3ff00000
   dd188:	408fffff 	.word	0x408fffff
   dd18c:	000fffff 	.word	0x000fffff
   dd190:	3ff00000 	.word	0x3ff00000
   dd194:	3f6f3400 	.word	0x3f6f3400
   dd198:	4090cbff 	.word	0x4090cbff
   dd19c:	4598      	cmp	r8, r3
   dd19e:	f6ff af7e 	blt.w	dd09e <__ieee754_pow+0x85e>
   dd1a2:	4b91      	ldr	r3, [pc, #580]	; (dd3e8 <__ieee754_pow+0xba8>)
   dd1a4:	4598      	cmp	r8, r3
   dd1a6:	f73f ac0f 	bgt.w	dc9c8 <__ieee754_pow+0x188>
   dd1aa:	4b8f      	ldr	r3, [pc, #572]	; (dd3e8 <__ieee754_pow+0xba8>)
   dd1ac:	2200      	movs	r2, #0
   dd1ae:	e9dd 0100 	ldrd	r0, r1, [sp]
   dd1b2:	f000 fb2f 	bl	dd814 <__aeabi_dsub>
   dd1b6:	a378      	add	r3, pc, #480	; (adr r3, dd398 <__ieee754_pow+0xb58>)
   dd1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd1bc:	4604      	mov	r4, r0
   dd1be:	460d      	mov	r5, r1
   dd1c0:	f000 fce0 	bl	ddb84 <__aeabi_dmul>
   dd1c4:	a376      	add	r3, pc, #472	; (adr r3, dd3a0 <__ieee754_pow+0xb60>)
   dd1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd1ca:	4682      	mov	sl, r0
   dd1cc:	468b      	mov	fp, r1
   dd1ce:	4620      	mov	r0, r4
   dd1d0:	4629      	mov	r1, r5
   dd1d2:	f000 fcd7 	bl	ddb84 <__aeabi_dmul>
   dd1d6:	4b85      	ldr	r3, [pc, #532]	; (dd3ec <__ieee754_pow+0xbac>)
   dd1d8:	4680      	mov	r8, r0
   dd1da:	4689      	mov	r9, r1
   dd1dc:	2200      	movs	r2, #0
   dd1de:	4620      	mov	r0, r4
   dd1e0:	4629      	mov	r1, r5
   dd1e2:	f000 fccf 	bl	ddb84 <__aeabi_dmul>
   dd1e6:	4602      	mov	r2, r0
   dd1e8:	460b      	mov	r3, r1
   dd1ea:	a16f      	add	r1, pc, #444	; (adr r1, dd3a8 <__ieee754_pow+0xb68>)
   dd1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd1f0:	f000 fb10 	bl	dd814 <__aeabi_dsub>
   dd1f4:	4622      	mov	r2, r4
   dd1f6:	462b      	mov	r3, r5
   dd1f8:	f000 fcc4 	bl	ddb84 <__aeabi_dmul>
   dd1fc:	4602      	mov	r2, r0
   dd1fe:	460b      	mov	r3, r1
   dd200:	2000      	movs	r0, #0
   dd202:	497b      	ldr	r1, [pc, #492]	; (dd3f0 <__ieee754_pow+0xbb0>)
   dd204:	f000 fb06 	bl	dd814 <__aeabi_dsub>
   dd208:	4622      	mov	r2, r4
   dd20a:	462b      	mov	r3, r5
   dd20c:	4604      	mov	r4, r0
   dd20e:	460d      	mov	r5, r1
   dd210:	4610      	mov	r0, r2
   dd212:	4619      	mov	r1, r3
   dd214:	f000 fcb6 	bl	ddb84 <__aeabi_dmul>
   dd218:	4602      	mov	r2, r0
   dd21a:	460b      	mov	r3, r1
   dd21c:	4620      	mov	r0, r4
   dd21e:	4629      	mov	r1, r5
   dd220:	f000 fcb0 	bl	ddb84 <__aeabi_dmul>
   dd224:	a362      	add	r3, pc, #392	; (adr r3, dd3b0 <__ieee754_pow+0xb70>)
   dd226:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd22a:	f000 fcab 	bl	ddb84 <__aeabi_dmul>
   dd22e:	4602      	mov	r2, r0
   dd230:	460b      	mov	r3, r1
   dd232:	4640      	mov	r0, r8
   dd234:	4649      	mov	r1, r9
   dd236:	f000 faed 	bl	dd814 <__aeabi_dsub>
   dd23a:	4680      	mov	r8, r0
   dd23c:	4689      	mov	r9, r1
   dd23e:	4650      	mov	r0, sl
   dd240:	4659      	mov	r1, fp
   dd242:	4642      	mov	r2, r8
   dd244:	464b      	mov	r3, r9
   dd246:	f000 fae7 	bl	dd818 <__adddf3>
   dd24a:	2400      	movs	r4, #0
   dd24c:	4652      	mov	r2, sl
   dd24e:	465b      	mov	r3, fp
   dd250:	4620      	mov	r0, r4
   dd252:	460d      	mov	r5, r1
   dd254:	f000 fade 	bl	dd814 <__aeabi_dsub>
   dd258:	4602      	mov	r2, r0
   dd25a:	460b      	mov	r3, r1
   dd25c:	4640      	mov	r0, r8
   dd25e:	4649      	mov	r1, r9
   dd260:	f000 fad8 	bl	dd814 <__aeabi_dsub>
   dd264:	4682      	mov	sl, r0
   dd266:	468b      	mov	fp, r1
   dd268:	e5ca      	b.n	dce00 <__ieee754_pow+0x5c0>
   dd26a:	ed9f 7b53 	vldr	d7, [pc, #332]	; dd3b8 <__ieee754_pow+0xb78>
   dd26e:	eeb0 ba47 	vmov.f32	s22, s14
   dd272:	eef0 ba67 	vmov.f32	s23, s15
   dd276:	eeb0 ca47 	vmov.f32	s24, s14
   dd27a:	eef0 ca67 	vmov.f32	s25, s15
   dd27e:	ed9f 7b50 	vldr	d7, [pc, #320]	; dd3c0 <__ieee754_pow+0xb80>
   dd282:	f04f 0900 	mov.w	r9, #0
   dd286:	ec54 3b17 	vmov	r3, r4, d7
   dd28a:	e41d      	b.n	dcac8 <__ieee754_pow+0x288>
   dd28c:	2000      	movs	r0, #0
   dd28e:	f7ff bbf3 	b.w	dca78 <__ieee754_pow+0x238>
   dd292:	4955      	ldr	r1, [pc, #340]	; (dd3e8 <__ieee754_pow+0xba8>)
   dd294:	4622      	mov	r2, r4
   dd296:	462b      	mov	r3, r5
   dd298:	2000      	movs	r0, #0
   dd29a:	f000 fd9d 	bl	dddd8 <__aeabi_ddiv>
   dd29e:	e9cd 0100 	strd	r0, r1, [sp]
   dd2a2:	f7ff bb1b 	b.w	dc8dc <__ieee754_pow+0x9c>
   dd2a6:	4622      	mov	r2, r4
   dd2a8:	462b      	mov	r3, r5
   dd2aa:	4620      	mov	r0, r4
   dd2ac:	4629      	mov	r1, r5
   dd2ae:	f000 fc69 	bl	ddb84 <__aeabi_dmul>
   dd2b2:	e9cd 0100 	strd	r0, r1, [sp]
   dd2b6:	f7ff bb11 	b.w	dc8dc <__ieee754_pow+0x9c>
   dd2ba:	2b00      	cmp	r3, #0
   dd2bc:	d142      	bne.n	dd344 <__ieee754_pow+0xb04>
   dd2be:	f1c1 0114 	rsb	r1, r1, #20
   dd2c2:	fa4a f001 	asr.w	r0, sl, r1
   dd2c6:	fa00 f101 	lsl.w	r1, r0, r1
   dd2ca:	4551      	cmp	r1, sl
   dd2cc:	d05a      	beq.n	dd384 <__ieee754_pow+0xb44>
   dd2ce:	9303      	str	r3, [sp, #12]
   dd2d0:	f7ff bae0 	b.w	dc894 <__ieee754_pow+0x54>
   dd2d4:	4a46      	ldr	r2, [pc, #280]	; (dd3f0 <__ieee754_pow+0xbb0>)
   dd2d6:	4293      	cmp	r3, r2
   dd2d8:	dc5b      	bgt.n	dd392 <__ieee754_pow+0xb52>
   dd2da:	e9dd 1200 	ldrd	r1, r2, [sp]
   dd2de:	9100      	str	r1, [sp, #0]
   dd2e0:	9103      	str	r1, [sp, #12]
   dd2e2:	e622      	b.n	dcf2a <__ieee754_pow+0x6ea>
   dd2e4:	a338      	add	r3, pc, #224	; (adr r3, dd3c8 <__ieee754_pow+0xb88>)
   dd2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd2ea:	ec51 0b19 	vmov	r0, r1, d9
   dd2ee:	f000 fc49 	bl	ddb84 <__aeabi_dmul>
   dd2f2:	a335      	add	r3, pc, #212	; (adr r3, dd3c8 <__ieee754_pow+0xb88>)
   dd2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd2f8:	f000 fc44 	bl	ddb84 <__aeabi_dmul>
   dd2fc:	e9cd 0100 	strd	r0, r1, [sp]
   dd300:	f7ff baec 	b.w	dc8dc <__ieee754_pow+0x9c>
   dd304:	9b03      	ldr	r3, [sp, #12]
   dd306:	2b01      	cmp	r3, #1
   dd308:	f47f aae8 	bne.w	dc8dc <__ieee754_pow+0x9c>
   dd30c:	e9dd 2100 	ldrd	r2, r1, [sp]
   dd310:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd314:	e9cd 2300 	strd	r2, r3, [sp]
   dd318:	f7ff bae0 	b.w	dc8dc <__ieee754_pow+0x9c>
   dd31c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; dd3d0 <__ieee754_pow+0xb90>
   dd320:	eeb0 ba47 	vmov.f32	s22, s14
   dd324:	eef0 ba67 	vmov.f32	s23, s15
   dd328:	ed9f 7b2b 	vldr	d7, [pc, #172]	; dd3d8 <__ieee754_pow+0xb98>
   dd32c:	eeb0 ca47 	vmov.f32	s24, s14
   dd330:	eef0 ca67 	vmov.f32	s25, s15
   dd334:	ed9f 7b2a 	vldr	d7, [pc, #168]	; dd3e0 <__ieee754_pow+0xba0>
   dd338:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   dd33c:	ec54 3b17 	vmov	r3, r4, d7
   dd340:	f7ff bbc2 	b.w	dcac8 <__ieee754_pow+0x288>
   dd344:	ec45 4b10 	vmov	d0, r4, r5
   dd348:	9203      	str	r2, [sp, #12]
   dd34a:	f000 f917 	bl	dd57c <fabs>
   dd34e:	9a03      	ldr	r2, [sp, #12]
   dd350:	ed8d 0b00 	vstr	d0, [sp]
   dd354:	2a00      	cmp	r2, #0
   dd356:	f47f ab61 	bne.w	dca1c <__ieee754_pow+0x1dc>
   dd35a:	9203      	str	r2, [sp, #12]
   dd35c:	f7ff baf5 	b.w	dc94a <__ieee754_pow+0x10a>
   dd360:	9803      	ldr	r0, [sp, #12]
   dd362:	ec43 2b10 	vmov	d0, r2, r3
   dd366:	f000 f9bf 	bl	dd6e8 <scalbn>
   dd36a:	ec51 0b10 	vmov	r0, r1, d0
   dd36e:	e68f      	b.n	dd090 <__ieee754_pow+0x850>
   dd370:	f000 0001 	and.w	r0, r0, #1
   dd374:	f1c0 0102 	rsb	r1, r0, #2
   dd378:	9103      	str	r1, [sp, #12]
   dd37a:	2b00      	cmp	r3, #0
   dd37c:	f43f aa8a 	beq.w	dc894 <__ieee754_pow+0x54>
   dd380:	f7ff bada 	b.w	dc938 <__ieee754_pow+0xf8>
   dd384:	f000 0001 	and.w	r0, r0, #1
   dd388:	f1c0 0302 	rsb	r3, r0, #2
   dd38c:	9303      	str	r3, [sp, #12]
   dd38e:	f7ff ba81 	b.w	dc894 <__ieee754_pow+0x54>
   dd392:	151b      	asrs	r3, r3, #20
   dd394:	e596      	b.n	dcec4 <__ieee754_pow+0x684>
   dd396:	bf00      	nop
   dd398:	60000000 	.word	0x60000000
   dd39c:	3ff71547 	.word	0x3ff71547
   dd3a0:	f85ddf44 	.word	0xf85ddf44
   dd3a4:	3e54ae0b 	.word	0x3e54ae0b
   dd3a8:	55555555 	.word	0x55555555
   dd3ac:	3fd55555 	.word	0x3fd55555
   dd3b0:	652b82fe 	.word	0x652b82fe
   dd3b4:	3ff71547 	.word	0x3ff71547
	...
   dd3c4:	3ff00000 	.word	0x3ff00000
   dd3c8:	8800759c 	.word	0x8800759c
   dd3cc:	7e37e43c 	.word	0x7e37e43c
   dd3d0:	40000000 	.word	0x40000000
   dd3d4:	3fe2b803 	.word	0x3fe2b803
   dd3d8:	43cfd006 	.word	0x43cfd006
   dd3dc:	3e4cfdeb 	.word	0x3e4cfdeb
   dd3e0:	00000000 	.word	0x00000000
   dd3e4:	3ff80000 	.word	0x3ff80000
   dd3e8:	3ff00000 	.word	0x3ff00000
   dd3ec:	3fd00000 	.word	0x3fd00000
   dd3f0:	3fe00000 	.word	0x3fe00000

000dd3f4 <__ieee754_sqrt>:
   dd3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd3f8:	4a5f      	ldr	r2, [pc, #380]	; (dd578 <__ieee754_sqrt+0x184>)
   dd3fa:	ec57 6b10 	vmov	r6, r7, d0
   dd3fe:	43ba      	bics	r2, r7
   dd400:	f000 8098 	beq.w	dd534 <__ieee754_sqrt+0x140>
   dd404:	2f00      	cmp	r7, #0
   dd406:	ee10 4a10 	vmov	r4, s0
   dd40a:	463b      	mov	r3, r7
   dd40c:	dd4e      	ble.n	dd4ac <__ieee754_sqrt+0xb8>
   dd40e:	1539      	asrs	r1, r7, #20
   dd410:	d05b      	beq.n	dd4ca <__ieee754_sqrt+0xd6>
   dd412:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dd416:	07ca      	lsls	r2, r1, #31
   dd418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd41c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   dd420:	d403      	bmi.n	dd42a <__ieee754_sqrt+0x36>
   dd422:	005b      	lsls	r3, r3, #1
   dd424:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dd428:	0064      	lsls	r4, r4, #1
   dd42a:	0fe2      	lsrs	r2, r4, #31
   dd42c:	f04f 0c00 	mov.w	ip, #0
   dd430:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   dd434:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   dd438:	0064      	lsls	r4, r4, #1
   dd43a:	4666      	mov	r6, ip
   dd43c:	2516      	movs	r5, #22
   dd43e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   dd442:	18b1      	adds	r1, r6, r2
   dd444:	4299      	cmp	r1, r3
   dd446:	dc02      	bgt.n	dd44e <__ieee754_sqrt+0x5a>
   dd448:	1a5b      	subs	r3, r3, r1
   dd44a:	188e      	adds	r6, r1, r2
   dd44c:	4494      	add	ip, r2
   dd44e:	005b      	lsls	r3, r3, #1
   dd450:	3d01      	subs	r5, #1
   dd452:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dd456:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dd45a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dd45e:	d1f0      	bne.n	dd442 <__ieee754_sqrt+0x4e>
   dd460:	462f      	mov	r7, r5
   dd462:	2020      	movs	r0, #32
   dd464:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   dd468:	e009      	b.n	dd47e <__ieee754_sqrt+0x8a>
   dd46a:	d03e      	beq.n	dd4ea <__ieee754_sqrt+0xf6>
   dd46c:	0fe1      	lsrs	r1, r4, #31
   dd46e:	3801      	subs	r0, #1
   dd470:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dd474:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   dd478:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dd47c:	d03e      	beq.n	dd4fc <__ieee754_sqrt+0x108>
   dd47e:	42b3      	cmp	r3, r6
   dd480:	eb02 0105 	add.w	r1, r2, r5
   dd484:	ddf1      	ble.n	dd46a <__ieee754_sqrt+0x76>
   dd486:	2900      	cmp	r1, #0
   dd488:	eb01 0502 	add.w	r5, r1, r2
   dd48c:	db09      	blt.n	dd4a2 <__ieee754_sqrt+0xae>
   dd48e:	46b0      	mov	r8, r6
   dd490:	1b9b      	subs	r3, r3, r6
   dd492:	42a1      	cmp	r1, r4
   dd494:	bf88      	it	hi
   dd496:	f103 33ff 	addhi.w	r3, r3, #4294967295
   dd49a:	1a64      	subs	r4, r4, r1
   dd49c:	4417      	add	r7, r2
   dd49e:	4646      	mov	r6, r8
   dd4a0:	e7e4      	b.n	dd46c <__ieee754_sqrt+0x78>
   dd4a2:	2d00      	cmp	r5, #0
   dd4a4:	dbf3      	blt.n	dd48e <__ieee754_sqrt+0x9a>
   dd4a6:	f106 0801 	add.w	r8, r6, #1
   dd4aa:	e7f1      	b.n	dd490 <__ieee754_sqrt+0x9c>
   dd4ac:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   dd4b0:	4332      	orrs	r2, r6
   dd4b2:	d036      	beq.n	dd522 <__ieee754_sqrt+0x12e>
   dd4b4:	2f00      	cmp	r7, #0
   dd4b6:	d14d      	bne.n	dd554 <__ieee754_sqrt+0x160>
   dd4b8:	4639      	mov	r1, r7
   dd4ba:	0ae2      	lsrs	r2, r4, #11
   dd4bc:	3915      	subs	r1, #21
   dd4be:	0564      	lsls	r4, r4, #21
   dd4c0:	4613      	mov	r3, r2
   dd4c2:	2a00      	cmp	r2, #0
   dd4c4:	d0f9      	beq.n	dd4ba <__ieee754_sqrt+0xc6>
   dd4c6:	02d7      	lsls	r7, r2, #11
   dd4c8:	d451      	bmi.n	dd56e <__ieee754_sqrt+0x17a>
   dd4ca:	2000      	movs	r0, #0
   dd4cc:	005b      	lsls	r3, r3, #1
   dd4ce:	02de      	lsls	r6, r3, #11
   dd4d0:	4605      	mov	r5, r0
   dd4d2:	f100 0001 	add.w	r0, r0, #1
   dd4d6:	d5f9      	bpl.n	dd4cc <__ieee754_sqrt+0xd8>
   dd4d8:	461a      	mov	r2, r3
   dd4da:	4623      	mov	r3, r4
   dd4dc:	4084      	lsls	r4, r0
   dd4de:	f1c0 0020 	rsb	r0, r0, #32
   dd4e2:	40c3      	lsrs	r3, r0
   dd4e4:	4313      	orrs	r3, r2
   dd4e6:	1b49      	subs	r1, r1, r5
   dd4e8:	e793      	b.n	dd412 <__ieee754_sqrt+0x1e>
   dd4ea:	42a1      	cmp	r1, r4
   dd4ec:	d8be      	bhi.n	dd46c <__ieee754_sqrt+0x78>
   dd4ee:	2900      	cmp	r1, #0
   dd4f0:	eb01 0502 	add.w	r5, r1, r2
   dd4f4:	dbd5      	blt.n	dd4a2 <__ieee754_sqrt+0xae>
   dd4f6:	4698      	mov	r8, r3
   dd4f8:	2300      	movs	r3, #0
   dd4fa:	e7ce      	b.n	dd49a <__ieee754_sqrt+0xa6>
   dd4fc:	4323      	orrs	r3, r4
   dd4fe:	d112      	bne.n	dd526 <__ieee754_sqrt+0x132>
   dd500:	0878      	lsrs	r0, r7, #1
   dd502:	ea4f 016c 	mov.w	r1, ip, asr #1
   dd506:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   dd50a:	f01c 0f01 	tst.w	ip, #1
   dd50e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   dd512:	bf18      	it	ne
   dd514:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   dd518:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   dd51c:	4602      	mov	r2, r0
   dd51e:	ec43 2b10 	vmov	d0, r2, r3
   dd522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd526:	1c7b      	adds	r3, r7, #1
   dd528:	bf16      	itet	ne
   dd52a:	1c78      	addne	r0, r7, #1
   dd52c:	f10c 0c01 	addeq.w	ip, ip, #1
   dd530:	0840      	lsrne	r0, r0, #1
   dd532:	e7e6      	b.n	dd502 <__ieee754_sqrt+0x10e>
   dd534:	ee10 2a10 	vmov	r2, s0
   dd538:	ee10 0a10 	vmov	r0, s0
   dd53c:	463b      	mov	r3, r7
   dd53e:	4639      	mov	r1, r7
   dd540:	f000 fb20 	bl	ddb84 <__aeabi_dmul>
   dd544:	4632      	mov	r2, r6
   dd546:	463b      	mov	r3, r7
   dd548:	f000 f966 	bl	dd818 <__adddf3>
   dd54c:	ec41 0b10 	vmov	d0, r0, r1
   dd550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd554:	ee10 2a10 	vmov	r2, s0
   dd558:	4630      	mov	r0, r6
   dd55a:	4639      	mov	r1, r7
   dd55c:	f000 f95a 	bl	dd814 <__aeabi_dsub>
   dd560:	4602      	mov	r2, r0
   dd562:	460b      	mov	r3, r1
   dd564:	f000 fc38 	bl	dddd8 <__aeabi_ddiv>
   dd568:	ec41 0b10 	vmov	d0, r0, r1
   dd56c:	e7d9      	b.n	dd522 <__ieee754_sqrt+0x12e>
   dd56e:	4623      	mov	r3, r4
   dd570:	2020      	movs	r0, #32
   dd572:	f04f 35ff 	mov.w	r5, #4294967295
   dd576:	e7b4      	b.n	dd4e2 <__ieee754_sqrt+0xee>
   dd578:	7ff00000 	.word	0x7ff00000

000dd57c <fabs>:
   dd57c:	ec51 0b10 	vmov	r0, r1, d0
   dd580:	ee10 2a10 	vmov	r2, s0
   dd584:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dd588:	ec43 2b10 	vmov	d0, r2, r3
   dd58c:	4770      	bx	lr
   dd58e:	bf00      	nop

000dd590 <finite>:
   dd590:	b082      	sub	sp, #8
   dd592:	ed8d 0b00 	vstr	d0, [sp]
   dd596:	9801      	ldr	r0, [sp, #4]
   dd598:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   dd59c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   dd5a0:	0fc0      	lsrs	r0, r0, #31
   dd5a2:	b002      	add	sp, #8
   dd5a4:	4770      	bx	lr
   dd5a6:	bf00      	nop

000dd5a8 <matherr>:
   dd5a8:	2000      	movs	r0, #0
   dd5aa:	4770      	bx	lr
   dd5ac:	0000      	movs	r0, r0
	...

000dd5b0 <nan>:
   dd5b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; dd5b8 <nan+0x8>
   dd5b4:	4770      	bx	lr
   dd5b6:	bf00      	nop
   dd5b8:	00000000 	.word	0x00000000
   dd5bc:	7ff80000 	.word	0x7ff80000

000dd5c0 <rint>:
   dd5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd5c2:	ec53 2b10 	vmov	r2, r3, d0
   dd5c6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   dd5ca:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   dd5ce:	2813      	cmp	r0, #19
   dd5d0:	ee10 5a10 	vmov	r5, s0
   dd5d4:	b083      	sub	sp, #12
   dd5d6:	4619      	mov	r1, r3
   dd5d8:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   dd5dc:	dc31      	bgt.n	dd642 <rint+0x82>
   dd5de:	2800      	cmp	r0, #0
   dd5e0:	db4c      	blt.n	dd67c <rint+0xbc>
   dd5e2:	4e3e      	ldr	r6, [pc, #248]	; (dd6dc <rint+0x11c>)
   dd5e4:	4106      	asrs	r6, r0
   dd5e6:	ea03 0706 	and.w	r7, r3, r6
   dd5ea:	4317      	orrs	r7, r2
   dd5ec:	d02e      	beq.n	dd64c <rint+0x8c>
   dd5ee:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   dd5f2:	431d      	orrs	r5, r3
   dd5f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
   dd5f8:	d00c      	beq.n	dd614 <rint+0x54>
   dd5fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   dd5fe:	2813      	cmp	r0, #19
   dd600:	ea21 0606 	bic.w	r6, r1, r6
   dd604:	fa43 f100 	asr.w	r1, r3, r0
   dd608:	ea41 0106 	orr.w	r1, r1, r6
   dd60c:	bf0c      	ite	eq
   dd60e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   dd612:	2500      	movne	r5, #0
   dd614:	4832      	ldr	r0, [pc, #200]	; (dd6e0 <rint+0x120>)
   dd616:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   dd61a:	462a      	mov	r2, r5
   dd61c:	e9d4 4500 	ldrd	r4, r5, [r4]
   dd620:	460b      	mov	r3, r1
   dd622:	4620      	mov	r0, r4
   dd624:	4629      	mov	r1, r5
   dd626:	f000 f8f7 	bl	dd818 <__adddf3>
   dd62a:	e9cd 0100 	strd	r0, r1, [sp]
   dd62e:	e9dd 0100 	ldrd	r0, r1, [sp]
   dd632:	4622      	mov	r2, r4
   dd634:	462b      	mov	r3, r5
   dd636:	f000 f8ed 	bl	dd814 <__aeabi_dsub>
   dd63a:	ec41 0b10 	vmov	d0, r0, r1
   dd63e:	b003      	add	sp, #12
   dd640:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd642:	2833      	cmp	r0, #51	; 0x33
   dd644:	dd06      	ble.n	dd654 <rint+0x94>
   dd646:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   dd64a:	d040      	beq.n	dd6ce <rint+0x10e>
   dd64c:	ec43 2b10 	vmov	d0, r2, r3
   dd650:	b003      	add	sp, #12
   dd652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd654:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   dd658:	f04f 30ff 	mov.w	r0, #4294967295
   dd65c:	40f0      	lsrs	r0, r6
   dd65e:	4202      	tst	r2, r0
   dd660:	d0f4      	beq.n	dd64c <rint+0x8c>
   dd662:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   dd666:	ea4f 0350 	mov.w	r3, r0, lsr #1
   dd66a:	d0d3      	beq.n	dd614 <rint+0x54>
   dd66c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   dd670:	ea25 0503 	bic.w	r5, r5, r3
   dd674:	fa42 f606 	asr.w	r6, r2, r6
   dd678:	4335      	orrs	r5, r6
   dd67a:	e7cb      	b.n	dd614 <rint+0x54>
   dd67c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   dd680:	4310      	orrs	r0, r2
   dd682:	d0e3      	beq.n	dd64c <rint+0x8c>
   dd684:	f3c3 0013 	ubfx	r0, r3, #0, #20
   dd688:	4310      	orrs	r0, r2
   dd68a:	4245      	negs	r5, r0
   dd68c:	4305      	orrs	r5, r0
   dd68e:	4814      	ldr	r0, [pc, #80]	; (dd6e0 <rint+0x120>)
   dd690:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   dd694:	e9d0 6700 	ldrd	r6, r7, [r0]
   dd698:	0c59      	lsrs	r1, r3, #17
   dd69a:	0b2d      	lsrs	r5, r5, #12
   dd69c:	0449      	lsls	r1, r1, #17
   dd69e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   dd6a2:	ea45 0301 	orr.w	r3, r5, r1
   dd6a6:	4630      	mov	r0, r6
   dd6a8:	4639      	mov	r1, r7
   dd6aa:	f000 f8b5 	bl	dd818 <__adddf3>
   dd6ae:	e9cd 0100 	strd	r0, r1, [sp]
   dd6b2:	463b      	mov	r3, r7
   dd6b4:	e9dd 0100 	ldrd	r0, r1, [sp]
   dd6b8:	4632      	mov	r2, r6
   dd6ba:	f000 f8ab 	bl	dd814 <__aeabi_dsub>
   dd6be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dd6c2:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   dd6c6:	ec41 0b10 	vmov	d0, r0, r1
   dd6ca:	b003      	add	sp, #12
   dd6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd6ce:	ee10 0a10 	vmov	r0, s0
   dd6d2:	f000 f8a1 	bl	dd818 <__adddf3>
   dd6d6:	ec41 0b10 	vmov	d0, r0, r1
   dd6da:	e7b9      	b.n	dd650 <rint+0x90>
   dd6dc:	000fffff 	.word	0x000fffff
   dd6e0:	000df9e8 	.word	0x000df9e8
   dd6e4:	00000000 	.word	0x00000000

000dd6e8 <scalbn>:
   dd6e8:	b538      	push	{r3, r4, r5, lr}
   dd6ea:	ec53 2b10 	vmov	r2, r3, d0
   dd6ee:	f3c3 510a 	ubfx	r1, r3, #20, #11
   dd6f2:	461c      	mov	r4, r3
   dd6f4:	4605      	mov	r5, r0
   dd6f6:	bb81      	cbnz	r1, dd75a <scalbn+0x72>
   dd6f8:	ee10 1a10 	vmov	r1, s0
   dd6fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dd700:	4321      	orrs	r1, r4
   dd702:	d029      	beq.n	dd758 <scalbn+0x70>
   dd704:	4619      	mov	r1, r3
   dd706:	2200      	movs	r2, #0
   dd708:	4b3d      	ldr	r3, [pc, #244]	; (dd800 <scalbn+0x118>)
   dd70a:	4c3e      	ldr	r4, [pc, #248]	; (dd804 <scalbn+0x11c>)
   dd70c:	ee10 0a10 	vmov	r0, s0
   dd710:	f000 fa38 	bl	ddb84 <__aeabi_dmul>
   dd714:	42a5      	cmp	r5, r4
   dd716:	4602      	mov	r2, r0
   dd718:	460b      	mov	r3, r1
   dd71a:	db16      	blt.n	dd74a <scalbn+0x62>
   dd71c:	460c      	mov	r4, r1
   dd71e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   dd722:	3936      	subs	r1, #54	; 0x36
   dd724:	4429      	add	r1, r5
   dd726:	f240 70fe 	movw	r0, #2046	; 0x7fe
   dd72a:	4281      	cmp	r1, r0
   dd72c:	dc21      	bgt.n	dd772 <scalbn+0x8a>
   dd72e:	2900      	cmp	r1, #0
   dd730:	dc47      	bgt.n	dd7c2 <scalbn+0xda>
   dd732:	f111 0f35 	cmn.w	r1, #53	; 0x35
   dd736:	da34      	bge.n	dd7a2 <scalbn+0xba>
   dd738:	f24c 3150 	movw	r1, #50000	; 0xc350
   dd73c:	428d      	cmp	r5, r1
   dd73e:	dc18      	bgt.n	dd772 <scalbn+0x8a>
   dd740:	2b00      	cmp	r3, #0
   dd742:	a127      	add	r1, pc, #156	; (adr r1, dd7e0 <scalbn+0xf8>)
   dd744:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd748:	db44      	blt.n	dd7d4 <scalbn+0xec>
   dd74a:	a325      	add	r3, pc, #148	; (adr r3, dd7e0 <scalbn+0xf8>)
   dd74c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd750:	f000 fa18 	bl	ddb84 <__aeabi_dmul>
   dd754:	ec41 0b10 	vmov	d0, r0, r1
   dd758:	bd38      	pop	{r3, r4, r5, pc}
   dd75a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   dd75e:	4281      	cmp	r1, r0
   dd760:	d1e0      	bne.n	dd724 <scalbn+0x3c>
   dd762:	ee10 0a10 	vmov	r0, s0
   dd766:	4619      	mov	r1, r3
   dd768:	f000 f856 	bl	dd818 <__adddf3>
   dd76c:	ec41 0b10 	vmov	d0, r0, r1
   dd770:	bd38      	pop	{r3, r4, r5, pc}
   dd772:	2b00      	cmp	r3, #0
   dd774:	a11c      	add	r1, pc, #112	; (adr r1, dd7e8 <scalbn+0x100>)
   dd776:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd77a:	db07      	blt.n	dd78c <scalbn+0xa4>
   dd77c:	a31a      	add	r3, pc, #104	; (adr r3, dd7e8 <scalbn+0x100>)
   dd77e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd782:	f000 f9ff 	bl	ddb84 <__aeabi_dmul>
   dd786:	ec41 0b10 	vmov	d0, r0, r1
   dd78a:	bd38      	pop	{r3, r4, r5, pc}
   dd78c:	a118      	add	r1, pc, #96	; (adr r1, dd7f0 <scalbn+0x108>)
   dd78e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd792:	a315      	add	r3, pc, #84	; (adr r3, dd7e8 <scalbn+0x100>)
   dd794:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd798:	f000 f9f4 	bl	ddb84 <__aeabi_dmul>
   dd79c:	ec41 0b10 	vmov	d0, r0, r1
   dd7a0:	e7f3      	b.n	dd78a <scalbn+0xa2>
   dd7a2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dd7a6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dd7aa:	3136      	adds	r1, #54	; 0x36
   dd7ac:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dd7b0:	4610      	mov	r0, r2
   dd7b2:	4619      	mov	r1, r3
   dd7b4:	2200      	movs	r2, #0
   dd7b6:	4b14      	ldr	r3, [pc, #80]	; (dd808 <scalbn+0x120>)
   dd7b8:	f000 f9e4 	bl	ddb84 <__aeabi_dmul>
   dd7bc:	ec41 0b10 	vmov	d0, r0, r1
   dd7c0:	bd38      	pop	{r3, r4, r5, pc}
   dd7c2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dd7c6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dd7ca:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dd7ce:	ec43 2b10 	vmov	d0, r2, r3
   dd7d2:	bd38      	pop	{r3, r4, r5, pc}
   dd7d4:	a108      	add	r1, pc, #32	; (adr r1, dd7f8 <scalbn+0x110>)
   dd7d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd7da:	e7b6      	b.n	dd74a <scalbn+0x62>
   dd7dc:	f3af 8000 	nop.w
   dd7e0:	c2f8f359 	.word	0xc2f8f359
   dd7e4:	01a56e1f 	.word	0x01a56e1f
   dd7e8:	8800759c 	.word	0x8800759c
   dd7ec:	7e37e43c 	.word	0x7e37e43c
   dd7f0:	8800759c 	.word	0x8800759c
   dd7f4:	fe37e43c 	.word	0xfe37e43c
   dd7f8:	c2f8f359 	.word	0xc2f8f359
   dd7fc:	81a56e1f 	.word	0x81a56e1f
   dd800:	43500000 	.word	0x43500000
   dd804:	ffff3cb0 	.word	0xffff3cb0
   dd808:	3c900000 	.word	0x3c900000

000dd80c <__aeabi_drsub>:
   dd80c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dd810:	e002      	b.n	dd818 <__adddf3>
   dd812:	bf00      	nop

000dd814 <__aeabi_dsub>:
   dd814:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dd818 <__adddf3>:
   dd818:	b530      	push	{r4, r5, lr}
   dd81a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dd81e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dd822:	ea94 0f05 	teq	r4, r5
   dd826:	bf08      	it	eq
   dd828:	ea90 0f02 	teqeq	r0, r2
   dd82c:	bf1f      	itttt	ne
   dd82e:	ea54 0c00 	orrsne.w	ip, r4, r0
   dd832:	ea55 0c02 	orrsne.w	ip, r5, r2
   dd836:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dd83a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dd83e:	f000 80e2 	beq.w	dda06 <__adddf3+0x1ee>
   dd842:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dd846:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dd84a:	bfb8      	it	lt
   dd84c:	426d      	neglt	r5, r5
   dd84e:	dd0c      	ble.n	dd86a <__adddf3+0x52>
   dd850:	442c      	add	r4, r5
   dd852:	ea80 0202 	eor.w	r2, r0, r2
   dd856:	ea81 0303 	eor.w	r3, r1, r3
   dd85a:	ea82 0000 	eor.w	r0, r2, r0
   dd85e:	ea83 0101 	eor.w	r1, r3, r1
   dd862:	ea80 0202 	eor.w	r2, r0, r2
   dd866:	ea81 0303 	eor.w	r3, r1, r3
   dd86a:	2d36      	cmp	r5, #54	; 0x36
   dd86c:	bf88      	it	hi
   dd86e:	bd30      	pophi	{r4, r5, pc}
   dd870:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dd874:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dd878:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dd87c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dd880:	d002      	beq.n	dd888 <__adddf3+0x70>
   dd882:	4240      	negs	r0, r0
   dd884:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd888:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dd88c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dd890:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dd894:	d002      	beq.n	dd89c <__adddf3+0x84>
   dd896:	4252      	negs	r2, r2
   dd898:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd89c:	ea94 0f05 	teq	r4, r5
   dd8a0:	f000 80a7 	beq.w	dd9f2 <__adddf3+0x1da>
   dd8a4:	f1a4 0401 	sub.w	r4, r4, #1
   dd8a8:	f1d5 0e20 	rsbs	lr, r5, #32
   dd8ac:	db0d      	blt.n	dd8ca <__adddf3+0xb2>
   dd8ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   dd8b2:	fa22 f205 	lsr.w	r2, r2, r5
   dd8b6:	1880      	adds	r0, r0, r2
   dd8b8:	f141 0100 	adc.w	r1, r1, #0
   dd8bc:	fa03 f20e 	lsl.w	r2, r3, lr
   dd8c0:	1880      	adds	r0, r0, r2
   dd8c2:	fa43 f305 	asr.w	r3, r3, r5
   dd8c6:	4159      	adcs	r1, r3
   dd8c8:	e00e      	b.n	dd8e8 <__adddf3+0xd0>
   dd8ca:	f1a5 0520 	sub.w	r5, r5, #32
   dd8ce:	f10e 0e20 	add.w	lr, lr, #32
   dd8d2:	2a01      	cmp	r2, #1
   dd8d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   dd8d8:	bf28      	it	cs
   dd8da:	f04c 0c02 	orrcs.w	ip, ip, #2
   dd8de:	fa43 f305 	asr.w	r3, r3, r5
   dd8e2:	18c0      	adds	r0, r0, r3
   dd8e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dd8e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd8ec:	d507      	bpl.n	dd8fe <__adddf3+0xe6>
   dd8ee:	f04f 0e00 	mov.w	lr, #0
   dd8f2:	f1dc 0c00 	rsbs	ip, ip, #0
   dd8f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   dd8fa:	eb6e 0101 	sbc.w	r1, lr, r1
   dd8fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dd902:	d31b      	bcc.n	dd93c <__adddf3+0x124>
   dd904:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dd908:	d30c      	bcc.n	dd924 <__adddf3+0x10c>
   dd90a:	0849      	lsrs	r1, r1, #1
   dd90c:	ea5f 0030 	movs.w	r0, r0, rrx
   dd910:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dd914:	f104 0401 	add.w	r4, r4, #1
   dd918:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dd91c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dd920:	f080 809a 	bcs.w	dda58 <__adddf3+0x240>
   dd924:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dd928:	bf08      	it	eq
   dd92a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dd92e:	f150 0000 	adcs.w	r0, r0, #0
   dd932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd936:	ea41 0105 	orr.w	r1, r1, r5
   dd93a:	bd30      	pop	{r4, r5, pc}
   dd93c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dd940:	4140      	adcs	r0, r0
   dd942:	eb41 0101 	adc.w	r1, r1, r1
   dd946:	3c01      	subs	r4, #1
   dd948:	bf28      	it	cs
   dd94a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dd94e:	d2e9      	bcs.n	dd924 <__adddf3+0x10c>
   dd950:	f091 0f00 	teq	r1, #0
   dd954:	bf04      	itt	eq
   dd956:	4601      	moveq	r1, r0
   dd958:	2000      	moveq	r0, #0
   dd95a:	fab1 f381 	clz	r3, r1
   dd95e:	bf08      	it	eq
   dd960:	3320      	addeq	r3, #32
   dd962:	f1a3 030b 	sub.w	r3, r3, #11
   dd966:	f1b3 0220 	subs.w	r2, r3, #32
   dd96a:	da0c      	bge.n	dd986 <__adddf3+0x16e>
   dd96c:	320c      	adds	r2, #12
   dd96e:	dd08      	ble.n	dd982 <__adddf3+0x16a>
   dd970:	f102 0c14 	add.w	ip, r2, #20
   dd974:	f1c2 020c 	rsb	r2, r2, #12
   dd978:	fa01 f00c 	lsl.w	r0, r1, ip
   dd97c:	fa21 f102 	lsr.w	r1, r1, r2
   dd980:	e00c      	b.n	dd99c <__adddf3+0x184>
   dd982:	f102 0214 	add.w	r2, r2, #20
   dd986:	bfd8      	it	le
   dd988:	f1c2 0c20 	rsble	ip, r2, #32
   dd98c:	fa01 f102 	lsl.w	r1, r1, r2
   dd990:	fa20 fc0c 	lsr.w	ip, r0, ip
   dd994:	bfdc      	itt	le
   dd996:	ea41 010c 	orrle.w	r1, r1, ip
   dd99a:	4090      	lslle	r0, r2
   dd99c:	1ae4      	subs	r4, r4, r3
   dd99e:	bfa2      	ittt	ge
   dd9a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dd9a4:	4329      	orrge	r1, r5
   dd9a6:	bd30      	popge	{r4, r5, pc}
   dd9a8:	ea6f 0404 	mvn.w	r4, r4
   dd9ac:	3c1f      	subs	r4, #31
   dd9ae:	da1c      	bge.n	dd9ea <__adddf3+0x1d2>
   dd9b0:	340c      	adds	r4, #12
   dd9b2:	dc0e      	bgt.n	dd9d2 <__adddf3+0x1ba>
   dd9b4:	f104 0414 	add.w	r4, r4, #20
   dd9b8:	f1c4 0220 	rsb	r2, r4, #32
   dd9bc:	fa20 f004 	lsr.w	r0, r0, r4
   dd9c0:	fa01 f302 	lsl.w	r3, r1, r2
   dd9c4:	ea40 0003 	orr.w	r0, r0, r3
   dd9c8:	fa21 f304 	lsr.w	r3, r1, r4
   dd9cc:	ea45 0103 	orr.w	r1, r5, r3
   dd9d0:	bd30      	pop	{r4, r5, pc}
   dd9d2:	f1c4 040c 	rsb	r4, r4, #12
   dd9d6:	f1c4 0220 	rsb	r2, r4, #32
   dd9da:	fa20 f002 	lsr.w	r0, r0, r2
   dd9de:	fa01 f304 	lsl.w	r3, r1, r4
   dd9e2:	ea40 0003 	orr.w	r0, r0, r3
   dd9e6:	4629      	mov	r1, r5
   dd9e8:	bd30      	pop	{r4, r5, pc}
   dd9ea:	fa21 f004 	lsr.w	r0, r1, r4
   dd9ee:	4629      	mov	r1, r5
   dd9f0:	bd30      	pop	{r4, r5, pc}
   dd9f2:	f094 0f00 	teq	r4, #0
   dd9f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dd9fa:	bf06      	itte	eq
   dd9fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dda00:	3401      	addeq	r4, #1
   dda02:	3d01      	subne	r5, #1
   dda04:	e74e      	b.n	dd8a4 <__adddf3+0x8c>
   dda06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dda0a:	bf18      	it	ne
   dda0c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dda10:	d029      	beq.n	dda66 <__adddf3+0x24e>
   dda12:	ea94 0f05 	teq	r4, r5
   dda16:	bf08      	it	eq
   dda18:	ea90 0f02 	teqeq	r0, r2
   dda1c:	d005      	beq.n	dda2a <__adddf3+0x212>
   dda1e:	ea54 0c00 	orrs.w	ip, r4, r0
   dda22:	bf04      	itt	eq
   dda24:	4619      	moveq	r1, r3
   dda26:	4610      	moveq	r0, r2
   dda28:	bd30      	pop	{r4, r5, pc}
   dda2a:	ea91 0f03 	teq	r1, r3
   dda2e:	bf1e      	ittt	ne
   dda30:	2100      	movne	r1, #0
   dda32:	2000      	movne	r0, #0
   dda34:	bd30      	popne	{r4, r5, pc}
   dda36:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dda3a:	d105      	bne.n	dda48 <__adddf3+0x230>
   dda3c:	0040      	lsls	r0, r0, #1
   dda3e:	4149      	adcs	r1, r1
   dda40:	bf28      	it	cs
   dda42:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dda46:	bd30      	pop	{r4, r5, pc}
   dda48:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dda4c:	bf3c      	itt	cc
   dda4e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dda52:	bd30      	popcc	{r4, r5, pc}
   dda54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dda58:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dda5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dda60:	f04f 0000 	mov.w	r0, #0
   dda64:	bd30      	pop	{r4, r5, pc}
   dda66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dda6a:	bf1a      	itte	ne
   dda6c:	4619      	movne	r1, r3
   dda6e:	4610      	movne	r0, r2
   dda70:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dda74:	bf1c      	itt	ne
   dda76:	460b      	movne	r3, r1
   dda78:	4602      	movne	r2, r0
   dda7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dda7e:	bf06      	itte	eq
   dda80:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dda84:	ea91 0f03 	teqeq	r1, r3
   dda88:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dda8c:	bd30      	pop	{r4, r5, pc}
   dda8e:	bf00      	nop

000dda90 <__aeabi_ui2d>:
   dda90:	f090 0f00 	teq	r0, #0
   dda94:	bf04      	itt	eq
   dda96:	2100      	moveq	r1, #0
   dda98:	4770      	bxeq	lr
   dda9a:	b530      	push	{r4, r5, lr}
   dda9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ddaa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ddaa4:	f04f 0500 	mov.w	r5, #0
   ddaa8:	f04f 0100 	mov.w	r1, #0
   ddaac:	e750      	b.n	dd950 <__adddf3+0x138>
   ddaae:	bf00      	nop

000ddab0 <__aeabi_i2d>:
   ddab0:	f090 0f00 	teq	r0, #0
   ddab4:	bf04      	itt	eq
   ddab6:	2100      	moveq	r1, #0
   ddab8:	4770      	bxeq	lr
   ddaba:	b530      	push	{r4, r5, lr}
   ddabc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ddac0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ddac4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ddac8:	bf48      	it	mi
   ddaca:	4240      	negmi	r0, r0
   ddacc:	f04f 0100 	mov.w	r1, #0
   ddad0:	e73e      	b.n	dd950 <__adddf3+0x138>
   ddad2:	bf00      	nop

000ddad4 <__aeabi_f2d>:
   ddad4:	0042      	lsls	r2, r0, #1
   ddad6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ddada:	ea4f 0131 	mov.w	r1, r1, rrx
   ddade:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ddae2:	bf1f      	itttt	ne
   ddae4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ddae8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ddaec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ddaf0:	4770      	bxne	lr
   ddaf2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ddaf6:	bf08      	it	eq
   ddaf8:	4770      	bxeq	lr
   ddafa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ddafe:	bf04      	itt	eq
   ddb00:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ddb04:	4770      	bxeq	lr
   ddb06:	b530      	push	{r4, r5, lr}
   ddb08:	f44f 7460 	mov.w	r4, #896	; 0x380
   ddb0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ddb10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ddb14:	e71c      	b.n	dd950 <__adddf3+0x138>
   ddb16:	bf00      	nop

000ddb18 <__aeabi_ul2d>:
   ddb18:	ea50 0201 	orrs.w	r2, r0, r1
   ddb1c:	bf08      	it	eq
   ddb1e:	4770      	bxeq	lr
   ddb20:	b530      	push	{r4, r5, lr}
   ddb22:	f04f 0500 	mov.w	r5, #0
   ddb26:	e00a      	b.n	ddb3e <__aeabi_l2d+0x16>

000ddb28 <__aeabi_l2d>:
   ddb28:	ea50 0201 	orrs.w	r2, r0, r1
   ddb2c:	bf08      	it	eq
   ddb2e:	4770      	bxeq	lr
   ddb30:	b530      	push	{r4, r5, lr}
   ddb32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ddb36:	d502      	bpl.n	ddb3e <__aeabi_l2d+0x16>
   ddb38:	4240      	negs	r0, r0
   ddb3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddb3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ddb42:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ddb46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ddb4a:	f43f aed8 	beq.w	dd8fe <__adddf3+0xe6>
   ddb4e:	f04f 0203 	mov.w	r2, #3
   ddb52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ddb56:	bf18      	it	ne
   ddb58:	3203      	addne	r2, #3
   ddb5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ddb5e:	bf18      	it	ne
   ddb60:	3203      	addne	r2, #3
   ddb62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ddb66:	f1c2 0320 	rsb	r3, r2, #32
   ddb6a:	fa00 fc03 	lsl.w	ip, r0, r3
   ddb6e:	fa20 f002 	lsr.w	r0, r0, r2
   ddb72:	fa01 fe03 	lsl.w	lr, r1, r3
   ddb76:	ea40 000e 	orr.w	r0, r0, lr
   ddb7a:	fa21 f102 	lsr.w	r1, r1, r2
   ddb7e:	4414      	add	r4, r2
   ddb80:	e6bd      	b.n	dd8fe <__adddf3+0xe6>
   ddb82:	bf00      	nop

000ddb84 <__aeabi_dmul>:
   ddb84:	b570      	push	{r4, r5, r6, lr}
   ddb86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ddb8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ddb8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ddb92:	bf1d      	ittte	ne
   ddb94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ddb98:	ea94 0f0c 	teqne	r4, ip
   ddb9c:	ea95 0f0c 	teqne	r5, ip
   ddba0:	f000 f8de 	bleq	ddd60 <__aeabi_dmul+0x1dc>
   ddba4:	442c      	add	r4, r5
   ddba6:	ea81 0603 	eor.w	r6, r1, r3
   ddbaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ddbae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ddbb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ddbb6:	bf18      	it	ne
   ddbb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ddbbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ddbc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ddbc4:	d038      	beq.n	ddc38 <__aeabi_dmul+0xb4>
   ddbc6:	fba0 ce02 	umull	ip, lr, r0, r2
   ddbca:	f04f 0500 	mov.w	r5, #0
   ddbce:	fbe1 e502 	umlal	lr, r5, r1, r2
   ddbd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ddbd6:	fbe0 e503 	umlal	lr, r5, r0, r3
   ddbda:	f04f 0600 	mov.w	r6, #0
   ddbde:	fbe1 5603 	umlal	r5, r6, r1, r3
   ddbe2:	f09c 0f00 	teq	ip, #0
   ddbe6:	bf18      	it	ne
   ddbe8:	f04e 0e01 	orrne.w	lr, lr, #1
   ddbec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ddbf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ddbf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ddbf8:	d204      	bcs.n	ddc04 <__aeabi_dmul+0x80>
   ddbfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ddbfe:	416d      	adcs	r5, r5
   ddc00:	eb46 0606 	adc.w	r6, r6, r6
   ddc04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ddc08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ddc0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ddc10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ddc14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ddc18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ddc1c:	bf88      	it	hi
   ddc1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ddc22:	d81e      	bhi.n	ddc62 <__aeabi_dmul+0xde>
   ddc24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ddc28:	bf08      	it	eq
   ddc2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ddc2e:	f150 0000 	adcs.w	r0, r0, #0
   ddc32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ddc36:	bd70      	pop	{r4, r5, r6, pc}
   ddc38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ddc3c:	ea46 0101 	orr.w	r1, r6, r1
   ddc40:	ea40 0002 	orr.w	r0, r0, r2
   ddc44:	ea81 0103 	eor.w	r1, r1, r3
   ddc48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ddc4c:	bfc2      	ittt	gt
   ddc4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   ddc52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ddc56:	bd70      	popgt	{r4, r5, r6, pc}
   ddc58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ddc5c:	f04f 0e00 	mov.w	lr, #0
   ddc60:	3c01      	subs	r4, #1
   ddc62:	f300 80ab 	bgt.w	dddbc <__aeabi_dmul+0x238>
   ddc66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ddc6a:	bfde      	ittt	le
   ddc6c:	2000      	movle	r0, #0
   ddc6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ddc72:	bd70      	pople	{r4, r5, r6, pc}
   ddc74:	f1c4 0400 	rsb	r4, r4, #0
   ddc78:	3c20      	subs	r4, #32
   ddc7a:	da35      	bge.n	ddce8 <__aeabi_dmul+0x164>
   ddc7c:	340c      	adds	r4, #12
   ddc7e:	dc1b      	bgt.n	ddcb8 <__aeabi_dmul+0x134>
   ddc80:	f104 0414 	add.w	r4, r4, #20
   ddc84:	f1c4 0520 	rsb	r5, r4, #32
   ddc88:	fa00 f305 	lsl.w	r3, r0, r5
   ddc8c:	fa20 f004 	lsr.w	r0, r0, r4
   ddc90:	fa01 f205 	lsl.w	r2, r1, r5
   ddc94:	ea40 0002 	orr.w	r0, r0, r2
   ddc98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ddc9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ddca0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ddca4:	fa21 f604 	lsr.w	r6, r1, r4
   ddca8:	eb42 0106 	adc.w	r1, r2, r6
   ddcac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ddcb0:	bf08      	it	eq
   ddcb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ddcb6:	bd70      	pop	{r4, r5, r6, pc}
   ddcb8:	f1c4 040c 	rsb	r4, r4, #12
   ddcbc:	f1c4 0520 	rsb	r5, r4, #32
   ddcc0:	fa00 f304 	lsl.w	r3, r0, r4
   ddcc4:	fa20 f005 	lsr.w	r0, r0, r5
   ddcc8:	fa01 f204 	lsl.w	r2, r1, r4
   ddccc:	ea40 0002 	orr.w	r0, r0, r2
   ddcd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddcd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ddcd8:	f141 0100 	adc.w	r1, r1, #0
   ddcdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ddce0:	bf08      	it	eq
   ddce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ddce6:	bd70      	pop	{r4, r5, r6, pc}
   ddce8:	f1c4 0520 	rsb	r5, r4, #32
   ddcec:	fa00 f205 	lsl.w	r2, r0, r5
   ddcf0:	ea4e 0e02 	orr.w	lr, lr, r2
   ddcf4:	fa20 f304 	lsr.w	r3, r0, r4
   ddcf8:	fa01 f205 	lsl.w	r2, r1, r5
   ddcfc:	ea43 0302 	orr.w	r3, r3, r2
   ddd00:	fa21 f004 	lsr.w	r0, r1, r4
   ddd04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddd08:	fa21 f204 	lsr.w	r2, r1, r4
   ddd0c:	ea20 0002 	bic.w	r0, r0, r2
   ddd10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ddd14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ddd18:	bf08      	it	eq
   ddd1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ddd1e:	bd70      	pop	{r4, r5, r6, pc}
   ddd20:	f094 0f00 	teq	r4, #0
   ddd24:	d10f      	bne.n	ddd46 <__aeabi_dmul+0x1c2>
   ddd26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ddd2a:	0040      	lsls	r0, r0, #1
   ddd2c:	eb41 0101 	adc.w	r1, r1, r1
   ddd30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ddd34:	bf08      	it	eq
   ddd36:	3c01      	subeq	r4, #1
   ddd38:	d0f7      	beq.n	ddd2a <__aeabi_dmul+0x1a6>
   ddd3a:	ea41 0106 	orr.w	r1, r1, r6
   ddd3e:	f095 0f00 	teq	r5, #0
   ddd42:	bf18      	it	ne
   ddd44:	4770      	bxne	lr
   ddd46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ddd4a:	0052      	lsls	r2, r2, #1
   ddd4c:	eb43 0303 	adc.w	r3, r3, r3
   ddd50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ddd54:	bf08      	it	eq
   ddd56:	3d01      	subeq	r5, #1
   ddd58:	d0f7      	beq.n	ddd4a <__aeabi_dmul+0x1c6>
   ddd5a:	ea43 0306 	orr.w	r3, r3, r6
   ddd5e:	4770      	bx	lr
   ddd60:	ea94 0f0c 	teq	r4, ip
   ddd64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ddd68:	bf18      	it	ne
   ddd6a:	ea95 0f0c 	teqne	r5, ip
   ddd6e:	d00c      	beq.n	ddd8a <__aeabi_dmul+0x206>
   ddd70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ddd74:	bf18      	it	ne
   ddd76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ddd7a:	d1d1      	bne.n	ddd20 <__aeabi_dmul+0x19c>
   ddd7c:	ea81 0103 	eor.w	r1, r1, r3
   ddd80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddd84:	f04f 0000 	mov.w	r0, #0
   ddd88:	bd70      	pop	{r4, r5, r6, pc}
   ddd8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ddd8e:	bf06      	itte	eq
   ddd90:	4610      	moveq	r0, r2
   ddd92:	4619      	moveq	r1, r3
   ddd94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ddd98:	d019      	beq.n	dddce <__aeabi_dmul+0x24a>
   ddd9a:	ea94 0f0c 	teq	r4, ip
   ddd9e:	d102      	bne.n	ddda6 <__aeabi_dmul+0x222>
   ddda0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ddda4:	d113      	bne.n	dddce <__aeabi_dmul+0x24a>
   ddda6:	ea95 0f0c 	teq	r5, ip
   dddaa:	d105      	bne.n	dddb8 <__aeabi_dmul+0x234>
   dddac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dddb0:	bf1c      	itt	ne
   dddb2:	4610      	movne	r0, r2
   dddb4:	4619      	movne	r1, r3
   dddb6:	d10a      	bne.n	dddce <__aeabi_dmul+0x24a>
   dddb8:	ea81 0103 	eor.w	r1, r1, r3
   dddbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dddc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dddc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dddc8:	f04f 0000 	mov.w	r0, #0
   dddcc:	bd70      	pop	{r4, r5, r6, pc}
   dddce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dddd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dddd6:	bd70      	pop	{r4, r5, r6, pc}

000dddd8 <__aeabi_ddiv>:
   dddd8:	b570      	push	{r4, r5, r6, lr}
   dddda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dddde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ddde2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ddde6:	bf1d      	ittte	ne
   ddde8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dddec:	ea94 0f0c 	teqne	r4, ip
   dddf0:	ea95 0f0c 	teqne	r5, ip
   dddf4:	f000 f8a7 	bleq	ddf46 <__aeabi_ddiv+0x16e>
   dddf8:	eba4 0405 	sub.w	r4, r4, r5
   dddfc:	ea81 0e03 	eor.w	lr, r1, r3
   dde00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dde04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dde08:	f000 8088 	beq.w	ddf1c <__aeabi_ddiv+0x144>
   dde0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dde10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dde14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dde18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dde1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dde20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dde24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dde28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dde2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dde30:	429d      	cmp	r5, r3
   dde32:	bf08      	it	eq
   dde34:	4296      	cmpeq	r6, r2
   dde36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dde3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dde3e:	d202      	bcs.n	dde46 <__aeabi_ddiv+0x6e>
   dde40:	085b      	lsrs	r3, r3, #1
   dde42:	ea4f 0232 	mov.w	r2, r2, rrx
   dde46:	1ab6      	subs	r6, r6, r2
   dde48:	eb65 0503 	sbc.w	r5, r5, r3
   dde4c:	085b      	lsrs	r3, r3, #1
   dde4e:	ea4f 0232 	mov.w	r2, r2, rrx
   dde52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dde56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dde5a:	ebb6 0e02 	subs.w	lr, r6, r2
   dde5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dde62:	bf22      	ittt	cs
   dde64:	1ab6      	subcs	r6, r6, r2
   dde66:	4675      	movcs	r5, lr
   dde68:	ea40 000c 	orrcs.w	r0, r0, ip
   dde6c:	085b      	lsrs	r3, r3, #1
   dde6e:	ea4f 0232 	mov.w	r2, r2, rrx
   dde72:	ebb6 0e02 	subs.w	lr, r6, r2
   dde76:	eb75 0e03 	sbcs.w	lr, r5, r3
   dde7a:	bf22      	ittt	cs
   dde7c:	1ab6      	subcs	r6, r6, r2
   dde7e:	4675      	movcs	r5, lr
   dde80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dde84:	085b      	lsrs	r3, r3, #1
   dde86:	ea4f 0232 	mov.w	r2, r2, rrx
   dde8a:	ebb6 0e02 	subs.w	lr, r6, r2
   dde8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dde92:	bf22      	ittt	cs
   dde94:	1ab6      	subcs	r6, r6, r2
   dde96:	4675      	movcs	r5, lr
   dde98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dde9c:	085b      	lsrs	r3, r3, #1
   dde9e:	ea4f 0232 	mov.w	r2, r2, rrx
   ddea2:	ebb6 0e02 	subs.w	lr, r6, r2
   ddea6:	eb75 0e03 	sbcs.w	lr, r5, r3
   ddeaa:	bf22      	ittt	cs
   ddeac:	1ab6      	subcs	r6, r6, r2
   ddeae:	4675      	movcs	r5, lr
   ddeb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ddeb4:	ea55 0e06 	orrs.w	lr, r5, r6
   ddeb8:	d018      	beq.n	ddeec <__aeabi_ddiv+0x114>
   ddeba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ddebe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ddec2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ddec6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ddeca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ddece:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dded2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dded6:	d1c0      	bne.n	dde5a <__aeabi_ddiv+0x82>
   dded8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ddedc:	d10b      	bne.n	ddef6 <__aeabi_ddiv+0x11e>
   ddede:	ea41 0100 	orr.w	r1, r1, r0
   ddee2:	f04f 0000 	mov.w	r0, #0
   ddee6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ddeea:	e7b6      	b.n	dde5a <__aeabi_ddiv+0x82>
   ddeec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ddef0:	bf04      	itt	eq
   ddef2:	4301      	orreq	r1, r0
   ddef4:	2000      	moveq	r0, #0
   ddef6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ddefa:	bf88      	it	hi
   ddefc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ddf00:	f63f aeaf 	bhi.w	ddc62 <__aeabi_dmul+0xde>
   ddf04:	ebb5 0c03 	subs.w	ip, r5, r3
   ddf08:	bf04      	itt	eq
   ddf0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   ddf0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ddf12:	f150 0000 	adcs.w	r0, r0, #0
   ddf16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ddf1a:	bd70      	pop	{r4, r5, r6, pc}
   ddf1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ddf20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ddf24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ddf28:	bfc2      	ittt	gt
   ddf2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   ddf2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ddf32:	bd70      	popgt	{r4, r5, r6, pc}
   ddf34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ddf38:	f04f 0e00 	mov.w	lr, #0
   ddf3c:	3c01      	subs	r4, #1
   ddf3e:	e690      	b.n	ddc62 <__aeabi_dmul+0xde>
   ddf40:	ea45 0e06 	orr.w	lr, r5, r6
   ddf44:	e68d      	b.n	ddc62 <__aeabi_dmul+0xde>
   ddf46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ddf4a:	ea94 0f0c 	teq	r4, ip
   ddf4e:	bf08      	it	eq
   ddf50:	ea95 0f0c 	teqeq	r5, ip
   ddf54:	f43f af3b 	beq.w	dddce <__aeabi_dmul+0x24a>
   ddf58:	ea94 0f0c 	teq	r4, ip
   ddf5c:	d10a      	bne.n	ddf74 <__aeabi_ddiv+0x19c>
   ddf5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ddf62:	f47f af34 	bne.w	dddce <__aeabi_dmul+0x24a>
   ddf66:	ea95 0f0c 	teq	r5, ip
   ddf6a:	f47f af25 	bne.w	dddb8 <__aeabi_dmul+0x234>
   ddf6e:	4610      	mov	r0, r2
   ddf70:	4619      	mov	r1, r3
   ddf72:	e72c      	b.n	dddce <__aeabi_dmul+0x24a>
   ddf74:	ea95 0f0c 	teq	r5, ip
   ddf78:	d106      	bne.n	ddf88 <__aeabi_ddiv+0x1b0>
   ddf7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ddf7e:	f43f aefd 	beq.w	ddd7c <__aeabi_dmul+0x1f8>
   ddf82:	4610      	mov	r0, r2
   ddf84:	4619      	mov	r1, r3
   ddf86:	e722      	b.n	dddce <__aeabi_dmul+0x24a>
   ddf88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ddf8c:	bf18      	it	ne
   ddf8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ddf92:	f47f aec5 	bne.w	ddd20 <__aeabi_dmul+0x19c>
   ddf96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ddf9a:	f47f af0d 	bne.w	dddb8 <__aeabi_dmul+0x234>
   ddf9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ddfa2:	f47f aeeb 	bne.w	ddd7c <__aeabi_dmul+0x1f8>
   ddfa6:	e712      	b.n	dddce <__aeabi_dmul+0x24a>

000ddfa8 <__gedf2>:
   ddfa8:	f04f 3cff 	mov.w	ip, #4294967295
   ddfac:	e006      	b.n	ddfbc <__cmpdf2+0x4>
   ddfae:	bf00      	nop

000ddfb0 <__ledf2>:
   ddfb0:	f04f 0c01 	mov.w	ip, #1
   ddfb4:	e002      	b.n	ddfbc <__cmpdf2+0x4>
   ddfb6:	bf00      	nop

000ddfb8 <__cmpdf2>:
   ddfb8:	f04f 0c01 	mov.w	ip, #1
   ddfbc:	f84d cd04 	str.w	ip, [sp, #-4]!
   ddfc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ddfc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ddfc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ddfcc:	bf18      	it	ne
   ddfce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ddfd2:	d01b      	beq.n	de00c <__cmpdf2+0x54>
   ddfd4:	b001      	add	sp, #4
   ddfd6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ddfda:	bf0c      	ite	eq
   ddfdc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ddfe0:	ea91 0f03 	teqne	r1, r3
   ddfe4:	bf02      	ittt	eq
   ddfe6:	ea90 0f02 	teqeq	r0, r2
   ddfea:	2000      	moveq	r0, #0
   ddfec:	4770      	bxeq	lr
   ddfee:	f110 0f00 	cmn.w	r0, #0
   ddff2:	ea91 0f03 	teq	r1, r3
   ddff6:	bf58      	it	pl
   ddff8:	4299      	cmppl	r1, r3
   ddffa:	bf08      	it	eq
   ddffc:	4290      	cmpeq	r0, r2
   ddffe:	bf2c      	ite	cs
   de000:	17d8      	asrcs	r0, r3, #31
   de002:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   de006:	f040 0001 	orr.w	r0, r0, #1
   de00a:	4770      	bx	lr
   de00c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   de010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   de014:	d102      	bne.n	de01c <__cmpdf2+0x64>
   de016:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   de01a:	d107      	bne.n	de02c <__cmpdf2+0x74>
   de01c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   de020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   de024:	d1d6      	bne.n	ddfd4 <__cmpdf2+0x1c>
   de026:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   de02a:	d0d3      	beq.n	ddfd4 <__cmpdf2+0x1c>
   de02c:	f85d 0b04 	ldr.w	r0, [sp], #4
   de030:	4770      	bx	lr
   de032:	bf00      	nop

000de034 <__aeabi_cdrcmple>:
   de034:	4684      	mov	ip, r0
   de036:	4610      	mov	r0, r2
   de038:	4662      	mov	r2, ip
   de03a:	468c      	mov	ip, r1
   de03c:	4619      	mov	r1, r3
   de03e:	4663      	mov	r3, ip
   de040:	e000      	b.n	de044 <__aeabi_cdcmpeq>
   de042:	bf00      	nop

000de044 <__aeabi_cdcmpeq>:
   de044:	b501      	push	{r0, lr}
   de046:	f7ff ffb7 	bl	ddfb8 <__cmpdf2>
   de04a:	2800      	cmp	r0, #0
   de04c:	bf48      	it	mi
   de04e:	f110 0f00 	cmnmi.w	r0, #0
   de052:	bd01      	pop	{r0, pc}

000de054 <__aeabi_dcmpeq>:
   de054:	f84d ed08 	str.w	lr, [sp, #-8]!
   de058:	f7ff fff4 	bl	de044 <__aeabi_cdcmpeq>
   de05c:	bf0c      	ite	eq
   de05e:	2001      	moveq	r0, #1
   de060:	2000      	movne	r0, #0
   de062:	f85d fb08 	ldr.w	pc, [sp], #8
   de066:	bf00      	nop

000de068 <__aeabi_dcmplt>:
   de068:	f84d ed08 	str.w	lr, [sp, #-8]!
   de06c:	f7ff ffea 	bl	de044 <__aeabi_cdcmpeq>
   de070:	bf34      	ite	cc
   de072:	2001      	movcc	r0, #1
   de074:	2000      	movcs	r0, #0
   de076:	f85d fb08 	ldr.w	pc, [sp], #8
   de07a:	bf00      	nop

000de07c <__aeabi_dcmple>:
   de07c:	f84d ed08 	str.w	lr, [sp, #-8]!
   de080:	f7ff ffe0 	bl	de044 <__aeabi_cdcmpeq>
   de084:	bf94      	ite	ls
   de086:	2001      	movls	r0, #1
   de088:	2000      	movhi	r0, #0
   de08a:	f85d fb08 	ldr.w	pc, [sp], #8
   de08e:	bf00      	nop

000de090 <__aeabi_dcmpge>:
   de090:	f84d ed08 	str.w	lr, [sp, #-8]!
   de094:	f7ff ffce 	bl	de034 <__aeabi_cdrcmple>
   de098:	bf94      	ite	ls
   de09a:	2001      	movls	r0, #1
   de09c:	2000      	movhi	r0, #0
   de09e:	f85d fb08 	ldr.w	pc, [sp], #8
   de0a2:	bf00      	nop

000de0a4 <__aeabi_dcmpgt>:
   de0a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   de0a8:	f7ff ffc4 	bl	de034 <__aeabi_cdrcmple>
   de0ac:	bf34      	ite	cc
   de0ae:	2001      	movcc	r0, #1
   de0b0:	2000      	movcs	r0, #0
   de0b2:	f85d fb08 	ldr.w	pc, [sp], #8
   de0b6:	bf00      	nop

000de0b8 <__aeabi_dcmpun>:
   de0b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   de0bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   de0c0:	d102      	bne.n	de0c8 <__aeabi_dcmpun+0x10>
   de0c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   de0c6:	d10a      	bne.n	de0de <__aeabi_dcmpun+0x26>
   de0c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   de0cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   de0d0:	d102      	bne.n	de0d8 <__aeabi_dcmpun+0x20>
   de0d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   de0d6:	d102      	bne.n	de0de <__aeabi_dcmpun+0x26>
   de0d8:	f04f 0000 	mov.w	r0, #0
   de0dc:	4770      	bx	lr
   de0de:	f04f 0001 	mov.w	r0, #1
   de0e2:	4770      	bx	lr

000de0e4 <__aeabi_d2iz>:
   de0e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   de0e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   de0ec:	d215      	bcs.n	de11a <__aeabi_d2iz+0x36>
   de0ee:	d511      	bpl.n	de114 <__aeabi_d2iz+0x30>
   de0f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   de0f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   de0f8:	d912      	bls.n	de120 <__aeabi_d2iz+0x3c>
   de0fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de0fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   de102:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   de106:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   de10a:	fa23 f002 	lsr.w	r0, r3, r2
   de10e:	bf18      	it	ne
   de110:	4240      	negne	r0, r0
   de112:	4770      	bx	lr
   de114:	f04f 0000 	mov.w	r0, #0
   de118:	4770      	bx	lr
   de11a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   de11e:	d105      	bne.n	de12c <__aeabi_d2iz+0x48>
   de120:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   de124:	bf08      	it	eq
   de126:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   de12a:	4770      	bx	lr
   de12c:	f04f 0000 	mov.w	r0, #0
   de130:	4770      	bx	lr
   de132:	bf00      	nop

000de134 <__aeabi_d2uiz>:
   de134:	004a      	lsls	r2, r1, #1
   de136:	d211      	bcs.n	de15c <__aeabi_d2uiz+0x28>
   de138:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   de13c:	d211      	bcs.n	de162 <__aeabi_d2uiz+0x2e>
   de13e:	d50d      	bpl.n	de15c <__aeabi_d2uiz+0x28>
   de140:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   de144:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   de148:	d40e      	bmi.n	de168 <__aeabi_d2uiz+0x34>
   de14a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de14e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   de152:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   de156:	fa23 f002 	lsr.w	r0, r3, r2
   de15a:	4770      	bx	lr
   de15c:	f04f 0000 	mov.w	r0, #0
   de160:	4770      	bx	lr
   de162:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   de166:	d102      	bne.n	de16e <__aeabi_d2uiz+0x3a>
   de168:	f04f 30ff 	mov.w	r0, #4294967295
   de16c:	4770      	bx	lr
   de16e:	f04f 0000 	mov.w	r0, #0
   de172:	4770      	bx	lr

000de174 <__aeabi_d2f>:
   de174:	ea4f 0241 	mov.w	r2, r1, lsl #1
   de178:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   de17c:	bf24      	itt	cs
   de17e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   de182:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   de186:	d90d      	bls.n	de1a4 <__aeabi_d2f+0x30>
   de188:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   de18c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   de190:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   de194:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   de198:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   de19c:	bf08      	it	eq
   de19e:	f020 0001 	biceq.w	r0, r0, #1
   de1a2:	4770      	bx	lr
   de1a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   de1a8:	d121      	bne.n	de1ee <__aeabi_d2f+0x7a>
   de1aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   de1ae:	bfbc      	itt	lt
   de1b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   de1b4:	4770      	bxlt	lr
   de1b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de1ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   de1be:	f1c2 0218 	rsb	r2, r2, #24
   de1c2:	f1c2 0c20 	rsb	ip, r2, #32
   de1c6:	fa10 f30c 	lsls.w	r3, r0, ip
   de1ca:	fa20 f002 	lsr.w	r0, r0, r2
   de1ce:	bf18      	it	ne
   de1d0:	f040 0001 	orrne.w	r0, r0, #1
   de1d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de1d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   de1dc:	fa03 fc0c 	lsl.w	ip, r3, ip
   de1e0:	ea40 000c 	orr.w	r0, r0, ip
   de1e4:	fa23 f302 	lsr.w	r3, r3, r2
   de1e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   de1ec:	e7cc      	b.n	de188 <__aeabi_d2f+0x14>
   de1ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   de1f2:	d107      	bne.n	de204 <__aeabi_d2f+0x90>
   de1f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   de1f8:	bf1e      	ittt	ne
   de1fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   de1fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   de202:	4770      	bxne	lr
   de204:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   de208:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   de20c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   de210:	4770      	bx	lr
   de212:	bf00      	nop

000de214 <__aeabi_frsub>:
   de214:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   de218:	e002      	b.n	de220 <__addsf3>
   de21a:	bf00      	nop

000de21c <__aeabi_fsub>:
   de21c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000de220 <__addsf3>:
   de220:	0042      	lsls	r2, r0, #1
   de222:	bf1f      	itttt	ne
   de224:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   de228:	ea92 0f03 	teqne	r2, r3
   de22c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   de230:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   de234:	d06a      	beq.n	de30c <__addsf3+0xec>
   de236:	ea4f 6212 	mov.w	r2, r2, lsr #24
   de23a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   de23e:	bfc1      	itttt	gt
   de240:	18d2      	addgt	r2, r2, r3
   de242:	4041      	eorgt	r1, r0
   de244:	4048      	eorgt	r0, r1
   de246:	4041      	eorgt	r1, r0
   de248:	bfb8      	it	lt
   de24a:	425b      	neglt	r3, r3
   de24c:	2b19      	cmp	r3, #25
   de24e:	bf88      	it	hi
   de250:	4770      	bxhi	lr
   de252:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   de256:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   de25a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   de25e:	bf18      	it	ne
   de260:	4240      	negne	r0, r0
   de262:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   de266:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   de26a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   de26e:	bf18      	it	ne
   de270:	4249      	negne	r1, r1
   de272:	ea92 0f03 	teq	r2, r3
   de276:	d03f      	beq.n	de2f8 <__addsf3+0xd8>
   de278:	f1a2 0201 	sub.w	r2, r2, #1
   de27c:	fa41 fc03 	asr.w	ip, r1, r3
   de280:	eb10 000c 	adds.w	r0, r0, ip
   de284:	f1c3 0320 	rsb	r3, r3, #32
   de288:	fa01 f103 	lsl.w	r1, r1, r3
   de28c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   de290:	d502      	bpl.n	de298 <__addsf3+0x78>
   de292:	4249      	negs	r1, r1
   de294:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   de298:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   de29c:	d313      	bcc.n	de2c6 <__addsf3+0xa6>
   de29e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   de2a2:	d306      	bcc.n	de2b2 <__addsf3+0x92>
   de2a4:	0840      	lsrs	r0, r0, #1
   de2a6:	ea4f 0131 	mov.w	r1, r1, rrx
   de2aa:	f102 0201 	add.w	r2, r2, #1
   de2ae:	2afe      	cmp	r2, #254	; 0xfe
   de2b0:	d251      	bcs.n	de356 <__addsf3+0x136>
   de2b2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   de2b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   de2ba:	bf08      	it	eq
   de2bc:	f020 0001 	biceq.w	r0, r0, #1
   de2c0:	ea40 0003 	orr.w	r0, r0, r3
   de2c4:	4770      	bx	lr
   de2c6:	0049      	lsls	r1, r1, #1
   de2c8:	eb40 0000 	adc.w	r0, r0, r0
   de2cc:	3a01      	subs	r2, #1
   de2ce:	bf28      	it	cs
   de2d0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   de2d4:	d2ed      	bcs.n	de2b2 <__addsf3+0x92>
   de2d6:	fab0 fc80 	clz	ip, r0
   de2da:	f1ac 0c08 	sub.w	ip, ip, #8
   de2de:	ebb2 020c 	subs.w	r2, r2, ip
   de2e2:	fa00 f00c 	lsl.w	r0, r0, ip
   de2e6:	bfaa      	itet	ge
   de2e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   de2ec:	4252      	neglt	r2, r2
   de2ee:	4318      	orrge	r0, r3
   de2f0:	bfbc      	itt	lt
   de2f2:	40d0      	lsrlt	r0, r2
   de2f4:	4318      	orrlt	r0, r3
   de2f6:	4770      	bx	lr
   de2f8:	f092 0f00 	teq	r2, #0
   de2fc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   de300:	bf06      	itte	eq
   de302:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   de306:	3201      	addeq	r2, #1
   de308:	3b01      	subne	r3, #1
   de30a:	e7b5      	b.n	de278 <__addsf3+0x58>
   de30c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   de310:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   de314:	bf18      	it	ne
   de316:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   de31a:	d021      	beq.n	de360 <__addsf3+0x140>
   de31c:	ea92 0f03 	teq	r2, r3
   de320:	d004      	beq.n	de32c <__addsf3+0x10c>
   de322:	f092 0f00 	teq	r2, #0
   de326:	bf08      	it	eq
   de328:	4608      	moveq	r0, r1
   de32a:	4770      	bx	lr
   de32c:	ea90 0f01 	teq	r0, r1
   de330:	bf1c      	itt	ne
   de332:	2000      	movne	r0, #0
   de334:	4770      	bxne	lr
   de336:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   de33a:	d104      	bne.n	de346 <__addsf3+0x126>
   de33c:	0040      	lsls	r0, r0, #1
   de33e:	bf28      	it	cs
   de340:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   de344:	4770      	bx	lr
   de346:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   de34a:	bf3c      	itt	cc
   de34c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   de350:	4770      	bxcc	lr
   de352:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   de356:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   de35a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   de35e:	4770      	bx	lr
   de360:	ea7f 6222 	mvns.w	r2, r2, asr #24
   de364:	bf16      	itet	ne
   de366:	4608      	movne	r0, r1
   de368:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   de36c:	4601      	movne	r1, r0
   de36e:	0242      	lsls	r2, r0, #9
   de370:	bf06      	itte	eq
   de372:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   de376:	ea90 0f01 	teqeq	r0, r1
   de37a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   de37e:	4770      	bx	lr

000de380 <__aeabi_ui2f>:
   de380:	f04f 0300 	mov.w	r3, #0
   de384:	e004      	b.n	de390 <__aeabi_i2f+0x8>
   de386:	bf00      	nop

000de388 <__aeabi_i2f>:
   de388:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   de38c:	bf48      	it	mi
   de38e:	4240      	negmi	r0, r0
   de390:	ea5f 0c00 	movs.w	ip, r0
   de394:	bf08      	it	eq
   de396:	4770      	bxeq	lr
   de398:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   de39c:	4601      	mov	r1, r0
   de39e:	f04f 0000 	mov.w	r0, #0
   de3a2:	e01c      	b.n	de3de <__aeabi_l2f+0x2a>

000de3a4 <__aeabi_ul2f>:
   de3a4:	ea50 0201 	orrs.w	r2, r0, r1
   de3a8:	bf08      	it	eq
   de3aa:	4770      	bxeq	lr
   de3ac:	f04f 0300 	mov.w	r3, #0
   de3b0:	e00a      	b.n	de3c8 <__aeabi_l2f+0x14>
   de3b2:	bf00      	nop

000de3b4 <__aeabi_l2f>:
   de3b4:	ea50 0201 	orrs.w	r2, r0, r1
   de3b8:	bf08      	it	eq
   de3ba:	4770      	bxeq	lr
   de3bc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   de3c0:	d502      	bpl.n	de3c8 <__aeabi_l2f+0x14>
   de3c2:	4240      	negs	r0, r0
   de3c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de3c8:	ea5f 0c01 	movs.w	ip, r1
   de3cc:	bf02      	ittt	eq
   de3ce:	4684      	moveq	ip, r0
   de3d0:	4601      	moveq	r1, r0
   de3d2:	2000      	moveq	r0, #0
   de3d4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   de3d8:	bf08      	it	eq
   de3da:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   de3de:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   de3e2:	fabc f28c 	clz	r2, ip
   de3e6:	3a08      	subs	r2, #8
   de3e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   de3ec:	db10      	blt.n	de410 <__aeabi_l2f+0x5c>
   de3ee:	fa01 fc02 	lsl.w	ip, r1, r2
   de3f2:	4463      	add	r3, ip
   de3f4:	fa00 fc02 	lsl.w	ip, r0, r2
   de3f8:	f1c2 0220 	rsb	r2, r2, #32
   de3fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   de400:	fa20 f202 	lsr.w	r2, r0, r2
   de404:	eb43 0002 	adc.w	r0, r3, r2
   de408:	bf08      	it	eq
   de40a:	f020 0001 	biceq.w	r0, r0, #1
   de40e:	4770      	bx	lr
   de410:	f102 0220 	add.w	r2, r2, #32
   de414:	fa01 fc02 	lsl.w	ip, r1, r2
   de418:	f1c2 0220 	rsb	r2, r2, #32
   de41c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   de420:	fa21 f202 	lsr.w	r2, r1, r2
   de424:	eb43 0002 	adc.w	r0, r3, r2
   de428:	bf08      	it	eq
   de42a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   de42e:	4770      	bx	lr

000de430 <__aeabi_ldivmod>:
   de430:	b97b      	cbnz	r3, de452 <__aeabi_ldivmod+0x22>
   de432:	b972      	cbnz	r2, de452 <__aeabi_ldivmod+0x22>
   de434:	2900      	cmp	r1, #0
   de436:	bfbe      	ittt	lt
   de438:	2000      	movlt	r0, #0
   de43a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   de43e:	e006      	blt.n	de44e <__aeabi_ldivmod+0x1e>
   de440:	bf08      	it	eq
   de442:	2800      	cmpeq	r0, #0
   de444:	bf1c      	itt	ne
   de446:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   de44a:	f04f 30ff 	movne.w	r0, #4294967295
   de44e:	f000 b9a1 	b.w	de794 <__aeabi_idiv0>
   de452:	f1ad 0c08 	sub.w	ip, sp, #8
   de456:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   de45a:	2900      	cmp	r1, #0
   de45c:	db09      	blt.n	de472 <__aeabi_ldivmod+0x42>
   de45e:	2b00      	cmp	r3, #0
   de460:	db1a      	blt.n	de498 <__aeabi_ldivmod+0x68>
   de462:	f000 f835 	bl	de4d0 <__udivmoddi4>
   de466:	f8dd e004 	ldr.w	lr, [sp, #4]
   de46a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   de46e:	b004      	add	sp, #16
   de470:	4770      	bx	lr
   de472:	4240      	negs	r0, r0
   de474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de478:	2b00      	cmp	r3, #0
   de47a:	db1b      	blt.n	de4b4 <__aeabi_ldivmod+0x84>
   de47c:	f000 f828 	bl	de4d0 <__udivmoddi4>
   de480:	f8dd e004 	ldr.w	lr, [sp, #4]
   de484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   de488:	b004      	add	sp, #16
   de48a:	4240      	negs	r0, r0
   de48c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de490:	4252      	negs	r2, r2
   de492:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   de496:	4770      	bx	lr
   de498:	4252      	negs	r2, r2
   de49a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   de49e:	f000 f817 	bl	de4d0 <__udivmoddi4>
   de4a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   de4a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   de4aa:	b004      	add	sp, #16
   de4ac:	4240      	negs	r0, r0
   de4ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de4b2:	4770      	bx	lr
   de4b4:	4252      	negs	r2, r2
   de4b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   de4ba:	f000 f809 	bl	de4d0 <__udivmoddi4>
   de4be:	f8dd e004 	ldr.w	lr, [sp, #4]
   de4c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   de4c6:	b004      	add	sp, #16
   de4c8:	4252      	negs	r2, r2
   de4ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   de4ce:	4770      	bx	lr

000de4d0 <__udivmoddi4>:
   de4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de4d4:	9d08      	ldr	r5, [sp, #32]
   de4d6:	4604      	mov	r4, r0
   de4d8:	468c      	mov	ip, r1
   de4da:	2b00      	cmp	r3, #0
   de4dc:	f040 8083 	bne.w	de5e6 <__udivmoddi4+0x116>
   de4e0:	428a      	cmp	r2, r1
   de4e2:	4617      	mov	r7, r2
   de4e4:	d947      	bls.n	de576 <__udivmoddi4+0xa6>
   de4e6:	fab2 f282 	clz	r2, r2
   de4ea:	b142      	cbz	r2, de4fe <__udivmoddi4+0x2e>
   de4ec:	f1c2 0020 	rsb	r0, r2, #32
   de4f0:	fa24 f000 	lsr.w	r0, r4, r0
   de4f4:	4091      	lsls	r1, r2
   de4f6:	4097      	lsls	r7, r2
   de4f8:	ea40 0c01 	orr.w	ip, r0, r1
   de4fc:	4094      	lsls	r4, r2
   de4fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
   de502:	0c23      	lsrs	r3, r4, #16
   de504:	fbbc f6f8 	udiv	r6, ip, r8
   de508:	fa1f fe87 	uxth.w	lr, r7
   de50c:	fb08 c116 	mls	r1, r8, r6, ip
   de510:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   de514:	fb06 f10e 	mul.w	r1, r6, lr
   de518:	4299      	cmp	r1, r3
   de51a:	d909      	bls.n	de530 <__udivmoddi4+0x60>
   de51c:	18fb      	adds	r3, r7, r3
   de51e:	f106 30ff 	add.w	r0, r6, #4294967295
   de522:	f080 8119 	bcs.w	de758 <__udivmoddi4+0x288>
   de526:	4299      	cmp	r1, r3
   de528:	f240 8116 	bls.w	de758 <__udivmoddi4+0x288>
   de52c:	3e02      	subs	r6, #2
   de52e:	443b      	add	r3, r7
   de530:	1a5b      	subs	r3, r3, r1
   de532:	b2a4      	uxth	r4, r4
   de534:	fbb3 f0f8 	udiv	r0, r3, r8
   de538:	fb08 3310 	mls	r3, r8, r0, r3
   de53c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   de540:	fb00 fe0e 	mul.w	lr, r0, lr
   de544:	45a6      	cmp	lr, r4
   de546:	d909      	bls.n	de55c <__udivmoddi4+0x8c>
   de548:	193c      	adds	r4, r7, r4
   de54a:	f100 33ff 	add.w	r3, r0, #4294967295
   de54e:	f080 8105 	bcs.w	de75c <__udivmoddi4+0x28c>
   de552:	45a6      	cmp	lr, r4
   de554:	f240 8102 	bls.w	de75c <__udivmoddi4+0x28c>
   de558:	3802      	subs	r0, #2
   de55a:	443c      	add	r4, r7
   de55c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   de560:	eba4 040e 	sub.w	r4, r4, lr
   de564:	2600      	movs	r6, #0
   de566:	b11d      	cbz	r5, de570 <__udivmoddi4+0xa0>
   de568:	40d4      	lsrs	r4, r2
   de56a:	2300      	movs	r3, #0
   de56c:	e9c5 4300 	strd	r4, r3, [r5]
   de570:	4631      	mov	r1, r6
   de572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de576:	b902      	cbnz	r2, de57a <__udivmoddi4+0xaa>
   de578:	deff      	udf	#255	; 0xff
   de57a:	fab2 f282 	clz	r2, r2
   de57e:	2a00      	cmp	r2, #0
   de580:	d150      	bne.n	de624 <__udivmoddi4+0x154>
   de582:	1bcb      	subs	r3, r1, r7
   de584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   de588:	fa1f f887 	uxth.w	r8, r7
   de58c:	2601      	movs	r6, #1
   de58e:	fbb3 fcfe 	udiv	ip, r3, lr
   de592:	0c21      	lsrs	r1, r4, #16
   de594:	fb0e 331c 	mls	r3, lr, ip, r3
   de598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   de59c:	fb08 f30c 	mul.w	r3, r8, ip
   de5a0:	428b      	cmp	r3, r1
   de5a2:	d907      	bls.n	de5b4 <__udivmoddi4+0xe4>
   de5a4:	1879      	adds	r1, r7, r1
   de5a6:	f10c 30ff 	add.w	r0, ip, #4294967295
   de5aa:	d202      	bcs.n	de5b2 <__udivmoddi4+0xe2>
   de5ac:	428b      	cmp	r3, r1
   de5ae:	f200 80e9 	bhi.w	de784 <__udivmoddi4+0x2b4>
   de5b2:	4684      	mov	ip, r0
   de5b4:	1ac9      	subs	r1, r1, r3
   de5b6:	b2a3      	uxth	r3, r4
   de5b8:	fbb1 f0fe 	udiv	r0, r1, lr
   de5bc:	fb0e 1110 	mls	r1, lr, r0, r1
   de5c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   de5c4:	fb08 f800 	mul.w	r8, r8, r0
   de5c8:	45a0      	cmp	r8, r4
   de5ca:	d907      	bls.n	de5dc <__udivmoddi4+0x10c>
   de5cc:	193c      	adds	r4, r7, r4
   de5ce:	f100 33ff 	add.w	r3, r0, #4294967295
   de5d2:	d202      	bcs.n	de5da <__udivmoddi4+0x10a>
   de5d4:	45a0      	cmp	r8, r4
   de5d6:	f200 80d9 	bhi.w	de78c <__udivmoddi4+0x2bc>
   de5da:	4618      	mov	r0, r3
   de5dc:	eba4 0408 	sub.w	r4, r4, r8
   de5e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   de5e4:	e7bf      	b.n	de566 <__udivmoddi4+0x96>
   de5e6:	428b      	cmp	r3, r1
   de5e8:	d909      	bls.n	de5fe <__udivmoddi4+0x12e>
   de5ea:	2d00      	cmp	r5, #0
   de5ec:	f000 80b1 	beq.w	de752 <__udivmoddi4+0x282>
   de5f0:	2600      	movs	r6, #0
   de5f2:	e9c5 0100 	strd	r0, r1, [r5]
   de5f6:	4630      	mov	r0, r6
   de5f8:	4631      	mov	r1, r6
   de5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de5fe:	fab3 f683 	clz	r6, r3
   de602:	2e00      	cmp	r6, #0
   de604:	d14a      	bne.n	de69c <__udivmoddi4+0x1cc>
   de606:	428b      	cmp	r3, r1
   de608:	d302      	bcc.n	de610 <__udivmoddi4+0x140>
   de60a:	4282      	cmp	r2, r0
   de60c:	f200 80b8 	bhi.w	de780 <__udivmoddi4+0x2b0>
   de610:	1a84      	subs	r4, r0, r2
   de612:	eb61 0103 	sbc.w	r1, r1, r3
   de616:	2001      	movs	r0, #1
   de618:	468c      	mov	ip, r1
   de61a:	2d00      	cmp	r5, #0
   de61c:	d0a8      	beq.n	de570 <__udivmoddi4+0xa0>
   de61e:	e9c5 4c00 	strd	r4, ip, [r5]
   de622:	e7a5      	b.n	de570 <__udivmoddi4+0xa0>
   de624:	f1c2 0320 	rsb	r3, r2, #32
   de628:	fa20 f603 	lsr.w	r6, r0, r3
   de62c:	4097      	lsls	r7, r2
   de62e:	fa01 f002 	lsl.w	r0, r1, r2
   de632:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   de636:	40d9      	lsrs	r1, r3
   de638:	4330      	orrs	r0, r6
   de63a:	0c03      	lsrs	r3, r0, #16
   de63c:	fbb1 f6fe 	udiv	r6, r1, lr
   de640:	fa1f f887 	uxth.w	r8, r7
   de644:	fb0e 1116 	mls	r1, lr, r6, r1
   de648:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   de64c:	fb06 f108 	mul.w	r1, r6, r8
   de650:	4299      	cmp	r1, r3
   de652:	fa04 f402 	lsl.w	r4, r4, r2
   de656:	d909      	bls.n	de66c <__udivmoddi4+0x19c>
   de658:	18fb      	adds	r3, r7, r3
   de65a:	f106 3cff 	add.w	ip, r6, #4294967295
   de65e:	f080 808d 	bcs.w	de77c <__udivmoddi4+0x2ac>
   de662:	4299      	cmp	r1, r3
   de664:	f240 808a 	bls.w	de77c <__udivmoddi4+0x2ac>
   de668:	3e02      	subs	r6, #2
   de66a:	443b      	add	r3, r7
   de66c:	1a5b      	subs	r3, r3, r1
   de66e:	b281      	uxth	r1, r0
   de670:	fbb3 f0fe 	udiv	r0, r3, lr
   de674:	fb0e 3310 	mls	r3, lr, r0, r3
   de678:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   de67c:	fb00 f308 	mul.w	r3, r0, r8
   de680:	428b      	cmp	r3, r1
   de682:	d907      	bls.n	de694 <__udivmoddi4+0x1c4>
   de684:	1879      	adds	r1, r7, r1
   de686:	f100 3cff 	add.w	ip, r0, #4294967295
   de68a:	d273      	bcs.n	de774 <__udivmoddi4+0x2a4>
   de68c:	428b      	cmp	r3, r1
   de68e:	d971      	bls.n	de774 <__udivmoddi4+0x2a4>
   de690:	3802      	subs	r0, #2
   de692:	4439      	add	r1, r7
   de694:	1acb      	subs	r3, r1, r3
   de696:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   de69a:	e778      	b.n	de58e <__udivmoddi4+0xbe>
   de69c:	f1c6 0c20 	rsb	ip, r6, #32
   de6a0:	fa03 f406 	lsl.w	r4, r3, r6
   de6a4:	fa22 f30c 	lsr.w	r3, r2, ip
   de6a8:	431c      	orrs	r4, r3
   de6aa:	fa20 f70c 	lsr.w	r7, r0, ip
   de6ae:	fa01 f306 	lsl.w	r3, r1, r6
   de6b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   de6b6:	fa21 f10c 	lsr.w	r1, r1, ip
   de6ba:	431f      	orrs	r7, r3
   de6bc:	0c3b      	lsrs	r3, r7, #16
   de6be:	fbb1 f9fe 	udiv	r9, r1, lr
   de6c2:	fa1f f884 	uxth.w	r8, r4
   de6c6:	fb0e 1119 	mls	r1, lr, r9, r1
   de6ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   de6ce:	fb09 fa08 	mul.w	sl, r9, r8
   de6d2:	458a      	cmp	sl, r1
   de6d4:	fa02 f206 	lsl.w	r2, r2, r6
   de6d8:	fa00 f306 	lsl.w	r3, r0, r6
   de6dc:	d908      	bls.n	de6f0 <__udivmoddi4+0x220>
   de6de:	1861      	adds	r1, r4, r1
   de6e0:	f109 30ff 	add.w	r0, r9, #4294967295
   de6e4:	d248      	bcs.n	de778 <__udivmoddi4+0x2a8>
   de6e6:	458a      	cmp	sl, r1
   de6e8:	d946      	bls.n	de778 <__udivmoddi4+0x2a8>
   de6ea:	f1a9 0902 	sub.w	r9, r9, #2
   de6ee:	4421      	add	r1, r4
   de6f0:	eba1 010a 	sub.w	r1, r1, sl
   de6f4:	b2bf      	uxth	r7, r7
   de6f6:	fbb1 f0fe 	udiv	r0, r1, lr
   de6fa:	fb0e 1110 	mls	r1, lr, r0, r1
   de6fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   de702:	fb00 f808 	mul.w	r8, r0, r8
   de706:	45b8      	cmp	r8, r7
   de708:	d907      	bls.n	de71a <__udivmoddi4+0x24a>
   de70a:	19e7      	adds	r7, r4, r7
   de70c:	f100 31ff 	add.w	r1, r0, #4294967295
   de710:	d22e      	bcs.n	de770 <__udivmoddi4+0x2a0>
   de712:	45b8      	cmp	r8, r7
   de714:	d92c      	bls.n	de770 <__udivmoddi4+0x2a0>
   de716:	3802      	subs	r0, #2
   de718:	4427      	add	r7, r4
   de71a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   de71e:	eba7 0708 	sub.w	r7, r7, r8
   de722:	fba0 8902 	umull	r8, r9, r0, r2
   de726:	454f      	cmp	r7, r9
   de728:	46c6      	mov	lr, r8
   de72a:	4649      	mov	r1, r9
   de72c:	d31a      	bcc.n	de764 <__udivmoddi4+0x294>
   de72e:	d017      	beq.n	de760 <__udivmoddi4+0x290>
   de730:	b15d      	cbz	r5, de74a <__udivmoddi4+0x27a>
   de732:	ebb3 020e 	subs.w	r2, r3, lr
   de736:	eb67 0701 	sbc.w	r7, r7, r1
   de73a:	fa07 fc0c 	lsl.w	ip, r7, ip
   de73e:	40f2      	lsrs	r2, r6
   de740:	ea4c 0202 	orr.w	r2, ip, r2
   de744:	40f7      	lsrs	r7, r6
   de746:	e9c5 2700 	strd	r2, r7, [r5]
   de74a:	2600      	movs	r6, #0
   de74c:	4631      	mov	r1, r6
   de74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de752:	462e      	mov	r6, r5
   de754:	4628      	mov	r0, r5
   de756:	e70b      	b.n	de570 <__udivmoddi4+0xa0>
   de758:	4606      	mov	r6, r0
   de75a:	e6e9      	b.n	de530 <__udivmoddi4+0x60>
   de75c:	4618      	mov	r0, r3
   de75e:	e6fd      	b.n	de55c <__udivmoddi4+0x8c>
   de760:	4543      	cmp	r3, r8
   de762:	d2e5      	bcs.n	de730 <__udivmoddi4+0x260>
   de764:	ebb8 0e02 	subs.w	lr, r8, r2
   de768:	eb69 0104 	sbc.w	r1, r9, r4
   de76c:	3801      	subs	r0, #1
   de76e:	e7df      	b.n	de730 <__udivmoddi4+0x260>
   de770:	4608      	mov	r0, r1
   de772:	e7d2      	b.n	de71a <__udivmoddi4+0x24a>
   de774:	4660      	mov	r0, ip
   de776:	e78d      	b.n	de694 <__udivmoddi4+0x1c4>
   de778:	4681      	mov	r9, r0
   de77a:	e7b9      	b.n	de6f0 <__udivmoddi4+0x220>
   de77c:	4666      	mov	r6, ip
   de77e:	e775      	b.n	de66c <__udivmoddi4+0x19c>
   de780:	4630      	mov	r0, r6
   de782:	e74a      	b.n	de61a <__udivmoddi4+0x14a>
   de784:	f1ac 0c02 	sub.w	ip, ip, #2
   de788:	4439      	add	r1, r7
   de78a:	e713      	b.n	de5b4 <__udivmoddi4+0xe4>
   de78c:	3802      	subs	r0, #2
   de78e:	443c      	add	r4, r7
   de790:	e724      	b.n	de5dc <__udivmoddi4+0x10c>
   de792:	bf00      	nop

000de794 <__aeabi_idiv0>:
   de794:	4770      	bx	lr
   de796:	bf00      	nop

000de798 <atol>:
   de798:	220a      	movs	r2, #10
   de79a:	2100      	movs	r1, #0
   de79c:	f000 b950 	b.w	dea40 <strtol>

000de7a0 <__cxa_atexit>:
   de7a0:	b510      	push	{r4, lr}
   de7a2:	4c05      	ldr	r4, [pc, #20]	; (de7b8 <__cxa_atexit+0x18>)
   de7a4:	4613      	mov	r3, r2
   de7a6:	b12c      	cbz	r4, de7b4 <__cxa_atexit+0x14>
   de7a8:	460a      	mov	r2, r1
   de7aa:	4601      	mov	r1, r0
   de7ac:	2002      	movs	r0, #2
   de7ae:	f3af 8000 	nop.w
   de7b2:	bd10      	pop	{r4, pc}
   de7b4:	4620      	mov	r0, r4
   de7b6:	e7fc      	b.n	de7b2 <__cxa_atexit+0x12>
   de7b8:	00000000 	.word	0x00000000

000de7bc <memcmp>:
   de7bc:	b530      	push	{r4, r5, lr}
   de7be:	3901      	subs	r1, #1
   de7c0:	2400      	movs	r4, #0
   de7c2:	42a2      	cmp	r2, r4
   de7c4:	d101      	bne.n	de7ca <memcmp+0xe>
   de7c6:	2000      	movs	r0, #0
   de7c8:	e005      	b.n	de7d6 <memcmp+0x1a>
   de7ca:	5d03      	ldrb	r3, [r0, r4]
   de7cc:	3401      	adds	r4, #1
   de7ce:	5d0d      	ldrb	r5, [r1, r4]
   de7d0:	42ab      	cmp	r3, r5
   de7d2:	d0f6      	beq.n	de7c2 <memcmp+0x6>
   de7d4:	1b58      	subs	r0, r3, r5
   de7d6:	bd30      	pop	{r4, r5, pc}

000de7d8 <memcpy>:
   de7d8:	440a      	add	r2, r1
   de7da:	4291      	cmp	r1, r2
   de7dc:	f100 33ff 	add.w	r3, r0, #4294967295
   de7e0:	d100      	bne.n	de7e4 <memcpy+0xc>
   de7e2:	4770      	bx	lr
   de7e4:	b510      	push	{r4, lr}
   de7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   de7ea:	f803 4f01 	strb.w	r4, [r3, #1]!
   de7ee:	4291      	cmp	r1, r2
   de7f0:	d1f9      	bne.n	de7e6 <memcpy+0xe>
   de7f2:	bd10      	pop	{r4, pc}

000de7f4 <memmove>:
   de7f4:	4288      	cmp	r0, r1
   de7f6:	b510      	push	{r4, lr}
   de7f8:	eb01 0402 	add.w	r4, r1, r2
   de7fc:	d902      	bls.n	de804 <memmove+0x10>
   de7fe:	4284      	cmp	r4, r0
   de800:	4623      	mov	r3, r4
   de802:	d807      	bhi.n	de814 <memmove+0x20>
   de804:	1e43      	subs	r3, r0, #1
   de806:	42a1      	cmp	r1, r4
   de808:	d008      	beq.n	de81c <memmove+0x28>
   de80a:	f811 2b01 	ldrb.w	r2, [r1], #1
   de80e:	f803 2f01 	strb.w	r2, [r3, #1]!
   de812:	e7f8      	b.n	de806 <memmove+0x12>
   de814:	4402      	add	r2, r0
   de816:	4601      	mov	r1, r0
   de818:	428a      	cmp	r2, r1
   de81a:	d100      	bne.n	de81e <memmove+0x2a>
   de81c:	bd10      	pop	{r4, pc}
   de81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   de822:	f802 4d01 	strb.w	r4, [r2, #-1]!
   de826:	e7f7      	b.n	de818 <memmove+0x24>

000de828 <memset>:
   de828:	4402      	add	r2, r0
   de82a:	4603      	mov	r3, r0
   de82c:	4293      	cmp	r3, r2
   de82e:	d100      	bne.n	de832 <memset+0xa>
   de830:	4770      	bx	lr
   de832:	f803 1b01 	strb.w	r1, [r3], #1
   de836:	e7f9      	b.n	de82c <memset+0x4>

000de838 <srand>:
   de838:	b538      	push	{r3, r4, r5, lr}
   de83a:	4b0d      	ldr	r3, [pc, #52]	; (de870 <srand+0x38>)
   de83c:	681d      	ldr	r5, [r3, #0]
   de83e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   de840:	4604      	mov	r4, r0
   de842:	b97b      	cbnz	r3, de864 <srand+0x2c>
   de844:	2018      	movs	r0, #24
   de846:	f7fa ff35 	bl	d96b4 <malloc>
   de84a:	4a0a      	ldr	r2, [pc, #40]	; (de874 <srand+0x3c>)
   de84c:	4b0a      	ldr	r3, [pc, #40]	; (de878 <srand+0x40>)
   de84e:	63a8      	str	r0, [r5, #56]	; 0x38
   de850:	e9c0 2300 	strd	r2, r3, [r0]
   de854:	4b09      	ldr	r3, [pc, #36]	; (de87c <srand+0x44>)
   de856:	6083      	str	r3, [r0, #8]
   de858:	230b      	movs	r3, #11
   de85a:	8183      	strh	r3, [r0, #12]
   de85c:	2201      	movs	r2, #1
   de85e:	2300      	movs	r3, #0
   de860:	e9c0 2304 	strd	r2, r3, [r0, #16]
   de864:	6bab      	ldr	r3, [r5, #56]	; 0x38
   de866:	2200      	movs	r2, #0
   de868:	611c      	str	r4, [r3, #16]
   de86a:	615a      	str	r2, [r3, #20]
   de86c:	bd38      	pop	{r3, r4, r5, pc}
   de86e:	bf00      	nop
   de870:	2003ddb8 	.word	0x2003ddb8
   de874:	abcd330e 	.word	0xabcd330e
   de878:	e66d1234 	.word	0xe66d1234
   de87c:	0005deec 	.word	0x0005deec

000de880 <strchr>:
   de880:	b2c9      	uxtb	r1, r1
   de882:	4603      	mov	r3, r0
   de884:	f810 2b01 	ldrb.w	r2, [r0], #1
   de888:	b11a      	cbz	r2, de892 <strchr+0x12>
   de88a:	428a      	cmp	r2, r1
   de88c:	d1f9      	bne.n	de882 <strchr+0x2>
   de88e:	4618      	mov	r0, r3
   de890:	4770      	bx	lr
   de892:	2900      	cmp	r1, #0
   de894:	bf18      	it	ne
   de896:	2300      	movne	r3, #0
   de898:	e7f9      	b.n	de88e <strchr+0xe>

000de89a <strcmp>:
   de89a:	f810 2b01 	ldrb.w	r2, [r0], #1
   de89e:	f811 3b01 	ldrb.w	r3, [r1], #1
   de8a2:	2a01      	cmp	r2, #1
   de8a4:	bf28      	it	cs
   de8a6:	429a      	cmpcs	r2, r3
   de8a8:	d0f7      	beq.n	de89a <strcmp>
   de8aa:	1ad0      	subs	r0, r2, r3
   de8ac:	4770      	bx	lr

000de8ae <strcpy>:
   de8ae:	4603      	mov	r3, r0
   de8b0:	f811 2b01 	ldrb.w	r2, [r1], #1
   de8b4:	f803 2b01 	strb.w	r2, [r3], #1
   de8b8:	2a00      	cmp	r2, #0
   de8ba:	d1f9      	bne.n	de8b0 <strcpy+0x2>
   de8bc:	4770      	bx	lr
	...

000de8c0 <strdup>:
   de8c0:	4b02      	ldr	r3, [pc, #8]	; (de8cc <strdup+0xc>)
   de8c2:	4601      	mov	r1, r0
   de8c4:	6818      	ldr	r0, [r3, #0]
   de8c6:	f000 b803 	b.w	de8d0 <_strdup_r>
   de8ca:	bf00      	nop
   de8cc:	2003ddb8 	.word	0x2003ddb8

000de8d0 <_strdup_r>:
   de8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   de8d2:	4604      	mov	r4, r0
   de8d4:	4608      	mov	r0, r1
   de8d6:	460d      	mov	r5, r1
   de8d8:	f000 f80f 	bl	de8fa <strlen>
   de8dc:	1c42      	adds	r2, r0, #1
   de8de:	4611      	mov	r1, r2
   de8e0:	4620      	mov	r0, r4
   de8e2:	9201      	str	r2, [sp, #4]
   de8e4:	f7fa ff16 	bl	d9714 <_malloc_r>
   de8e8:	4604      	mov	r4, r0
   de8ea:	b118      	cbz	r0, de8f4 <_strdup_r+0x24>
   de8ec:	9a01      	ldr	r2, [sp, #4]
   de8ee:	4629      	mov	r1, r5
   de8f0:	f7ff ff72 	bl	de7d8 <memcpy>
   de8f4:	4620      	mov	r0, r4
   de8f6:	b003      	add	sp, #12
   de8f8:	bd30      	pop	{r4, r5, pc}

000de8fa <strlen>:
   de8fa:	4603      	mov	r3, r0
   de8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
   de900:	2a00      	cmp	r2, #0
   de902:	d1fb      	bne.n	de8fc <strlen+0x2>
   de904:	1a18      	subs	r0, r3, r0
   de906:	3801      	subs	r0, #1
   de908:	4770      	bx	lr

000de90a <strncpy>:
   de90a:	b510      	push	{r4, lr}
   de90c:	3901      	subs	r1, #1
   de90e:	4603      	mov	r3, r0
   de910:	b132      	cbz	r2, de920 <strncpy+0x16>
   de912:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   de916:	f803 4b01 	strb.w	r4, [r3], #1
   de91a:	3a01      	subs	r2, #1
   de91c:	2c00      	cmp	r4, #0
   de91e:	d1f7      	bne.n	de910 <strncpy+0x6>
   de920:	441a      	add	r2, r3
   de922:	2100      	movs	r1, #0
   de924:	4293      	cmp	r3, r2
   de926:	d100      	bne.n	de92a <strncpy+0x20>
   de928:	bd10      	pop	{r4, pc}
   de92a:	f803 1b01 	strb.w	r1, [r3], #1
   de92e:	e7f9      	b.n	de924 <strncpy+0x1a>

000de930 <strnlen>:
   de930:	b510      	push	{r4, lr}
   de932:	4602      	mov	r2, r0
   de934:	4401      	add	r1, r0
   de936:	428a      	cmp	r2, r1
   de938:	4613      	mov	r3, r2
   de93a:	d101      	bne.n	de940 <strnlen+0x10>
   de93c:	1a18      	subs	r0, r3, r0
   de93e:	bd10      	pop	{r4, pc}
   de940:	781c      	ldrb	r4, [r3, #0]
   de942:	3201      	adds	r2, #1
   de944:	2c00      	cmp	r4, #0
   de946:	d1f6      	bne.n	de936 <strnlen+0x6>
   de948:	e7f8      	b.n	de93c <strnlen+0xc>
	...

000de94c <_strtol_l.isra.0>:
   de94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de950:	4e3a      	ldr	r6, [pc, #232]	; (dea3c <_strtol_l.isra.0+0xf0>)
   de952:	4686      	mov	lr, r0
   de954:	468c      	mov	ip, r1
   de956:	4660      	mov	r0, ip
   de958:	f81c 4b01 	ldrb.w	r4, [ip], #1
   de95c:	5da5      	ldrb	r5, [r4, r6]
   de95e:	f015 0508 	ands.w	r5, r5, #8
   de962:	d1f8      	bne.n	de956 <_strtol_l.isra.0+0xa>
   de964:	2c2d      	cmp	r4, #45	; 0x2d
   de966:	d133      	bne.n	de9d0 <_strtol_l.isra.0+0x84>
   de968:	f89c 4000 	ldrb.w	r4, [ip]
   de96c:	f04f 0801 	mov.w	r8, #1
   de970:	f100 0c02 	add.w	ip, r0, #2
   de974:	2b00      	cmp	r3, #0
   de976:	d05c      	beq.n	dea32 <_strtol_l.isra.0+0xe6>
   de978:	2b10      	cmp	r3, #16
   de97a:	d10c      	bne.n	de996 <_strtol_l.isra.0+0x4a>
   de97c:	2c30      	cmp	r4, #48	; 0x30
   de97e:	d10a      	bne.n	de996 <_strtol_l.isra.0+0x4a>
   de980:	f89c 0000 	ldrb.w	r0, [ip]
   de984:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   de988:	2858      	cmp	r0, #88	; 0x58
   de98a:	d14d      	bne.n	dea28 <_strtol_l.isra.0+0xdc>
   de98c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   de990:	2310      	movs	r3, #16
   de992:	f10c 0c02 	add.w	ip, ip, #2
   de996:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   de99a:	3f01      	subs	r7, #1
   de99c:	2600      	movs	r6, #0
   de99e:	fbb7 f9f3 	udiv	r9, r7, r3
   de9a2:	4630      	mov	r0, r6
   de9a4:	fb03 7a19 	mls	sl, r3, r9, r7
   de9a8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   de9ac:	2d09      	cmp	r5, #9
   de9ae:	d818      	bhi.n	de9e2 <_strtol_l.isra.0+0x96>
   de9b0:	462c      	mov	r4, r5
   de9b2:	42a3      	cmp	r3, r4
   de9b4:	dd24      	ble.n	dea00 <_strtol_l.isra.0+0xb4>
   de9b6:	1c75      	adds	r5, r6, #1
   de9b8:	d007      	beq.n	de9ca <_strtol_l.isra.0+0x7e>
   de9ba:	4581      	cmp	r9, r0
   de9bc:	d31d      	bcc.n	de9fa <_strtol_l.isra.0+0xae>
   de9be:	d101      	bne.n	de9c4 <_strtol_l.isra.0+0x78>
   de9c0:	45a2      	cmp	sl, r4
   de9c2:	db1a      	blt.n	de9fa <_strtol_l.isra.0+0xae>
   de9c4:	fb00 4003 	mla	r0, r0, r3, r4
   de9c8:	2601      	movs	r6, #1
   de9ca:	f81c 4b01 	ldrb.w	r4, [ip], #1
   de9ce:	e7eb      	b.n	de9a8 <_strtol_l.isra.0+0x5c>
   de9d0:	2c2b      	cmp	r4, #43	; 0x2b
   de9d2:	bf08      	it	eq
   de9d4:	f89c 4000 	ldrbeq.w	r4, [ip]
   de9d8:	46a8      	mov	r8, r5
   de9da:	bf08      	it	eq
   de9dc:	f100 0c02 	addeq.w	ip, r0, #2
   de9e0:	e7c8      	b.n	de974 <_strtol_l.isra.0+0x28>
   de9e2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   de9e6:	2d19      	cmp	r5, #25
   de9e8:	d801      	bhi.n	de9ee <_strtol_l.isra.0+0xa2>
   de9ea:	3c37      	subs	r4, #55	; 0x37
   de9ec:	e7e1      	b.n	de9b2 <_strtol_l.isra.0+0x66>
   de9ee:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   de9f2:	2d19      	cmp	r5, #25
   de9f4:	d804      	bhi.n	dea00 <_strtol_l.isra.0+0xb4>
   de9f6:	3c57      	subs	r4, #87	; 0x57
   de9f8:	e7db      	b.n	de9b2 <_strtol_l.isra.0+0x66>
   de9fa:	f04f 36ff 	mov.w	r6, #4294967295
   de9fe:	e7e4      	b.n	de9ca <_strtol_l.isra.0+0x7e>
   dea00:	1c73      	adds	r3, r6, #1
   dea02:	d106      	bne.n	dea12 <_strtol_l.isra.0+0xc6>
   dea04:	2322      	movs	r3, #34	; 0x22
   dea06:	f8ce 3000 	str.w	r3, [lr]
   dea0a:	4638      	mov	r0, r7
   dea0c:	b942      	cbnz	r2, dea20 <_strtol_l.isra.0+0xd4>
   dea0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dea12:	f1b8 0f00 	cmp.w	r8, #0
   dea16:	d000      	beq.n	dea1a <_strtol_l.isra.0+0xce>
   dea18:	4240      	negs	r0, r0
   dea1a:	2a00      	cmp	r2, #0
   dea1c:	d0f7      	beq.n	dea0e <_strtol_l.isra.0+0xc2>
   dea1e:	b10e      	cbz	r6, dea24 <_strtol_l.isra.0+0xd8>
   dea20:	f10c 31ff 	add.w	r1, ip, #4294967295
   dea24:	6011      	str	r1, [r2, #0]
   dea26:	e7f2      	b.n	dea0e <_strtol_l.isra.0+0xc2>
   dea28:	2430      	movs	r4, #48	; 0x30
   dea2a:	2b00      	cmp	r3, #0
   dea2c:	d1b3      	bne.n	de996 <_strtol_l.isra.0+0x4a>
   dea2e:	2308      	movs	r3, #8
   dea30:	e7b1      	b.n	de996 <_strtol_l.isra.0+0x4a>
   dea32:	2c30      	cmp	r4, #48	; 0x30
   dea34:	d0a4      	beq.n	de980 <_strtol_l.isra.0+0x34>
   dea36:	230a      	movs	r3, #10
   dea38:	e7ad      	b.n	de996 <_strtol_l.isra.0+0x4a>
   dea3a:	bf00      	nop
   dea3c:	000df9f9 	.word	0x000df9f9

000dea40 <strtol>:
   dea40:	4613      	mov	r3, r2
   dea42:	460a      	mov	r2, r1
   dea44:	4601      	mov	r1, r0
   dea46:	4802      	ldr	r0, [pc, #8]	; (dea50 <strtol+0x10>)
   dea48:	6800      	ldr	r0, [r0, #0]
   dea4a:	f7ff bf7f 	b.w	de94c <_strtol_l.isra.0>
   dea4e:	bf00      	nop
   dea50:	2003ddb8 	.word	0x2003ddb8

000dea54 <dynalib_user>:
   dea54:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   dea64:	00000000 61666564 20746c75 42534d00     ....default .MSB
   dea74:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   dea84:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   dea94:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   deaa4:	45444f4d 003e7525 66322e25 3a752500     MODE%u>.%.2f.%u:
   deab4:	253a7525 75250075 2f75252f 25007525     %u:%u.%u/%u/%u.%
   deac4:	2c733031 73303125 3031252c 35252c73     10s,%10s,%10s,%5
   dead4:	31252c73 252c7335 2c733531 73303125     s,%15s,%15s,%10s
   deae4:	3031252c 35252c73 35252c73 35252c73     ,%10s,%5s,%5s,%5
   deaf4:	69540073 4400656d 00657461 73303125     s.Time.Date.%10s
   deb04:	3031252c 31252c73 252c7330 252c7335     ,%10s,%10s,%5s,%
   deb14:	2c733531 73353125 3031252c 31252c73     15s,%15s,%10s,%1
   deb24:	252c7330 2c733031 73303125 3031252c     0s,%10s,%10s,%10
   deb34:	31252c73 252c7330 2c733031 73303125     s,%10s,%10s,%10s
   deb44:	3031252c 31252c73 252c7330 2c733031     ,%10s,%10s,%10s,
   deb54:	73303125 3031252c 31252c73 252c7330     %10s,%10s,%10s,%
   deb64:	2c733031 73303125 746c4100 296d2869     10s,%10s.Alti(m)
   deb74:	68285000 00296150 25284852 65540029     .P(hPa).RH(%).Te
   deb84:	4328706d 4d500029 455f3031 5000766e     mp(C).PM10_Env.P
   deb94:	352e324d 766e455f 314d5000 766e455f     M2.5_Env.PM1_Env
   deba4:	314d5000 74535f30 4d500064 5f352e32     .PM10_Std.PM2.5_
   debb4:	00647453 5f314d50 00647453 313e7044     Std.PM1_Std.Dp>1
   debc4:	00302e30 353e7044 4400302e 2e323e70     0.0.Dp>5.0.Dp>2.
   debd4:	70440035 302e313e 3e704400 00352e30     5.Dp>1.0.Dp>0.5.
   debe4:	303e7044 4c00332e 69676e6f 65647574     Dp>0.3.Longitude
   debf4:	74614c00 64757469 69460065 61420078     .Latitude.Fix.Ba
   dec04:	72657474 32560079 322e322e 76654400     ttery.V2.2.2.Dev
   dec14:	3a656369 20410020 00363065 616e6552     ice: .A e06.Rena
   dec24:	4420656d 63697665 65530065 69442074     me Device.Set Di
   dec34:	616c7073 61522079 28206574 29332d31     splay Rate (1-3)
   dec44:	74655300 62755020 6873696c 74615220     .Set Publish Rat
   dec54:	31282065 0029332d 20746553 706d6153     e (1-3).Set Samp
   dec64:	5220656c 20657461 332d3128 69440029     le Rate (1-3).Di
   dec74:	616c7073 65522079 73657266 61522068     splay Refresh Ra
   dec84:	53006574 6f736e65 61532072 656c706d     te.Sensor Sample
   dec94:	74615220 75500065 73696c62 61522068      Rate.Publish Ra
   deca4:	44006574 63697665 44492065 63614200     te.Device ID.Bac
   decb4:	2e70756b 00747874 4b434142 54535055     kup.txt.BACKUPST
   decc4:	00545241 4b434142 4e455055 61440044     ART.BACKUPEND.Da
   decd4:	742e6174 73007478 6f736e65 65642d72     ta.txt.sensor-de
   dece4:	65636976 2d6f742d 20006264 2b2b2020     vice-to-db.   ++
   decf4:	20202000 2f002d2d 74614200 3a797265     .   --./.Batery:
   ded04:	20250020 65430020 003a6c6c 43202020      .%  .Cell:.   C
   ded14:	00203a68 30207044 203a332e 50204500     h: .Dp 0.3: .E P
   ded24:	2e31204d 00203a30 30207044 203a352e     M 1.0: .Dp 0.5: 
   ded34:	50204500 2e32204d 00203a35 31207044     .E PM 2.5: .Dp 1
   ded44:	203a302e 50204500 3031204d 00203a20     .0: .E PM 10 : .
   ded54:	32207044 203a352e 50205300 2e31204d     Dp 2.5: .S PM 1.
   ded64:	00203a30 35207044 203a302e 50205300     0: .Dp 5.0: .S P
   ded74:	2e32204d 00203a35 30317044 203a302e     M 2.5: .Dp10.0: 
   ded84:	50205300 3031204d 00203a20 706d6554     .S PM 10 : .Temp
   ded94:	4300203a 48522020 2500203a 3a502020     : .C  RH: .%  P:
   deda4:	506b0020 61530061 203a706d 20207300      .kPa.Samp: .s  
   dedb4:	69442020 203a7073 20207300 75502020       Disp: .s    Pu
   dedc4:	00203a62 45360068 30303034 422d3130     b: .h.6E400001-B
   dedd4:	2d334135 33393346 4130452d 35452d39     5A3-F393-E0A9-E5
   dede4:	34324530 41434344 36004539 30303445     0E24DCCA9E.6E400
   dedf4:	2d323030 33413542 3933462d 30452d33     002-B5A3-F393-E0
   dee04:	452d3941 32453035 43434434 00453941     A9-E50E24DCCA9E.
   dee14:	30344536 33303030 4135422d 33462d33     6E400003-B5A3-F3
   dee24:	452d3339 2d394130 45303545 43443432     93-E0A9-E50E24DC
   dee34:	45394143 00787400 00007872              CA9E.tx.rx..

000dee40 <_ZTVN8particle11SPISettingsE>:
	...
   dee48:	000d42e5 000d40cd 000d4115              .B...@...A..

000dee54 <_ZTV4File>:
	...
   dee5c:	000d4111 000d4123 000d4163 000d415d     .A..#A..cA..]A..
   dee6c:	000d40cf 000d413d 000d4137 000d4131     .@..=A..7A..1A..
   dee7c:	00080000 18000000 00000000 00000018     ................
   dee8c:	00003800 00300000 70000000 00000000     .8....0....p....
   dee9c:	000000e3 0000c300 80c70100 86010000     ................
   deeac:	03000080 0000c08c 00600803 60180700     ..........`....`
   deebc:	300e0000 0c000030 00001020 0018611c     ...00... ....a..
   deecc:	08431800 c3380000 3100008c 00008687     ..C...8....1....
   deedc:	00c68f71 c30ce300 00c30000 c60100e1     q...............
   deeec:	01807100 80300086 38fe8f03 000003c0     .q....0....8....
   deefc:	00076018 0e601c00 300c0000 feffff0f     .`....`....0....
   def0c:	ffff1f10 001018ff 000c0000 0c000000     ................
   def1c:	00000000 00000006 ff7f0600               ...............

000def2b <_ZL4font>:
   def2b:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   def3b:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   def4b:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   def5b:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   def6b:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   def7b:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   def8b:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   def9b:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   defab:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   defbb:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   defcb:	00000000 5f000000 07000000 14000700     ......._........
   defdb:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   defeb:	00502056 00030708 41221c00 22410000     V P......."A..A"
   deffb:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   df00b:	08080800 00000808 20006060 02040810     ........``. ....
   df01b:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   df02b:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   df03b:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   df04b:	00001e29 00000014 00003440 22140800     ).......@4....."
   df05b:	14141441 41001414 02081422 06095901     A......A"....Y..
   df06b:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   df07b:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   df08b:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   df09b:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   df0ab:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   df0bb:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   df0cb:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   df0db:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   df0eb:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   df0fb:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   df10b:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   df11b:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   df12b:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   df13b:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   df14b:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   df15b:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   df16b:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   df17b:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   df18b:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   df19b:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   df1ab:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   df1bb:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   df1cb:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   df1db:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   df1eb:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   df1fb:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   df20b:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   df21b:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   df22b:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   df23b:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   df24b:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   df25b:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   df26b:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   df27b:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   df28b:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   df29b:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   df2ab:	00ff0000 ff101010 14141400 101000ff     ................
   df2bb:	10ff00ff f010f010 fc141414 f7141400     ................
   df2cb:	0000ff00 14ff00ff fc04f414 10171414     ................
   df2db:	1f10101f 14141f10 10001f14 00f01010     ................
   df2eb:	1f000000 10101010 1010101f 0010f010     ................
   df2fb:	10ff0000 10101010 10101010 000010ff     ................
   df30b:	0014ff00 ff00ff00 101f0000 fc000017     ................
   df31b:	1414f404 14171017 f404f414 00ff0000     ................
   df32b:	141414f7 14141414 14f700f7 14171414     ................
   df33b:	101f1010 1414141f 101014f4 00f010f0     ................
   df34b:	1f101f00 1f000000 00000014 000014fc     ................
   df35b:	10f010f0 ff10ff10 ff141414 10101014     ................
   df36b:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   df37b:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   df38b:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   df39b:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   df3ab:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   df3bb:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   df3cb:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   df3db:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   df3eb:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   df3fb:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   df40b:	00000018 30001010 0101ff40 01011f00     .......0@.......
   df41b:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000df42c <_ZTV12Adafruit_GFX>:
	...
   df43c:	000d6145 000dacfd 000d40a5 000d5b75     Ea.......@..u[..
   df44c:	000d5b77 000d5ba9 000d5b85 000d5b97     w[...[...[...[..
   df45c:	000d5ab9 000d5b75 000d5da1 000d5d1b     .Z..u[...]...]..
   df46c:	000d5bc1 000d5bff 000d5c39 000d5c7f     .[...[..9\...\..
   df47c:	000d5d1d 000d5c9b                       .]...\..

000df484 <_ZL8LUT_DATA>:
   df484:	00406080 10000000 00002060 60800000     .`@.....` .....`
   df494:	00000040 20601000 00000000 00000000     @.....` ........
   df4a4:	03000000 02000003 00000909 00030302     ................
   df4b4:	00000200 00000000 00000000 00000000     ................
   df4c4:	00000000 41150000 0a3032a8              .......A.20.

000df4d0 <_ZTV16Adafruit_SSD1675>:
	...
   df4d8:	000d417d 000d57b1 000d6145 000dacfd     }A...W..Ea......
   df4e8:	000d8945 000d5b75 000d5b77 000d5ba9     E...u[..w[...[..
   df4f8:	000d5b85 000d5b97 000d5ab9 000d5b75     .[...[...Z..u[..
   df508:	000d5da1 000d5d1b 000d5bc1 000d5bff     .]...]...[...[..
   df518:	000d5c39 000d5c7f 000d5d1d 000d5c9b     9\...\...]...\..
   df528:	000d830b 000d82e1 000d8419 000d83df     ................
   df538:	000d8569                                i...

000df53c <_ZTV12Adafruit_EPD>:
	...
   df54c:	000d6145 000dacfd 000d8945 000d5b75     Ea......E...u[..
   df55c:	000d5b77 000d5ba9 000d5b85 000d5b97     w[...[...[...[..
   df56c:	000d5ab9 000d5b75 000d5da1 000d5d1b     .Z..u[...]...]..
   df57c:	000d5bc1 000d5bff 000d5c39 000d5c7f     .[...[..9\...\..
   df58c:	000d5d1d 000d5c9b 000d40a5 000d40a5     .]...\...@...@..
   df59c:	000d40a5 000d40a5 000d40a5              .@...@...@..

000df5a8 <_ZTVN5spark13EthernetClassE>:
	...
   df5b0:	000d97b3 000d97a9 000d979f 000d9795     ................
   df5c0:	000d9789 000d977d 000d9771 000d9769     ....}...q...i...
   df5d0:	000d975f 000d9755 000dbf87              _...U.......

000df5dc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   df5dc:	18100800 38302820 69726977 622e676e     .... (08wiring.b
   df5ec:	5300656c 74726174 73696420 65766f63     le.Start discove
   df5fc:	676e6972 72657320 65636976 50002e73     ring services..P
   df60c:	20726565 69766564 69206563 696d2073     eer device is mi
   df61c:	6e697373 46002167 656c6961 6f742064     ssing!.Failed to
   df62c:	70706120 20646e65 72656570 6e654320      append peer Cen
   df63c:	6c617274 76656420 2e656369 6e6f4300     tral device..Con
   df64c:	7463656e 62206465 65432079 6172746e     nected by Centra
   df65c:	6564206c 65636976 6944002e 6e6f6373     l device..Discon
   df66c:	7463656e 62206465 65722079 65746f6d     nected by remote
   df67c:	76656420 2e656369 70754400 6163696c      device..Duplica
   df68c:	20646574 72616863 65746361 74736972     ted characterist
   df69c:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   df6ac:	002e6465 6c696146 74206465 7061206f     ed..Failed to ap
   df6bc:	646e6570 636f6c20 63206c61 61726168     pend local chara
   df6cc:	72657463 69747369 00002e63              cteristic...

000df6d8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   df6e0:	000d9c6b 000d9cd3 000d9ccd 000d9cfd     k...............
   df6f0:	000d9c6d                                m...

000df6f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   df6fc:	000d9c67 000d9ce1 000d9c69 000d9d01     g.......i.......
   df70c:	000d9c8d                                ....

000df710 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   df718:	000d9c65 000d9cef 000da5b5 000d9d05     e...............
   df728:	000d9cad                                ....

000df72c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   df734:	5f9b34fb 80000080 00001000 00000000     .4._............

000df744 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   df744:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000df754 <_ZN8particle7BleUuid9BASE_UUIDE>:
   df754:	5f9b34fb 80000080 00001000 00000000     .4._............
   df764:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   df774:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   df784:	007a2553 74637361 00656d69              S%z.asctime.

000df790 <_ZTV14CellularSignal>:
	...
   df798:	000db1b9 000db1bf 000db1bb 000db1cd     ................
   df7a8:	000db201 000db22d 000db261 000db2b1     ....-...a.......
   df7b8:	fffffffc 00000000 000db2d7              ............

000df7c4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   df7cc:	000db465 000db46b 000db4a9 000db479     e...k.......y...
   df7dc:	000db467                                g...

000df7e0 <_ZTV9IPAddress>:
	...
   df7e8:	000db9fd 000db9ed 000db9ef              ............

000df7f4 <_ZTV9USBSerial>:
	...
   df7fc:	000dbad3 000dbb3b 000dbb11 000dacfd     ....;...........
   df80c:	000dbb03 000dbad5 000dbae5 000dbb35     ............5...
   df81c:	000dbaf5 000dbacf                       ........

000df824 <_ZTVN5spark13CellularClassE>:
	...
   df82c:	000dbc33 000dbc29 000dbc1f 000dbbd5     3...)...........
   df83c:	000dbc13 000dbc07 000dbbfb 000dbbf3     ................
   df84c:	000dbbe9 000dbbdf 000dbf87              ............

000df858 <_ZTV11USARTSerial>:
	...
   df860:	000dbce1 000dbd4d 000dbd25 000dacfd     ....M...%.......
   df870:	000dbcf5 000dbd11 000dbd03 000dbd1f     ................
   df880:	000dbce3 000dbce7                       ........

000df888 <_ZTV7TwoWire>:
	...
   df890:	000dbe05 000dbe4f 000dbe27 000dbe07     ....O...'.......
   df8a0:	000dbe2f 000dbe37 000dbe3f 000dbe47     /...7...?...G...

000df8b0 <_ZTVN5spark12NetworkClassE>:
	...
   df8b8:	000dbf1f 000dbf29 000dbf33 000dbf3d     ....)...3...=...
   df8c8:	000dbf47 000dbf53 000dbf5f 000dbf6b     G...S..._...k...
   df8d8:	000dbf73 000dbf7d 000dbf87              s...}.......

000df8e4 <_ZSt7nothrow>:
	...

000df8e5 <_ZTSSt19_Sp_make_shared_tag>:
   df8e5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   df8f5:	5f646572 00676174                        red_tag....

000df900 <_ZTISt19_Sp_make_shared_tag>:
   df900:	000df940 000df8e5                       @.......

000df908 <_ZTIN10__cxxabiv117__class_type_infoE>:
   df908:	000df9a0 000df914 000df9c4              ............

000df914 <_ZTSN10__cxxabiv117__class_type_infoE>:
   df914:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   df924:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   df934:	00000045                                E...

000df938 <_ZTVN10__cxxabiv117__class_type_infoE>:
   df938:	00000000 000df908 000dc2f5 000dc309     ................
   df948:	000dc49d 000dc49d 000dc373 000dc2b5     ........s.......
   df958:	000dc35b 000dc31d 000dc2e9              [...........

000df964 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   df964:	000df9a0 000df970 000df908              ....p.......

000df970 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   df970:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   df980:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   df990:	456f666e 00000000                       nfoE....

000df998 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   df998:	00000000 000df964 000dc39d 000dc3b1     ....d...........
   df9a8:	000dc49d 000dc49d 000dc373 000dc2b5     ........s.......
   df9b8:	000dc471 000dc3fd 000dc3c5              q...........

000df9c4 <_ZTISt9type_info>:
   df9c4:	000df940 000df9cc                       @.......

000df9cc <_ZTSSt9type_info>:
   df9cc:	74397453 5f657079 6f666e69 00000000     St9type_info....
   df9dc:	00776f70 00000000 00000000              pow.........

000df9e8 <TWO52>:
   df9e8:	00000000 43300000 00000000 c3300000     ......0C......0.

000df9f8 <_ctype_>:
   df9f8:	20202000 20202020 28282020 20282828     .         ((((( 
   dfa08:	20202020 20202020 20202020 20202020                     
   dfa18:	10108820 10101010 10101010 10101010      ...............
   dfa28:	04040410 04040404 10040404 10101010     ................
   dfa38:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dfa48:	01010101 01010101 01010101 10101010     ................
   dfa58:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dfa68:	02020202 02020202 02020202 10101010     ................
   dfa78:	00000020 00000000 00000000 00000000      ...............
	...

000dfaf9 <link_const_variable_data_end>:
   dfaf9:	00          	.byte	0x00
	...

000dfafc <link_constructors_location>:
   dfafc:	000d57c5 	.word	0x000d57c5
   dfb00:	000d97bd 	.word	0x000d97bd
   dfb04:	000d9955 	.word	0x000d9955
   dfb08:	000dacd5 	.word	0x000dacd5
   dfb0c:	000dafb1 	.word	0x000dafb1
   dfb10:	000db141 	.word	0x000db141
   dfb14:	000db19d 	.word	0x000db19d
   dfb18:	000dbcb1 	.word	0x000dbcb1
   dfb1c:	000dc059 	.word	0x000dc059
